/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/**
	 * Created by afidoss on 17/12/16.
	 */
	'use strict';

	var _auth = __webpack_require__(29);

	var _auth2 = _interopRequireDefault(_auth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Vue = __webpack_require__(27);
	var VueRouter = __webpack_require__(103);
	var _ = __webpack_require__(104);
	var Login = __webpack_require__(105);
	var Dashboard = __webpack_require__(111);
	//const localStorage = require('localStorage');

	var Sequelize = __webpack_require__(114);
	var sequelize = new Sequelize('database', 'username', 'password', {
	    host: 'localhost',
	    dialect: 'sqlite', //|'mysql' | 'mariadb' | 'postgres' | 'mssql',

	    pool: {
	        max: 5,
	        min: 0,
	        idle: 10000
	    },

	    // SQLite only
	    storage: 'database.sqlite'
	});

	var User = sequelize.define('user', {
	    nom: {
	        type: Sequelize.STRING,
	        field: 'nom' // Will result in an attribute that is firstName when user facing but first_name in the database
	    },
	    prenom: {
	        type: Sequelize.STRING,
	        field: 'prenom'
	    },
	    username: {
	        type: Sequelize.STRING
	    },
	    password: {
	        type: Sequelize.STRING,
	        length: 100
	    }
	}, {
	    freezeTableName: true // Model tableName will be the same as the model name
	});

	User.sync({ force: true }).then(function () {
	    // Table created
	    return User.create({
	        nom: 'AYEDOUN',
	        prenom: 'Fiacre',
	        username: 'afidoss',
	        password: 'dossoustar'
	    });
	});

	Vue.use(VueRouter);

	function requireAuth(to, from, next) {
	    if (!_auth2.default.loggedIn()) {
	        next({
	            path: '/login',
	            query: { redirect: to.fullPath }
	        });
	    } else {
	        next();
	    }
	}

	var router = new VueRouter({
	    mode: 'hash',
	    base: __dirname,
	    routes: [{ path: '/', name: 'login', component: Login }, { path: '/login', name: '_login', component: Login }, { path: '/dashboard', name: 'dashboard', component: Dashboard, beforeEnter: requireAuth }]
	});

	new Vue({
	    router: router
	}).$mount('#app');
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * Vue.js v2.1.8
	 * (c) 2014-2016 Evan You
	 * Released under the MIT License.
	 */
	'use strict';

	/*  */

	/**
	 * Convert a value to a string that is actually rendered.
	 */
	function _toString (val) {
	  return val == null
	    ? ''
	    : typeof val === 'object'
	      ? JSON.stringify(val, null, 2)
	      : String(val)
	}

	/**
	 * Convert a input value to a number for persistence.
	 * If the conversion fails, return original string.
	 */
	function toNumber (val) {
	  var n = parseFloat(val, 10);
	  return (n || n === 0) ? n : val
	}

	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 */
	function makeMap (
	  str,
	  expectsLowerCase
	) {
	  var map = Object.create(null);
	  var list = str.split(',');
	  for (var i = 0; i < list.length; i++) {
	    map[list[i]] = true;
	  }
	  return expectsLowerCase
	    ? function (val) { return map[val.toLowerCase()]; }
	    : function (val) { return map[val]; }
	}

	/**
	 * Check if a tag is a built-in tag.
	 */
	var isBuiltInTag = makeMap('slot,component', true);

	/**
	 * Remove an item from an array
	 */
	function remove$1 (arr, item) {
	  if (arr.length) {
	    var index = arr.indexOf(item);
	    if (index > -1) {
	      return arr.splice(index, 1)
	    }
	  }
	}

	/**
	 * Check whether the object has the property.
	 */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn (obj, key) {
	  return hasOwnProperty.call(obj, key)
	}

	/**
	 * Check if value is primitive
	 */
	function isPrimitive (value) {
	  return typeof value === 'string' || typeof value === 'number'
	}

	/**
	 * Create a cached version of a pure function.
	 */
	function cached (fn) {
	  var cache = Object.create(null);
	  return (function cachedFn (str) {
	    var hit = cache[str];
	    return hit || (cache[str] = fn(str))
	  })
	}

	/**
	 * Camelize a hyphen-delmited string.
	 */
	var camelizeRE = /-(\w)/g;
	var camelize = cached(function (str) {
	  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
	});

	/**
	 * Capitalize a string.
	 */
	var capitalize = cached(function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1)
	});

	/**
	 * Hyphenate a camelCase string.
	 */
	var hyphenateRE = /([^-])([A-Z])/g;
	var hyphenate = cached(function (str) {
	  return str
	    .replace(hyphenateRE, '$1-$2')
	    .replace(hyphenateRE, '$1-$2')
	    .toLowerCase()
	});

	/**
	 * Simple bind, faster than native
	 */
	function bind$1 (fn, ctx) {
	  function boundFn (a) {
	    var l = arguments.length;
	    return l
	      ? l > 1
	        ? fn.apply(ctx, arguments)
	        : fn.call(ctx, a)
	      : fn.call(ctx)
	  }
	  // record original fn length
	  boundFn._length = fn.length;
	  return boundFn
	}

	/**
	 * Convert an Array-like object to a real Array.
	 */
	function toArray (list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret
	}

	/**
	 * Mix properties into target object.
	 */
	function extend (to, _from) {
	  for (var key in _from) {
	    to[key] = _from[key];
	  }
	  return to
	}

	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 */
	function isObject (obj) {
	  return obj !== null && typeof obj === 'object'
	}

	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 */
	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';
	function isPlainObject (obj) {
	  return toString.call(obj) === OBJECT_STRING
	}

	/**
	 * Merge an Array of Objects into a single Object.
	 */
	function toObject (arr) {
	  var res = {};
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i]) {
	      extend(res, arr[i]);
	    }
	  }
	  return res
	}

	/**
	 * Perform no operation.
	 */
	function noop () {}

	/**
	 * Always return false.
	 */
	var no = function () { return false; };

	/**
	 * Return same value
	 */
	var identity = function (_) { return _; };

	/**
	 * Generate a static keys string from compiler modules.
	 */
	function genStaticKeys (modules) {
	  return modules.reduce(function (keys, m) {
	    return keys.concat(m.staticKeys || [])
	  }, []).join(',')
	}

	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 */
	function looseEqual (a, b) {
	  var isObjectA = isObject(a);
	  var isObjectB = isObject(b);
	  if (isObjectA && isObjectB) {
	    return JSON.stringify(a) === JSON.stringify(b)
	  } else if (!isObjectA && !isObjectB) {
	    return String(a) === String(b)
	  } else {
	    return false
	  }
	}

	function looseIndexOf (arr, val) {
	  for (var i = 0; i < arr.length; i++) {
	    if (looseEqual(arr[i], val)) { return i }
	  }
	  return -1
	}

	/*  */

	var config = {
	  /**
	   * Option merge strategies (used in core/util/options)
	   */
	  optionMergeStrategies: Object.create(null),

	  /**
	   * Whether to suppress warnings.
	   */
	  silent: false,

	  /**
	   * Whether to enable devtools
	   */
	  devtools: process.env.NODE_ENV !== 'production',

	  /**
	   * Error handler for watcher errors
	   */
	  errorHandler: null,

	  /**
	   * Ignore certain custom elements
	   */
	  ignoredElements: [],

	  /**
	   * Custom user key aliases for v-on
	   */
	  keyCodes: Object.create(null),

	  /**
	   * Check if a tag is reserved so that it cannot be registered as a
	   * component. This is platform-dependent and may be overwritten.
	   */
	  isReservedTag: no,

	  /**
	   * Check if a tag is an unknown element.
	   * Platform-dependent.
	   */
	  isUnknownElement: no,

	  /**
	   * Get the namespace of an element
	   */
	  getTagNamespace: noop,

	  /**
	   * Parse the real tag name for the specific platform.
	   */
	  parsePlatformTagName: identity,

	  /**
	   * Check if an attribute must be bound using property, e.g. value
	   * Platform-dependent.
	   */
	  mustUseProp: no,

	  /**
	   * List of asset types that a component can own.
	   */
	  _assetTypes: [
	    'component',
	    'directive',
	    'filter'
	  ],

	  /**
	   * List of lifecycle hooks.
	   */
	  _lifecycleHooks: [
	    'beforeCreate',
	    'created',
	    'beforeMount',
	    'mounted',
	    'beforeUpdate',
	    'updated',
	    'beforeDestroy',
	    'destroyed',
	    'activated',
	    'deactivated'
	  ],

	  /**
	   * Max circular updates allowed in a scheduler flush cycle.
	   */
	  _maxUpdateCount: 100
	};

	/*  */

	/**
	 * Check if a string starts with $ or _
	 */
	function isReserved (str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F
	}

	/**
	 * Define a property.
	 */
	function def (obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}

	/**
	 * Parse simple path.
	 */
	var bailRE = /[^\w.$]/;
	function parsePath (path) {
	  if (bailRE.test(path)) {
	    return
	  } else {
	    var segments = path.split('.');
	    return function (obj) {
	      for (var i = 0; i < segments.length; i++) {
	        if (!obj) { return }
	        obj = obj[segments[i]];
	      }
	      return obj
	    }
	  }
	}

	/*  */
	/* globals MutationObserver */

	// can we use __proto__?
	var hasProto = '__proto__' in {};

	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined';
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && /msie|trident/.test(UA);
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isEdge = UA && UA.indexOf('edge/') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);

	// this needs to be lazy-evaled because vue may be required before
	// vue-server-renderer can set VUE_ENV
	var _isServer;
	var isServerRendering = function () {
	  if (_isServer === undefined) {
	    /* istanbul ignore if */
	    if (!inBrowser && typeof global !== 'undefined') {
	      // detect presence of vue-server-renderer and avoid
	      // Webpack shimming the process
	      _isServer = global['process'].env.VUE_ENV === 'server';
	    } else {
	      _isServer = false;
	    }
	  }
	  return _isServer
	};

	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

	/* istanbul ignore next */
	function isNative (Ctor) {
	  return /native code/.test(Ctor.toString())
	}

	/**
	 * Defer a task to execute it asynchronously.
	 */
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;

	  function nextTickHandler () {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks.length = 0;
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }

	  // the nextTick behavior leverages the microtask queue, which can be accessed
	  // via either native Promise.then or MutationObserver.
	  // MutationObserver has wider support, however it is seriously bugged in
	  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
	  // completely stops working after triggering a few times... so, if native
	  // Promise is available, we will use it:
	  /* istanbul ignore if */
	  if (typeof Promise !== 'undefined' && isNative(Promise)) {
	    var p = Promise.resolve();
	    var logError = function (err) { console.error(err); };
	    timerFunc = function () {
	      p.then(nextTickHandler).catch(logError);
	      // in problematic UIWebViews, Promise.then doesn't completely break, but
	      // it can get stuck in a weird state where callbacks are pushed into the
	      // microtask queue but the queue isn't being flushed, until the browser
	      // needs to do some other work, e.g. handle a timer. Therefore we can
	      // "force" the microtask queue to be flushed by adding an empty timer.
	      if (isIOS) { setTimeout(noop); }
	    };
	  } else if (typeof MutationObserver !== 'undefined' && (
	    isNative(MutationObserver) ||
	    // PhantomJS and iOS 7.x
	    MutationObserver.toString() === '[object MutationObserverConstructor]'
	  )) {
	    // use MutationObserver where native Promise is not available,
	    // e.g. PhantomJS IE11, iOS7, Android 4.4
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(String(counter));
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = String(counter);
	    };
	  } else {
	    // fallback to setTimeout
	    /* istanbul ignore next */
	    timerFunc = function () {
	      setTimeout(nextTickHandler, 0);
	    };
	  }

	  return function queueNextTick (cb, ctx) {
	    var _resolve;
	    callbacks.push(function () {
	      if (cb) { cb.call(ctx); }
	      if (_resolve) { _resolve(ctx); }
	    });
	    if (!pending) {
	      pending = true;
	      timerFunc();
	    }
	    if (!cb && typeof Promise !== 'undefined') {
	      return new Promise(function (resolve) {
	        _resolve = resolve;
	      })
	    }
	  }
	})();

	var _Set;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && isNative(Set)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = (function () {
	    function Set () {
	      this.set = Object.create(null);
	    }
	    Set.prototype.has = function has (key) {
	      return this.set[key] === true
	    };
	    Set.prototype.add = function add (key) {
	      this.set[key] = true;
	    };
	    Set.prototype.clear = function clear () {
	      this.set = Object.create(null);
	    };

	    return Set;
	  }());
	}

	var warn = noop;
	var formatComponentName;

	if (process.env.NODE_ENV !== 'production') {
	  var hasConsole = typeof console !== 'undefined';

	  warn = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.error("[Vue warn]: " + msg + " " + (
	        vm ? formatLocation(formatComponentName(vm)) : ''
	      ));
	    }
	  };

	  formatComponentName = function (vm) {
	    if (vm.$root === vm) {
	      return 'root instance'
	    }
	    var name = vm._isVue
	      ? vm.$options.name || vm.$options._componentTag
	      : vm.name;
	    return (
	      (name ? ("component <" + name + ">") : "anonymous component") +
	      (vm._isVue && vm.$options.__file ? (" at " + (vm.$options.__file)) : '')
	    )
	  };

	  var formatLocation = function (str) {
	    if (str === 'anonymous component') {
	      str += " - use the \"name\" option for better debugging messages.";
	    }
	    return ("\n(found in " + str + ")")
	  };
	}

	/*  */


	var uid$1 = 0;

	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 */
	var Dep = function Dep () {
	  this.id = uid$1++;
	  this.subs = [];
	};

	Dep.prototype.addSub = function addSub (sub) {
	  this.subs.push(sub);
	};

	Dep.prototype.removeSub = function removeSub (sub) {
	  remove$1(this.subs, sub);
	};

	Dep.prototype.depend = function depend () {
	  if (Dep.target) {
	    Dep.target.addDep(this);
	  }
	};

	Dep.prototype.notify = function notify () {
	  // stablize the subscriber list first
	  var subs = this.subs.slice();
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};

	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	var targetStack = [];

	function pushTarget (_target) {
	  if (Dep.target) { targetStack.push(Dep.target); }
	  Dep.target = _target;
	}

	function popTarget () {
	  Dep.target = targetStack.pop();
	}

	/*
	 * not type checking this file because flow doesn't play well with
	 * dynamically accessing methods on Array prototype
	 */

	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto);[
	  'push',
	  'pop',
	  'shift',
	  'unshift',
	  'splice',
	  'sort',
	  'reverse'
	]
	.forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator () {
	    var arguments$1 = arguments;

	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments$1[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break
	      case 'unshift':
	        inserted = args;
	        break
	      case 'splice':
	        inserted = args.slice(2);
	        break
	    }
	    if (inserted) { ob.observeArray(inserted); }
	    // notify change
	    ob.dep.notify();
	    return result
	  });
	});

	/*  */

	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However when passing down props,
	 * we don't want to force conversion because the value may be a nested value
	 * under a frozen data structure. Converting it would defeat the optimization.
	 */
	var observerState = {
	  shouldConvert: true,
	  isSettingProps: false
	};

	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 */
	var Observer = function Observer (value) {
	  this.value = value;
	  this.dep = new Dep();
	  this.vmCount = 0;
	  def(value, '__ob__', this);
	  if (Array.isArray(value)) {
	    var augment = hasProto
	      ? protoAugment
	      : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	};

	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 */
	Observer.prototype.walk = function walk (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0; i < keys.length; i++) {
	    defineReactive$$1(obj, keys[i], obj[keys[i]]);
	  }
	};

	/**
	 * Observe a list of Array items.
	 */
	Observer.prototype.observeArray = function observeArray (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};

	// helpers

	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 */
	function protoAugment (target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}

	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 */
	/* istanbul ignore next */
	function copyAugment (target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}

	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 */
	function observe (value, asRootData) {
	  if (!isObject(value)) {
	    return
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (
	    observerState.shouldConvert &&
	    !isServerRendering() &&
	    (Array.isArray(value) || isPlainObject(value)) &&
	    Object.isExtensible(value) &&
	    !value._isVue
	  ) {
	    ob = new Observer(value);
	  }
	  if (asRootData && ob) {
	    ob.vmCount++;
	  }
	  return ob
	}

	/**
	 * Define a reactive property on an Object.
	 */
	function defineReactive$$1 (
	  obj,
	  key,
	  val,
	  customSetter
	) {
	  var dep = new Dep();

	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return
	  }

	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;

	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter () {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (Array.isArray(value)) {
	          dependArray(value);
	        }
	      }
	      return value
	    },
	    set: function reactiveSetter (newVal) {
	      var value = getter ? getter.call(obj) : val;
	      /* eslint-disable no-self-compare */
	      if (newVal === value || (newVal !== newVal && value !== value)) {
	        return
	      }
	      /* eslint-enable no-self-compare */
	      if (process.env.NODE_ENV !== 'production' && customSetter) {
	        customSetter();
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}

	/**
	 * Set a property on an object. Adds the new property and
	 * triggers change notification if the property doesn't
	 * already exist.
	 */
	function set$1 (obj, key, val) {
	  if (Array.isArray(obj)) {
	    obj.length = Math.max(obj.length, key);
	    obj.splice(key, 1, val);
	    return val
	  }
	  if (hasOwn(obj, key)) {
	    obj[key] = val;
	    return
	  }
	  var ob = obj.__ob__;
	  if (obj._isVue || (ob && ob.vmCount)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      'Avoid adding reactive properties to a Vue instance or its root $data ' +
	      'at runtime - declare it upfront in the data option.'
	    );
	    return
	  }
	  if (!ob) {
	    obj[key] = val;
	    return
	  }
	  defineReactive$$1(ob.value, key, val);
	  ob.dep.notify();
	  return val
	}

	/**
	 * Delete a property and trigger change if necessary.
	 */
	function del (obj, key) {
	  var ob = obj.__ob__;
	  if (obj._isVue || (ob && ob.vmCount)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      'Avoid deleting properties on a Vue instance or its root $data ' +
	      '- just set it to null.'
	    );
	    return
	  }
	  if (!hasOwn(obj, key)) {
	    return
	  }
	  delete obj[key];
	  if (!ob) {
	    return
	  }
	  ob.dep.notify();
	}

	/**
	 * Collect dependencies on array elements when the array is touched, since
	 * we cannot intercept array element access like property getters.
	 */
	function dependArray (value) {
	  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
	    e = value[i];
	    e && e.__ob__ && e.__ob__.dep.depend();
	    if (Array.isArray(e)) {
	      dependArray(e);
	    }
	  }
	}

	/*  */

	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 */
	var strats = config.optionMergeStrategies;

	/**
	 * Options with restrictions
	 */
	if (process.env.NODE_ENV !== 'production') {
	  strats.el = strats.propsData = function (parent, child, vm, key) {
	    if (!vm) {
	      warn(
	        "option \"" + key + "\" can only be used during instance " +
	        'creation with the `new` keyword.'
	      );
	    }
	    return defaultStrat(parent, child)
	  };
	}

	/**
	 * Helper that recursively merges two data objects together.
	 */
	function mergeData (to, from) {
	  if (!from) { return to }
	  var key, toVal, fromVal;
	  var keys = Object.keys(from);
	  for (var i = 0; i < keys.length; i++) {
	    key = keys[i];
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set$1(to, key, fromVal);
	    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to
	}

	/**
	 * Data
	 */
	strats.data = function (
	  parentVal,
	  childVal,
	  vm
	) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal
	    }
	    if (typeof childVal !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn(
	        'The "data" option should be a function ' +
	        'that returns a per-instance value in component ' +
	        'definitions.',
	        vm
	      );
	      return parentVal
	    }
	    if (!parentVal) {
	      return childVal
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn () {
	      return mergeData(
	        childVal.call(this),
	        parentVal.call(this)
	      )
	    }
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn () {
	      // instance merge
	      var instanceData = typeof childVal === 'function'
	        ? childVal.call(vm)
	        : childVal;
	      var defaultData = typeof parentVal === 'function'
	        ? parentVal.call(vm)
	        : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData)
	      } else {
	        return defaultData
	      }
	    }
	  }
	};

	/**
	 * Hooks and param attributes are merged as arrays.
	 */
	function mergeHook (
	  parentVal,
	  childVal
	) {
	  return childVal
	    ? parentVal
	      ? parentVal.concat(childVal)
	      : Array.isArray(childVal)
	        ? childVal
	        : [childVal]
	    : parentVal
	}

	config._lifecycleHooks.forEach(function (hook) {
	  strats[hook] = mergeHook;
	});

	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	function mergeAssets (parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal
	    ? extend(res, childVal)
	    : res
	}

	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});

	/**
	 * Watchers.
	 *
	 * Watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	strats.watch = function (parentVal, childVal) {
	  /* istanbul ignore if */
	  if (!childVal) { return parentVal }
	  if (!parentVal) { return childVal }
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !Array.isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent
	      ? parent.concat(child)
	      : [child];
	  }
	  return ret
	};

	/**
	 * Other object hashes.
	 */
	strats.props =
	strats.methods =
	strats.computed = function (parentVal, childVal) {
	  if (!childVal) { return parentVal }
	  if (!parentVal) { return childVal }
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret
	};

	/**
	 * Default strategy.
	 */
	var defaultStrat = function (parentVal, childVal) {
	  return childVal === undefined
	    ? parentVal
	    : childVal
	};

	/**
	 * Validate component names
	 */
	function checkComponents (options) {
	  for (var key in options.components) {
	    var lower = key.toLowerCase();
	    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
	      warn(
	        'Do not use built-in or reserved HTML elements as component ' +
	        'id: ' + key
	      );
	    }
	  }
	}

	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 */
	function normalizeProps (options) {
	  var props = options.props;
	  if (!props) { return }
	  var res = {};
	  var i, val, name;
	  if (Array.isArray(props)) {
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        name = camelize(val);
	        res[name] = { type: null };
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('props must be strings when using array syntax.');
	      }
	    }
	  } else if (isPlainObject(props)) {
	    for (var key in props) {
	      val = props[key];
	      name = camelize(key);
	      res[name] = isPlainObject(val)
	        ? val
	        : { type: val };
	    }
	  }
	  options.props = res;
	}

	/**
	 * Normalize raw function directives into object format.
	 */
	function normalizeDirectives (options) {
	  var dirs = options.directives;
	  if (dirs) {
	    for (var key in dirs) {
	      var def = dirs[key];
	      if (typeof def === 'function') {
	        dirs[key] = { bind: def, update: def };
	      }
	    }
	  }
	}

	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 */
	function mergeOptions (
	  parent,
	  child,
	  vm
	) {
	  if (process.env.NODE_ENV !== 'production') {
	    checkComponents(child);
	  }
	  normalizeProps(child);
	  normalizeDirectives(child);
	  var extendsFrom = child.extends;
	  if (extendsFrom) {
	    parent = typeof extendsFrom === 'function'
	      ? mergeOptions(parent, extendsFrom.options, vm)
	      : mergeOptions(parent, extendsFrom, vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      if (mixin.prototype instanceof Vue$3) {
	        mixin = mixin.options;
	      }
	      parent = mergeOptions(parent, mixin, vm);
	    }
	  }
	  var options = {};
	  var key;
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField (key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options
	}

	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 */
	function resolveAsset (
	  options,
	  type,
	  id,
	  warnMissing
	) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return
	  }
	  var assets = options[type];
	  // check local registration variations first
	  if (hasOwn(assets, id)) { return assets[id] }
	  var camelizedId = camelize(id);
	  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
	  var PascalCaseId = capitalize(camelizedId);
	  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
	  // fallback to prototype chain
	  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
	  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
	    warn(
	      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
	      options
	    );
	  }
	  return res
	}

	/*  */

	function validateProp (
	  key,
	  propOptions,
	  propsData,
	  vm
	) {
	  var prop = propOptions[key];
	  var absent = !hasOwn(propsData, key);
	  var value = propsData[key];
	  // handle boolean props
	  if (isType(Boolean, prop.type)) {
	    if (absent && !hasOwn(prop, 'default')) {
	      value = false;
	    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
	      value = true;
	    }
	  }
	  // check default value
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop, key);
	    // since the default value is a fresh copy,
	    // make sure to observe it.
	    var prevShouldConvert = observerState.shouldConvert;
	    observerState.shouldConvert = true;
	    observe(value);
	    observerState.shouldConvert = prevShouldConvert;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    assertProp(prop, key, value, vm, absent);
	  }
	  return value
	}

	/**
	 * Get the default value of a prop.
	 */
	function getPropDefaultValue (vm, prop, key) {
	  // no default, return undefined
	  if (!hasOwn(prop, 'default')) {
	    return undefined
	  }
	  var def = prop.default;
	  // warn against non-factory defaults for Object & Array
	  if (isObject(def)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      'Invalid default value for prop "' + key + '": ' +
	      'Props with type Object/Array must use a factory function ' +
	      'to return the default value.',
	      vm
	    );
	  }
	  // the raw prop value was also undefined from previous render,
	  // return previous default value to avoid unnecessary watcher trigger
	  if (vm && vm.$options.propsData &&
	    vm.$options.propsData[key] === undefined &&
	    vm[key] !== undefined) {
	    return vm[key]
	  }
	  // call factory function for non-Function types
	  return typeof def === 'function' && prop.type !== Function
	    ? def.call(vm)
	    : def
	}

	/**
	 * Assert whether a prop is valid.
	 */
	function assertProp (
	  prop,
	  name,
	  value,
	  vm,
	  absent
	) {
	  if (prop.required && absent) {
	    warn(
	      'Missing required prop: "' + name + '"',
	      vm
	    );
	    return
	  }
	  if (value == null && !prop.required) {
	    return
	  }
	  var type = prop.type;
	  var valid = !type || type === true;
	  var expectedTypes = [];
	  if (type) {
	    if (!Array.isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType || '');
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    warn(
	      'Invalid prop: type check failed for prop "' + name + '".' +
	      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
	      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
	      vm
	    );
	    return
	  }
	  var validator = prop.validator;
	  if (validator) {
	    if (!validator(value)) {
	      warn(
	        'Invalid prop: custom validator check failed for prop "' + name + '".',
	        vm
	      );
	    }
	  }
	}

	/**
	 * Assert the type of a value
	 */
	function assertType (value, type) {
	  var valid;
	  var expectedType = getType(type);
	  if (expectedType === 'String') {
	    valid = typeof value === (expectedType = 'string');
	  } else if (expectedType === 'Number') {
	    valid = typeof value === (expectedType = 'number');
	  } else if (expectedType === 'Boolean') {
	    valid = typeof value === (expectedType = 'boolean');
	  } else if (expectedType === 'Function') {
	    valid = typeof value === (expectedType = 'function');
	  } else if (expectedType === 'Object') {
	    valid = isPlainObject(value);
	  } else if (expectedType === 'Array') {
	    valid = Array.isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  }
	}

	/**
	 * Use function string name to check built-in types,
	 * because a simple equality check will fail when running
	 * across different vms / iframes.
	 */
	function getType (fn) {
	  var match = fn && fn.toString().match(/^\s*function (\w+)/);
	  return match && match[1]
	}

	function isType (type, fn) {
	  if (!Array.isArray(fn)) {
	    return getType(fn) === getType(type)
	  }
	  for (var i = 0, len = fn.length; i < len; i++) {
	    if (getType(fn[i]) === getType(type)) {
	      return true
	    }
	  }
	  /* istanbul ignore next */
	  return false
	}



	var util = Object.freeze({
		defineReactive: defineReactive$$1,
		_toString: _toString,
		toNumber: toNumber,
		makeMap: makeMap,
		isBuiltInTag: isBuiltInTag,
		remove: remove$1,
		hasOwn: hasOwn,
		isPrimitive: isPrimitive,
		cached: cached,
		camelize: camelize,
		capitalize: capitalize,
		hyphenate: hyphenate,
		bind: bind$1,
		toArray: toArray,
		extend: extend,
		isObject: isObject,
		isPlainObject: isPlainObject,
		toObject: toObject,
		noop: noop,
		no: no,
		identity: identity,
		genStaticKeys: genStaticKeys,
		looseEqual: looseEqual,
		looseIndexOf: looseIndexOf,
		isReserved: isReserved,
		def: def,
		parsePath: parsePath,
		hasProto: hasProto,
		inBrowser: inBrowser,
		UA: UA,
		isIE: isIE,
		isIE9: isIE9,
		isEdge: isEdge,
		isAndroid: isAndroid,
		isIOS: isIOS,
		isServerRendering: isServerRendering,
		devtools: devtools,
		nextTick: nextTick,
		get _Set () { return _Set; },
		mergeOptions: mergeOptions,
		resolveAsset: resolveAsset,
		get warn () { return warn; },
		get formatComponentName () { return formatComponentName; },
		validateProp: validateProp
	});

	/* not type checking this file because flow doesn't play well with Proxy */

	var initProxy;

	if (process.env.NODE_ENV !== 'production') {
	  var allowedGlobals = makeMap(
	    'Infinity,undefined,NaN,isFinite,isNaN,' +
	    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
	    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
	    'require' // for Webpack/Browserify
	  );

	  var warnNonPresent = function (target, key) {
	    warn(
	      "Property or method \"" + key + "\" is not defined on the instance but " +
	      "referenced during render. Make sure to declare reactive data " +
	      "properties in the data option.",
	      target
	    );
	  };

	  var hasProxy =
	    typeof Proxy !== 'undefined' &&
	    Proxy.toString().match(/native code/);

	  if (hasProxy) {
	    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
	    config.keyCodes = new Proxy(config.keyCodes, {
	      set: function set (target, key, value) {
	        if (isBuiltInModifier(key)) {
	          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
	          return false
	        } else {
	          target[key] = value;
	          return true
	        }
	      }
	    });
	  }

	  var hasHandler = {
	    has: function has (target, key) {
	      var has = key in target;
	      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
	      if (!has && !isAllowed) {
	        warnNonPresent(target, key);
	      }
	      return has || !isAllowed
	    }
	  };

	  var getHandler = {
	    get: function get (target, key) {
	      if (typeof key === 'string' && !(key in target)) {
	        warnNonPresent(target, key);
	      }
	      return target[key]
	    }
	  };

	  initProxy = function initProxy (vm) {
	    if (hasProxy) {
	      // determine which proxy handler to use
	      var options = vm.$options;
	      var handlers = options.render && options.render._withStripped
	        ? getHandler
	        : hasHandler;
	      vm._renderProxy = new Proxy(vm, handlers);
	    } else {
	      vm._renderProxy = vm;
	    }
	  };
	}

	/*  */


	var queue = [];
	var has$1 = {};
	var circular = {};
	var waiting = false;
	var flushing = false;
	var index = 0;

	/**
	 * Reset the scheduler's state.
	 */
	function resetSchedulerState () {
	  queue.length = 0;
	  has$1 = {};
	  if (process.env.NODE_ENV !== 'production') {
	    circular = {};
	  }
	  waiting = flushing = false;
	}

	/**
	 * Flush both queues and run the watchers.
	 */
	function flushSchedulerQueue () {
	  flushing = true;

	  // Sort queue before flush.
	  // This ensures that:
	  // 1. Components are updated from parent to child. (because parent is always
	  //    created before the child)
	  // 2. A component's user watchers are run before its render watcher (because
	  //    user watchers are created before the render watcher)
	  // 3. If a component is destroyed during a parent component's watcher run,
	  //    its watchers can be skipped.
	  queue.sort(function (a, b) { return a.id - b.id; });

	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (index = 0; index < queue.length; index++) {
	    var watcher = queue[index];
	    var id = watcher.id;
	    has$1[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (process.env.NODE_ENV !== 'production' && has$1[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn(
	          'You may have an infinite update loop ' + (
	            watcher.user
	              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
	              : "in a component render function."
	          ),
	          watcher.vm
	        );
	        break
	      }
	    }
	  }

	  // devtool hook
	  /* istanbul ignore if */
	  if (devtools && config.devtools) {
	    devtools.emit('flush');
	  }

	  resetSchedulerState();
	}

	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 */
	function queueWatcher (watcher) {
	  var id = watcher.id;
	  if (has$1[id] == null) {
	    has$1[id] = true;
	    if (!flushing) {
	      queue.push(watcher);
	    } else {
	      // if already flushing, splice the watcher based on its id
	      // if already past its id, it will be run next immediately.
	      var i = queue.length - 1;
	      while (i >= 0 && queue[i].id > watcher.id) {
	        i--;
	      }
	      queue.splice(Math.max(i, index) + 1, 0, watcher);
	    }
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushSchedulerQueue);
	    }
	  }
	}

	/*  */

	var uid$2 = 0;

	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 */
	var Watcher = function Watcher (
	  vm,
	  expOrFn,
	  cb,
	  options
	) {
	  this.vm = vm;
	  vm._watchers.push(this);
	  // options
	  if (options) {
	    this.deep = !!options.deep;
	    this.user = !!options.user;
	    this.lazy = !!options.lazy;
	    this.sync = !!options.sync;
	  } else {
	    this.deep = this.user = this.lazy = this.sync = false;
	  }
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.expression = process.env.NODE_ENV !== 'production'
	    ? expOrFn.toString()
	    : '';
	  // parse expression for getter
	  if (typeof expOrFn === 'function') {
	    this.getter = expOrFn;
	  } else {
	    this.getter = parsePath(expOrFn);
	    if (!this.getter) {
	      this.getter = function () {};
	      process.env.NODE_ENV !== 'production' && warn(
	        "Failed watching path: \"" + expOrFn + "\" " +
	        'Watcher only accepts simple dot-delimited paths. ' +
	        'For full control, use a function instead.',
	        vm
	      );
	    }
	  }
	  this.value = this.lazy
	    ? undefined
	    : this.get();
	};

	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	Watcher.prototype.get = function get () {
	  pushTarget(this);
	  var value = this.getter.call(this.vm, this.vm);
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  popTarget();
	  this.cleanupDeps();
	  return value
	};

	/**
	 * Add a dependency to this directive.
	 */
	Watcher.prototype.addDep = function addDep (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};

	/**
	 * Clean up for dependency collection.
	 */
	Watcher.prototype.cleanupDeps = function cleanupDeps () {
	    var this$1 = this;

	  var i = this.deps.length;
	  while (i--) {
	    var dep = this$1.deps[i];
	    if (!this$1.newDepIds.has(dep.id)) {
	      dep.removeSub(this$1);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};

	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 */
	Watcher.prototype.update = function update () {
	  /* istanbul ignore else */
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync) {
	    this.run();
	  } else {
	    queueWatcher(this);
	  }
	};

	/**
	 * Scheduler job interface.
	 * Will be called by the scheduler.
	 */
	Watcher.prototype.run = function run () {
	  if (this.active) {
	    var value = this.get();
	    if (
	      value !== this.value ||
	      // Deep watchers and watchers on Object/Arrays should fire even
	      // when the value is the same, because the value may
	      // have mutated.
	      isObject(value) ||
	      this.deep
	    ) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      if (this.user) {
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          /* istanbul ignore else */
	          if (config.errorHandler) {
	            config.errorHandler.call(null, e, this.vm);
	          } else {
	            process.env.NODE_ENV !== 'production' && warn(
	              ("Error in watcher \"" + (this.expression) + "\""),
	              this.vm
	            );
	            throw e
	          }
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	  }
	};

	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	Watcher.prototype.evaluate = function evaluate () {
	  this.value = this.get();
	  this.dirty = false;
	};

	/**
	 * Depend on all deps collected by this watcher.
	 */
	Watcher.prototype.depend = function depend () {
	    var this$1 = this;

	  var i = this.deps.length;
	  while (i--) {
	    this$1.deps[i].depend();
	  }
	};

	/**
	 * Remove self from all dependencies' subscriber list.
	 */
	Watcher.prototype.teardown = function teardown () {
	    var this$1 = this;

	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed.
	    if (!this.vm._isBeingDestroyed) {
	      remove$1(this.vm._watchers, this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this$1.deps[i].removeSub(this$1);
	    }
	    this.active = false;
	  }
	};

	/**
	 * Recursively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 */
	var seenObjects = new _Set();
	function traverse (val) {
	  seenObjects.clear();
	  _traverse(val, seenObjects);
	}

	function _traverse (val, seen) {
	  var i, keys;
	  var isA = Array.isArray(val);
	  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
	    return
	  }
	  if (val.__ob__) {
	    var depId = val.__ob__.dep.id;
	    if (seen.has(depId)) {
	      return
	    }
	    seen.add(depId);
	  }
	  if (isA) {
	    i = val.length;
	    while (i--) { _traverse(val[i], seen); }
	  } else {
	    keys = Object.keys(val);
	    i = keys.length;
	    while (i--) { _traverse(val[keys[i]], seen); }
	  }
	}

	/*  */

	function initState (vm) {
	  vm._watchers = [];
	  var opts = vm.$options;
	  if (opts.props) { initProps(vm, opts.props); }
	  if (opts.methods) { initMethods(vm, opts.methods); }
	  if (opts.data) {
	    initData(vm);
	  } else {
	    observe(vm._data = {}, true /* asRootData */);
	  }
	  if (opts.computed) { initComputed(vm, opts.computed); }
	  if (opts.watch) { initWatch(vm, opts.watch); }
	}

	var isReservedProp = { key: 1, ref: 1, slot: 1 };

	function initProps (vm, props) {
	  var propsData = vm.$options.propsData || {};
	  var keys = vm.$options._propKeys = Object.keys(props);
	  var isRoot = !vm.$parent;
	  // root instance props should be converted
	  observerState.shouldConvert = isRoot;
	  var loop = function ( i ) {
	    var key = keys[i];
	    /* istanbul ignore else */
	    if (process.env.NODE_ENV !== 'production') {
	      if (isReservedProp[key]) {
	        warn(
	          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
	          vm
	        );
	      }
	      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm), function () {
	        if (vm.$parent && !observerState.isSettingProps) {
	          warn(
	            "Avoid mutating a prop directly since the value will be " +
	            "overwritten whenever the parent component re-renders. " +
	            "Instead, use a data or computed property based on the prop's " +
	            "value. Prop being mutated: \"" + key + "\"",
	            vm
	          );
	        }
	      });
	    } else {
	      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm));
	    }
	  };

	  for (var i = 0; i < keys.length; i++) loop( i );
	  observerState.shouldConvert = true;
	}

	function initData (vm) {
	  var data = vm.$options.data;
	  data = vm._data = typeof data === 'function'
	    ? data.call(vm)
	    : data || {};
	  if (!isPlainObject(data)) {
	    data = {};
	    process.env.NODE_ENV !== 'production' && warn(
	      'data functions should return an object:\n' +
	      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
	      vm
	    );
	  }
	  // proxy data on instance
	  var keys = Object.keys(data);
	  var props = vm.$options.props;
	  var i = keys.length;
	  while (i--) {
	    if (props && hasOwn(props, keys[i])) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "The data property \"" + (keys[i]) + "\" is already declared as a prop. " +
	        "Use prop default value instead.",
	        vm
	      );
	    } else {
	      proxy(vm, keys[i]);
	    }
	  }
	  // observe data
	  observe(data, true /* asRootData */);
	}

	var computedSharedDefinition = {
	  enumerable: true,
	  configurable: true,
	  get: noop,
	  set: noop
	};

	function initComputed (vm, computed) {
	  for (var key in computed) {
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && key in vm) {
	      warn(
	        "existing instance property \"" + key + "\" will be " +
	        "overwritten by a computed property with the same name.",
	        vm
	      );
	    }
	    var userDef = computed[key];
	    if (typeof userDef === 'function') {
	      computedSharedDefinition.get = makeComputedGetter(userDef, vm);
	      computedSharedDefinition.set = noop;
	    } else {
	      computedSharedDefinition.get = userDef.get
	        ? userDef.cache !== false
	          ? makeComputedGetter(userDef.get, vm)
	          : bind$1(userDef.get, vm)
	        : noop;
	      computedSharedDefinition.set = userDef.set
	        ? bind$1(userDef.set, vm)
	        : noop;
	    }
	    Object.defineProperty(vm, key, computedSharedDefinition);
	  }
	}

	function makeComputedGetter (getter, owner) {
	  var watcher = new Watcher(owner, getter, noop, {
	    lazy: true
	  });
	  return function computedGetter () {
	    if (watcher.dirty) {
	      watcher.evaluate();
	    }
	    if (Dep.target) {
	      watcher.depend();
	    }
	    return watcher.value
	  }
	}

	function initMethods (vm, methods) {
	  for (var key in methods) {
	    vm[key] = methods[key] == null ? noop : bind$1(methods[key], vm);
	    if (process.env.NODE_ENV !== 'production' && methods[key] == null) {
	      warn(
	        "method \"" + key + "\" has an undefined value in the component definition. " +
	        "Did you reference the function correctly?",
	        vm
	      );
	    }
	  }
	}

	function initWatch (vm, watch) {
	  for (var key in watch) {
	    var handler = watch[key];
	    if (Array.isArray(handler)) {
	      for (var i = 0; i < handler.length; i++) {
	        createWatcher(vm, key, handler[i]);
	      }
	    } else {
	      createWatcher(vm, key, handler);
	    }
	  }
	}

	function createWatcher (vm, key, handler) {
	  var options;
	  if (isPlainObject(handler)) {
	    options = handler;
	    handler = handler.handler;
	  }
	  if (typeof handler === 'string') {
	    handler = vm[handler];
	  }
	  vm.$watch(key, handler, options);
	}

	function stateMixin (Vue) {
	  // flow somehow has problems with directly declared definition object
	  // when using Object.defineProperty, so we have to procedurally build up
	  // the object here.
	  var dataDef = {};
	  dataDef.get = function () {
	    return this._data
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    dataDef.set = function (newData) {
	      warn(
	        'Avoid replacing instance root $data. ' +
	        'Use nested data properties instead.',
	        this
	      );
	    };
	  }
	  Object.defineProperty(Vue.prototype, '$data', dataDef);

	  Vue.prototype.$set = set$1;
	  Vue.prototype.$delete = del;

	  Vue.prototype.$watch = function (
	    expOrFn,
	    cb,
	    options
	  ) {
	    var vm = this;
	    options = options || {};
	    options.user = true;
	    var watcher = new Watcher(vm, expOrFn, cb, options);
	    if (options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn () {
	      watcher.teardown();
	    }
	  };
	}

	function proxy (vm, key) {
	  if (!isReserved(key)) {
	    Object.defineProperty(vm, key, {
	      configurable: true,
	      enumerable: true,
	      get: function proxyGetter () {
	        return vm._data[key]
	      },
	      set: function proxySetter (val) {
	        vm._data[key] = val;
	      }
	    });
	  }
	}

	/*  */

	var VNode = function VNode (
	  tag,
	  data,
	  children,
	  text,
	  elm,
	  context,
	  componentOptions
	) {
	  this.tag = tag;
	  this.data = data;
	  this.children = children;
	  this.text = text;
	  this.elm = elm;
	  this.ns = undefined;
	  this.context = context;
	  this.functionalContext = undefined;
	  this.key = data && data.key;
	  this.componentOptions = componentOptions;
	  this.child = undefined;
	  this.parent = undefined;
	  this.raw = false;
	  this.isStatic = false;
	  this.isRootInsert = true;
	  this.isComment = false;
	  this.isCloned = false;
	  this.isOnce = false;
	};

	var createEmptyVNode = function () {
	  var node = new VNode();
	  node.text = '';
	  node.isComment = true;
	  return node
	};

	function createTextVNode (val) {
	  return new VNode(undefined, undefined, undefined, String(val))
	}

	// optimized shallow clone
	// used for static nodes and slot nodes because they may be reused across
	// multiple renders, cloning them avoids errors when DOM manipulations rely
	// on their elm reference.
	function cloneVNode (vnode) {
	  var cloned = new VNode(
	    vnode.tag,
	    vnode.data,
	    vnode.children,
	    vnode.text,
	    vnode.elm,
	    vnode.context,
	    vnode.componentOptions
	  );
	  cloned.ns = vnode.ns;
	  cloned.isStatic = vnode.isStatic;
	  cloned.key = vnode.key;
	  cloned.isCloned = true;
	  return cloned
	}

	function cloneVNodes (vnodes) {
	  var res = new Array(vnodes.length);
	  for (var i = 0; i < vnodes.length; i++) {
	    res[i] = cloneVNode(vnodes[i]);
	  }
	  return res
	}

	/*  */

	function mergeVNodeHook (def, hookKey, hook, key) {
	  key = key + hookKey;
	  var injectedHash = def.__injected || (def.__injected = {});
	  if (!injectedHash[key]) {
	    injectedHash[key] = true;
	    var oldHook = def[hookKey];
	    if (oldHook) {
	      def[hookKey] = function () {
	        oldHook.apply(this, arguments);
	        hook.apply(this, arguments);
	      };
	    } else {
	      def[hookKey] = hook;
	    }
	  }
	}

	/*  */

	function updateListeners (
	  on,
	  oldOn,
	  add,
	  remove$$1,
	  vm
	) {
	  var name, cur, old, fn, event, capture, once;
	  for (name in on) {
	    cur = on[name];
	    old = oldOn[name];
	    if (!cur) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "Invalid handler for event \"" + name + "\": got " + String(cur),
	        vm
	      );
	    } else if (!old) {
	      once = name.charAt(0) === '~'; // Prefixed last, checked first
	      event = once ? name.slice(1) : name;
	      capture = event.charAt(0) === '!';
	      event = capture ? event.slice(1) : event;
	      if (Array.isArray(cur)) {
	        add(event, (cur.invoker = arrInvoker(cur)), once, capture);
	      } else {
	        if (!cur.invoker) {
	          fn = cur;
	          cur = on[name] = {};
	          cur.fn = fn;
	          cur.invoker = fnInvoker(cur);
	        }
	        add(event, cur.invoker, once, capture);
	      }
	    } else if (cur !== old) {
	      if (Array.isArray(old)) {
	        old.length = cur.length;
	        for (var i = 0; i < old.length; i++) { old[i] = cur[i]; }
	        on[name] = old;
	      } else {
	        old.fn = cur;
	        on[name] = old;
	      }
	    }
	  }
	  for (name in oldOn) {
	    if (!on[name]) {
	      once = name.charAt(0) === '~'; // Prefixed last, checked first
	      event = once ? name.slice(1) : name;
	      capture = event.charAt(0) === '!';
	      event = capture ? event.slice(1) : event;
	      remove$$1(event, oldOn[name].invoker, capture);
	    }
	  }
	}

	function arrInvoker (arr) {
	  return function (ev) {
	    var arguments$1 = arguments;

	    var single = arguments.length === 1;
	    for (var i = 0; i < arr.length; i++) {
	      single ? arr[i](ev) : arr[i].apply(null, arguments$1);
	    }
	  }
	}

	function fnInvoker (o) {
	  return function (ev) {
	    var single = arguments.length === 1;
	    single ? o.fn(ev) : o.fn.apply(null, arguments);
	  }
	}

	/*  */

	// The template compiler attempts to minimize the need for normalization by
	// statically analyzing the template at compile time.
	//
	// For plain HTML markup, normalization can be completely skipped because the
	// generated render function is guaranteed to return Array<VNode>. There are
	// two cases where extra normalization is needed:

	// 1. When the children contains components - because a functional component
	// may return an Array instead of a single root. In this case, just a simple
	// nomralization is needed - if any child is an Array, we flatten the whole
	// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
	// because functional components already normalize their own children.
	function simpleNormalizeChildren (children) {
	  for (var i = 0; i < children.length; i++) {
	    if (Array.isArray(children[i])) {
	      return Array.prototype.concat.apply([], children)
	    }
	  }
	  return children
	}

	// 2. When the children contains constrcuts that always generated nested Arrays,
	// e.g. <template>, <slot>, v-for, or when the children is provided by user
	// with hand-written render functions / JSX. In such cases a full normalization
	// is needed to cater to all possible types of children values.
	function normalizeChildren (children) {
	  return isPrimitive(children)
	    ? [createTextVNode(children)]
	    : Array.isArray(children)
	      ? normalizeArrayChildren(children)
	      : undefined
	}

	function normalizeArrayChildren (children, nestedIndex) {
	  var res = [];
	  var i, c, last;
	  for (i = 0; i < children.length; i++) {
	    c = children[i];
	    if (c == null || typeof c === 'boolean') { continue }
	    last = res[res.length - 1];
	    //  nested
	    if (Array.isArray(c)) {
	      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
	    } else if (isPrimitive(c)) {
	      if (last && last.text) {
	        last.text += String(c);
	      } else if (c !== '') {
	        // convert primitive to vnode
	        res.push(createTextVNode(c));
	      }
	    } else {
	      if (c.text && last && last.text) {
	        res[res.length - 1] = createTextVNode(last.text + c.text);
	      } else {
	        // default key for nested array children (likely generated by v-for)
	        if (c.tag && c.key == null && nestedIndex != null) {
	          c.key = "__vlist" + nestedIndex + "_" + i + "__";
	        }
	        res.push(c);
	      }
	    }
	  }
	  return res
	}

	/*  */

	function getFirstComponentChild (children) {
	  return children && children.filter(function (c) { return c && c.componentOptions; })[0]
	}

	/*  */

	function initEvents (vm) {
	  vm._events = Object.create(null);
	  vm._hasHookEvent = false;
	  // init parent attached events
	  var listeners = vm.$options._parentListeners;
	  if (listeners) {
	    updateComponentListeners(vm, listeners);
	  }
	}

	var target;

	function add$1 (event, fn, once) {
	  if (once) {
	    target.$once(event, fn);
	  } else {
	    target.$on(event, fn);
	  }
	}

	function remove$2 (event, fn) {
	  target.$off(event, fn);
	}

	function updateComponentListeners (
	  vm,
	  listeners,
	  oldListeners
	) {
	  target = vm;
	  updateListeners(listeners, oldListeners || {}, add$1, remove$2, vm);
	}

	function eventsMixin (Vue) {
	  var hookRE = /^hook:/;
	  Vue.prototype.$on = function (event, fn) {
	    var vm = this;(vm._events[event] || (vm._events[event] = [])).push(fn);
	    // optimize hook:event cost by using a boolean flag marked at registration
	    // instead of a hash lookup
	    if (hookRE.test(event)) {
	      vm._hasHookEvent = true;
	    }
	    return vm
	  };

	  Vue.prototype.$once = function (event, fn) {
	    var vm = this;
	    function on () {
	      vm.$off(event, on);
	      fn.apply(vm, arguments);
	    }
	    on.fn = fn;
	    vm.$on(event, on);
	    return vm
	  };

	  Vue.prototype.$off = function (event, fn) {
	    var vm = this;
	    // all
	    if (!arguments.length) {
	      vm._events = Object.create(null);
	      return vm
	    }
	    // specific event
	    var cbs = vm._events[event];
	    if (!cbs) {
	      return vm
	    }
	    if (arguments.length === 1) {
	      vm._events[event] = null;
	      return vm
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        cbs.splice(i, 1);
	        break
	      }
	    }
	    return vm
	  };

	  Vue.prototype.$emit = function (event) {
	    var vm = this;
	    var cbs = vm._events[event];
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        cbs[i].apply(vm, args);
	      }
	    }
	    return vm
	  };
	}

	/*  */

	var activeInstance = null;

	function initLifecycle (vm) {
	  var options = vm.$options;

	  // locate first non-abstract parent
	  var parent = options.parent;
	  if (parent && !options.abstract) {
	    while (parent.$options.abstract && parent.$parent) {
	      parent = parent.$parent;
	    }
	    parent.$children.push(vm);
	  }

	  vm.$parent = parent;
	  vm.$root = parent ? parent.$root : vm;

	  vm.$children = [];
	  vm.$refs = {};

	  vm._watcher = null;
	  vm._inactive = false;
	  vm._isMounted = false;
	  vm._isDestroyed = false;
	  vm._isBeingDestroyed = false;
	}

	function lifecycleMixin (Vue) {
	  Vue.prototype._mount = function (
	    el,
	    hydrating
	  ) {
	    var vm = this;
	    vm.$el = el;
	    if (!vm.$options.render) {
	      vm.$options.render = createEmptyVNode;
	      if (process.env.NODE_ENV !== 'production') {
	        /* istanbul ignore if */
	        if (vm.$options.template && vm.$options.template.charAt(0) !== '#') {
	          warn(
	            'You are using the runtime-only build of Vue where the template ' +
	            'option is not available. Either pre-compile the templates into ' +
	            'render functions, or use the compiler-included build.',
	            vm
	          );
	        } else {
	          warn(
	            'Failed to mount component: template or render function not defined.',
	            vm
	          );
	        }
	      }
	    }
	    callHook(vm, 'beforeMount');
	    vm._watcher = new Watcher(vm, function () {
	      vm._update(vm._render(), hydrating);
	    }, noop);
	    hydrating = false;
	    // manually mounted instance, call mounted on self
	    // mounted is called for render-created child components in its inserted hook
	    if (vm.$vnode == null) {
	      vm._isMounted = true;
	      callHook(vm, 'mounted');
	    }
	    return vm
	  };

	  Vue.prototype._update = function (vnode, hydrating) {
	    var vm = this;
	    if (vm._isMounted) {
	      callHook(vm, 'beforeUpdate');
	    }
	    var prevEl = vm.$el;
	    var prevVnode = vm._vnode;
	    var prevActiveInstance = activeInstance;
	    activeInstance = vm;
	    vm._vnode = vnode;
	    // Vue.prototype.__patch__ is injected in entry points
	    // based on the rendering backend used.
	    if (!prevVnode) {
	      // initial render
	      vm.$el = vm.__patch__(
	        vm.$el, vnode, hydrating, false /* removeOnly */,
	        vm.$options._parentElm,
	        vm.$options._refElm
	      );
	    } else {
	      // updates
	      vm.$el = vm.__patch__(prevVnode, vnode);
	    }
	    activeInstance = prevActiveInstance;
	    // update __vue__ reference
	    if (prevEl) {
	      prevEl.__vue__ = null;
	    }
	    if (vm.$el) {
	      vm.$el.__vue__ = vm;
	    }
	    // if parent is an HOC, update its $el as well
	    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
	      vm.$parent.$el = vm.$el;
	    }
	    if (vm._isMounted) {
	      callHook(vm, 'updated');
	    }
	  };

	  Vue.prototype._updateFromParent = function (
	    propsData,
	    listeners,
	    parentVnode,
	    renderChildren
	  ) {
	    var vm = this;
	    var hasChildren = !!(vm.$options._renderChildren || renderChildren);
	    vm.$options._parentVnode = parentVnode;
	    vm.$vnode = parentVnode; // update vm's placeholder node without re-render
	    if (vm._vnode) { // update child tree's parent
	      vm._vnode.parent = parentVnode;
	    }
	    vm.$options._renderChildren = renderChildren;
	    // update props
	    if (propsData && vm.$options.props) {
	      observerState.shouldConvert = false;
	      if (process.env.NODE_ENV !== 'production') {
	        observerState.isSettingProps = true;
	      }
	      var propKeys = vm.$options._propKeys || [];
	      for (var i = 0; i < propKeys.length; i++) {
	        var key = propKeys[i];
	        vm[key] = validateProp(key, vm.$options.props, propsData, vm);
	      }
	      observerState.shouldConvert = true;
	      if (process.env.NODE_ENV !== 'production') {
	        observerState.isSettingProps = false;
	      }
	      vm.$options.propsData = propsData;
	    }
	    // update listeners
	    if (listeners) {
	      var oldListeners = vm.$options._parentListeners;
	      vm.$options._parentListeners = listeners;
	      updateComponentListeners(vm, listeners, oldListeners);
	    }
	    // resolve slots + force update if has children
	    if (hasChildren) {
	      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
	      vm.$forceUpdate();
	    }
	  };

	  Vue.prototype.$forceUpdate = function () {
	    var vm = this;
	    if (vm._watcher) {
	      vm._watcher.update();
	    }
	  };

	  Vue.prototype.$destroy = function () {
	    var vm = this;
	    if (vm._isBeingDestroyed) {
	      return
	    }
	    callHook(vm, 'beforeDestroy');
	    vm._isBeingDestroyed = true;
	    // remove self from parent
	    var parent = vm.$parent;
	    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
	      remove$1(parent.$children, vm);
	    }
	    // teardown watchers
	    if (vm._watcher) {
	      vm._watcher.teardown();
	    }
	    var i = vm._watchers.length;
	    while (i--) {
	      vm._watchers[i].teardown();
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (vm._data.__ob__) {
	      vm._data.__ob__.vmCount--;
	    }
	    // call the last hook...
	    vm._isDestroyed = true;
	    callHook(vm, 'destroyed');
	    // turn off all instance listeners.
	    vm.$off();
	    // remove __vue__ reference
	    if (vm.$el) {
	      vm.$el.__vue__ = null;
	    }
	    // invoke destroy hooks on current rendered tree
	    vm.__patch__(vm._vnode, null);
	  };
	}

	function callHook (vm, hook) {
	  var handlers = vm.$options[hook];
	  if (handlers) {
	    for (var i = 0, j = handlers.length; i < j; i++) {
	      handlers[i].call(vm);
	    }
	  }
	  if (vm._hasHookEvent) {
	    vm.$emit('hook:' + hook);
	  }
	}

	/*  */

	var hooks = { init: init, prepatch: prepatch, insert: insert, destroy: destroy$1 };
	var hooksToMerge = Object.keys(hooks);

	function createComponent (
	  Ctor,
	  data,
	  context,
	  children,
	  tag
	) {
	  if (!Ctor) {
	    return
	  }

	  var baseCtor = context.$options._base;
	  if (isObject(Ctor)) {
	    Ctor = baseCtor.extend(Ctor);
	  }

	  if (typeof Ctor !== 'function') {
	    if (process.env.NODE_ENV !== 'production') {
	      warn(("Invalid Component definition: " + (String(Ctor))), context);
	    }
	    return
	  }

	  // async component
	  if (!Ctor.cid) {
	    if (Ctor.resolved) {
	      Ctor = Ctor.resolved;
	    } else {
	      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {
	        // it's ok to queue this on every render because
	        // $forceUpdate is buffered by the scheduler.
	        context.$forceUpdate();
	      });
	      if (!Ctor) {
	        // return nothing if this is indeed an async component
	        // wait for the callback to trigger parent update.
	        return
	      }
	    }
	  }

	  // resolve constructor options in case global mixins are applied after
	  // component constructor creation
	  resolveConstructorOptions(Ctor);

	  data = data || {};

	  // extract props
	  var propsData = extractProps(data, Ctor);

	  // functional component
	  if (Ctor.options.functional) {
	    return createFunctionalComponent(Ctor, propsData, data, context, children)
	  }

	  // extract listeners, since these needs to be treated as
	  // child component listeners instead of DOM listeners
	  var listeners = data.on;
	  // replace with listeners with .native modifier
	  data.on = data.nativeOn;

	  if (Ctor.options.abstract) {
	    // abstract components do not keep anything
	    // other than props & listeners
	    data = {};
	  }

	  // merge component management hooks onto the placeholder node
	  mergeHooks(data);

	  // return a placeholder vnode
	  var name = Ctor.options.name || tag;
	  var vnode = new VNode(
	    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
	    data, undefined, undefined, undefined, context,
	    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }
	  );
	  return vnode
	}

	function createFunctionalComponent (
	  Ctor,
	  propsData,
	  data,
	  context,
	  children
	) {
	  var props = {};
	  var propOptions = Ctor.options.props;
	  if (propOptions) {
	    for (var key in propOptions) {
	      props[key] = validateProp(key, propOptions, propsData);
	    }
	  }
	  // ensure the createElement function in functional components
	  // gets a unique context - this is necessary for correct named slot check
	  var _context = Object.create(context);
	  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
	  var vnode = Ctor.options.render.call(null, h, {
	    props: props,
	    data: data,
	    parent: context,
	    children: children,
	    slots: function () { return resolveSlots(children, context); }
	  });
	  if (vnode instanceof VNode) {
	    vnode.functionalContext = context;
	    if (data.slot) {
	      (vnode.data || (vnode.data = {})).slot = data.slot;
	    }
	  }
	  return vnode
	}

	function createComponentInstanceForVnode (
	  vnode, // we know it's MountedComponentVNode but flow doesn't
	  parent, // activeInstance in lifecycle state
	  parentElm,
	  refElm
	) {
	  var vnodeComponentOptions = vnode.componentOptions;
	  var options = {
	    _isComponent: true,
	    parent: parent,
	    propsData: vnodeComponentOptions.propsData,
	    _componentTag: vnodeComponentOptions.tag,
	    _parentVnode: vnode,
	    _parentListeners: vnodeComponentOptions.listeners,
	    _renderChildren: vnodeComponentOptions.children,
	    _parentElm: parentElm || null,
	    _refElm: refElm || null
	  };
	  // check inline-template render functions
	  var inlineTemplate = vnode.data.inlineTemplate;
	  if (inlineTemplate) {
	    options.render = inlineTemplate.render;
	    options.staticRenderFns = inlineTemplate.staticRenderFns;
	  }
	  return new vnodeComponentOptions.Ctor(options)
	}

	function init (
	  vnode,
	  hydrating,
	  parentElm,
	  refElm
	) {
	  if (!vnode.child || vnode.child._isDestroyed) {
	    var child = vnode.child = createComponentInstanceForVnode(
	      vnode,
	      activeInstance,
	      parentElm,
	      refElm
	    );
	    child.$mount(hydrating ? vnode.elm : undefined, hydrating);
	  } else if (vnode.data.keepAlive) {
	    // kept-alive components, treat as a patch
	    var mountedNode = vnode; // work around flow
	    prepatch(mountedNode, mountedNode);
	  }
	}

	function prepatch (
	  oldVnode,
	  vnode
	) {
	  var options = vnode.componentOptions;
	  var child = vnode.child = oldVnode.child;
	  child._updateFromParent(
	    options.propsData, // updated props
	    options.listeners, // updated listeners
	    vnode, // new parent vnode
	    options.children // new children
	  );
	}

	function insert (vnode) {
	  if (!vnode.child._isMounted) {
	    vnode.child._isMounted = true;
	    callHook(vnode.child, 'mounted');
	  }
	  if (vnode.data.keepAlive) {
	    vnode.child._inactive = false;
	    callHook(vnode.child, 'activated');
	  }
	}

	function destroy$1 (vnode) {
	  if (!vnode.child._isDestroyed) {
	    if (!vnode.data.keepAlive) {
	      vnode.child.$destroy();
	    } else {
	      vnode.child._inactive = true;
	      callHook(vnode.child, 'deactivated');
	    }
	  }
	}

	function resolveAsyncComponent (
	  factory,
	  baseCtor,
	  cb
	) {
	  if (factory.requested) {
	    // pool callbacks
	    factory.pendingCallbacks.push(cb);
	  } else {
	    factory.requested = true;
	    var cbs = factory.pendingCallbacks = [cb];
	    var sync = true;

	    var resolve = function (res) {
	      if (isObject(res)) {
	        res = baseCtor.extend(res);
	      }
	      // cache resolved
	      factory.resolved = res;
	      // invoke callbacks only if this is not a synchronous resolve
	      // (async resolves are shimmed as synchronous during SSR)
	      if (!sync) {
	        for (var i = 0, l = cbs.length; i < l; i++) {
	          cbs[i](res);
	        }
	      }
	    };

	    var reject = function (reason) {
	      process.env.NODE_ENV !== 'production' && warn(
	        "Failed to resolve async component: " + (String(factory)) +
	        (reason ? ("\nReason: " + reason) : '')
	      );
	    };

	    var res = factory(resolve, reject);

	    // handle promise
	    if (res && typeof res.then === 'function' && !factory.resolved) {
	      res.then(resolve, reject);
	    }

	    sync = false;
	    // return in case resolved synchronously
	    return factory.resolved
	  }
	}

	function extractProps (data, Ctor) {
	  // we are only extracting raw values here.
	  // validation and default values are handled in the child
	  // component itself.
	  var propOptions = Ctor.options.props;
	  if (!propOptions) {
	    return
	  }
	  var res = {};
	  var attrs = data.attrs;
	  var props = data.props;
	  var domProps = data.domProps;
	  if (attrs || props || domProps) {
	    for (var key in propOptions) {
	      var altKey = hyphenate(key);
	      checkProp(res, props, key, altKey, true) ||
	      checkProp(res, attrs, key, altKey) ||
	      checkProp(res, domProps, key, altKey);
	    }
	  }
	  return res
	}

	function checkProp (
	  res,
	  hash,
	  key,
	  altKey,
	  preserve
	) {
	  if (hash) {
	    if (hasOwn(hash, key)) {
	      res[key] = hash[key];
	      if (!preserve) {
	        delete hash[key];
	      }
	      return true
	    } else if (hasOwn(hash, altKey)) {
	      res[key] = hash[altKey];
	      if (!preserve) {
	        delete hash[altKey];
	      }
	      return true
	    }
	  }
	  return false
	}

	function mergeHooks (data) {
	  if (!data.hook) {
	    data.hook = {};
	  }
	  for (var i = 0; i < hooksToMerge.length; i++) {
	    var key = hooksToMerge[i];
	    var fromParent = data.hook[key];
	    var ours = hooks[key];
	    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
	  }
	}

	function mergeHook$1 (one, two) {
	  return function (a, b, c, d) {
	    one(a, b, c, d);
	    two(a, b, c, d);
	  }
	}

	/*  */

	var SIMPLE_NORMALIZE = 1;
	var ALWAYS_NORMALIZE = 2;

	// wrapper function for providing a more flexible interface
	// without getting yelled at by flow
	function createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType,
	  alwaysNormalize
	) {
	  if (Array.isArray(data) || isPrimitive(data)) {
	    normalizationType = children;
	    children = data;
	    data = undefined;
	  }
	  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }
	  return _createElement(context, tag, data, children, normalizationType)
	}

	function _createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType
	) {
	  if (data && data.__ob__) {
	    process.env.NODE_ENV !== 'production' && warn(
	      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
	      'Always create fresh vnode data objects in each render!',
	      context
	    );
	    return createEmptyVNode()
	  }
	  if (!tag) {
	    // in case of component :is set to falsy value
	    return createEmptyVNode()
	  }
	  // support single function children as default scoped slot
	  if (Array.isArray(children) &&
	      typeof children[0] === 'function') {
	    data = data || {};
	    data.scopedSlots = { default: children[0] };
	    children.length = 0;
	  }
	  if (normalizationType === ALWAYS_NORMALIZE) {
	    children = normalizeChildren(children);
	  } else if (normalizationType === SIMPLE_NORMALIZE) {
	    children = simpleNormalizeChildren(children);
	  }
	  var vnode, ns;
	  if (typeof tag === 'string') {
	    var Ctor;
	    ns = config.getTagNamespace(tag);
	    if (config.isReservedTag(tag)) {
	      // platform built-in elements
	      vnode = new VNode(
	        config.parsePlatformTagName(tag), data, children,
	        undefined, undefined, context
	      );
	    } else if ((Ctor = resolveAsset(context.$options, 'components', tag))) {
	      // component
	      vnode = createComponent(Ctor, data, context, children, tag);
	    } else {
	      // unknown or unlisted namespaced elements
	      // check at runtime because it may get assigned a namespace when its
	      // parent normalizes children
	      vnode = new VNode(
	        tag, data, children,
	        undefined, undefined, context
	      );
	    }
	  } else {
	    // direct component options / constructor
	    vnode = createComponent(tag, data, context, children);
	  }
	  if (vnode) {
	    if (ns) { applyNS(vnode, ns); }
	    return vnode
	  } else {
	    return createEmptyVNode()
	  }
	}

	function applyNS (vnode, ns) {
	  vnode.ns = ns;
	  if (vnode.tag === 'foreignObject') {
	    // use default namespace inside foreignObject
	    return
	  }
	  if (vnode.children) {
	    for (var i = 0, l = vnode.children.length; i < l; i++) {
	      var child = vnode.children[i];
	      if (child.tag && !child.ns) {
	        applyNS(child, ns);
	      }
	    }
	  }
	}

	/*  */

	function initRender (vm) {
	  vm.$vnode = null; // the placeholder node in parent tree
	  vm._vnode = null; // the root of the child tree
	  vm._staticTrees = null;
	  var parentVnode = vm.$options._parentVnode;
	  var renderContext = parentVnode && parentVnode.context;
	  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
	  vm.$scopedSlots = {};
	  // bind the createElement fn to this instance
	  // so that we get proper render context inside it.
	  // args order: tag, data, children, normalizationType, alwaysNormalize
	  // internal version is used by render functions compiled from templates
	  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
	  // normalization is always applied for the public version, used in
	  // user-written render functions.
	  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
	  if (vm.$options.el) {
	    vm.$mount(vm.$options.el);
	  }
	}

	function renderMixin (Vue) {
	  Vue.prototype.$nextTick = function (fn) {
	    return nextTick(fn, this)
	  };

	  Vue.prototype._render = function () {
	    var vm = this;
	    var ref = vm.$options;
	    var render = ref.render;
	    var staticRenderFns = ref.staticRenderFns;
	    var _parentVnode = ref._parentVnode;

	    if (vm._isMounted) {
	      // clone slot nodes on re-renders
	      for (var key in vm.$slots) {
	        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
	      }
	    }

	    if (_parentVnode && _parentVnode.data.scopedSlots) {
	      vm.$scopedSlots = _parentVnode.data.scopedSlots;
	    }

	    if (staticRenderFns && !vm._staticTrees) {
	      vm._staticTrees = [];
	    }
	    // set parent vnode. this allows render functions to have access
	    // to the data on the placeholder node.
	    vm.$vnode = _parentVnode;
	    // render self
	    var vnode;
	    try {
	      vnode = render.call(vm._renderProxy, vm.$createElement);
	    } catch (e) {
	      /* istanbul ignore else */
	      if (config.errorHandler) {
	        config.errorHandler.call(null, e, vm);
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          warn(("Error when rendering " + (formatComponentName(vm)) + ":"));
	        }
	        throw e
	      }
	      // return previous vnode to prevent render error causing blank component
	      vnode = vm._vnode;
	    }
	    // return empty vnode in case the render function errored out
	    if (!(vnode instanceof VNode)) {
	      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
	        warn(
	          'Multiple root nodes returned from render function. Render function ' +
	          'should return a single root node.',
	          vm
	        );
	      }
	      vnode = createEmptyVNode();
	    }
	    // set parent
	    vnode.parent = _parentVnode;
	    return vnode
	  };

	  // toString for mustaches
	  Vue.prototype._s = _toString;
	  // convert text to vnode
	  Vue.prototype._v = createTextVNode;
	  // number conversion
	  Vue.prototype._n = toNumber;
	  // empty vnode
	  Vue.prototype._e = createEmptyVNode;
	  // loose equal
	  Vue.prototype._q = looseEqual;
	  // loose indexOf
	  Vue.prototype._i = looseIndexOf;

	  // render static tree by index
	  Vue.prototype._m = function renderStatic (
	    index,
	    isInFor
	  ) {
	    var tree = this._staticTrees[index];
	    // if has already-rendered static tree and not inside v-for,
	    // we can reuse the same tree by doing a shallow clone.
	    if (tree && !isInFor) {
	      return Array.isArray(tree)
	        ? cloneVNodes(tree)
	        : cloneVNode(tree)
	    }
	    // otherwise, render a fresh tree.
	    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
	    markStatic(tree, ("__static__" + index), false);
	    return tree
	  };

	  // mark node as static (v-once)
	  Vue.prototype._o = function markOnce (
	    tree,
	    index,
	    key
	  ) {
	    markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
	    return tree
	  };

	  function markStatic (tree, key, isOnce) {
	    if (Array.isArray(tree)) {
	      for (var i = 0; i < tree.length; i++) {
	        if (tree[i] && typeof tree[i] !== 'string') {
	          markStaticNode(tree[i], (key + "_" + i), isOnce);
	        }
	      }
	    } else {
	      markStaticNode(tree, key, isOnce);
	    }
	  }

	  function markStaticNode (node, key, isOnce) {
	    node.isStatic = true;
	    node.key = key;
	    node.isOnce = isOnce;
	  }

	  // filter resolution helper
	  Vue.prototype._f = function resolveFilter (id) {
	    return resolveAsset(this.$options, 'filters', id, true) || identity
	  };

	  // render v-for
	  Vue.prototype._l = function renderList (
	    val,
	    render
	  ) {
	    var ret, i, l, keys, key;
	    if (Array.isArray(val) || typeof val === 'string') {
	      ret = new Array(val.length);
	      for (i = 0, l = val.length; i < l; i++) {
	        ret[i] = render(val[i], i);
	      }
	    } else if (typeof val === 'number') {
	      ret = new Array(val);
	      for (i = 0; i < val; i++) {
	        ret[i] = render(i + 1, i);
	      }
	    } else if (isObject(val)) {
	      keys = Object.keys(val);
	      ret = new Array(keys.length);
	      for (i = 0, l = keys.length; i < l; i++) {
	        key = keys[i];
	        ret[i] = render(val[key], key, i);
	      }
	    }
	    return ret
	  };

	  // renderSlot
	  Vue.prototype._t = function (
	    name,
	    fallback,
	    props,
	    bindObject
	  ) {
	    var scopedSlotFn = this.$scopedSlots[name];
	    if (scopedSlotFn) { // scoped slot
	      props = props || {};
	      if (bindObject) {
	        extend(props, bindObject);
	      }
	      return scopedSlotFn(props) || fallback
	    } else {
	      var slotNodes = this.$slots[name];
	      // warn duplicate slot usage
	      if (slotNodes && process.env.NODE_ENV !== 'production') {
	        slotNodes._rendered && warn(
	          "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
	          "- this will likely cause render errors.",
	          this
	        );
	        slotNodes._rendered = true;
	      }
	      return slotNodes || fallback
	    }
	  };

	  // apply v-bind object
	  Vue.prototype._b = function bindProps (
	    data,
	    tag,
	    value,
	    asProp
	  ) {
	    if (value) {
	      if (!isObject(value)) {
	        process.env.NODE_ENV !== 'production' && warn(
	          'v-bind without argument expects an Object or Array value',
	          this
	        );
	      } else {
	        if (Array.isArray(value)) {
	          value = toObject(value);
	        }
	        for (var key in value) {
	          if (key === 'class' || key === 'style') {
	            data[key] = value[key];
	          } else {
	            var hash = asProp || config.mustUseProp(tag, key)
	              ? data.domProps || (data.domProps = {})
	              : data.attrs || (data.attrs = {});
	            hash[key] = value[key];
	          }
	        }
	      }
	    }
	    return data
	  };

	  // check v-on keyCodes
	  Vue.prototype._k = function checkKeyCodes (
	    eventKeyCode,
	    key,
	    builtInAlias
	  ) {
	    var keyCodes = config.keyCodes[key] || builtInAlias;
	    if (Array.isArray(keyCodes)) {
	      return keyCodes.indexOf(eventKeyCode) === -1
	    } else {
	      return keyCodes !== eventKeyCode
	    }
	  };
	}

	function resolveSlots (
	  children,
	  context
	) {
	  var slots = {};
	  if (!children) {
	    return slots
	  }
	  var defaultSlot = [];
	  var name, child;
	  for (var i = 0, l = children.length; i < l; i++) {
	    child = children[i];
	    // named slots should only be respected if the vnode was rendered in the
	    // same context.
	    if ((child.context === context || child.functionalContext === context) &&
	        child.data && (name = child.data.slot)) {
	      var slot = (slots[name] || (slots[name] = []));
	      if (child.tag === 'template') {
	        slot.push.apply(slot, child.children);
	      } else {
	        slot.push(child);
	      }
	    } else {
	      defaultSlot.push(child);
	    }
	  }
	  // ignore single whitespace
	  if (defaultSlot.length && !(
	    defaultSlot.length === 1 &&
	    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)
	  )) {
	    slots.default = defaultSlot;
	  }
	  return slots
	}

	/*  */

	var uid = 0;

	function initMixin (Vue) {
	  Vue.prototype._init = function (options) {
	    var vm = this;
	    // a uid
	    vm._uid = uid++;
	    // a flag to avoid this being observed
	    vm._isVue = true;
	    // merge options
	    if (options && options._isComponent) {
	      // optimize internal component instantiation
	      // since dynamic options merging is pretty slow, and none of the
	      // internal component options needs special treatment.
	      initInternalComponent(vm, options);
	    } else {
	      vm.$options = mergeOptions(
	        resolveConstructorOptions(vm.constructor),
	        options || {},
	        vm
	      );
	    }
	    /* istanbul ignore else */
	    if (process.env.NODE_ENV !== 'production') {
	      initProxy(vm);
	    } else {
	      vm._renderProxy = vm;
	    }
	    // expose real self
	    vm._self = vm;
	    initLifecycle(vm);
	    initEvents(vm);
	    callHook(vm, 'beforeCreate');
	    initState(vm);
	    callHook(vm, 'created');
	    initRender(vm);
	  };
	}

	function initInternalComponent (vm, options) {
	  var opts = vm.$options = Object.create(vm.constructor.options);
	  // doing this because it's faster than dynamic enumeration.
	  opts.parent = options.parent;
	  opts.propsData = options.propsData;
	  opts._parentVnode = options._parentVnode;
	  opts._parentListeners = options._parentListeners;
	  opts._renderChildren = options._renderChildren;
	  opts._componentTag = options._componentTag;
	  opts._parentElm = options._parentElm;
	  opts._refElm = options._refElm;
	  if (options.render) {
	    opts.render = options.render;
	    opts.staticRenderFns = options.staticRenderFns;
	  }
	}

	function resolveConstructorOptions (Ctor) {
	  var options = Ctor.options;
	  if (Ctor.super) {
	    var superOptions = Ctor.super.options;
	    var cachedSuperOptions = Ctor.superOptions;
	    var extendOptions = Ctor.extendOptions;
	    if (superOptions !== cachedSuperOptions) {
	      // super option changed
	      Ctor.superOptions = superOptions;
	      extendOptions.render = options.render;
	      extendOptions.staticRenderFns = options.staticRenderFns;
	      extendOptions._scopeId = options._scopeId;
	      options = Ctor.options = mergeOptions(superOptions, extendOptions);
	      if (options.name) {
	        options.components[options.name] = Ctor;
	      }
	    }
	  }
	  return options
	}

	function Vue$3 (options) {
	  if (process.env.NODE_ENV !== 'production' &&
	    !(this instanceof Vue$3)) {
	    warn('Vue is a constructor and should be called with the `new` keyword');
	  }
	  this._init(options);
	}

	initMixin(Vue$3);
	stateMixin(Vue$3);
	eventsMixin(Vue$3);
	lifecycleMixin(Vue$3);
	renderMixin(Vue$3);

	/*  */

	function initUse (Vue) {
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this
	  };
	}

	/*  */

	function initMixin$1 (Vue) {
	  Vue.mixin = function (mixin) {
	    this.options = mergeOptions(this.options, mixin);
	  };
	}

	/*  */

	function initExtend (Vue) {
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	  Vue.cid = 0;
	  var cid = 1;

	  /**
	   * Class inheritance
	   */
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var SuperId = Super.cid;
	    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
	    if (cachedCtors[SuperId]) {
	      return cachedCtors[SuperId]
	    }
	    var name = extendOptions.name || Super.options.name;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn(
	          'Invalid component name: "' + name + '". Component names ' +
	          'can only contain alphanumeric characters and the hyphen, ' +
	          'and must start with a letter.'
	        );
	      }
	    }
	    var Sub = function VueComponent (options) {
	      this._init(options);
	    };
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(
	      Super.options,
	      extendOptions
	    );
	    Sub['super'] = Super;
	    // allow further extension/mixin/plugin usage
	    Sub.extend = Super.extend;
	    Sub.mixin = Super.mixin;
	    Sub.use = Super.use;
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	    // keep a reference to the super options at extension time.
	    // later at instantiation we can check if Super's options have
	    // been updated.
	    Sub.superOptions = Super.options;
	    Sub.extendOptions = extendOptions;
	    // cache constructor
	    cachedCtors[SuperId] = Sub;
	    return Sub
	  };
	}

	/*  */

	function initAssetRegisters (Vue) {
	  /**
	   * Create asset registration methods.
	   */
	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (
	      id,
	      definition
	    ) {
	      if (!definition) {
	        return this.options[type + 's'][id]
	      } else {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          if (type === 'component' && config.isReservedTag(id)) {
	            warn(
	              'Do not use built-in or reserved HTML elements as component ' +
	              'id: ' + id
	            );
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          definition.name = definition.name || id;
	          definition = this.options._base.extend(definition);
	        }
	        if (type === 'directive' && typeof definition === 'function') {
	          definition = { bind: definition, update: definition };
	        }
	        this.options[type + 's'][id] = definition;
	        return definition
	      }
	    };
	  });
	}

	/*  */

	var patternTypes = [String, RegExp];

	function matches (pattern, name) {
	  if (typeof pattern === 'string') {
	    return pattern.split(',').indexOf(name) > -1
	  } else {
	    return pattern.test(name)
	  }
	}

	var KeepAlive = {
	  name: 'keep-alive',
	  abstract: true,
	  props: {
	    include: patternTypes,
	    exclude: patternTypes
	  },
	  created: function created () {
	    this.cache = Object.create(null);
	  },
	  render: function render () {
	    var vnode = getFirstComponentChild(this.$slots.default);
	    if (vnode && vnode.componentOptions) {
	      var opts = vnode.componentOptions;
	      // check pattern
	      var name = opts.Ctor.options.name || opts.tag;
	      if (name && (
	        (this.include && !matches(this.include, name)) ||
	        (this.exclude && matches(this.exclude, name))
	      )) {
	        return vnode
	      }
	      var key = vnode.key == null
	        // same constructor may get registered as different local components
	        // so cid alone is not enough (#3269)
	        ? opts.Ctor.cid + (opts.tag ? ("::" + (opts.tag)) : '')
	        : vnode.key;
	      if (this.cache[key]) {
	        vnode.child = this.cache[key].child;
	      } else {
	        this.cache[key] = vnode;
	      }
	      vnode.data.keepAlive = true;
	    }
	    return vnode
	  },
	  destroyed: function destroyed () {
	    var this$1 = this;

	    for (var key in this.cache) {
	      var vnode = this$1.cache[key];
	      callHook(vnode.child, 'deactivated');
	      vnode.child.$destroy();
	    }
	  }
	};

	var builtInComponents = {
	  KeepAlive: KeepAlive
	};

	/*  */

	function initGlobalAPI (Vue) {
	  // config
	  var configDef = {};
	  configDef.get = function () { return config; };
	  if (process.env.NODE_ENV !== 'production') {
	    configDef.set = function () {
	      warn(
	        'Do not replace the Vue.config object, set individual fields instead.'
	      );
	    };
	  }
	  Object.defineProperty(Vue, 'config', configDef);
	  Vue.util = util;
	  Vue.set = set$1;
	  Vue.delete = del;
	  Vue.nextTick = nextTick;

	  Vue.options = Object.create(null);
	  config._assetTypes.forEach(function (type) {
	    Vue.options[type + 's'] = Object.create(null);
	  });

	  // this is used to identify the "base" constructor to extend all plain-object
	  // components with in Weex's multi-instance scenarios.
	  Vue.options._base = Vue;

	  extend(Vue.options.components, builtInComponents);

	  initUse(Vue);
	  initMixin$1(Vue);
	  initExtend(Vue);
	  initAssetRegisters(Vue);
	}

	initGlobalAPI(Vue$3);

	Object.defineProperty(Vue$3.prototype, '$isServer', {
	  get: isServerRendering
	});

	Vue$3.version = '2.1.8';

	/*  */

	// attributes that should be using props for binding
	var acceptValue = makeMap('input,textarea,option,select');
	var mustUseProp = function (tag, attr) {
	  return (
	    (attr === 'value' && acceptValue(tag)) ||
	    (attr === 'selected' && tag === 'option') ||
	    (attr === 'checked' && tag === 'input') ||
	    (attr === 'muted' && tag === 'video')
	  )
	};

	var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

	var isBooleanAttr = makeMap(
	  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
	  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
	  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
	  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
	  'required,reversed,scoped,seamless,selected,sortable,translate,' +
	  'truespeed,typemustmatch,visible'
	);

	var xlinkNS = 'http://www.w3.org/1999/xlink';

	var isXlink = function (name) {
	  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
	};

	var getXlinkProp = function (name) {
	  return isXlink(name) ? name.slice(6, name.length) : ''
	};

	var isFalsyAttrValue = function (val) {
	  return val == null || val === false
	};

	/*  */

	function genClassForVnode (vnode) {
	  var data = vnode.data;
	  var parentNode = vnode;
	  var childNode = vnode;
	  while (childNode.child) {
	    childNode = childNode.child._vnode;
	    if (childNode.data) {
	      data = mergeClassData(childNode.data, data);
	    }
	  }
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data) {
	      data = mergeClassData(data, parentNode.data);
	    }
	  }
	  return genClassFromData(data)
	}

	function mergeClassData (child, parent) {
	  return {
	    staticClass: concat(child.staticClass, parent.staticClass),
	    class: child.class
	      ? [child.class, parent.class]
	      : parent.class
	  }
	}

	function genClassFromData (data) {
	  var dynamicClass = data.class;
	  var staticClass = data.staticClass;
	  if (staticClass || dynamicClass) {
	    return concat(staticClass, stringifyClass(dynamicClass))
	  }
	  /* istanbul ignore next */
	  return ''
	}

	function concat (a, b) {
	  return a ? b ? (a + ' ' + b) : a : (b || '')
	}

	function stringifyClass (value) {
	  var res = '';
	  if (!value) {
	    return res
	  }
	  if (typeof value === 'string') {
	    return value
	  }
	  if (Array.isArray(value)) {
	    var stringified;
	    for (var i = 0, l = value.length; i < l; i++) {
	      if (value[i]) {
	        if ((stringified = stringifyClass(value[i]))) {
	          res += stringified + ' ';
	        }
	      }
	    }
	    return res.slice(0, -1)
	  }
	  if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) { res += key + ' '; }
	    }
	    return res.slice(0, -1)
	  }
	  /* istanbul ignore next */
	  return res
	}

	/*  */

	var namespaceMap = {
	  svg: 'http://www.w3.org/2000/svg',
	  math: 'http://www.w3.org/1998/Math/MathML'
	};

	var isHTMLTag = makeMap(
	  'html,body,base,head,link,meta,style,title,' +
	  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
	  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +
	  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
	  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
	  'embed,object,param,source,canvas,script,noscript,del,ins,' +
	  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
	  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
	  'output,progress,select,textarea,' +
	  'details,dialog,menu,menuitem,summary,' +
	  'content,element,shadow,template'
	);

	// this map is intentionally selective, only covering SVG elements that may
	// contain child elements.
	var isSVG = makeMap(
	  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,' +
	  'font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
	  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
	  true
	);

	var isPreTag = function (tag) { return tag === 'pre'; };

	var isReservedTag = function (tag) {
	  return isHTMLTag(tag) || isSVG(tag)
	};

	function getTagNamespace (tag) {
	  if (isSVG(tag)) {
	    return 'svg'
	  }
	  // basic support for MathML
	  // note it doesn't support other MathML elements being component roots
	  if (tag === 'math') {
	    return 'math'
	  }
	}

	var unknownElementCache = Object.create(null);
	function isUnknownElement (tag) {
	  /* istanbul ignore if */
	  if (!inBrowser) {
	    return true
	  }
	  if (isReservedTag(tag)) {
	    return false
	  }
	  tag = tag.toLowerCase();
	  /* istanbul ignore if */
	  if (unknownElementCache[tag] != null) {
	    return unknownElementCache[tag]
	  }
	  var el = document.createElement(tag);
	  if (tag.indexOf('-') > -1) {
	    // http://stackoverflow.com/a/28210364/1070244
	    return (unknownElementCache[tag] = (
	      el.constructor === window.HTMLUnknownElement ||
	      el.constructor === window.HTMLElement
	    ))
	  } else {
	    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
	  }
	}

	/*  */

	/**
	 * Query an element selector if it's not an element already.
	 */
	function query (el) {
	  if (typeof el === 'string') {
	    var selector = el;
	    el = document.querySelector(el);
	    if (!el) {
	      process.env.NODE_ENV !== 'production' && warn(
	        'Cannot find element: ' + selector
	      );
	      return document.createElement('div')
	    }
	  }
	  return el
	}

	/*  */

	function createElement$1 (tagName, vnode) {
	  var elm = document.createElement(tagName);
	  if (tagName !== 'select') {
	    return elm
	  }
	  if (vnode.data && vnode.data.attrs && 'multiple' in vnode.data.attrs) {
	    elm.setAttribute('multiple', 'multiple');
	  }
	  return elm
	}

	function createElementNS (namespace, tagName) {
	  return document.createElementNS(namespaceMap[namespace], tagName)
	}

	function createTextNode (text) {
	  return document.createTextNode(text)
	}

	function createComment (text) {
	  return document.createComment(text)
	}

	function insertBefore (parentNode, newNode, referenceNode) {
	  parentNode.insertBefore(newNode, referenceNode);
	}

	function removeChild (node, child) {
	  node.removeChild(child);
	}

	function appendChild (node, child) {
	  node.appendChild(child);
	}

	function parentNode (node) {
	  return node.parentNode
	}

	function nextSibling (node) {
	  return node.nextSibling
	}

	function tagName (node) {
	  return node.tagName
	}

	function setTextContent (node, text) {
	  node.textContent = text;
	}

	function setAttribute (node, key, val) {
	  node.setAttribute(key, val);
	}


	var nodeOps = Object.freeze({
		createElement: createElement$1,
		createElementNS: createElementNS,
		createTextNode: createTextNode,
		createComment: createComment,
		insertBefore: insertBefore,
		removeChild: removeChild,
		appendChild: appendChild,
		parentNode: parentNode,
		nextSibling: nextSibling,
		tagName: tagName,
		setTextContent: setTextContent,
		setAttribute: setAttribute
	});

	/*  */

	var ref = {
	  create: function create (_, vnode) {
	    registerRef(vnode);
	  },
	  update: function update (oldVnode, vnode) {
	    if (oldVnode.data.ref !== vnode.data.ref) {
	      registerRef(oldVnode, true);
	      registerRef(vnode);
	    }
	  },
	  destroy: function destroy (vnode) {
	    registerRef(vnode, true);
	  }
	};

	function registerRef (vnode, isRemoval) {
	  var key = vnode.data.ref;
	  if (!key) { return }

	  var vm = vnode.context;
	  var ref = vnode.child || vnode.elm;
	  var refs = vm.$refs;
	  if (isRemoval) {
	    if (Array.isArray(refs[key])) {
	      remove$1(refs[key], ref);
	    } else if (refs[key] === ref) {
	      refs[key] = undefined;
	    }
	  } else {
	    if (vnode.data.refInFor) {
	      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
	        refs[key].push(ref);
	      } else {
	        refs[key] = [ref];
	      }
	    } else {
	      refs[key] = ref;
	    }
	  }
	}

	/**
	 * Virtual DOM patching algorithm based on Snabbdom by
	 * Simon Friis Vindum (@paldepind)
	 * Licensed under the MIT License
	 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
	 *
	 * modified by Evan You (@yyx990803)
	 *

	/*
	 * Not type-checking this because this file is perf-critical and the cost
	 * of making flow understand it is not worth it.
	 */

	var emptyNode = new VNode('', {}, []);

	var hooks$1 = ['create', 'activate', 'update', 'remove', 'destroy'];

	function isUndef (s) {
	  return s == null
	}

	function isDef (s) {
	  return s != null
	}

	function sameVnode (vnode1, vnode2) {
	  return (
	    vnode1.key === vnode2.key &&
	    vnode1.tag === vnode2.tag &&
	    vnode1.isComment === vnode2.isComment &&
	    !vnode1.data === !vnode2.data
	  )
	}

	function createKeyToOldIdx (children, beginIdx, endIdx) {
	  var i, key;
	  var map = {};
	  for (i = beginIdx; i <= endIdx; ++i) {
	    key = children[i].key;
	    if (isDef(key)) { map[key] = i; }
	  }
	  return map
	}

	function createPatchFunction (backend) {
	  var i, j;
	  var cbs = {};

	  var modules = backend.modules;
	  var nodeOps = backend.nodeOps;

	  for (i = 0; i < hooks$1.length; ++i) {
	    cbs[hooks$1[i]] = [];
	    for (j = 0; j < modules.length; ++j) {
	      if (modules[j][hooks$1[i]] !== undefined) { cbs[hooks$1[i]].push(modules[j][hooks$1[i]]); }
	    }
	  }

	  function emptyNodeAt (elm) {
	    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
	  }

	  function createRmCb (childElm, listeners) {
	    function remove$$1 () {
	      if (--remove$$1.listeners === 0) {
	        removeNode(childElm);
	      }
	    }
	    remove$$1.listeners = listeners;
	    return remove$$1
	  }

	  function removeNode (el) {
	    var parent = nodeOps.parentNode(el);
	    // element may have already been removed due to v-html / v-text
	    if (parent) {
	      nodeOps.removeChild(parent, el);
	    }
	  }

	  var inPre = 0;
	  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
	    vnode.isRootInsert = !nested; // for transition enter check
	    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
	      return
	    }

	    var data = vnode.data;
	    var children = vnode.children;
	    var tag = vnode.tag;
	    if (isDef(tag)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (data && data.pre) {
	          inPre++;
	        }
	        if (
	          !inPre &&
	          !vnode.ns &&
	          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
	          config.isUnknownElement(tag)
	        ) {
	          warn(
	            'Unknown custom element: <' + tag + '> - did you ' +
	            'register the component correctly? For recursive components, ' +
	            'make sure to provide the "name" option.',
	            vnode.context
	          );
	        }
	      }
	      vnode.elm = vnode.ns
	        ? nodeOps.createElementNS(vnode.ns, tag)
	        : nodeOps.createElement(tag, vnode);
	      setScope(vnode);

	      /* istanbul ignore if */
	      {
	        createChildren(vnode, children, insertedVnodeQueue);
	        if (isDef(data)) {
	          invokeCreateHooks(vnode, insertedVnodeQueue);
	        }
	        insert(parentElm, vnode.elm, refElm);
	      }

	      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
	        inPre--;
	      }
	    } else if (vnode.isComment) {
	      vnode.elm = nodeOps.createComment(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    } else {
	      vnode.elm = nodeOps.createTextNode(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    }
	  }

	  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i = vnode.data;
	    if (isDef(i)) {
	      var isReactivated = isDef(vnode.child) && i.keepAlive;
	      if (isDef(i = i.hook) && isDef(i = i.init)) {
	        i(vnode, false /* hydrating */, parentElm, refElm);
	      }
	      // after calling the init hook, if the vnode is a child component
	      // it should've created a child instance and mounted it. the child
	      // component also has set the placeholder vnode's elm.
	      // in that case we can just return the element and be done.
	      if (isDef(vnode.child)) {
	        initComponent(vnode, insertedVnodeQueue);
	        if (isReactivated) {
	          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
	        }
	        return true
	      }
	    }
	  }

	  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i;
	    // hack for #4339: a reactivated component with inner transition
	    // does not trigger because the inner node's created hooks are not called
	    // again. It's not ideal to involve module-specific logic in here but
	    // there doesn't seem to be a better way to do it.
	    var innerNode = vnode;
	    while (innerNode.child) {
	      innerNode = innerNode.child._vnode;
	      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
	        for (i = 0; i < cbs.activate.length; ++i) {
	          cbs.activate[i](emptyNode, innerNode);
	        }
	        insertedVnodeQueue.push(innerNode);
	        break
	      }
	    }
	    // unlike a newly created component,
	    // a reactivated keep-alive component doesn't insert itself
	    insert(parentElm, vnode.elm, refElm);
	  }

	  function insert (parent, elm, ref) {
	    if (parent) {
	      if (ref) {
	        nodeOps.insertBefore(parent, elm, ref);
	      } else {
	        nodeOps.appendChild(parent, elm);
	      }
	    }
	  }

	  function createChildren (vnode, children, insertedVnodeQueue) {
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; ++i) {
	        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
	      }
	    } else if (isPrimitive(vnode.text)) {
	      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
	    }
	  }

	  function isPatchable (vnode) {
	    while (vnode.child) {
	      vnode = vnode.child._vnode;
	    }
	    return isDef(vnode.tag)
	  }

	  function invokeCreateHooks (vnode, insertedVnodeQueue) {
	    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
	      cbs.create[i$1](emptyNode, vnode);
	    }
	    i = vnode.data.hook; // Reuse variable
	    if (isDef(i)) {
	      if (i.create) { i.create(emptyNode, vnode); }
	      if (i.insert) { insertedVnodeQueue.push(vnode); }
	    }
	  }

	  function initComponent (vnode, insertedVnodeQueue) {
	    if (vnode.data.pendingInsert) {
	      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
	    }
	    vnode.elm = vnode.child.$el;
	    if (isPatchable(vnode)) {
	      invokeCreateHooks(vnode, insertedVnodeQueue);
	      setScope(vnode);
	    } else {
	      // empty component root.
	      // skip all element-related modules except for ref (#3455)
	      registerRef(vnode);
	      // make sure to invoke the insert hook
	      insertedVnodeQueue.push(vnode);
	    }
	  }

	  // set scope id attribute for scoped CSS.
	  // this is implemented as a special case to avoid the overhead
	  // of going through the normal attribute patching process.
	  function setScope (vnode) {
	    var i;
	    if (isDef(i = vnode.context) && isDef(i = i.$options._scopeId)) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    }
	    if (isDef(i = activeInstance) &&
	        i !== vnode.context &&
	        isDef(i = i.$options._scopeId)) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    }
	  }

	  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
	    }
	  }

	  function invokeDestroyHook (vnode) {
	    var i, j;
	    var data = vnode.data;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
	      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
	    }
	    if (isDef(i = vnode.children)) {
	      for (j = 0; j < vnode.children.length; ++j) {
	        invokeDestroyHook(vnode.children[j]);
	      }
	    }
	  }

	  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      var ch = vnodes[startIdx];
	      if (isDef(ch)) {
	        if (isDef(ch.tag)) {
	          removeAndInvokeRemoveHook(ch);
	          invokeDestroyHook(ch);
	        } else { // Text node
	          removeNode(ch.elm);
	        }
	      }
	    }
	  }

	  function removeAndInvokeRemoveHook (vnode, rm) {
	    if (rm || isDef(vnode.data)) {
	      var listeners = cbs.remove.length + 1;
	      if (!rm) {
	        // directly removing
	        rm = createRmCb(vnode.elm, listeners);
	      } else {
	        // we have a recursively passed down rm callback
	        // increase the listeners count
	        rm.listeners += listeners;
	      }
	      // recursively invoke hooks on child component root node
	      if (isDef(i = vnode.child) && isDef(i = i._vnode) && isDef(i.data)) {
	        removeAndInvokeRemoveHook(i, rm);
	      }
	      for (i = 0; i < cbs.remove.length; ++i) {
	        cbs.remove[i](vnode, rm);
	      }
	      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
	        i(vnode, rm);
	      } else {
	        rm();
	      }
	    } else {
	      removeNode(vnode.elm);
	    }
	  }

	  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
	    var oldStartIdx = 0;
	    var newStartIdx = 0;
	    var oldEndIdx = oldCh.length - 1;
	    var oldStartVnode = oldCh[0];
	    var oldEndVnode = oldCh[oldEndIdx];
	    var newEndIdx = newCh.length - 1;
	    var newStartVnode = newCh[0];
	    var newEndVnode = newCh[newEndIdx];
	    var oldKeyToIdx, idxInOld, elmToMove, refElm;

	    // removeOnly is a special flag used only by <transition-group>
	    // to ensure removed elements stay in correct relative positions
	    // during leaving transitions
	    var canMove = !removeOnly;

	    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
	      if (isUndef(oldStartVnode)) {
	        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
	      } else if (isUndef(oldEndVnode)) {
	        oldEndVnode = oldCh[--oldEndIdx];
	      } else if (sameVnode(oldStartVnode, newStartVnode)) {
	        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
	        oldStartVnode = oldCh[++oldStartIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else if (sameVnode(oldEndVnode, newEndVnode)) {
	        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
	        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
	        oldStartVnode = oldCh[++oldStartIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
	        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else {
	        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
	        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
	        if (isUndef(idxInOld)) { // New element
	          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	          newStartVnode = newCh[++newStartIdx];
	        } else {
	          elmToMove = oldCh[idxInOld];
	          /* istanbul ignore if */
	          if (process.env.NODE_ENV !== 'production' && !elmToMove) {
	            warn(
	              'It seems there are duplicate keys that is causing an update error. ' +
	              'Make sure each v-for item has a unique key.'
	            );
	          }
	          if (sameVnode(elmToMove, newStartVnode)) {
	            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
	            oldCh[idxInOld] = undefined;
	            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          } else {
	            // same key but different element. treat as new element
	            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	            newStartVnode = newCh[++newStartIdx];
	          }
	        }
	      }
	    }
	    if (oldStartIdx > oldEndIdx) {
	      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
	      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
	    } else if (newStartIdx > newEndIdx) {
	      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
	    }
	  }

	  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
	    if (oldVnode === vnode) {
	      return
	    }
	    // reuse element for static trees.
	    // note we only do this if the vnode is cloned -
	    // if the new node is not cloned it means the render functions have been
	    // reset by the hot-reload-api and we need to do a proper re-render.
	    if (vnode.isStatic &&
	        oldVnode.isStatic &&
	        vnode.key === oldVnode.key &&
	        (vnode.isCloned || vnode.isOnce)) {
	      vnode.elm = oldVnode.elm;
	      vnode.child = oldVnode.child;
	      return
	    }
	    var i;
	    var data = vnode.data;
	    var hasData = isDef(data);
	    if (hasData && isDef(i = data.hook) && isDef(i = i.prepatch)) {
	      i(oldVnode, vnode);
	    }
	    var elm = vnode.elm = oldVnode.elm;
	    var oldCh = oldVnode.children;
	    var ch = vnode.children;
	    if (hasData && isPatchable(vnode)) {
	      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
	      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
	    }
	    if (isUndef(vnode.text)) {
	      if (isDef(oldCh) && isDef(ch)) {
	        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
	      } else if (isDef(ch)) {
	        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
	        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
	      } else if (isDef(oldCh)) {
	        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
	      } else if (isDef(oldVnode.text)) {
	        nodeOps.setTextContent(elm, '');
	      }
	    } else if (oldVnode.text !== vnode.text) {
	      nodeOps.setTextContent(elm, vnode.text);
	    }
	    if (hasData) {
	      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
	    }
	  }

	  function invokeInsertHook (vnode, queue, initial) {
	    // delay insert hooks for component root nodes, invoke them after the
	    // element is really inserted
	    if (initial && vnode.parent) {
	      vnode.parent.data.pendingInsert = queue;
	    } else {
	      for (var i = 0; i < queue.length; ++i) {
	        queue[i].data.hook.insert(queue[i]);
	      }
	    }
	  }

	  var bailed = false;
	  // list of modules that can skip create hook during hydration because they
	  // are already rendered on the client or has no need for initialization
	  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

	  // Note: this is a browser-only function so we can assume elms are DOM nodes.
	  function hydrate (elm, vnode, insertedVnodeQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (!assertNodeMatch(elm, vnode)) {
	        return false
	      }
	    }
	    vnode.elm = elm;
	    var tag = vnode.tag;
	    var data = vnode.data;
	    var children = vnode.children;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
	      if (isDef(i = vnode.child)) {
	        // child component. it should have hydrated its own tree.
	        initComponent(vnode, insertedVnodeQueue);
	        return true
	      }
	    }
	    if (isDef(tag)) {
	      if (isDef(children)) {
	        // empty element, allow client to pick up and populate children
	        if (!elm.hasChildNodes()) {
	          createChildren(vnode, children, insertedVnodeQueue);
	        } else {
	          var childrenMatch = true;
	          var childNode = elm.firstChild;
	          for (var i$1 = 0; i$1 < children.length; i$1++) {
	            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
	              childrenMatch = false;
	              break
	            }
	            childNode = childNode.nextSibling;
	          }
	          // if childNode is not null, it means the actual childNodes list is
	          // longer than the virtual children list.
	          if (!childrenMatch || childNode) {
	            if (process.env.NODE_ENV !== 'production' &&
	                typeof console !== 'undefined' &&
	                !bailed) {
	              bailed = true;
	              console.warn('Parent: ', elm);
	              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
	            }
	            return false
	          }
	        }
	      }
	      if (isDef(data)) {
	        for (var key in data) {
	          if (!isRenderedModule(key)) {
	            invokeCreateHooks(vnode, insertedVnodeQueue);
	            break
	          }
	        }
	      }
	    } else if (elm.data !== vnode.text) {
	      elm.data = vnode.text;
	    }
	    return true
	  }

	  function assertNodeMatch (node, vnode) {
	    if (vnode.tag) {
	      return (
	        vnode.tag.indexOf('vue-component') === 0 ||
	        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
	      )
	    } else {
	      return node.nodeType === (vnode.isComment ? 8 : 3)
	    }
	  }

	  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
	    if (!vnode) {
	      if (oldVnode) { invokeDestroyHook(oldVnode); }
	      return
	    }

	    var elm, parent;
	    var isInitialPatch = false;
	    var insertedVnodeQueue = [];

	    if (!oldVnode) {
	      // empty mount (likely as component), create new root element
	      isInitialPatch = true;
	      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
	    } else {
	      var isRealElement = isDef(oldVnode.nodeType);
	      if (!isRealElement && sameVnode(oldVnode, vnode)) {
	        // patch existing root node
	        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
	      } else {
	        if (isRealElement) {
	          // mounting to a real element
	          // check if this is server-rendered content and if we can perform
	          // a successful hydration.
	          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {
	            oldVnode.removeAttribute('server-rendered');
	            hydrating = true;
	          }
	          if (hydrating) {
	            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
	              invokeInsertHook(vnode, insertedVnodeQueue, true);
	              return oldVnode
	            } else if (process.env.NODE_ENV !== 'production') {
	              warn(
	                'The client-side rendered virtual DOM tree is not matching ' +
	                'server-rendered content. This is likely caused by incorrect ' +
	                'HTML markup, for example nesting block-level elements inside ' +
	                '<p>, or missing <tbody>. Bailing hydration and performing ' +
	                'full client-side render.'
	              );
	            }
	          }
	          // either not server-rendered, or hydration failed.
	          // create an empty node and replace it
	          oldVnode = emptyNodeAt(oldVnode);
	        }
	        // replacing existing element
	        elm = oldVnode.elm;
	        parent = nodeOps.parentNode(elm);
	        createElm(vnode, insertedVnodeQueue, parent, nodeOps.nextSibling(elm));

	        if (vnode.parent) {
	          // component root element replaced.
	          // update parent placeholder node element, recursively
	          var ancestor = vnode.parent;
	          while (ancestor) {
	            ancestor.elm = vnode.elm;
	            ancestor = ancestor.parent;
	          }
	          if (isPatchable(vnode)) {
	            for (var i = 0; i < cbs.create.length; ++i) {
	              cbs.create[i](emptyNode, vnode.parent);
	            }
	          }
	        }

	        if (parent !== null) {
	          removeVnodes(parent, [oldVnode], 0, 0);
	        } else if (isDef(oldVnode.tag)) {
	          invokeDestroyHook(oldVnode);
	        }
	      }
	    }

	    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
	    return vnode.elm
	  }
	}

	/*  */

	var directives = {
	  create: updateDirectives,
	  update: updateDirectives,
	  destroy: function unbindDirectives (vnode) {
	    updateDirectives(vnode, emptyNode);
	  }
	};

	function updateDirectives (oldVnode, vnode) {
	  if (oldVnode.data.directives || vnode.data.directives) {
	    _update(oldVnode, vnode);
	  }
	}

	function _update (oldVnode, vnode) {
	  var isCreate = oldVnode === emptyNode;
	  var isDestroy = vnode === emptyNode;
	  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
	  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

	  var dirsWithInsert = [];
	  var dirsWithPostpatch = [];

	  var key, oldDir, dir;
	  for (key in newDirs) {
	    oldDir = oldDirs[key];
	    dir = newDirs[key];
	    if (!oldDir) {
	      // new directive, bind
	      callHook$1(dir, 'bind', vnode, oldVnode);
	      if (dir.def && dir.def.inserted) {
	        dirsWithInsert.push(dir);
	      }
	    } else {
	      // existing directive, update
	      dir.oldValue = oldDir.value;
	      callHook$1(dir, 'update', vnode, oldVnode);
	      if (dir.def && dir.def.componentUpdated) {
	        dirsWithPostpatch.push(dir);
	      }
	    }
	  }

	  if (dirsWithInsert.length) {
	    var callInsert = function () {
	      for (var i = 0; i < dirsWithInsert.length; i++) {
	        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
	      }
	    };
	    if (isCreate) {
	      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert, 'dir-insert');
	    } else {
	      callInsert();
	    }
	  }

	  if (dirsWithPostpatch.length) {
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
	      for (var i = 0; i < dirsWithPostpatch.length; i++) {
	        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
	      }
	    }, 'dir-postpatch');
	  }

	  if (!isCreate) {
	    for (key in oldDirs) {
	      if (!newDirs[key]) {
	        // no longer present, unbind
	        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
	      }
	    }
	  }
	}

	var emptyModifiers = Object.create(null);

	function normalizeDirectives$1 (
	  dirs,
	  vm
	) {
	  var res = Object.create(null);
	  if (!dirs) {
	    return res
	  }
	  var i, dir;
	  for (i = 0; i < dirs.length; i++) {
	    dir = dirs[i];
	    if (!dir.modifiers) {
	      dir.modifiers = emptyModifiers;
	    }
	    res[getRawDirName(dir)] = dir;
	    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
	  }
	  return res
	}

	function getRawDirName (dir) {
	  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
	}

	function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
	  var fn = dir.def && dir.def[hook];
	  if (fn) {
	    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
	  }
	}

	var baseModules = [
	  ref,
	  directives
	];

	/*  */

	function updateAttrs (oldVnode, vnode) {
	  if (!oldVnode.data.attrs && !vnode.data.attrs) {
	    return
	  }
	  var key, cur, old;
	  var elm = vnode.elm;
	  var oldAttrs = oldVnode.data.attrs || {};
	  var attrs = vnode.data.attrs || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (attrs.__ob__) {
	    attrs = vnode.data.attrs = extend({}, attrs);
	  }

	  for (key in attrs) {
	    cur = attrs[key];
	    old = oldAttrs[key];
	    if (old !== cur) {
	      setAttr(elm, key, cur);
	    }
	  }
	  // #4391: in IE9, setting type can reset value for input[type=radio]
	  /* istanbul ignore if */
	  if (isIE9 && attrs.value !== oldAttrs.value) {
	    setAttr(elm, 'value', attrs.value);
	  }
	  for (key in oldAttrs) {
	    if (attrs[key] == null) {
	      if (isXlink(key)) {
	        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
	      } else if (!isEnumeratedAttr(key)) {
	        elm.removeAttribute(key);
	      }
	    }
	  }
	}

	function setAttr (el, key, value) {
	  if (isBooleanAttr(key)) {
	    // set attribute for blank value
	    // e.g. <option disabled>Select one</option>
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, key);
	    }
	  } else if (isEnumeratedAttr(key)) {
	    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
	  } else if (isXlink(key)) {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
	    } else {
	      el.setAttributeNS(xlinkNS, key, value);
	    }
	  } else {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, value);
	    }
	  }
	}

	var attrs = {
	  create: updateAttrs,
	  update: updateAttrs
	};

	/*  */

	function updateClass (oldVnode, vnode) {
	  var el = vnode.elm;
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	  if (!data.staticClass && !data.class &&
	      (!oldData || (!oldData.staticClass && !oldData.class))) {
	    return
	  }

	  var cls = genClassForVnode(vnode);

	  // handle transition classes
	  var transitionClass = el._transitionClasses;
	  if (transitionClass) {
	    cls = concat(cls, stringifyClass(transitionClass));
	  }

	  // set the class
	  if (cls !== el._prevClass) {
	    el.setAttribute('class', cls);
	    el._prevClass = cls;
	  }
	}

	var klass = {
	  create: updateClass,
	  update: updateClass
	};

	/*  */

	var target$1;

	function add$2 (event, handler, once, capture) {
	  if (once) {
	    var oldHandler = handler;
	    handler = function (ev) {
	      remove$3(event, handler, capture);
	      arguments.length === 1
	        ? oldHandler(ev)
	        : oldHandler.apply(null, arguments);
	    };
	  }
	  target$1.addEventListener(event, handler, capture);
	}

	function remove$3 (event, handler, capture) {
	  target$1.removeEventListener(event, handler, capture);
	}

	function updateDOMListeners (oldVnode, vnode) {
	  if (!oldVnode.data.on && !vnode.data.on) {
	    return
	  }
	  var on = vnode.data.on || {};
	  var oldOn = oldVnode.data.on || {};
	  target$1 = vnode.elm;
	  updateListeners(on, oldOn, add$2, remove$3, vnode.context);
	}

	var events = {
	  create: updateDOMListeners,
	  update: updateDOMListeners
	};

	/*  */

	function updateDOMProps (oldVnode, vnode) {
	  if (!oldVnode.data.domProps && !vnode.data.domProps) {
	    return
	  }
	  var key, cur;
	  var elm = vnode.elm;
	  var oldProps = oldVnode.data.domProps || {};
	  var props = vnode.data.domProps || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (props.__ob__) {
	    props = vnode.data.domProps = extend({}, props);
	  }

	  for (key in oldProps) {
	    if (props[key] == null) {
	      elm[key] = '';
	    }
	  }
	  for (key in props) {
	    cur = props[key];
	    // ignore children if the node has textContent or innerHTML,
	    // as these will throw away existing DOM nodes and cause removal errors
	    // on subsequent patches (#3360)
	    if (key === 'textContent' || key === 'innerHTML') {
	      if (vnode.children) { vnode.children.length = 0; }
	      if (cur === oldProps[key]) { continue }
	    }
	    // #4521: if a click event triggers update before the change event is
	    // dispatched on a checkbox/radio input, the input's checked state will
	    // be reset and fail to trigger another update.
	    /* istanbul ignore next */
	    if (key === 'checked' && !isDirty(elm, cur)) {
	      continue
	    }
	    if (key === 'value') {
	      // store value as _value as well since
	      // non-string values will be stringified
	      elm._value = cur;
	      // avoid resetting cursor position when value is the same
	      var strCur = cur == null ? '' : String(cur);
	      if (shouldUpdateValue(elm, vnode, strCur)) {
	        elm.value = strCur;
	      }
	    } else {
	      elm[key] = cur;
	    }
	  }
	}

	// check platforms/web/util/attrs.js acceptValue


	function shouldUpdateValue (
	  elm,
	  vnode,
	  checkVal
	) {
	  if (!elm.composing && (
	    vnode.tag === 'option' ||
	    isDirty(elm, checkVal) ||
	    isInputChanged(vnode, checkVal)
	  )) {
	    return true
	  }
	  return false
	}

	function isDirty (elm, checkVal) {
	  return document.activeElement !== elm && elm.value !== checkVal
	}

	function isInputChanged (vnode, newVal) {
	  var value = vnode.elm.value;
	  var modifiers = vnode.elm._vModifiers; // injected by v-model runtime
	  if ((modifiers && modifiers.number) || vnode.elm.type === 'number') {
	    return toNumber(value) !== toNumber(newVal)
	  }
	  if (modifiers && modifiers.trim) {
	    return value.trim() !== newVal.trim()
	  }
	  return value !== newVal
	}

	var domProps = {
	  create: updateDOMProps,
	  update: updateDOMProps
	};

	/*  */

	var parseStyleText = cached(function (cssText) {
	  var res = {};
	  var listDelimiter = /;(?![^(]*\))/g;
	  var propertyDelimiter = /:(.+)/;
	  cssText.split(listDelimiter).forEach(function (item) {
	    if (item) {
	      var tmp = item.split(propertyDelimiter);
	      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
	    }
	  });
	  return res
	});

	// merge static and dynamic style data on the same vnode
	function normalizeStyleData (data) {
	  var style = normalizeStyleBinding(data.style);
	  // static style is pre-processed into an object during compilation
	  // and is always a fresh object, so it's safe to merge into it
	  return data.staticStyle
	    ? extend(data.staticStyle, style)
	    : style
	}

	// normalize possible array / string values into Object
	function normalizeStyleBinding (bindingStyle) {
	  if (Array.isArray(bindingStyle)) {
	    return toObject(bindingStyle)
	  }
	  if (typeof bindingStyle === 'string') {
	    return parseStyleText(bindingStyle)
	  }
	  return bindingStyle
	}

	/**
	 * parent component style should be after child's
	 * so that parent component's style could override it
	 */
	function getStyle (vnode, checkChild) {
	  var res = {};
	  var styleData;

	  if (checkChild) {
	    var childNode = vnode;
	    while (childNode.child) {
	      childNode = childNode.child._vnode;
	      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
	        extend(res, styleData);
	      }
	    }
	  }

	  if ((styleData = normalizeStyleData(vnode.data))) {
	    extend(res, styleData);
	  }

	  var parentNode = vnode;
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
	      extend(res, styleData);
	    }
	  }
	  return res
	}

	/*  */

	var cssVarRE = /^--/;
	var importantRE = /\s*!important$/;
	var setProp = function (el, name, val) {
	  /* istanbul ignore if */
	  if (cssVarRE.test(name)) {
	    el.style.setProperty(name, val);
	  } else if (importantRE.test(val)) {
	    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
	  } else {
	    el.style[normalize(name)] = val;
	  }
	};

	var prefixes = ['Webkit', 'Moz', 'ms'];

	var testEl;
	var normalize = cached(function (prop) {
	  testEl = testEl || document.createElement('div');
	  prop = camelize(prop);
	  if (prop !== 'filter' && (prop in testEl.style)) {
	    return prop
	  }
	  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
	  for (var i = 0; i < prefixes.length; i++) {
	    var prefixed = prefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return prefixed
	    }
	  }
	});

	function updateStyle (oldVnode, vnode) {
	  var data = vnode.data;
	  var oldData = oldVnode.data;

	  if (!data.staticStyle && !data.style &&
	      !oldData.staticStyle && !oldData.style) {
	    return
	  }

	  var cur, name;
	  var el = vnode.elm;
	  var oldStaticStyle = oldVnode.data.staticStyle;
	  var oldStyleBinding = oldVnode.data.style || {};

	  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
	  var oldStyle = oldStaticStyle || oldStyleBinding;

	  var style = normalizeStyleBinding(vnode.data.style) || {};

	  vnode.data.style = style.__ob__ ? extend({}, style) : style;

	  var newStyle = getStyle(vnode, true);

	  for (name in oldStyle) {
	    if (newStyle[name] == null) {
	      setProp(el, name, '');
	    }
	  }
	  for (name in newStyle) {
	    cur = newStyle[name];
	    if (cur !== oldStyle[name]) {
	      // ie9 setting to null has no effect, must use empty string
	      setProp(el, name, cur == null ? '' : cur);
	    }
	  }
	}

	var style = {
	  create: updateStyle,
	  update: updateStyle
	};

	/*  */

	/**
	 * Add class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function addClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !cls.trim()) {
	    return
	  }

	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
	    } else {
	      el.classList.add(cls);
	    }
	  } else {
	    var cur = ' ' + el.getAttribute('class') + ' ';
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      el.setAttribute('class', (cur + cls).trim());
	    }
	  }
	}

	/**
	 * Remove class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function removeClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !cls.trim()) {
	    return
	  }

	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
	    } else {
	      el.classList.remove(cls);
	    }
	  } else {
	    var cur = ' ' + el.getAttribute('class') + ' ';
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    el.setAttribute('class', cur.trim());
	  }
	}

	/*  */

	var hasTransition = inBrowser && !isIE9;
	var TRANSITION = 'transition';
	var ANIMATION = 'animation';

	// Transition property/event sniffing
	var transitionProp = 'transition';
	var transitionEndEvent = 'transitionend';
	var animationProp = 'animation';
	var animationEndEvent = 'animationend';
	if (hasTransition) {
	  /* istanbul ignore if */
	  if (window.ontransitionend === undefined &&
	    window.onwebkittransitionend !== undefined) {
	    transitionProp = 'WebkitTransition';
	    transitionEndEvent = 'webkitTransitionEnd';
	  }
	  if (window.onanimationend === undefined &&
	    window.onwebkitanimationend !== undefined) {
	    animationProp = 'WebkitAnimation';
	    animationEndEvent = 'webkitAnimationEnd';
	  }
	}

	var raf = (inBrowser && window.requestAnimationFrame) || setTimeout;
	function nextFrame (fn) {
	  raf(function () {
	    raf(fn);
	  });
	}

	function addTransitionClass (el, cls) {
	  (el._transitionClasses || (el._transitionClasses = [])).push(cls);
	  addClass(el, cls);
	}

	function removeTransitionClass (el, cls) {
	  if (el._transitionClasses) {
	    remove$1(el._transitionClasses, cls);
	  }
	  removeClass(el, cls);
	}

	function whenTransitionEnds (
	  el,
	  expectedType,
	  cb
	) {
	  var ref = getTransitionInfo(el, expectedType);
	  var type = ref.type;
	  var timeout = ref.timeout;
	  var propCount = ref.propCount;
	  if (!type) { return cb() }
	  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
	  var ended = 0;
	  var end = function () {
	    el.removeEventListener(event, onEnd);
	    cb();
	  };
	  var onEnd = function (e) {
	    if (e.target === el) {
	      if (++ended >= propCount) {
	        end();
	      }
	    }
	  };
	  setTimeout(function () {
	    if (ended < propCount) {
	      end();
	    }
	  }, timeout + 1);
	  el.addEventListener(event, onEnd);
	}

	var transformRE = /\b(transform|all)(,|$)/;

	function getTransitionInfo (el, expectedType) {
	  var styles = window.getComputedStyle(el);
	  var transitioneDelays = styles[transitionProp + 'Delay'].split(', ');
	  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
	  var transitionTimeout = getTimeout(transitioneDelays, transitionDurations);
	  var animationDelays = styles[animationProp + 'Delay'].split(', ');
	  var animationDurations = styles[animationProp + 'Duration'].split(', ');
	  var animationTimeout = getTimeout(animationDelays, animationDurations);

	  var type;
	  var timeout = 0;
	  var propCount = 0;
	  /* istanbul ignore if */
	  if (expectedType === TRANSITION) {
	    if (transitionTimeout > 0) {
	      type = TRANSITION;
	      timeout = transitionTimeout;
	      propCount = transitionDurations.length;
	    }
	  } else if (expectedType === ANIMATION) {
	    if (animationTimeout > 0) {
	      type = ANIMATION;
	      timeout = animationTimeout;
	      propCount = animationDurations.length;
	    }
	  } else {
	    timeout = Math.max(transitionTimeout, animationTimeout);
	    type = timeout > 0
	      ? transitionTimeout > animationTimeout
	        ? TRANSITION
	        : ANIMATION
	      : null;
	    propCount = type
	      ? type === TRANSITION
	        ? transitionDurations.length
	        : animationDurations.length
	      : 0;
	  }
	  var hasTransform =
	    type === TRANSITION &&
	    transformRE.test(styles[transitionProp + 'Property']);
	  return {
	    type: type,
	    timeout: timeout,
	    propCount: propCount,
	    hasTransform: hasTransform
	  }
	}

	function getTimeout (delays, durations) {
	  /* istanbul ignore next */
	  while (delays.length < durations.length) {
	    delays = delays.concat(delays);
	  }

	  return Math.max.apply(null, durations.map(function (d, i) {
	    return toMs(d) + toMs(delays[i])
	  }))
	}

	function toMs (s) {
	  return Number(s.slice(0, -1)) * 1000
	}

	/*  */

	function enter (vnode, toggleDisplay) {
	  var el = vnode.elm;

	  // call leave callback now
	  if (el._leaveCb) {
	    el._leaveCb.cancelled = true;
	    el._leaveCb();
	  }

	  var data = resolveTransition(vnode.data.transition);
	  if (!data) {
	    return
	  }

	  /* istanbul ignore if */
	  if (el._enterCb || el.nodeType !== 1) {
	    return
	  }

	  var css = data.css;
	  var type = data.type;
	  var enterClass = data.enterClass;
	  var enterToClass = data.enterToClass;
	  var enterActiveClass = data.enterActiveClass;
	  var appearClass = data.appearClass;
	  var appearToClass = data.appearToClass;
	  var appearActiveClass = data.appearActiveClass;
	  var beforeEnter = data.beforeEnter;
	  var enter = data.enter;
	  var afterEnter = data.afterEnter;
	  var enterCancelled = data.enterCancelled;
	  var beforeAppear = data.beforeAppear;
	  var appear = data.appear;
	  var afterAppear = data.afterAppear;
	  var appearCancelled = data.appearCancelled;

	  // activeInstance will always be the <transition> component managing this
	  // transition. One edge case to check is when the <transition> is placed
	  // as the root node of a child component. In that case we need to check
	  // <transition>'s parent for appear check.
	  var context = activeInstance;
	  var transitionNode = activeInstance.$vnode;
	  while (transitionNode && transitionNode.parent) {
	    transitionNode = transitionNode.parent;
	    context = transitionNode.context;
	  }

	  var isAppear = !context._isMounted || !vnode.isRootInsert;

	  if (isAppear && !appear && appear !== '') {
	    return
	  }

	  var startClass = isAppear ? appearClass : enterClass;
	  var activeClass = isAppear ? appearActiveClass : enterActiveClass;
	  var toClass = isAppear ? appearToClass : enterToClass;
	  var beforeEnterHook = isAppear ? (beforeAppear || beforeEnter) : beforeEnter;
	  var enterHook = isAppear ? (typeof appear === 'function' ? appear : enter) : enter;
	  var afterEnterHook = isAppear ? (afterAppear || afterEnter) : afterEnter;
	  var enterCancelledHook = isAppear ? (appearCancelled || enterCancelled) : enterCancelled;

	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl =
	    enterHook &&
	    // enterHook may be a bound method which exposes
	    // the length of original fn as _length
	    (enterHook._length || enterHook.length) > 1;

	  var cb = el._enterCb = once(function () {
	    if (expectsCSS) {
	      removeTransitionClass(el, toClass);
	      removeTransitionClass(el, activeClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, startClass);
	      }
	      enterCancelledHook && enterCancelledHook(el);
	    } else {
	      afterEnterHook && afterEnterHook(el);
	    }
	    el._enterCb = null;
	  });

	  if (!vnode.data.show) {
	    // remove pending leave element on enter by injecting an insert hook
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
	      var parent = el.parentNode;
	      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
	      if (pendingNode &&
	          pendingNode.context === vnode.context &&
	          pendingNode.tag === vnode.tag &&
	          pendingNode.elm._leaveCb) {
	        pendingNode.elm._leaveCb();
	      }
	      enterHook && enterHook(el, cb);
	    }, 'transition-insert');
	  }

	  // start enter transition
	  beforeEnterHook && beforeEnterHook(el);
	  if (expectsCSS) {
	    addTransitionClass(el, startClass);
	    addTransitionClass(el, activeClass);
	    nextFrame(function () {
	      addTransitionClass(el, toClass);
	      removeTransitionClass(el, startClass);
	      if (!cb.cancelled && !userWantsControl) {
	        whenTransitionEnds(el, type, cb);
	      }
	    });
	  }

	  if (vnode.data.show) {
	    toggleDisplay && toggleDisplay();
	    enterHook && enterHook(el, cb);
	  }

	  if (!expectsCSS && !userWantsControl) {
	    cb();
	  }
	}

	function leave (vnode, rm) {
	  var el = vnode.elm;

	  // call enter callback now
	  if (el._enterCb) {
	    el._enterCb.cancelled = true;
	    el._enterCb();
	  }

	  var data = resolveTransition(vnode.data.transition);
	  if (!data) {
	    return rm()
	  }

	  /* istanbul ignore if */
	  if (el._leaveCb || el.nodeType !== 1) {
	    return
	  }

	  var css = data.css;
	  var type = data.type;
	  var leaveClass = data.leaveClass;
	  var leaveToClass = data.leaveToClass;
	  var leaveActiveClass = data.leaveActiveClass;
	  var beforeLeave = data.beforeLeave;
	  var leave = data.leave;
	  var afterLeave = data.afterLeave;
	  var leaveCancelled = data.leaveCancelled;
	  var delayLeave = data.delayLeave;

	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl =
	    leave &&
	    // leave hook may be a bound method which exposes
	    // the length of original fn as _length
	    (leave._length || leave.length) > 1;

	  var cb = el._leaveCb = once(function () {
	    if (el.parentNode && el.parentNode._pending) {
	      el.parentNode._pending[vnode.key] = null;
	    }
	    if (expectsCSS) {
	      removeTransitionClass(el, leaveToClass);
	      removeTransitionClass(el, leaveActiveClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, leaveClass);
	      }
	      leaveCancelled && leaveCancelled(el);
	    } else {
	      rm();
	      afterLeave && afterLeave(el);
	    }
	    el._leaveCb = null;
	  });

	  if (delayLeave) {
	    delayLeave(performLeave);
	  } else {
	    performLeave();
	  }

	  function performLeave () {
	    // the delayed leave may have already been cancelled
	    if (cb.cancelled) {
	      return
	    }
	    // record leaving element
	    if (!vnode.data.show) {
	      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
	    }
	    beforeLeave && beforeLeave(el);
	    if (expectsCSS) {
	      addTransitionClass(el, leaveClass);
	      addTransitionClass(el, leaveActiveClass);
	      nextFrame(function () {
	        addTransitionClass(el, leaveToClass);
	        removeTransitionClass(el, leaveClass);
	        if (!cb.cancelled && !userWantsControl) {
	          whenTransitionEnds(el, type, cb);
	        }
	      });
	    }
	    leave && leave(el, cb);
	    if (!expectsCSS && !userWantsControl) {
	      cb();
	    }
	  }
	}

	function resolveTransition (def$$1) {
	  if (!def$$1) {
	    return
	  }
	  /* istanbul ignore else */
	  if (typeof def$$1 === 'object') {
	    var res = {};
	    if (def$$1.css !== false) {
	      extend(res, autoCssTransition(def$$1.name || 'v'));
	    }
	    extend(res, def$$1);
	    return res
	  } else if (typeof def$$1 === 'string') {
	    return autoCssTransition(def$$1)
	  }
	}

	var autoCssTransition = cached(function (name) {
	  return {
	    enterClass: (name + "-enter"),
	    leaveClass: (name + "-leave"),
	    appearClass: (name + "-enter"),
	    enterToClass: (name + "-enter-to"),
	    leaveToClass: (name + "-leave-to"),
	    appearToClass: (name + "-enter-to"),
	    enterActiveClass: (name + "-enter-active"),
	    leaveActiveClass: (name + "-leave-active"),
	    appearActiveClass: (name + "-enter-active")
	  }
	});

	function once (fn) {
	  var called = false;
	  return function () {
	    if (!called) {
	      called = true;
	      fn();
	    }
	  }
	}

	function _enter (_, vnode) {
	  if (!vnode.data.show) {
	    enter(vnode);
	  }
	}

	var transition = inBrowser ? {
	  create: _enter,
	  activate: _enter,
	  remove: function remove (vnode, rm) {
	    /* istanbul ignore else */
	    if (!vnode.data.show) {
	      leave(vnode, rm);
	    } else {
	      rm();
	    }
	  }
	} : {};

	var platformModules = [
	  attrs,
	  klass,
	  events,
	  domProps,
	  style,
	  transition
	];

	/*  */

	// the directive module should be applied last, after all
	// built-in modules have been applied.
	var modules = platformModules.concat(baseModules);

	var patch$1 = createPatchFunction({ nodeOps: nodeOps, modules: modules });

	/**
	 * Not type checking this file because flow doesn't like attaching
	 * properties to Elements.
	 */

	var modelableTagRE = /^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;

	/* istanbul ignore if */
	if (isIE9) {
	  // http://www.matts411.com/post/internet-explorer-9-oninput/
	  document.addEventListener('selectionchange', function () {
	    var el = document.activeElement;
	    if (el && el.vmodel) {
	      trigger(el, 'input');
	    }
	  });
	}

	var model = {
	  inserted: function inserted (el, binding, vnode) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (!modelableTagRE.test(vnode.tag)) {
	        warn(
	          "v-model is not supported on element type: <" + (vnode.tag) + ">. " +
	          'If you are working with contenteditable, it\'s recommended to ' +
	          'wrap a library dedicated for that purpose inside a custom component.',
	          vnode.context
	        );
	      }
	    }
	    if (vnode.tag === 'select') {
	      var cb = function () {
	        setSelected(el, binding, vnode.context);
	      };
	      cb();
	      /* istanbul ignore if */
	      if (isIE || isEdge) {
	        setTimeout(cb, 0);
	      }
	    } else if (vnode.tag === 'textarea' || el.type === 'text') {
	      el._vModifiers = binding.modifiers;
	      if (!binding.modifiers.lazy) {
	        if (!isAndroid) {
	          el.addEventListener('compositionstart', onCompositionStart);
	          el.addEventListener('compositionend', onCompositionEnd);
	        }
	        /* istanbul ignore if */
	        if (isIE9) {
	          el.vmodel = true;
	        }
	      }
	    }
	  },
	  componentUpdated: function componentUpdated (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      setSelected(el, binding, vnode.context);
	      // in case the options rendered by v-for have changed,
	      // it's possible that the value is out-of-sync with the rendered options.
	      // detect such cases and filter out values that no longer has a matching
	      // option in the DOM.
	      var needReset = el.multiple
	        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })
	        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
	      if (needReset) {
	        trigger(el, 'change');
	      }
	    }
	  }
	};

	function setSelected (el, binding, vm) {
	  var value = binding.value;
	  var isMultiple = el.multiple;
	  if (isMultiple && !Array.isArray(value)) {
	    process.env.NODE_ENV !== 'production' && warn(
	      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
	      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
	      vm
	    );
	    return
	  }
	  var selected, option;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    option = el.options[i];
	    if (isMultiple) {
	      selected = looseIndexOf(value, getValue(option)) > -1;
	      if (option.selected !== selected) {
	        option.selected = selected;
	      }
	    } else {
	      if (looseEqual(getValue(option), value)) {
	        if (el.selectedIndex !== i) {
	          el.selectedIndex = i;
	        }
	        return
	      }
	    }
	  }
	  if (!isMultiple) {
	    el.selectedIndex = -1;
	  }
	}

	function hasNoMatchingOption (value, options) {
	  for (var i = 0, l = options.length; i < l; i++) {
	    if (looseEqual(getValue(options[i]), value)) {
	      return false
	    }
	  }
	  return true
	}

	function getValue (option) {
	  return '_value' in option
	    ? option._value
	    : option.value
	}

	function onCompositionStart (e) {
	  e.target.composing = true;
	}

	function onCompositionEnd (e) {
	  e.target.composing = false;
	  trigger(e.target, 'input');
	}

	function trigger (el, type) {
	  var e = document.createEvent('HTMLEvents');
	  e.initEvent(type, true, true);
	  el.dispatchEvent(e);
	}

	/*  */

	// recursively search for possible transition defined inside the component root
	function locateNode (vnode) {
	  return vnode.child && (!vnode.data || !vnode.data.transition)
	    ? locateNode(vnode.child._vnode)
	    : vnode
	}

	var show = {
	  bind: function bind (el, ref, vnode) {
	    var value = ref.value;

	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    var originalDisplay = el.__vOriginalDisplay =
	      el.style.display === 'none' ? '' : el.style.display;
	    if (value && transition && !isIE9) {
	      vnode.data.show = true;
	      enter(vnode, function () {
	        el.style.display = originalDisplay;
	      });
	    } else {
	      el.style.display = value ? originalDisplay : 'none';
	    }
	  },

	  update: function update (el, ref, vnode) {
	    var value = ref.value;
	    var oldValue = ref.oldValue;

	    /* istanbul ignore if */
	    if (value === oldValue) { return }
	    vnode = locateNode(vnode);
	    var transition = vnode.data && vnode.data.transition;
	    if (transition && !isIE9) {
	      vnode.data.show = true;
	      if (value) {
	        enter(vnode, function () {
	          el.style.display = el.__vOriginalDisplay;
	        });
	      } else {
	        leave(vnode, function () {
	          el.style.display = 'none';
	        });
	      }
	    } else {
	      el.style.display = value ? el.__vOriginalDisplay : 'none';
	    }
	  },

	  unbind: function unbind (
	    el,
	    binding,
	    vnode,
	    oldVnode,
	    isDestroy
	  ) {
	    if (!isDestroy) {
	      el.style.display = el.__vOriginalDisplay;
	    }
	  }
	};

	var platformDirectives = {
	  model: model,
	  show: show
	};

	/*  */

	// Provides transition support for a single element/component.
	// supports transition mode (out-in / in-out)

	var transitionProps = {
	  name: String,
	  appear: Boolean,
	  css: Boolean,
	  mode: String,
	  type: String,
	  enterClass: String,
	  leaveClass: String,
	  enterToClass: String,
	  leaveToClass: String,
	  enterActiveClass: String,
	  leaveActiveClass: String,
	  appearClass: String,
	  appearActiveClass: String,
	  appearToClass: String
	};

	// in case the child is also an abstract component, e.g. <keep-alive>
	// we want to recursively retrieve the real component to be rendered
	function getRealChild (vnode) {
	  var compOptions = vnode && vnode.componentOptions;
	  if (compOptions && compOptions.Ctor.options.abstract) {
	    return getRealChild(getFirstComponentChild(compOptions.children))
	  } else {
	    return vnode
	  }
	}

	function extractTransitionData (comp) {
	  var data = {};
	  var options = comp.$options;
	  // props
	  for (var key in options.propsData) {
	    data[key] = comp[key];
	  }
	  // events.
	  // extract listeners and pass them directly to the transition methods
	  var listeners = options._parentListeners;
	  for (var key$1 in listeners) {
	    data[camelize(key$1)] = listeners[key$1].fn;
	  }
	  return data
	}

	function placeholder (h, rawChild) {
	  return /\d-keep-alive$/.test(rawChild.tag)
	    ? h('keep-alive')
	    : null
	}

	function hasParentTransition (vnode) {
	  while ((vnode = vnode.parent)) {
	    if (vnode.data.transition) {
	      return true
	    }
	  }
	}

	function isSameChild (child, oldChild) {
	  return oldChild.key === child.key && oldChild.tag === child.tag
	}

	var Transition = {
	  name: 'transition',
	  props: transitionProps,
	  abstract: true,
	  render: function render (h) {
	    var this$1 = this;

	    var children = this.$slots.default;
	    if (!children) {
	      return
	    }

	    // filter out text nodes (possible whitespaces)
	    children = children.filter(function (c) { return c.tag; });
	    /* istanbul ignore if */
	    if (!children.length) {
	      return
	    }

	    // warn multiple elements
	    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
	      warn(
	        '<transition> can only be used on a single element. Use ' +
	        '<transition-group> for lists.',
	        this.$parent
	      );
	    }

	    var mode = this.mode;

	    // warn invalid mode
	    if (process.env.NODE_ENV !== 'production' &&
	        mode && mode !== 'in-out' && mode !== 'out-in') {
	      warn(
	        'invalid <transition> mode: ' + mode,
	        this.$parent
	      );
	    }

	    var rawChild = children[0];

	    // if this is a component root node and the component's
	    // parent container node also has transition, skip.
	    if (hasParentTransition(this.$vnode)) {
	      return rawChild
	    }

	    // apply transition data to child
	    // use getRealChild() to ignore abstract components e.g. keep-alive
	    var child = getRealChild(rawChild);
	    /* istanbul ignore if */
	    if (!child) {
	      return rawChild
	    }

	    if (this._leaving) {
	      return placeholder(h, rawChild)
	    }

	    var key = child.key = child.key == null || child.isStatic
	      ? ("__v" + (child.tag + this._uid) + "__")
	      : child.key;
	    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
	    var oldRawChild = this._vnode;
	    var oldChild = getRealChild(oldRawChild);

	    // mark v-show
	    // so that the transition module can hand over the control to the directive
	    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
	      child.data.show = true;
	    }

	    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
	      // replace old child transition data with fresh one
	      // important for dynamic transitions!
	      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
	      // handle transition mode
	      if (mode === 'out-in') {
	        // return placeholder node and queue update when leave finishes
	        this._leaving = true;
	        mergeVNodeHook(oldData, 'afterLeave', function () {
	          this$1._leaving = false;
	          this$1.$forceUpdate();
	        }, key);
	        return placeholder(h, rawChild)
	      } else if (mode === 'in-out') {
	        var delayedLeave;
	        var performLeave = function () { delayedLeave(); };
	        mergeVNodeHook(data, 'afterEnter', performLeave, key);
	        mergeVNodeHook(data, 'enterCancelled', performLeave, key);
	        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
	          delayedLeave = leave;
	        }, key);
	      }
	    }

	    return rawChild
	  }
	};

	/*  */

	// Provides transition support for list items.
	// supports move transitions using the FLIP technique.

	// Because the vdom's children update algorithm is "unstable" - i.e.
	// it doesn't guarantee the relative positioning of removed elements,
	// we force transition-group to update its children into two passes:
	// in the first pass, we remove all nodes that need to be removed,
	// triggering their leaving transition; in the second pass, we insert/move
	// into the final disired state. This way in the second pass removed
	// nodes will remain where they should be.

	var props = extend({
	  tag: String,
	  moveClass: String
	}, transitionProps);

	delete props.mode;

	var TransitionGroup = {
	  props: props,

	  render: function render (h) {
	    var tag = this.tag || this.$vnode.data.tag || 'span';
	    var map = Object.create(null);
	    var prevChildren = this.prevChildren = this.children;
	    var rawChildren = this.$slots.default || [];
	    var children = this.children = [];
	    var transitionData = extractTransitionData(this);

	    for (var i = 0; i < rawChildren.length; i++) {
	      var c = rawChildren[i];
	      if (c.tag) {
	        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
	          children.push(c);
	          map[c.key] = c
	          ;(c.data || (c.data = {})).transition = transitionData;
	        } else if (process.env.NODE_ENV !== 'production') {
	          var opts = c.componentOptions;
	          var name = opts
	            ? (opts.Ctor.options.name || opts.tag)
	            : c.tag;
	          warn(("<transition-group> children must be keyed: <" + name + ">"));
	        }
	      }
	    }

	    if (prevChildren) {
	      var kept = [];
	      var removed = [];
	      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
	        var c$1 = prevChildren[i$1];
	        c$1.data.transition = transitionData;
	        c$1.data.pos = c$1.elm.getBoundingClientRect();
	        if (map[c$1.key]) {
	          kept.push(c$1);
	        } else {
	          removed.push(c$1);
	        }
	      }
	      this.kept = h(tag, null, kept);
	      this.removed = removed;
	    }

	    return h(tag, null, children)
	  },

	  beforeUpdate: function beforeUpdate () {
	    // force removing pass
	    this.__patch__(
	      this._vnode,
	      this.kept,
	      false, // hydrating
	      true // removeOnly (!important, avoids unnecessary moves)
	    );
	    this._vnode = this.kept;
	  },

	  updated: function updated () {
	    var children = this.prevChildren;
	    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
	    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
	      return
	    }

	    // we divide the work into three loops to avoid mixing DOM reads and writes
	    // in each iteration - which helps prevent layout thrashing.
	    children.forEach(callPendingCbs);
	    children.forEach(recordPosition);
	    children.forEach(applyTranslation);

	    // force reflow to put everything in position
	    var f = document.body.offsetHeight; // eslint-disable-line

	    children.forEach(function (c) {
	      if (c.data.moved) {
	        var el = c.elm;
	        var s = el.style;
	        addTransitionClass(el, moveClass);
	        s.transform = s.WebkitTransform = s.transitionDuration = '';
	        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
	          if (!e || /transform$/.test(e.propertyName)) {
	            el.removeEventListener(transitionEndEvent, cb);
	            el._moveCb = null;
	            removeTransitionClass(el, moveClass);
	          }
	        });
	      }
	    });
	  },

	  methods: {
	    hasMove: function hasMove (el, moveClass) {
	      /* istanbul ignore if */
	      if (!hasTransition) {
	        return false
	      }
	      if (this._hasMove != null) {
	        return this._hasMove
	      }
	      addTransitionClass(el, moveClass);
	      var info = getTransitionInfo(el);
	      removeTransitionClass(el, moveClass);
	      return (this._hasMove = info.hasTransform)
	    }
	  }
	};

	function callPendingCbs (c) {
	  /* istanbul ignore if */
	  if (c.elm._moveCb) {
	    c.elm._moveCb();
	  }
	  /* istanbul ignore if */
	  if (c.elm._enterCb) {
	    c.elm._enterCb();
	  }
	}

	function recordPosition (c) {
	  c.data.newPos = c.elm.getBoundingClientRect();
	}

	function applyTranslation (c) {
	  var oldPos = c.data.pos;
	  var newPos = c.data.newPos;
	  var dx = oldPos.left - newPos.left;
	  var dy = oldPos.top - newPos.top;
	  if (dx || dy) {
	    c.data.moved = true;
	    var s = c.elm.style;
	    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
	    s.transitionDuration = '0s';
	  }
	}

	var platformComponents = {
	  Transition: Transition,
	  TransitionGroup: TransitionGroup
	};

	/*  */

	// install platform specific utils
	Vue$3.config.isUnknownElement = isUnknownElement;
	Vue$3.config.isReservedTag = isReservedTag;
	Vue$3.config.getTagNamespace = getTagNamespace;
	Vue$3.config.mustUseProp = mustUseProp;

	// install platform runtime directives & components
	extend(Vue$3.options.directives, platformDirectives);
	extend(Vue$3.options.components, platformComponents);

	// install platform patch function
	Vue$3.prototype.__patch__ = inBrowser ? patch$1 : noop;

	// wrap mount
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && inBrowser ? query(el) : undefined;
	  return this._mount(el, hydrating)
	};

	if (process.env.NODE_ENV !== 'production' &&
	    inBrowser && typeof console !== 'undefined') {
	  console[console.info ? 'info' : 'log'](
	    "You are running Vue in development mode.\n" +
	    "Make sure to turn on production mode when deploying for production.\n" +
	    "See more tips at https://vuejs.org/guide/deployment.html"
	  );
	}

	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue$3);
	    } else if (
	      process.env.NODE_ENV !== 'production' &&
	      inBrowser && !isEdge && /Chrome\/\d+/.test(window.navigator.userAgent)
	    ) {
	      console[console.info ? 'info' : 'log'](
	        'Download the Vue Devtools extension for a better development experience:\n' +
	        'https://github.com/vuejs/vue-devtools'
	      );
	    }
	  }
	}, 0);

	/*  */

	// check whether current browser encodes a char inside attribute values
	function shouldDecode (content, encoded) {
	  var div = document.createElement('div');
	  div.innerHTML = "<div a=\"" + content + "\">";
	  return div.innerHTML.indexOf(encoded) > 0
	}

	// #3663
	// IE encodes newlines inside attribute values while other browsers don't
	var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

	/*  */

	var decoder;

	function decode (html) {
	  decoder = decoder || document.createElement('div');
	  decoder.innerHTML = html;
	  return decoder.textContent
	}

	/*  */

	var isUnaryTag = makeMap(
	  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
	  'link,meta,param,source,track,wbr',
	  true
	);

	// Elements that you can, intentionally, leave open
	// (and which close themselves)
	var canBeLeftOpenTag = makeMap(
	  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source',
	  true
	);

	// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
	// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
	var isNonPhrasingTag = makeMap(
	  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
	  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
	  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
	  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
	  'title,tr,track',
	  true
	);

	/**
	 * Not type-checking this file because it's mostly vendor code.
	 */

	/*!
	 * HTML Parser By John Resig (ejohn.org)
	 * Modified by Juriy "kangax" Zaytsev
	 * Original code by Erik Arvidsson, Mozilla Public License
	 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
	 */

	// Regular Expressions for parsing tags and attributes
	var singleAttrIdentifier = /([^\s"'<>/=]+)/;
	var singleAttrAssign = /(?:=)/;
	var singleAttrValues = [
	  // attr value double quotes
	  /"([^"]*)"+/.source,
	  // attr value, single quotes
	  /'([^']*)'+/.source,
	  // attr value, no quotes
	  /([^\s"'=<>`]+)/.source
	];
	var attribute = new RegExp(
	  '^\\s*' + singleAttrIdentifier.source +
	  '(?:\\s*(' + singleAttrAssign.source + ')' +
	  '\\s*(?:' + singleAttrValues.join('|') + '))?'
	);

	// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
	// but for Vue templates we can enforce a simple charset
	var ncname = '[a-zA-Z_][\\w\\-\\.]*';
	var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
	var startTagOpen = new RegExp('^<' + qnameCapture);
	var startTagClose = /^\s*(\/?)>/;
	var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
	var doctype = /^<!DOCTYPE [^>]+>/i;
	var comment = /^<!--/;
	var conditionalComment = /^<!\[/;

	var IS_REGEX_CAPTURING_BROKEN = false;
	'x'.replace(/x(.)?/g, function (m, g) {
	  IS_REGEX_CAPTURING_BROKEN = g === '';
	});

	// Special Elements (can contain anything)
	var isScriptOrStyle = makeMap('script,style', true);
	var hasLang = function (attr) { return attr.name === 'lang' && attr.value !== 'html'; };
	var isSpecialTag = function (tag, isSFC, stack) {
	  if (isScriptOrStyle(tag)) {
	    return true
	  }
	  if (isSFC && stack.length === 1) {
	    // top-level template that has no pre-processor
	    if (tag === 'template' && !stack[0].attrs.some(hasLang)) {
	      return false
	    } else {
	      return true
	    }
	  }
	  return false
	};

	var reCache = {};

	var ltRE = /&lt;/g;
	var gtRE = /&gt;/g;
	var nlRE = /&#10;/g;
	var ampRE = /&amp;/g;
	var quoteRE = /&quot;/g;

	function decodeAttr (value, shouldDecodeNewlines) {
	  if (shouldDecodeNewlines) {
	    value = value.replace(nlRE, '\n');
	  }
	  return value
	    .replace(ltRE, '<')
	    .replace(gtRE, '>')
	    .replace(ampRE, '&')
	    .replace(quoteRE, '"')
	}

	function parseHTML (html, options) {
	  var stack = [];
	  var expectHTML = options.expectHTML;
	  var isUnaryTag$$1 = options.isUnaryTag || no;
	  var index = 0;
	  var last, lastTag;
	  while (html) {
	    last = html;
	    // Make sure we're not in a script or style element
	    if (!lastTag || !isSpecialTag(lastTag, options.sfc, stack)) {
	      var textEnd = html.indexOf('<');
	      if (textEnd === 0) {
	        // Comment:
	        if (comment.test(html)) {
	          var commentEnd = html.indexOf('-->');

	          if (commentEnd >= 0) {
	            advance(commentEnd + 3);
	            continue
	          }
	        }

	        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
	        if (conditionalComment.test(html)) {
	          var conditionalEnd = html.indexOf(']>');

	          if (conditionalEnd >= 0) {
	            advance(conditionalEnd + 2);
	            continue
	          }
	        }

	        // Doctype:
	        var doctypeMatch = html.match(doctype);
	        if (doctypeMatch) {
	          advance(doctypeMatch[0].length);
	          continue
	        }

	        // End tag:
	        var endTagMatch = html.match(endTag);
	        if (endTagMatch) {
	          var curIndex = index;
	          advance(endTagMatch[0].length);
	          parseEndTag(endTagMatch[0], endTagMatch[1], curIndex, index);
	          continue
	        }

	        // Start tag:
	        var startTagMatch = parseStartTag();
	        if (startTagMatch) {
	          handleStartTag(startTagMatch);
	          continue
	        }
	      }

	      var text = (void 0), rest$1 = (void 0), next = (void 0);
	      if (textEnd > 0) {
	        rest$1 = html.slice(textEnd);
	        while (
	          !endTag.test(rest$1) &&
	          !startTagOpen.test(rest$1) &&
	          !comment.test(rest$1) &&
	          !conditionalComment.test(rest$1)
	        ) {
	          // < in plain text, be forgiving and treat it as text
	          next = rest$1.indexOf('<', 1);
	          if (next < 0) { break }
	          textEnd += next;
	          rest$1 = html.slice(textEnd);
	        }
	        text = html.substring(0, textEnd);
	        advance(textEnd);
	      }

	      if (textEnd < 0) {
	        text = html;
	        html = '';
	      }

	      if (options.chars && text) {
	        options.chars(text);
	      }
	    } else {
	      var stackedTag = lastTag.toLowerCase();
	      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
	      var endTagLength = 0;
	      var rest = html.replace(reStackedTag, function (all, text, endTag) {
	        endTagLength = endTag.length;
	        if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {
	          text = text
	            .replace(/<!--([\s\S]*?)-->/g, '$1')
	            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
	        }
	        if (options.chars) {
	          options.chars(text);
	        }
	        return ''
	      });
	      index += html.length - rest.length;
	      html = rest;
	      parseEndTag('</' + stackedTag + '>', stackedTag, index - endTagLength, index);
	    }

	    if (html === last && options.chars) {
	      options.chars(html);
	      break
	    }
	  }

	  // Clean up any remaining tags
	  parseEndTag();

	  function advance (n) {
	    index += n;
	    html = html.substring(n);
	  }

	  function parseStartTag () {
	    var start = html.match(startTagOpen);
	    if (start) {
	      var match = {
	        tagName: start[1],
	        attrs: [],
	        start: index
	      };
	      advance(start[0].length);
	      var end, attr;
	      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
	        advance(attr[0].length);
	        match.attrs.push(attr);
	      }
	      if (end) {
	        match.unarySlash = end[1];
	        advance(end[0].length);
	        match.end = index;
	        return match
	      }
	    }
	  }

	  function handleStartTag (match) {
	    var tagName = match.tagName;
	    var unarySlash = match.unarySlash;

	    if (expectHTML) {
	      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
	        parseEndTag('', lastTag);
	      }
	      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
	        parseEndTag('', tagName);
	      }
	    }

	    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;

	    var l = match.attrs.length;
	    var attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      var args = match.attrs[i];
	      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
	      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
	        if (args[3] === '') { delete args[3]; }
	        if (args[4] === '') { delete args[4]; }
	        if (args[5] === '') { delete args[5]; }
	      }
	      var value = args[3] || args[4] || args[5] || '';
	      attrs[i] = {
	        name: args[1],
	        value: decodeAttr(
	          value,
	          options.shouldDecodeNewlines
	        )
	      };
	    }

	    if (!unary) {
	      stack.push({ tag: tagName, attrs: attrs });
	      lastTag = tagName;
	      unarySlash = '';
	    }

	    if (options.start) {
	      options.start(tagName, attrs, unary, match.start, match.end);
	    }
	  }

	  function parseEndTag (tag, tagName, start, end) {
	    var pos;
	    if (start == null) { start = index; }
	    if (end == null) { end = index; }

	    // Find the closest opened tag of the same type
	    if (tagName) {
	      var needle = tagName.toLowerCase();
	      for (pos = stack.length - 1; pos >= 0; pos--) {
	        if (stack[pos].tag.toLowerCase() === needle) {
	          break
	        }
	      }
	    } else {
	      // If no tag name is provided, clean shop
	      pos = 0;
	    }

	    if (pos >= 0) {
	      // Close all the open elements, up the stack
	      for (var i = stack.length - 1; i >= pos; i--) {
	        if (options.end) {
	          options.end(stack[i].tag, start, end);
	        }
	      }

	      // Remove the open elements from the stack
	      stack.length = pos;
	      lastTag = pos && stack[pos - 1].tag;
	    } else if (tagName.toLowerCase() === 'br') {
	      if (options.start) {
	        options.start(tagName, [], true, start, end);
	      }
	    } else if (tagName.toLowerCase() === 'p') {
	      if (options.start) {
	        options.start(tagName, [], false, start, end);
	      }
	      if (options.end) {
	        options.end(tagName, start, end);
	      }
	    }
	  }
	}

	/*  */

	function parseFilters (exp) {
	  var inSingle = false;
	  var inDouble = false;
	  var inTemplateString = false;
	  var inRegex = false;
	  var curly = 0;
	  var square = 0;
	  var paren = 0;
	  var lastFilterIndex = 0;
	  var c, prev, i, expression, filters;

	  for (i = 0; i < exp.length; i++) {
	    prev = c;
	    c = exp.charCodeAt(i);
	    if (inSingle) {
	      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
	    } else if (inDouble) {
	      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
	    } else if (inTemplateString) {
	      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
	    } else if (inRegex) {
	      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
	    } else if (
	      c === 0x7C && // pipe
	      exp.charCodeAt(i + 1) !== 0x7C &&
	      exp.charCodeAt(i - 1) !== 0x7C &&
	      !curly && !square && !paren
	    ) {
	      if (expression === undefined) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        expression = exp.slice(0, i).trim();
	      } else {
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22: inDouble = true; break         // "
	        case 0x27: inSingle = true; break         // '
	        case 0x60: inTemplateString = true; break // `
	        case 0x28: paren++; break                 // (
	        case 0x29: paren--; break                 // )
	        case 0x5B: square++; break                // [
	        case 0x5D: square--; break                // ]
	        case 0x7B: curly++; break                 // {
	        case 0x7D: curly--; break                 // }
	      }
	      if (c === 0x2f) { // /
	        var j = i - 1;
	        var p = (void 0);
	        // find first non-whitespace prev char
	        for (; j >= 0; j--) {
	          p = exp.charAt(j);
	          if (p !== ' ') { break }
	        }
	        if (!p || !/[\w$]/.test(p)) {
	          inRegex = true;
	        }
	      }
	    }
	  }

	  if (expression === undefined) {
	    expression = exp.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }

	  function pushFilter () {
	    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
	    lastFilterIndex = i + 1;
	  }

	  if (filters) {
	    for (i = 0; i < filters.length; i++) {
	      expression = wrapFilter(expression, filters[i]);
	    }
	  }

	  return expression
	}

	function wrapFilter (exp, filter) {
	  var i = filter.indexOf('(');
	  if (i < 0) {
	    // _f: resolveFilter
	    return ("_f(\"" + filter + "\")(" + exp + ")")
	  } else {
	    var name = filter.slice(0, i);
	    var args = filter.slice(i + 1);
	    return ("_f(\"" + name + "\")(" + exp + "," + args)
	  }
	}

	/*  */

	var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
	var regexEscapeRE = /[-.*+?^${}()|[\]/\\]/g;

	var buildRegex = cached(function (delimiters) {
	  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
	  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
	  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
	});

	function parseText (
	  text,
	  delimiters
	) {
	  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
	  if (!tagRE.test(text)) {
	    return
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index;
	  while ((match = tagRE.exec(text))) {
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
	    }
	    // tag token
	    var exp = parseFilters(match[1].trim());
	    tokens.push(("_s(" + exp + ")"));
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push(JSON.stringify(text.slice(lastIndex)));
	  }
	  return tokens.join('+')
	}

	/*  */

	function baseWarn (msg) {
	  console.error(("[Vue parser]: " + msg));
	}

	function pluckModuleFunction (
	  modules,
	  key
	) {
	  return modules
	    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
	    : []
	}

	function addProp (el, name, value) {
	  (el.props || (el.props = [])).push({ name: name, value: value });
	}

	function addAttr (el, name, value) {
	  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
	}

	function addDirective (
	  el,
	  name,
	  rawName,
	  value,
	  arg,
	  modifiers
	) {
	  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
	}

	function addHandler (
	  el,
	  name,
	  value,
	  modifiers,
	  important
	) {
	  // check capture modifier
	  if (modifiers && modifiers.capture) {
	    delete modifiers.capture;
	    name = '!' + name; // mark the event as captured
	  }
	  if (modifiers && modifiers.once) {
	    delete modifiers.once;
	    name = '~' + name; // mark the event as once
	  }
	  var events;
	  if (modifiers && modifiers.native) {
	    delete modifiers.native;
	    events = el.nativeEvents || (el.nativeEvents = {});
	  } else {
	    events = el.events || (el.events = {});
	  }
	  var newHandler = { value: value, modifiers: modifiers };
	  var handlers = events[name];
	  /* istanbul ignore if */
	  if (Array.isArray(handlers)) {
	    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
	  } else if (handlers) {
	    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
	  } else {
	    events[name] = newHandler;
	  }
	}

	function getBindingAttr (
	  el,
	  name,
	  getStatic
	) {
	  var dynamicValue =
	    getAndRemoveAttr(el, ':' + name) ||
	    getAndRemoveAttr(el, 'v-bind:' + name);
	  if (dynamicValue != null) {
	    return parseFilters(dynamicValue)
	  } else if (getStatic !== false) {
	    var staticValue = getAndRemoveAttr(el, name);
	    if (staticValue != null) {
	      return JSON.stringify(staticValue)
	    }
	  }
	}

	function getAndRemoveAttr (el, name) {
	  var val;
	  if ((val = el.attrsMap[name]) != null) {
	    var list = el.attrsList;
	    for (var i = 0, l = list.length; i < l; i++) {
	      if (list[i].name === name) {
	        list.splice(i, 1);
	        break
	      }
	    }
	  }
	  return val
	}

	var len;
	var str;
	var chr;
	var index$1;
	var expressionPos;
	var expressionEndPos;

	/**
	 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
	 *
	 * for loop possible cases:
	 *
	 * - test
	 * - test[idx]
	 * - test[test1[idx]]
	 * - test["a"][idx]
	 * - xxx.test[a[a].test1[idx]]
	 * - test.xxx.a["asa"][test1[idx]]
	 *
	 */

	function parseModel (val) {
	  str = val;
	  len = str.length;
	  index$1 = expressionPos = expressionEndPos = 0;

	  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
	    return {
	      exp: val,
	      idx: null
	    }
	  }

	  while (!eof()) {
	    chr = next();
	    /* istanbul ignore if */
	    if (isStringStart(chr)) {
	      parseString(chr);
	    } else if (chr === 0x5B) {
	      parseBracket(chr);
	    }
	  }

	  return {
	    exp: val.substring(0, expressionPos),
	    idx: val.substring(expressionPos + 1, expressionEndPos)
	  }
	}

	function next () {
	  return str.charCodeAt(++index$1)
	}

	function eof () {
	  return index$1 >= len
	}

	function isStringStart (chr) {
	  return chr === 0x22 || chr === 0x27
	}

	function parseBracket (chr) {
	  var inBracket = 1;
	  expressionPos = index$1;
	  while (!eof()) {
	    chr = next();
	    if (isStringStart(chr)) {
	      parseString(chr);
	      continue
	    }
	    if (chr === 0x5B) { inBracket++; }
	    if (chr === 0x5D) { inBracket--; }
	    if (inBracket === 0) {
	      expressionEndPos = index$1;
	      break
	    }
	  }
	}

	function parseString (chr) {
	  var stringQuote = chr;
	  while (!eof()) {
	    chr = next();
	    if (chr === stringQuote) {
	      break
	    }
	  }
	}

	/*  */

	var dirRE = /^v-|^@|^:/;
	var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
	var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;
	var bindRE = /^:|^v-bind:/;
	var onRE = /^@|^v-on:/;
	var argRE = /:(.*)$/;
	var modifierRE = /\.[^.]+/g;

	var decodeHTMLCached = cached(decode);

	// configurable state
	var warn$1;
	var platformGetTagNamespace;
	var platformMustUseProp;
	var platformIsPreTag;
	var preTransforms;
	var transforms;
	var postTransforms;
	var delimiters;

	/**
	 * Convert HTML string to AST.
	 */
	function parse (
	  template,
	  options
	) {
	  warn$1 = options.warn || baseWarn;
	  platformGetTagNamespace = options.getTagNamespace || no;
	  platformMustUseProp = options.mustUseProp || no;
	  platformIsPreTag = options.isPreTag || no;
	  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
	  transforms = pluckModuleFunction(options.modules, 'transformNode');
	  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
	  delimiters = options.delimiters;
	  var stack = [];
	  var preserveWhitespace = options.preserveWhitespace !== false;
	  var root;
	  var currentParent;
	  var inVPre = false;
	  var inPre = false;
	  var warned = false;
	  parseHTML(template, {
	    expectHTML: options.expectHTML,
	    isUnaryTag: options.isUnaryTag,
	    shouldDecodeNewlines: options.shouldDecodeNewlines,
	    start: function start (tag, attrs, unary) {
	      // check namespace.
	      // inherit parent ns if there is one
	      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

	      // handle IE svg bug
	      /* istanbul ignore if */
	      if (isIE && ns === 'svg') {
	        attrs = guardIESVGBug(attrs);
	      }

	      var element = {
	        type: 1,
	        tag: tag,
	        attrsList: attrs,
	        attrsMap: makeAttrsMap(attrs),
	        parent: currentParent,
	        children: []
	      };
	      if (ns) {
	        element.ns = ns;
	      }

	      if (isForbiddenTag(element) && !isServerRendering()) {
	        element.forbidden = true;
	        process.env.NODE_ENV !== 'production' && warn$1(
	          'Templates should only be responsible for mapping the state to the ' +
	          'UI. Avoid placing tags with side-effects in your templates, such as ' +
	          "<" + tag + ">" + ', as they will not be parsed.'
	        );
	      }

	      // apply pre-transforms
	      for (var i = 0; i < preTransforms.length; i++) {
	        preTransforms[i](element, options);
	      }

	      if (!inVPre) {
	        processPre(element);
	        if (element.pre) {
	          inVPre = true;
	        }
	      }
	      if (platformIsPreTag(element.tag)) {
	        inPre = true;
	      }
	      if (inVPre) {
	        processRawAttrs(element);
	      } else {
	        processFor(element);
	        processIf(element);
	        processOnce(element);
	        processKey(element);

	        // determine whether this is a plain element after
	        // removing structural attributes
	        element.plain = !element.key && !attrs.length;

	        processRef(element);
	        processSlot(element);
	        processComponent(element);
	        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
	          transforms[i$1](element, options);
	        }
	        processAttrs(element);
	      }

	      function checkRootConstraints (el) {
	        if (process.env.NODE_ENV !== 'production' && !warned) {
	          if (el.tag === 'slot' || el.tag === 'template') {
	            warned = true;
	            warn$1(
	              "Cannot use <" + (el.tag) + "> as component root element because it may " +
	              'contain multiple nodes:\n' + template
	            );
	          }
	          if (el.attrsMap.hasOwnProperty('v-for')) {
	            warned = true;
	            warn$1(
	              'Cannot use v-for on stateful component root element because ' +
	              'it renders multiple elements:\n' + template
	            );
	          }
	        }
	      }

	      // tree management
	      if (!root) {
	        root = element;
	        checkRootConstraints(root);
	      } else if (!stack.length) {
	        // allow root elements with v-if, v-else-if and v-else
	        if (root.if && (element.elseif || element.else)) {
	          checkRootConstraints(element);
	          addIfCondition(root, {
	            exp: element.elseif,
	            block: element
	          });
	        } else if (process.env.NODE_ENV !== 'production' && !warned) {
	          warned = true;
	          warn$1(
	            "Component template should contain exactly one root element:" +
	            "\n\n" + template + "\n\n" +
	            "If you are using v-if on multiple elements, " +
	            "use v-else-if to chain them instead."
	          );
	        }
	      }
	      if (currentParent && !element.forbidden) {
	        if (element.elseif || element.else) {
	          processIfConditions(element, currentParent);
	        } else if (element.slotScope) { // scoped slot
	          currentParent.plain = false;
	          var name = element.slotTarget || 'default';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
	        } else {
	          currentParent.children.push(element);
	          element.parent = currentParent;
	        }
	      }
	      if (!unary) {
	        currentParent = element;
	        stack.push(element);
	      }
	      // apply post-transforms
	      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
	        postTransforms[i$2](element, options);
	      }
	    },

	    end: function end () {
	      // remove trailing whitespace
	      var element = stack[stack.length - 1];
	      var lastNode = element.children[element.children.length - 1];
	      if (lastNode && lastNode.type === 3 && lastNode.text === ' ') {
	        element.children.pop();
	      }
	      // pop stack
	      stack.length -= 1;
	      currentParent = stack[stack.length - 1];
	      // check pre state
	      if (element.pre) {
	        inVPre = false;
	      }
	      if (platformIsPreTag(element.tag)) {
	        inPre = false;
	      }
	    },

	    chars: function chars (text) {
	      if (!currentParent) {
	        if (process.env.NODE_ENV !== 'production' && !warned && text === template) {
	          warned = true;
	          warn$1(
	            'Component template requires a root element, rather than just text:\n\n' + template
	          );
	        }
	        return
	      }
	      // IE textarea placeholder bug
	      /* istanbul ignore if */
	      if (isIE &&
	          currentParent.tag === 'textarea' &&
	          currentParent.attrsMap.placeholder === text) {
	        return
	      }
	      var children = currentParent.children;
	      text = inPre || text.trim()
	        ? decodeHTMLCached(text)
	        // only preserve whitespace if its not right after a starting tag
	        : preserveWhitespace && children.length ? ' ' : '';
	      if (text) {
	        var expression;
	        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
	          children.push({
	            type: 2,
	            expression: expression,
	            text: text
	          });
	        } else if (text !== ' ' || children[children.length - 1].text !== ' ') {
	          currentParent.children.push({
	            type: 3,
	            text: text
	          });
	        }
	      }
	    }
	  });
	  return root
	}

	function processPre (el) {
	  if (getAndRemoveAttr(el, 'v-pre') != null) {
	    el.pre = true;
	  }
	}

	function processRawAttrs (el) {
	  var l = el.attrsList.length;
	  if (l) {
	    var attrs = el.attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      attrs[i] = {
	        name: el.attrsList[i].name,
	        value: JSON.stringify(el.attrsList[i].value)
	      };
	    }
	  } else if (!el.pre) {
	    // non root node in pre blocks with no attributes
	    el.plain = true;
	  }
	}

	function processKey (el) {
	  var exp = getBindingAttr(el, 'key');
	  if (exp) {
	    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {
	      warn$1("<template> cannot be keyed. Place the key on real elements instead.");
	    }
	    el.key = exp;
	  }
	}

	function processRef (el) {
	  var ref = getBindingAttr(el, 'ref');
	  if (ref) {
	    el.ref = ref;
	    el.refInFor = checkInFor(el);
	  }
	}

	function processFor (el) {
	  var exp;
	  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
	    var inMatch = exp.match(forAliasRE);
	    if (!inMatch) {
	      process.env.NODE_ENV !== 'production' && warn$1(
	        ("Invalid v-for expression: " + exp)
	      );
	      return
	    }
	    el.for = inMatch[2].trim();
	    var alias = inMatch[1].trim();
	    var iteratorMatch = alias.match(forIteratorRE);
	    if (iteratorMatch) {
	      el.alias = iteratorMatch[1].trim();
	      el.iterator1 = iteratorMatch[2].trim();
	      if (iteratorMatch[3]) {
	        el.iterator2 = iteratorMatch[3].trim();
	      }
	    } else {
	      el.alias = alias;
	    }
	  }
	}

	function processIf (el) {
	  var exp = getAndRemoveAttr(el, 'v-if');
	  if (exp) {
	    el.if = exp;
	    addIfCondition(el, {
	      exp: exp,
	      block: el
	    });
	  } else {
	    if (getAndRemoveAttr(el, 'v-else') != null) {
	      el.else = true;
	    }
	    var elseif = getAndRemoveAttr(el, 'v-else-if');
	    if (elseif) {
	      el.elseif = elseif;
	    }
	  }
	}

	function processIfConditions (el, parent) {
	  var prev = findPrevElement(parent.children);
	  if (prev && prev.if) {
	    addIfCondition(prev, {
	      exp: el.elseif,
	      block: el
	    });
	  } else if (process.env.NODE_ENV !== 'production') {
	    warn$1(
	      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
	      "used on element <" + (el.tag) + "> without corresponding v-if."
	    );
	  }
	}

	function findPrevElement (children) {
	  var i = children.length;
	  while (i--) {
	    if (children[i].type === 1) {
	      return children[i]
	    } else {
	      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {
	        warn$1(
	          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
	          "will be ignored."
	        );
	      }
	      children.pop();
	    }
	  }
	}

	function addIfCondition (el, condition) {
	  if (!el.ifConditions) {
	    el.ifConditions = [];
	  }
	  el.ifConditions.push(condition);
	}

	function processOnce (el) {
	  var once = getAndRemoveAttr(el, 'v-once');
	  if (once != null) {
	    el.once = true;
	  }
	}

	function processSlot (el) {
	  if (el.tag === 'slot') {
	    el.slotName = getBindingAttr(el, 'name');
	    if (process.env.NODE_ENV !== 'production' && el.key) {
	      warn$1(
	        "`key` does not work on <slot> because slots are abstract outlets " +
	        "and can possibly expand into multiple elements. " +
	        "Use the key on a wrapping element instead."
	      );
	    }
	  } else {
	    var slotTarget = getBindingAttr(el, 'slot');
	    if (slotTarget) {
	      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
	    }
	    if (el.tag === 'template') {
	      el.slotScope = getAndRemoveAttr(el, 'scope');
	    }
	  }
	}

	function processComponent (el) {
	  var binding;
	  if ((binding = getBindingAttr(el, 'is'))) {
	    el.component = binding;
	  }
	  if (getAndRemoveAttr(el, 'inline-template') != null) {
	    el.inlineTemplate = true;
	  }
	}

	function processAttrs (el) {
	  var list = el.attrsList;
	  var i, l, name, rawName, value, arg, modifiers, isProp;
	  for (i = 0, l = list.length; i < l; i++) {
	    name = rawName = list[i].name;
	    value = list[i].value;
	    if (dirRE.test(name)) {
	      // mark element as dynamic
	      el.hasBindings = true;
	      // modifiers
	      modifiers = parseModifiers(name);
	      if (modifiers) {
	        name = name.replace(modifierRE, '');
	      }
	      if (bindRE.test(name)) { // v-bind
	        name = name.replace(bindRE, '');
	        value = parseFilters(value);
	        isProp = false;
	        if (modifiers) {
	          if (modifiers.prop) {
	            isProp = true;
	            name = camelize(name);
	            if (name === 'innerHtml') { name = 'innerHTML'; }
	          }
	          if (modifiers.camel) {
	            name = camelize(name);
	          }
	        }
	        if (isProp || platformMustUseProp(el.tag, name)) {
	          addProp(el, name, value);
	        } else {
	          addAttr(el, name, value);
	        }
	      } else if (onRE.test(name)) { // v-on
	        name = name.replace(onRE, '');
	        addHandler(el, name, value, modifiers);
	      } else { // normal directives
	        name = name.replace(dirRE, '');
	        // parse arg
	        var argMatch = name.match(argRE);
	        if (argMatch && (arg = argMatch[1])) {
	          name = name.slice(0, -(arg.length + 1));
	        }
	        addDirective(el, name, rawName, value, arg, modifiers);
	        if (process.env.NODE_ENV !== 'production' && name === 'model') {
	          checkForAliasModel(el, value);
	        }
	      }
	    } else {
	      // literal attribute
	      if (process.env.NODE_ENV !== 'production') {
	        var expression = parseText(value, delimiters);
	        if (expression) {
	          warn$1(
	            name + "=\"" + value + "\": " +
	            'Interpolation inside attributes has been removed. ' +
	            'Use v-bind or the colon shorthand instead. For example, ' +
	            'instead of <div id="{{ val }}">, use <div :id="val">.'
	          );
	        }
	      }
	      addAttr(el, name, JSON.stringify(value));
	      // #4530 also bind special attributes as props even if they are static
	      // so that patches between dynamic/static are consistent
	      if (platformMustUseProp(el.tag, name)) {
	        if (name === 'value') {
	          addProp(el, name, JSON.stringify(value));
	        } else {
	          addProp(el, name, 'true');
	        }
	      }
	    }
	  }
	}

	function checkInFor (el) {
	  var parent = el;
	  while (parent) {
	    if (parent.for !== undefined) {
	      return true
	    }
	    parent = parent.parent;
	  }
	  return false
	}

	function parseModifiers (name) {
	  var match = name.match(modifierRE);
	  if (match) {
	    var ret = {};
	    match.forEach(function (m) { ret[m.slice(1)] = true; });
	    return ret
	  }
	}

	function makeAttrsMap (attrs) {
	  var map = {};
	  for (var i = 0, l = attrs.length; i < l; i++) {
	    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE) {
	      warn$1('duplicate attribute: ' + attrs[i].name);
	    }
	    map[attrs[i].name] = attrs[i].value;
	  }
	  return map
	}

	function isForbiddenTag (el) {
	  return (
	    el.tag === 'style' ||
	    (el.tag === 'script' && (
	      !el.attrsMap.type ||
	      el.attrsMap.type === 'text/javascript'
	    ))
	  )
	}

	var ieNSBug = /^xmlns:NS\d+/;
	var ieNSPrefix = /^NS\d+:/;

	/* istanbul ignore next */
	function guardIESVGBug (attrs) {
	  var res = [];
	  for (var i = 0; i < attrs.length; i++) {
	    var attr = attrs[i];
	    if (!ieNSBug.test(attr.name)) {
	      attr.name = attr.name.replace(ieNSPrefix, '');
	      res.push(attr);
	    }
	  }
	  return res
	}

	function checkForAliasModel (el, value) {
	  var _el = el;
	  while (_el) {
	    if (_el.for && _el.alias === value) {
	      warn$1(
	        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
	        "You are binding v-model directly to a v-for iteration alias. " +
	        "This will not be able to modify the v-for source array because " +
	        "writing to the alias is like modifying a function local variable. " +
	        "Consider using an array of objects and use v-model on an object property instead."
	      );
	    }
	    _el = _el.parent;
	  }
	}

	/*  */

	var isStaticKey;
	var isPlatformReservedTag;

	var genStaticKeysCached = cached(genStaticKeys$1);

	/**
	 * Goal of the optimizer: walk the generated template AST tree
	 * and detect sub-trees that are purely static, i.e. parts of
	 * the DOM that never needs to change.
	 *
	 * Once we detect these sub-trees, we can:
	 *
	 * 1. Hoist them into constants, so that we no longer need to
	 *    create fresh nodes for them on each re-render;
	 * 2. Completely skip them in the patching process.
	 */
	function optimize (root, options) {
	  if (!root) { return }
	  isStaticKey = genStaticKeysCached(options.staticKeys || '');
	  isPlatformReservedTag = options.isReservedTag || no;
	  // first pass: mark all non-static nodes.
	  markStatic(root);
	  // second pass: mark static roots.
	  markStaticRoots(root, false);
	}

	function genStaticKeys$1 (keys) {
	  return makeMap(
	    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
	    (keys ? ',' + keys : '')
	  )
	}

	function markStatic (node) {
	  node.static = isStatic(node);
	  if (node.type === 1) {
	    // do not make component slot content static. this avoids
	    // 1. components not able to mutate slot nodes
	    // 2. static slot content fails for hot-reloading
	    if (
	      !isPlatformReservedTag(node.tag) &&
	      node.tag !== 'slot' &&
	      node.attrsMap['inline-template'] == null
	    ) {
	      return
	    }
	    for (var i = 0, l = node.children.length; i < l; i++) {
	      var child = node.children[i];
	      markStatic(child);
	      if (!child.static) {
	        node.static = false;
	      }
	    }
	  }
	}

	function markStaticRoots (node, isInFor) {
	  if (node.type === 1) {
	    if (node.static || node.once) {
	      node.staticInFor = isInFor;
	    }
	    // For a node to qualify as a static root, it should have children that
	    // are not just static text. Otherwise the cost of hoisting out will
	    // outweigh the benefits and it's better off to just always render it fresh.
	    if (node.static && node.children.length && !(
	      node.children.length === 1 &&
	      node.children[0].type === 3
	    )) {
	      node.staticRoot = true;
	      return
	    } else {
	      node.staticRoot = false;
	    }
	    if (node.children) {
	      for (var i = 0, l = node.children.length; i < l; i++) {
	        markStaticRoots(node.children[i], isInFor || !!node.for);
	      }
	    }
	    if (node.ifConditions) {
	      walkThroughConditionsBlocks(node.ifConditions, isInFor);
	    }
	  }
	}

	function walkThroughConditionsBlocks (conditionBlocks, isInFor) {
	  for (var i = 1, len = conditionBlocks.length; i < len; i++) {
	    markStaticRoots(conditionBlocks[i].block, isInFor);
	  }
	}

	function isStatic (node) {
	  if (node.type === 2) { // expression
	    return false
	  }
	  if (node.type === 3) { // text
	    return true
	  }
	  return !!(node.pre || (
	    !node.hasBindings && // no dynamic bindings
	    !node.if && !node.for && // not v-if or v-for or v-else
	    !isBuiltInTag(node.tag) && // not a built-in
	    isPlatformReservedTag(node.tag) && // not a component
	    !isDirectChildOfTemplateFor(node) &&
	    Object.keys(node).every(isStaticKey)
	  ))
	}

	function isDirectChildOfTemplateFor (node) {
	  while (node.parent) {
	    node = node.parent;
	    if (node.tag !== 'template') {
	      return false
	    }
	    if (node.for) {
	      return true
	    }
	  }
	  return false
	}

	/*  */

	var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
	var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40,
	  'delete': [8, 46]
	};

	var modifierCode = {
	  stop: '$event.stopPropagation();',
	  prevent: '$event.preventDefault();',
	  self: 'if($event.target !== $event.currentTarget)return;',
	  ctrl: 'if(!$event.ctrlKey)return;',
	  shift: 'if(!$event.shiftKey)return;',
	  alt: 'if(!$event.altKey)return;',
	  meta: 'if(!$event.metaKey)return;'
	};

	function genHandlers (events, native) {
	  var res = native ? 'nativeOn:{' : 'on:{';
	  for (var name in events) {
	    res += "\"" + name + "\":" + (genHandler(name, events[name])) + ",";
	  }
	  return res.slice(0, -1) + '}'
	}

	function genHandler (
	  name,
	  handler
	) {
	  if (!handler) {
	    return 'function(){}'
	  } else if (Array.isArray(handler)) {
	    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
	  } else if (!handler.modifiers) {
	    return fnExpRE.test(handler.value) || simplePathRE.test(handler.value)
	      ? handler.value
	      : ("function($event){" + (handler.value) + "}")
	  } else {
	    var code = '';
	    var keys = [];
	    for (var key in handler.modifiers) {
	      if (modifierCode[key]) {
	        code += modifierCode[key];
	      } else {
	        keys.push(key);
	      }
	    }
	    if (keys.length) {
	      code = genKeyFilter(keys) + code;
	    }
	    var handlerCode = simplePathRE.test(handler.value)
	      ? handler.value + '($event)'
	      : handler.value;
	    return 'function($event){' + code + handlerCode + '}'
	  }
	}

	function genKeyFilter (keys) {
	  return ("if(" + (keys.map(genFilterCode).join('&&')) + ")return;")
	}

	function genFilterCode (key) {
	  var keyVal = parseInt(key, 10);
	  if (keyVal) {
	    return ("$event.keyCode!==" + keyVal)
	  }
	  var alias = keyCodes[key];
	  return ("_k($event.keyCode," + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + ")")
	}

	/*  */

	function bind$2 (el, dir) {
	  el.wrapData = function (code) {
	    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ")")
	  };
	}

	/*  */

	var baseDirectives = {
	  bind: bind$2,
	  cloak: noop
	};

	/*  */

	// configurable state
	var warn$2;
	var transforms$1;
	var dataGenFns;
	var platformDirectives$1;
	var isPlatformReservedTag$1;
	var staticRenderFns;
	var onceCount;
	var currentOptions;

	function generate (
	  ast,
	  options
	) {
	  // save previous staticRenderFns so generate calls can be nested
	  var prevStaticRenderFns = staticRenderFns;
	  var currentStaticRenderFns = staticRenderFns = [];
	  var prevOnceCount = onceCount;
	  onceCount = 0;
	  currentOptions = options;
	  warn$2 = options.warn || baseWarn;
	  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');
	  dataGenFns = pluckModuleFunction(options.modules, 'genData');
	  platformDirectives$1 = options.directives || {};
	  isPlatformReservedTag$1 = options.isReservedTag || no;
	  var code = ast ? genElement(ast) : '_c("div")';
	  staticRenderFns = prevStaticRenderFns;
	  onceCount = prevOnceCount;
	  return {
	    render: ("with(this){return " + code + "}"),
	    staticRenderFns: currentStaticRenderFns
	  }
	}

	function genElement (el) {
	  if (el.staticRoot && !el.staticProcessed) {
	    return genStatic(el)
	  } else if (el.once && !el.onceProcessed) {
	    return genOnce(el)
	  } else if (el.for && !el.forProcessed) {
	    return genFor(el)
	  } else if (el.if && !el.ifProcessed) {
	    return genIf(el)
	  } else if (el.tag === 'template' && !el.slotTarget) {
	    return genChildren(el) || 'void 0'
	  } else if (el.tag === 'slot') {
	    return genSlot(el)
	  } else {
	    // component or element
	    var code;
	    if (el.component) {
	      code = genComponent(el.component, el);
	    } else {
	      var data = el.plain ? undefined : genData(el);

	      var children = el.inlineTemplate ? null : genChildren(el, true);
	      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
	    }
	    // module transforms
	    for (var i = 0; i < transforms$1.length; i++) {
	      code = transforms$1[i](el, code);
	    }
	    return code
	  }
	}

	// hoist static sub-trees out
	function genStatic (el) {
	  el.staticProcessed = true;
	  staticRenderFns.push(("with(this){return " + (genElement(el)) + "}"));
	  return ("_m(" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
	}

	// v-once
	function genOnce (el) {
	  el.onceProcessed = true;
	  if (el.if && !el.ifProcessed) {
	    return genIf(el)
	  } else if (el.staticInFor) {
	    var key = '';
	    var parent = el.parent;
	    while (parent) {
	      if (parent.for) {
	        key = parent.key;
	        break
	      }
	      parent = parent.parent;
	    }
	    if (!key) {
	      process.env.NODE_ENV !== 'production' && warn$2(
	        "v-once can only be used inside v-for that is keyed. "
	      );
	      return genElement(el)
	    }
	    return ("_o(" + (genElement(el)) + "," + (onceCount++) + (key ? ("," + key) : "") + ")")
	  } else {
	    return genStatic(el)
	  }
	}

	function genIf (el) {
	  el.ifProcessed = true; // avoid recursion
	  return genIfConditions(el.ifConditions.slice())
	}

	function genIfConditions (conditions) {
	  if (!conditions.length) {
	    return '_e()'
	  }

	  var condition = conditions.shift();
	  if (condition.exp) {
	    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions)))
	  } else {
	    return ("" + (genTernaryExp(condition.block)))
	  }

	  // v-if with v-once should generate code like (a)?_m(0):_m(1)
	  function genTernaryExp (el) {
	    return el.once ? genOnce(el) : genElement(el)
	  }
	}

	function genFor (el) {
	  var exp = el.for;
	  var alias = el.alias;
	  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
	  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
	  el.forProcessed = true; // avoid recursion
	  return "_l((" + exp + ")," +
	    "function(" + alias + iterator1 + iterator2 + "){" +
	      "return " + (genElement(el)) +
	    '})'
	}

	function genData (el) {
	  var data = '{';

	  // directives first.
	  // directives may mutate the el's other properties before they are generated.
	  var dirs = genDirectives(el);
	  if (dirs) { data += dirs + ','; }

	  // key
	  if (el.key) {
	    data += "key:" + (el.key) + ",";
	  }
	  // ref
	  if (el.ref) {
	    data += "ref:" + (el.ref) + ",";
	  }
	  if (el.refInFor) {
	    data += "refInFor:true,";
	  }
	  // pre
	  if (el.pre) {
	    data += "pre:true,";
	  }
	  // record original tag name for components using "is" attribute
	  if (el.component) {
	    data += "tag:\"" + (el.tag) + "\",";
	  }
	  // module data generation functions
	  for (var i = 0; i < dataGenFns.length; i++) {
	    data += dataGenFns[i](el);
	  }
	  // attributes
	  if (el.attrs) {
	    data += "attrs:{" + (genProps(el.attrs)) + "},";
	  }
	  // DOM props
	  if (el.props) {
	    data += "domProps:{" + (genProps(el.props)) + "},";
	  }
	  // event handlers
	  if (el.events) {
	    data += (genHandlers(el.events)) + ",";
	  }
	  if (el.nativeEvents) {
	    data += (genHandlers(el.nativeEvents, true)) + ",";
	  }
	  // slot target
	  if (el.slotTarget) {
	    data += "slot:" + (el.slotTarget) + ",";
	  }
	  // scoped slots
	  if (el.scopedSlots) {
	    data += (genScopedSlots(el.scopedSlots)) + ",";
	  }
	  // inline-template
	  if (el.inlineTemplate) {
	    var inlineTemplate = genInlineTemplate(el);
	    if (inlineTemplate) {
	      data += inlineTemplate + ",";
	    }
	  }
	  data = data.replace(/,$/, '') + '}';
	  // v-bind data wrap
	  if (el.wrapData) {
	    data = el.wrapData(data);
	  }
	  return data
	}

	function genDirectives (el) {
	  var dirs = el.directives;
	  if (!dirs) { return }
	  var res = 'directives:[';
	  var hasRuntime = false;
	  var i, l, dir, needRuntime;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    dir = dirs[i];
	    needRuntime = true;
	    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];
	    if (gen) {
	      // compile-time directive that manipulates AST.
	      // returns true if it also needs a runtime counterpart.
	      needRuntime = !!gen(el, dir, warn$2);
	    }
	    if (needRuntime) {
	      hasRuntime = true;
	      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
	    }
	  }
	  if (hasRuntime) {
	    return res.slice(0, -1) + ']'
	  }
	}

	function genInlineTemplate (el) {
	  var ast = el.children[0];
	  if (process.env.NODE_ENV !== 'production' && (
	    el.children.length > 1 || ast.type !== 1
	  )) {
	    warn$2('Inline-template components must have exactly one child element.');
	  }
	  if (ast.type === 1) {
	    var inlineRenderFns = generate(ast, currentOptions);
	    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
	  }
	}

	function genScopedSlots (slots) {
	  return ("scopedSlots:{" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + "}")
	}

	function genScopedSlot (key, el) {
	  return key + ":function(" + (String(el.attrsMap.scope)) + "){" +
	    "return " + (el.tag === 'template'
	      ? genChildren(el) || 'void 0'
	      : genElement(el)) + "}"
	}

	function genChildren (el, checkSkip) {
	  var children = el.children;
	  if (children.length) {
	    var el$1 = children[0];
	    // optimize single v-for
	    if (children.length === 1 &&
	        el$1.for &&
	        el$1.tag !== 'template' &&
	        el$1.tag !== 'slot') {
	      return genElement(el$1)
	    }
	    var normalizationType = getNormalizationType(children);
	    return ("[" + (children.map(genNode).join(',')) + "]" + (checkSkip
	        ? normalizationType ? ("," + normalizationType) : ''
	        : ''))
	  }
	}

	// determine the normalization needed for the children array.
	// 0: no normalization needed
	// 1: simple normalization needed (possible 1-level deep nested array)
	// 2: full normalization needed
	function getNormalizationType (children) {
	  var res = 0;
	  for (var i = 0; i < children.length; i++) {
	    var el = children[i];
	    if (needsNormalization(el) ||
	        (el.if && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
	      res = 2;
	      break
	    }
	    if (maybeComponent(el) ||
	        (el.if && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
	      res = 1;
	    }
	  }
	  return res
	}

	function needsNormalization (el) {
	  return el.for || el.tag === 'template' || el.tag === 'slot'
	}

	function maybeComponent (el) {
	  return el.type === 1 && !isPlatformReservedTag$1(el.tag)
	}

	function genNode (node) {
	  if (node.type === 1) {
	    return genElement(node)
	  } else {
	    return genText(node)
	  }
	}

	function genText (text) {
	  return ("_v(" + (text.type === 2
	    ? text.expression // no need for () because already wrapped in _s()
	    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
	}

	function genSlot (el) {
	  var slotName = el.slotName || '"default"';
	  var children = genChildren(el);
	  var res = "_t(" + slotName + (children ? ("," + children) : '');
	  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
	  var bind$$1 = el.attrsMap['v-bind'];
	  if ((attrs || bind$$1) && !children) {
	    res += ",null";
	  }
	  if (attrs) {
	    res += "," + attrs;
	  }
	  if (bind$$1) {
	    res += (attrs ? '' : ',null') + "," + bind$$1;
	  }
	  return res + ')'
	}

	// componentName is el.component, take it as argument to shun flow's pessimistic refinement
	function genComponent (componentName, el) {
	  var children = el.inlineTemplate ? null : genChildren(el, true);
	  return ("_c(" + componentName + "," + (genData(el)) + (children ? ("," + children) : '') + ")")
	}

	function genProps (props) {
	  var res = '';
	  for (var i = 0; i < props.length; i++) {
	    var prop = props[i];
	    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
	  }
	  return res.slice(0, -1)
	}

	// #3895, #4268
	function transformSpecialNewlines (text) {
	  return text
	    .replace(/\u2028/g, '\\u2028')
	    .replace(/\u2029/g, '\\u2029')
	}

	/*  */

	/**
	 * Compile a template.
	 */
	function compile$1 (
	  template,
	  options
	) {
	  var ast = parse(template.trim(), options);
	  optimize(ast, options);
	  var code = generate(ast, options);
	  return {
	    ast: ast,
	    render: code.render,
	    staticRenderFns: code.staticRenderFns
	  }
	}

	/*  */

	// operators like typeof, instanceof and in are allowed
	var prohibitedKeywordRE = new RegExp('\\b' + (
	  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
	  'super,throw,while,yield,delete,export,import,return,switch,default,' +
	  'extends,finally,continue,debugger,function,arguments'
	).split(',').join('\\b|\\b') + '\\b');
	// check valid identifier for v-for
	var identRE = /[A-Za-z_$][\w$]*/;
	// strip strings in expressions
	var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

	// detect problematic expressions in a template
	function detectErrors (ast) {
	  var errors = [];
	  if (ast) {
	    checkNode(ast, errors);
	  }
	  return errors
	}

	function checkNode (node, errors) {
	  if (node.type === 1) {
	    for (var name in node.attrsMap) {
	      if (dirRE.test(name)) {
	        var value = node.attrsMap[name];
	        if (value) {
	          if (name === 'v-for') {
	            checkFor(node, ("v-for=\"" + value + "\""), errors);
	          } else {
	            checkExpression(value, (name + "=\"" + value + "\""), errors);
	          }
	        }
	      }
	    }
	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        checkNode(node.children[i], errors);
	      }
	    }
	  } else if (node.type === 2) {
	    checkExpression(node.expression, node.text, errors);
	  }
	}

	function checkFor (node, text, errors) {
	  checkExpression(node.for || '', text, errors);
	  checkIdentifier(node.alias, 'v-for alias', text, errors);
	  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
	  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
	}

	function checkIdentifier (ident, type, text, errors) {
	  if (typeof ident === 'string' && !identRE.test(ident)) {
	    errors.push(("- invalid " + type + " \"" + ident + "\" in expression: " + text));
	  }
	}

	function checkExpression (exp, text, errors) {
	  try {
	    new Function(("return " + exp));
	  } catch (e) {
	    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
	    if (keywordMatch) {
	      errors.push(
	        "- avoid using JavaScript keyword as property name: " +
	        "\"" + (keywordMatch[0]) + "\" in expression " + text
	      );
	    } else {
	      errors.push(("- invalid expression: " + text));
	    }
	  }
	}

	/*  */

	function transformNode (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticClass = getAndRemoveAttr(el, 'class');
	  if (process.env.NODE_ENV !== 'production' && staticClass) {
	    var expression = parseText(staticClass, options.delimiters);
	    if (expression) {
	      warn(
	        "class=\"" + staticClass + "\": " +
	        'Interpolation inside attributes has been removed. ' +
	        'Use v-bind or the colon shorthand instead. For example, ' +
	        'instead of <div class="{{ val }}">, use <div :class="val">.'
	      );
	    }
	  }
	  if (staticClass) {
	    el.staticClass = JSON.stringify(staticClass);
	  }
	  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
	  if (classBinding) {
	    el.classBinding = classBinding;
	  }
	}

	function genData$1 (el) {
	  var data = '';
	  if (el.staticClass) {
	    data += "staticClass:" + (el.staticClass) + ",";
	  }
	  if (el.classBinding) {
	    data += "class:" + (el.classBinding) + ",";
	  }
	  return data
	}

	var klass$1 = {
	  staticKeys: ['staticClass'],
	  transformNode: transformNode,
	  genData: genData$1
	};

	/*  */

	function transformNode$1 (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticStyle = getAndRemoveAttr(el, 'style');
	  if (staticStyle) {
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production') {
	      var expression = parseText(staticStyle, options.delimiters);
	      if (expression) {
	        warn(
	          "style=\"" + staticStyle + "\": " +
	          'Interpolation inside attributes has been removed. ' +
	          'Use v-bind or the colon shorthand instead. For example, ' +
	          'instead of <div style="{{ val }}">, use <div :style="val">.'
	        );
	      }
	    }
	    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
	  }

	  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
	  if (styleBinding) {
	    el.styleBinding = styleBinding;
	  }
	}

	function genData$2 (el) {
	  var data = '';
	  if (el.staticStyle) {
	    data += "staticStyle:" + (el.staticStyle) + ",";
	  }
	  if (el.styleBinding) {
	    data += "style:(" + (el.styleBinding) + "),";
	  }
	  return data
	}

	var style$1 = {
	  staticKeys: ['staticStyle'],
	  transformNode: transformNode$1,
	  genData: genData$2
	};

	var modules$1 = [
	  klass$1,
	  style$1
	];

	/*  */

	var warn$3;

	function model$1 (
	  el,
	  dir,
	  _warn
	) {
	  warn$3 = _warn;
	  var value = dir.value;
	  var modifiers = dir.modifiers;
	  var tag = el.tag;
	  var type = el.attrsMap.type;
	  if (process.env.NODE_ENV !== 'production') {
	    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
	    if (tag === 'input' && dynamicType) {
	      warn$3(
	        "<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" +
	        "v-model does not support dynamic input types. Use v-if branches instead."
	      );
	    }
	  }
	  if (tag === 'select') {
	    genSelect(el, value, modifiers);
	  } else if (tag === 'input' && type === 'checkbox') {
	    genCheckboxModel(el, value, modifiers);
	  } else if (tag === 'input' && type === 'radio') {
	    genRadioModel(el, value, modifiers);
	  } else {
	    genDefaultModel(el, value, modifiers);
	  }
	  // ensure runtime directive metadata
	  return true
	}

	function genCheckboxModel (
	  el,
	  value,
	  modifiers
	) {
	  if (process.env.NODE_ENV !== 'production' &&
	    el.attrsMap.checked != null) {
	    warn$3(
	      "<" + (el.tag) + " v-model=\"" + value + "\" checked>:\n" +
	      "inline checked attributes will be ignored when using v-model. " +
	      'Declare initial values in the component\'s data option instead.'
	    );
	  }
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
	  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
	  addProp(el, 'checked',
	    "Array.isArray(" + value + ")" +
	      "?_i(" + value + "," + valueBinding + ")>-1" + (
	        trueValueBinding === 'true'
	          ? (":(" + value + ")")
	          : (":_q(" + value + "," + trueValueBinding + ")")
	      )
	  );
	  addHandler(el, 'change',
	    "var $$a=" + value + "," +
	        '$$el=$event.target,' +
	        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
	    'if(Array.isArray($$a)){' +
	      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
	          '$$i=_i($$a,$$v);' +
	      "if($$c){$$i<0&&(" + value + "=$$a.concat($$v))}" +
	      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
	    "}else{" + value + "=$$c}",
	    null, true
	  );
	}

	function genRadioModel (
	    el,
	    value,
	    modifiers
	) {
	  if (process.env.NODE_ENV !== 'production' &&
	    el.attrsMap.checked != null) {
	    warn$3(
	      "<" + (el.tag) + " v-model=\"" + value + "\" checked>:\n" +
	      "inline checked attributes will be ignored when using v-model. " +
	      'Declare initial values in the component\'s data option instead.'
	    );
	  }
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
	  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
	  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
	}

	function genDefaultModel (
	  el,
	  value,
	  modifiers
	) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (el.tag === 'input' && el.attrsMap.value) {
	      warn$3(
	        "<" + (el.tag) + " v-model=\"" + value + "\" value=\"" + (el.attrsMap.value) + "\">:\n" +
	        'inline value attributes will be ignored when using v-model. ' +
	        'Declare initial values in the component\'s data option instead.'
	      );
	    }
	    if (el.tag === 'textarea' && el.children.length) {
	      warn$3(
	        "<textarea v-model=\"" + value + "\">:\n" +
	        'inline content inside <textarea> will be ignored when using v-model. ' +
	        'Declare initial values in the component\'s data option instead.'
	      );
	    }
	  }

	  var type = el.attrsMap.type;
	  var ref = modifiers || {};
	  var lazy = ref.lazy;
	  var number = ref.number;
	  var trim = ref.trim;
	  var event = lazy || (isIE && type === 'range') ? 'change' : 'input';
	  var needCompositionGuard = !lazy && type !== 'range';
	  var isNative = el.tag === 'input' || el.tag === 'textarea';

	  var valueExpression = isNative
	    ? ("$event.target.value" + (trim ? '.trim()' : ''))
	    : trim ? "(typeof $event === 'string' ? $event.trim() : $event)" : "$event";
	  valueExpression = number || type === 'number'
	    ? ("_n(" + valueExpression + ")")
	    : valueExpression;

	  var code = genAssignmentCode(value, valueExpression);
	  if (isNative && needCompositionGuard) {
	    code = "if($event.target.composing)return;" + code;
	  }

	  // inputs with type="file" are read only and setting the input's
	  // value will throw an error.
	  if (process.env.NODE_ENV !== 'production' &&
	      type === 'file') {
	    warn$3(
	      "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
	      "File inputs are read only. Use a v-on:change listener instead."
	    );
	  }

	  addProp(el, 'value', isNative ? ("_s(" + value + ")") : ("(" + value + ")"));
	  addHandler(el, event, code, null, true);
	  if (trim || number || type === 'number') {
	    addHandler(el, 'blur', '$forceUpdate()');
	  }
	}

	function genSelect (
	    el,
	    value,
	    modifiers
	) {
	  if (process.env.NODE_ENV !== 'production') {
	    el.children.some(checkOptionWarning);
	  }

	  var number = modifiers && modifiers.number;
	  var assignment = "Array.prototype.filter" +
	    ".call($event.target.options,function(o){return o.selected})" +
	    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
	    "return " + (number ? '_n(val)' : 'val') + "})" +
	    (el.attrsMap.multiple == null ? '[0]' : '');

	  var code = genAssignmentCode(value, assignment);
	  addHandler(el, 'change', code, null, true);
	}

	function checkOptionWarning (option) {
	  if (option.type === 1 &&
	    option.tag === 'option' &&
	    option.attrsMap.selected != null) {
	    warn$3(
	      "<select v-model=\"" + (option.parent.attrsMap['v-model']) + "\">:\n" +
	      'inline selected attributes on <option> will be ignored when using v-model. ' +
	      'Declare initial values in the component\'s data option instead.'
	    );
	    return true
	  }
	  return false
	}

	function genAssignmentCode (value, assignment) {
	  var modelRs = parseModel(value);
	  if (modelRs.idx === null) {
	    return (value + "=" + assignment)
	  } else {
	    return "var $$exp = " + (modelRs.exp) + ", $$idx = " + (modelRs.idx) + ";" +
	      "if (!Array.isArray($$exp)){" +
	        value + "=" + assignment + "}" +
	      "else{$$exp.splice($$idx, 1, " + assignment + ")}"
	  }
	}

	/*  */

	function text (el, dir) {
	  if (dir.value) {
	    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
	  }
	}

	/*  */

	function html (el, dir) {
	  if (dir.value) {
	    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
	  }
	}

	var directives$1 = {
	  model: model$1,
	  text: text,
	  html: html
	};

	/*  */

	var cache = Object.create(null);

	var baseOptions = {
	  expectHTML: true,
	  modules: modules$1,
	  staticKeys: genStaticKeys(modules$1),
	  directives: directives$1,
	  isReservedTag: isReservedTag,
	  isUnaryTag: isUnaryTag,
	  mustUseProp: mustUseProp,
	  getTagNamespace: getTagNamespace,
	  isPreTag: isPreTag
	};

	function compile$$1 (
	  template,
	  options
	) {
	  options = options
	    ? extend(extend({}, baseOptions), options)
	    : baseOptions;
	  return compile$1(template, options)
	}

	function compileToFunctions (
	  template,
	  options,
	  vm
	) {
	  var _warn = (options && options.warn) || warn;
	  // detect possible CSP restriction
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV !== 'production') {
	    try {
	      new Function('return 1');
	    } catch (e) {
	      if (e.toString().match(/unsafe-eval|CSP/)) {
	        _warn(
	          'It seems you are using the standalone build of Vue.js in an ' +
	          'environment with Content Security Policy that prohibits unsafe-eval. ' +
	          'The template compiler cannot work in this environment. Consider ' +
	          'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
	          'templates into render functions.'
	        );
	      }
	    }
	  }
	  var key = options && options.delimiters
	    ? String(options.delimiters) + template
	    : template;
	  if (cache[key]) {
	    return cache[key]
	  }
	  var res = {};
	  var compiled = compile$$1(template, options);
	  res.render = makeFunction(compiled.render);
	  var l = compiled.staticRenderFns.length;
	  res.staticRenderFns = new Array(l);
	  for (var i = 0; i < l; i++) {
	    res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i]);
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (res.render === noop || res.staticRenderFns.some(function (fn) { return fn === noop; })) {
	      _warn(
	        "failed to compile template:\n\n" + template + "\n\n" +
	        detectErrors(compiled.ast).join('\n') +
	        '\n\n',
	        vm
	      );
	    }
	  }
	  return (cache[key] = res)
	}

	function makeFunction (code) {
	  try {
	    return new Function(code)
	  } catch (e) {
	    return noop
	  }
	}

	/*  */

	var idToTemplate = cached(function (id) {
	  var el = query(id);
	  return el && el.innerHTML
	});

	var mount = Vue$3.prototype.$mount;
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && query(el);

	  /* istanbul ignore if */
	  if (el === document.body || el === document.documentElement) {
	    process.env.NODE_ENV !== 'production' && warn(
	      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
	    );
	    return this
	  }

	  var options = this.$options;
	  // resolve template/el and convert to render function
	  if (!options.render) {
	    var template = options.template;
	    if (template) {
	      if (typeof template === 'string') {
	        if (template.charAt(0) === '#') {
	          template = idToTemplate(template);
	          /* istanbul ignore if */
	          if (process.env.NODE_ENV !== 'production' && !template) {
	            warn(
	              ("Template element not found or is empty: " + (options.template)),
	              this
	            );
	          }
	        }
	      } else if (template.nodeType) {
	        template = template.innerHTML;
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          warn('invalid template option:' + template, this);
	        }
	        return this
	      }
	    } else if (el) {
	      template = getOuterHTML(el);
	    }
	    if (template) {
	      var ref = compileToFunctions(template, {
	        warn: warn,
	        shouldDecodeNewlines: shouldDecodeNewlines,
	        delimiters: options.delimiters
	      }, this);
	      var render = ref.render;
	      var staticRenderFns = ref.staticRenderFns;
	      options.render = render;
	      options.staticRenderFns = staticRenderFns;
	    }
	  }
	  return mount.call(this, el, hydrating)
	};

	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 */
	function getOuterHTML (el) {
	  if (el.outerHTML) {
	    return el.outerHTML
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML
	  }
	}

	Vue$3.compile = compileToFunctions;

	module.exports = Vue$3;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), (function() { return this; }())))

/***/ },
/* 28 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Created by afidoss on 19/12/16.
	 */

	var FireBase = __webpack_require__(30);
	var database = FireBase().database();
	var referenceUser = database.ref("users");
	var crypto = __webpack_require__(37);
	var url = __webpack_require__(96);
	var objectUrl = url.parse(location.href, true);

	exports.default = {
	    login: function login(username, password, cb) {
	        var _this = this;

	        console.log(objectUrl);
	        if (objectUrl.auth && objectUrl.auth.pass) {
	            if (cb) cb(true);
	            this.onChange(true);
	            return null;
	        }
	        pretendRequest(username, password, function (res) {
	            if (res.authenticated) {
	                console.log(url.auth);
	                objectUrl.auth = {};
	                objectUrl.auth.username = 'token';
	                objectUrl.auth.password = res.token;
	                console.log(url.format(objectUrl).href);
	                //window.location.href=url.format(objectUrl).href;
	                if (cb) cb(true);
	                _this.onChange(true);
	            } else {
	                if (cb) cb(false);
	                _this.onChange(false);
	            }
	        });
	    },
	    getToken: function getToken() {
	        return objectUrl.auth.pass;
	    },
	    logout: function logout(cb) {
	        delete objectUrl.auth.user;
	        delete objectUrl.auth.pass;
	        if (cb) cb();
	        this.onChange(false);
	    },
	    loggedIn: function loggedIn() {
	        return !!objectUrl.auth.pass;
	    },
	    getUser: function getUser() {
	        referenceUser.orderByChild('token').equalTo(getToken()).once('child_added', function (snap) {
	            return snap;
	        });
	    },
	    onChange: function onChange() {}
	};


	function pretendRequest(username, pass, cb) {
	    //setTimeout(() => {
	    var token = verification(username, pass);
	    if (token) {
	        cb({
	            authenticated: true,
	            token: new updateToken(token).token
	        });
	    } else {
	        cb({ authenticated: false });
	    }

	    /*if (email === 'joe@example.com' && pass === 'password1') {
	        cb({
	            authenticated: true,
	            token: Math.random().toString(36).substring(7)
	        })
	    } else {
	        cb({ authenticated: false })
	    }*/
	    //}, 0)
	}

	function verification(username, password) {
	    //begin search user with the name and search in result user with this password
	    //return the token of the valide user
	    referenceUser.orderByChild('username').equalTo(username).once("value", function (snapshot) {
	        password = crypto.createHmac('sha256', password).digest('hex');
	        console.log(username, pass);
	        snapshot.forEach(function (childSnapshot) {
	            if (childSnapshot.val().password == password) {
	                return childSnapshot.val().token;
	            }
	        });
	        return false;
	    });
	    return "304909LZZ";
	}

	//update token of user by taking token for search user and udapte
	function updateToken(token) {
	    //generate nexw token
	    this.token = Math.random().toString(30).substring(9);
	    //change token of user
	    var a = this.token;
	    this.key = referenceUser.orderByChild('token').equalTo(token).once('child_added', function (snapshot) {
	        if (snapshot.key) {
	            referenceUser.child(snapshot.key).update({ "token": a });
	        }
	        return snapshot.key;
	    });
	    return this;
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Created by afidoss on 19/12/16.
	 */
	var firebase = __webpack_require__(31);
	module.exports = function () {

	    var config = {
	        apiKey: "AIzaSyDl2IbSww9BUt_sCNKvdvxRgkNO3aEXOpw",
	        authDomain: "pap-photo.firebaseapp.com",
	        databaseURL: "https://pap-photo.firebaseio.com",
	        storageBucket: "pap-photo.appspot.com",
	        messagingSenderId: "313281463061"
	    };
	    firebase.initializeApp(config);
	    return firebase;
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Firebase libraries for browser - npm package.
	 *
	 * Usage:
	 *
	 *   firebase = require('firebase');
	 */
	var firebase = __webpack_require__(32);
	__webpack_require__(33);
	__webpack_require__(34);
	__webpack_require__(35);
	__webpack_require__(36);
	module.exports = firebase;


/***/ },
/* 32 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var firebase = (function(){
	/*! @license Firebase v3.6.4
	    Build: 3.6.4-rc.2
	    Terms: https://firebase.google.com/terms/ */
	var firebase = null; (function() { var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)},h="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this,l=function(){l=function(){};h.Symbol||(h.Symbol=ba)},ca=0,ba=function(a){return"jscomp_symbol_"+(a||"")+ca++},n=function(){l();var a=h.Symbol.iterator;a||(a=h.Symbol.iterator=
	h.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&aa(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return m(this)}});n=function(){}},m=function(a){var b=0;return da(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})},da=function(a){n();a={next:a};a[h.Symbol.iterator]=function(){return this};return a},q=this,r=function(){},t=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);
	if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";else if("function"==b&&"undefined"==typeof a.call)return"object";return b},v=function(a){return"function"==t(a)},ea=function(a,
	b,c){return a.call.apply(a.bind,arguments)},fa=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}},w=function(a,b,c){w=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ea:fa;return w.apply(null,arguments)},x=function(a,b){var c=Array.prototype.slice.call(arguments,
	1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}},y=function(a,b){function c(){}c.prototype=b.prototype;a.ba=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.aa=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};var z;z="undefined"!==typeof window?window:"undefined"!==typeof self?self:global;function __extends(a,b){function c(){this.constructor=a}for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d]);a.prototype=null===b?Object.create(b):(c.prototype=b.prototype,new c)}
	function __decorate(a,b,c,d){var e=arguments.length,f=3>e?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d,g;g=z.Reflect;if("object"===typeof g&&"function"===typeof g.decorate)f=g.decorate(a,b,c,d);else for(var k=a.length-1;0<=k;k--)if(g=a[k])f=(3>e?g(f):3<e?g(b,c,f):g(b,c))||f;return 3<e&&f&&Object.defineProperty(b,c,f),f}function __metadata(a,b){var c=z.Reflect;if("object"===typeof c&&"function"===typeof c.metadata)return c.metadata(a,b)}
	var __param=function(a,b){return function(c,d){b(c,d,a)}},__awaiter=function(a,b,c,d){return new (c||(c=Promise))(function(e,f){function g(a){try{p(d.next(a))}catch(u){f(u)}}function k(a){try{p(d.throw(a))}catch(u){f(u)}}function p(a){a.done?e(a.value):(new c(function(b){b(a.value)})).then(g,k)}p((d=d.apply(a,b)).next())})};"undefined"!==typeof z.M&&z.M||(z.__extends=__extends,z.__decorate=__decorate,z.__metadata=__metadata,z.__param=__param,z.__awaiter=__awaiter);var A=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,A);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))};y(A,Error);A.prototype.name="CustomError";var ga=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};var B=function(a,b){b.unshift(a);A.call(this,ga.apply(null,b));b.shift()};y(B,A);B.prototype.name="AssertionError";var ha=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);throw new B(""+e,f||[]);},C=function(a,b,c){a||ha("",null,b,Array.prototype.slice.call(arguments,2))},D=function(a,b,c){v(a)||ha("Expected function but got %s: %s.",[t(a),a],b,Array.prototype.slice.call(arguments,2))};var E=function(a,b,c){this.T=c;this.N=a;this.U=b;this.s=0;this.o=null};E.prototype.get=function(){var a;0<this.s?(this.s--,a=this.o,this.o=a.next,a.next=null):a=this.N();return a};E.prototype.put=function(a){this.U(a);this.s<this.T&&(this.s++,a.next=this.o,this.o=a)};var F;a:{var ia=q.navigator;if(ia){var ja=ia.userAgent;if(ja){F=ja;break a}}F=""};var ka=function(a){q.setTimeout(function(){throw a;},0)},G,la=function(){var a=q.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&-1==F.indexOf("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow,a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+
	"//"+b.location.host,a=w(function(a){if(("*"==d||a.origin==d)&&a.data==c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&-1==F.indexOf("Trident")&&-1==F.indexOf("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.G;c.G=null;a()}};return function(a){d.next={G:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in
	document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){q.setTimeout(a,0)}};var H=function(){this.v=this.f=null},ma=new E(function(){return new I},function(a){a.reset()},100);H.prototype.add=function(a,b){var c=ma.get();c.set(a,b);this.v?this.v.next=c:(C(!this.f),this.f=c);this.v=c};H.prototype.remove=function(){var a=null;this.f&&(a=this.f,this.f=this.f.next,this.f||(this.v=null),a.next=null);return a};var I=function(){this.next=this.scope=this.B=null};I.prototype.set=function(a,b){this.B=a;this.scope=b;this.next=null};
	I.prototype.reset=function(){this.next=this.scope=this.B=null};var M=function(a,b){J||na();L||(J(),L=!0);oa.add(a,b)},J,na=function(){var a=q.Promise;if(-1!=String(a).indexOf("[native code]")){var b=a.resolve(void 0);J=function(){b.then(pa)}}else J=function(){var a=pa;!v(q.setImmediate)||q.Window&&q.Window.prototype&&-1==F.indexOf("Edge")&&q.Window.prototype.setImmediate==q.setImmediate?(G||(G=la()),G(a)):q.setImmediate(a)}},L=!1,oa=new H,pa=function(){for(var a;a=oa.remove();){try{a.B.call(a.scope)}catch(b){ka(b)}ma.put(a)}L=!1};var O=function(a,b){this.b=0;this.L=void 0;this.j=this.g=this.u=null;this.m=this.A=!1;if(a!=r)try{var c=this;a.call(b,function(a){N(c,2,a)},function(a){try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}N(c,3,a)})}catch(d){N(this,3,d)}},qa=function(){this.next=this.context=this.h=this.c=this.child=null;this.w=!1};qa.prototype.reset=function(){this.context=this.h=this.c=this.child=null;this.w=!1};
	var ra=new E(function(){return new qa},function(a){a.reset()},100),sa=function(a,b,c){var d=ra.get();d.c=a;d.h=b;d.context=c;return d},ua=function(a,b,c){ta(a,b,c,null)||M(x(b,a))};O.prototype.then=function(a,b,c){null!=a&&D(a,"opt_onFulfilled should be a function.");null!=b&&D(b,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return va(this,v(a)?a:null,v(b)?b:null,c)};O.prototype.then=O.prototype.then;O.prototype.$goog_Thenable=!0;
	O.prototype.X=function(a,b){return va(this,null,a,b)};var xa=function(a,b){a.g||2!=a.b&&3!=a.b||wa(a);C(null!=b.c);a.j?a.j.next=b:a.g=b;a.j=b},va=function(a,b,c,d){var e=sa(null,null,null);e.child=new O(function(a,g){e.c=b?function(c){try{var e=b.call(d,c);a(e)}catch(K){g(K)}}:a;e.h=c?function(b){try{var e=c.call(d,b);a(e)}catch(K){g(K)}}:g});e.child.u=a;xa(a,e);return e.child};O.prototype.Y=function(a){C(1==this.b);this.b=0;N(this,2,a)};O.prototype.Z=function(a){C(1==this.b);this.b=0;N(this,3,a)};
	var N=function(a,b,c){0==a.b&&(a===c&&(b=3,c=new TypeError("Promise cannot resolve to itself")),a.b=1,ta(c,a.Y,a.Z,a)||(a.L=c,a.b=b,a.u=null,wa(a),3!=b||ya(a,c)))},ta=function(a,b,c,d){if(a instanceof O)return null!=b&&D(b,"opt_onFulfilled should be a function."),null!=c&&D(c,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"),xa(a,sa(b||r,c||null,d)),!0;var e;if(a)try{e=!!a.$goog_Thenable}catch(g){e=!1}else e=!1;if(e)return a.then(b,c,d),
	!0;e=typeof a;if("object"==e&&null!=a||"function"==e)try{var f=a.then;if(v(f))return za(a,f,b,c,d),!0}catch(g){return c.call(d,g),!0}return!1},za=function(a,b,c,d,e){var f=!1,g=function(a){f||(f=!0,c.call(e,a))},k=function(a){f||(f=!0,d.call(e,a))};try{b.call(a,g,k)}catch(p){k(p)}},wa=function(a){a.A||(a.A=!0,M(a.P,a))},Aa=function(a){var b=null;a.g&&(b=a.g,a.g=b.next,b.next=null);a.g||(a.j=null);null!=b&&C(null!=b.c);return b};
	O.prototype.P=function(){for(var a;a=Aa(this);){var b=this.b,c=this.L;if(3==b&&a.h&&!a.w){var d;for(d=this;d&&d.m;d=d.u)d.m=!1}if(a.child)a.child.u=null,Ba(a,b,c);else try{a.w?a.c.call(a.context):Ba(a,b,c)}catch(e){Ca.call(null,e)}ra.put(a)}this.A=!1};var Ba=function(a,b,c){2==b?a.c.call(a.context,c):a.h&&a.h.call(a.context,c)},ya=function(a,b){a.m=!0;M(function(){a.m&&Ca.call(null,b)})},Ca=ka;function P(a,b){if(!(b instanceof Object))return b;switch(b.constructor){case Date:return new Date(b.getTime());case Object:void 0===a&&(a={});break;case Array:a=[];break;default:return b}for(var c in b)b.hasOwnProperty(c)&&(a[c]=P(a[c],b[c]));return a};O.all=function(a){return new O(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c){d--;e[a]=c;0==d&&b(e)},g=function(a){c(a)},k=0,p;k<a.length;k++)p=a[k],ua(p,x(f,k),g);else b(e)})};O.resolve=function(a){if(a instanceof O)return a;var b=new O(r);N(b,2,a);return b};O.reject=function(a){return new O(function(b,c){c(a)})};O.prototype["catch"]=O.prototype.X;var Q=O;"undefined"!==typeof Promise&&(Q=Promise);var Da=Q;function Ea(a,b){a=new R(a,b);return a.subscribe.bind(a)}var R=function(a,b){var c=this;this.a=[];this.K=0;this.task=Da.resolve();this.l=!1;this.D=b;this.task.then(function(){a(c)}).catch(function(a){c.error(a)})};R.prototype.next=function(a){S(this,function(b){b.next(a)})};R.prototype.error=function(a){S(this,function(b){b.error(a)});this.close(a)};R.prototype.complete=function(){S(this,function(a){a.complete()});this.close()};
	R.prototype.subscribe=function(a,b,c){var d=this,e;if(void 0===a&&void 0===b&&void 0===c)throw Error("Missing Observer.");e=Fa(a)?a:{next:a,error:b,complete:c};void 0===e.next&&(e.next=T);void 0===e.error&&(e.error=T);void 0===e.complete&&(e.complete=T);a=this.$.bind(this,this.a.length);this.l&&this.task.then(function(){try{d.H?e.error(d.H):e.complete()}catch(f){}});this.a.push(e);return a};
	R.prototype.$=function(a){void 0!==this.a&&void 0!==this.a[a]&&(delete this.a[a],--this.K,0===this.K&&void 0!==this.D&&this.D(this))};var S=function(a,b){if(!a.l)for(var c=0;c<a.a.length;c++)Ga(a,c,b)},Ga=function(a,b,c){a.task.then(function(){if(void 0!==a.a&&void 0!==a.a[b])try{c(a.a[b])}catch(d){"undefined"!==typeof console&&console.error&&console.error(d)}})};R.prototype.close=function(a){var b=this;this.l||(this.l=!0,void 0!==a&&(this.H=a),this.task.then(function(){b.a=void 0;b.D=void 0}))};
	function Fa(a){if("object"!==typeof a||null===a)return!1;var b;b=["next","error","complete"];n();var c=b[Symbol.iterator];b=c?c.call(b):m(b);for(c=b.next();!c.done;c=b.next())if(c=c.value,c in a&&"function"===typeof a[c])return!0;return!1}function T(){};var Ha=Error.captureStackTrace,V=function(a,b){this.code=a;this.message=b;if(Ha)Ha(this,U.prototype.create);else{var c=Error.apply(this,arguments);this.name="FirebaseError";Object.defineProperty(this,"stack",{get:function(){return c.stack}})}};V.prototype=Object.create(Error.prototype);V.prototype.constructor=V;V.prototype.name="FirebaseError";var U=function(a,b,c){this.V=a;this.W=b;this.O=c;this.pattern=/\{\$([^}]+)}/g};
	U.prototype.create=function(a,b){void 0===b&&(b={});var c=this.O[a];a=this.V+"/"+a;var c=void 0===c?"Error":c.replace(this.pattern,function(a,c){a=b[c];return void 0!==a?a.toString():"<"+c+"?>"}),c=this.W+": "+c+" ("+a+").",c=new V(a,c),d;for(d in b)b.hasOwnProperty(d)&&"_"!==d.slice(-1)&&(c[d]=b[d]);return c};var W=Q,X=function(a,b,c){var d=this;this.I=c;this.J=!1;this.i={};this.C=b;this.F=P(void 0,a);a="serviceAccount"in this.F;("credential"in this.F||a)&&"undefined"!==typeof console&&console.log("The '"+(a?"serviceAccount":"credential")+"' property specified in the first argument to initializeApp() is deprecated and will be removed in the next major version. You should instead use the 'firebase-admin' package. See https://firebase.google.com/docs/admin/setup for details on how to get started.");Object.keys(c.INTERNAL.factories).forEach(function(a){var b=
	c.INTERNAL.useAsService(d,a);null!==b&&(b=d.S.bind(d,b),d[a]=b)})};X.prototype.delete=function(){var a=this;return(new W(function(b){Y(a);b()})).then(function(){a.I.INTERNAL.removeApp(a.C);return W.all(Object.keys(a.i).map(function(b){return a.i[b].INTERNAL.delete()}))}).then(function(){a.J=!0;a.i={}})};X.prototype.S=function(a){Y(this);void 0===this.i[a]&&(this.i[a]=this.I.INTERNAL.factories[a](this,this.R.bind(this)));return this.i[a]};X.prototype.R=function(a){P(this,a)};
	var Y=function(a){a.J&&Z(Ia("deleted",{name:a.C}))};h.Object.defineProperties(X.prototype,{name:{configurable:!0,enumerable:!0,get:function(){Y(this);return this.C}},options:{configurable:!0,enumerable:!0,get:function(){Y(this);return this.F}}});X.prototype.name&&X.prototype.options||X.prototype.delete||console.log("dc");
	function Ja(){function a(a){a=a||"[DEFAULT]";var b=d[a];void 0===b&&Z("noApp",{name:a});return b}function b(a,b){Object.keys(e).forEach(function(d){d=c(a,d);if(null!==d&&f[d])f[d](b,a)})}function c(a,b){if("serverAuth"===b)return null;var c=b;a=a.options;"auth"===b&&(a.serviceAccount||a.credential)&&(c="serverAuth","serverAuth"in e||Z("serverAuthMissing"));return c}var d={},e={},f={},g={__esModule:!0,initializeApp:function(a,c){void 0===c?c="[DEFAULT]":"string"===typeof c&&""!==c||Z("bad-app-name",
	{name:c+""});void 0!==d[c]&&Z("dupApp",{name:c});a=new X(a,c,g);d[c]=a;b(a,"create");void 0!=a.INTERNAL&&void 0!=a.INTERNAL.getToken||P(a,{INTERNAL:{getToken:function(){return W.resolve(null)},addAuthTokenListener:function(){},removeAuthTokenListener:function(){}}});return a},app:a,apps:null,Promise:W,SDK_VERSION:"0.0.0",INTERNAL:{registerService:function(b,c,d,u){e[b]&&Z("dupService",{name:b});e[b]=c;u&&(f[b]=u);c=function(c){void 0===c&&(c=a());return c[b]()};void 0!==d&&P(c,d);return g[b]=c},createFirebaseNamespace:Ja,
	extendNamespace:function(a){P(g,a)},createSubscribe:Ea,ErrorFactory:U,removeApp:function(a){b(d[a],"delete");delete d[a]},factories:e,useAsService:c,Promise:O,deepExtend:P}};g["default"]=g;Object.defineProperty(g,"apps",{get:function(){return Object.keys(d).map(function(a){return d[a]})}});a.App=X;return g}function Z(a,b){throw Error(Ia(a,b));}
	function Ia(a,b){b=b||{};b={noApp:"No Firebase App '"+b.name+"' has been created - call Firebase App.initializeApp().","bad-app-name":"Illegal App name: '"+b.name+"'.",dupApp:"Firebase App named '"+b.name+"' already exists.",deleted:"Firebase App named '"+b.name+"' already deleted.",dupService:"Firebase Service named '"+b.name+"' already registered.",serverAuthMissing:"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain."}[a];
	return void 0===b?"Application Error: ("+a+")":b};"undefined"!==typeof firebase&&(firebase=Ja()); }).call(this);
	firebase.SDK_VERSION = "3.6.4";
	return firebase;}).call(global);
	module.exports = firebase;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var firebase = __webpack_require__(32);
	(function(){
	/*! @license Firebase v3.6.4
	    Build: 3.6.4-rc.2
	    Terms: https://firebase.google.com/terms/ */
	(function(){var h,aa=aa||{},l=this,ba=function(){},m=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&
	!a.propertyIsEnumerable("call"))return"function"}else return"null";else if("function"==b&&"undefined"==typeof a.call)return"object";return b},ca=function(a){return null===a},da=function(a){return"array"==m(a)},ea=function(a){var b=m(a);return"array"==b||"object"==b&&"number"==typeof a.length},p=function(a){return"string"==typeof a},fa=function(a){return"number"==typeof a},q=function(a){return"function"==m(a)},ga=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b},ha=function(a,b,
	c){return a.call.apply(a.bind,arguments)},ia=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}},r=function(a,b,c){r=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ha:ia;return r.apply(null,arguments)},ja=function(a,b){var c=Array.prototype.slice.call(arguments,
	1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}},ka=Date.now||function(){return+new Date},t=function(a,b){function c(){}c.prototype=b.prototype;a.gd=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Af=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};var u=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))};t(u,Error);u.prototype.name="CustomError";var la=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")},ma=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},na=/&/g,oa=/</g,pa=/>/g,qa=/"/g,ra=/'/g,sa=/\x00/g,ta=/[\x00&<>"']/,v=function(a,b){return-1!=a.indexOf(b)},ua=function(a,b){return a<b?-1:a>b?1:0};var va=function(a,b){b.unshift(a);u.call(this,la.apply(null,b));b.shift()};t(va,u);va.prototype.name="AssertionError";
	var wa=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);throw new va(""+e,f||[]);},w=function(a,b,c){a||wa("",null,b,Array.prototype.slice.call(arguments,2))},xa=function(a,b){throw new va("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));},ya=function(a,b,c){fa(a)||wa("Expected number but got %s: %s.",[m(a),a],b,Array.prototype.slice.call(arguments,2));return a},za=function(a,b,c){p(a)||wa("Expected string but got %s: %s.",[m(a),a],b,Array.prototype.slice.call(arguments,
	2))},Aa=function(a,b,c){q(a)||wa("Expected function but got %s: %s.",[m(a),a],b,Array.prototype.slice.call(arguments,2))};var Ba=Array.prototype.indexOf?function(a,b,c){w(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},x=Array.prototype.forEach?function(a,b,c){w(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Ca=function(a,b){for(var c=p(a)?
	a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a)},Da=Array.prototype.map?function(a,b,c){w(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e},Fa=Array.prototype.some?function(a,b,c){w(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1},
	Ha=function(a){var b;a:{b=Ga;for(var c=a.length,d=p(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:p(a)?a.charAt(b):a[b]},Ia=function(a,b){return 0<=Ba(a,b)},Ka=function(a,b){b=Ba(a,b);var c;(c=0<=b)&&Ja(a,b);return c},Ja=function(a,b){w(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length},La=function(a,b){var c=0;Ca(a,function(d,e){b.call(void 0,d,e,a)&&Ja(a,e)&&c++})},Ma=function(a){return Array.prototype.concat.apply(Array.prototype,
	arguments)},Na=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var Oa=function(a,b){for(var c in a)b.call(void 0,a[c],c,a)},Pa=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b},Qa=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b},Ra=function(a){for(var b in a)return!1;return!0},Sa=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(c in b)if(!(c in a))return!1;return!0},Ta=function(a){var b={},c;for(c in a)b[c]=a[c];return b},Ua="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
	Va=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Ua.length;f++)c=Ua[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};var Xa;a:{var Ya=l.navigator;if(Ya){var Za=Ya.userAgent;if(Za){Xa=Za;break a}}Xa=""}var y=function(a){return v(Xa,a)};var $a=function(a){$a[" "](a);return a};$a[" "]=ba;var bb=function(a,b){var c=ab;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var cb=y("Opera"),A=y("Trident")||y("MSIE"),db=y("Edge"),eb=db||A,fb=y("Gecko")&&!(v(Xa.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),gb=v(Xa.toLowerCase(),"webkit")&&!y("Edge"),hb=function(){var a=l.document;return a?a.documentMode:void 0},ib;
	a:{var jb="",kb=function(){var a=Xa;if(fb)return/rv\:([^\);]+)(\)|;)/.exec(a);if(db)return/Edge\/([\d\.]+)/.exec(a);if(A)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(gb)return/WebKit\/(\S+)/.exec(a);if(cb)return/(?:Version)[ \/]?(\S+)/.exec(a)}();kb&&(jb=kb?kb[1]:"");if(A){var lb=hb();if(null!=lb&&lb>parseFloat(jb)){ib=String(lb);break a}}ib=jb}
	var mb=ib,ab={},B=function(a){return bb(a,function(){for(var b=0,c=ma(String(mb)).split("."),d=ma(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",k=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];k=/(\d*)(\D*)(.*)/.exec(k)||["","","",""];if(0==g[0].length&&0==k[0].length)break;b=ua(0==g[1].length?0:parseInt(g[1],10),0==k[1].length?0:parseInt(k[1],10))||ua(0==g[2].length,0==k[2].length)||ua(g[2],k[2]);g=g[3];k=k[3]}while(0==b)}return 0<=b})},nb;var ob=l.document;
	nb=ob&&A?hb()||("CSS1Compat"==ob.compatMode?parseInt(mb,10):5):void 0;var pb=function(a){return Da(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join("")};var qb=null,rb=null,tb=function(a){var b="";sb(a,function(a){b+=String.fromCharCode(a)});return b},sb=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=rb[c];if(null!=e)return e;if(!/^[\s\xa0]*$/.test(c))throw Error("Unknown base64 encoding at char: "+c);}return b}ub();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),k=c(64);if(64===k&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=k&&b(g<<6&192|k))}},ub=function(){if(!qb){qb={};rb={};for(var a=0;65>a;a++)qb[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),
	rb[qb[a]]=a,62<=a&&(rb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)]=a)}};var vb=function(){this.ya=-1};var yb=function(a,b){this.ya=64;this.Pb=l.Uint8Array?new Uint8Array(this.ya):Array(this.ya);this.uc=this.Va=0;this.h=[];this.Xe=a;this.Ad=b;this.wf=l.Int32Array?new Int32Array(64):Array(64);void 0!==wb||(wb=l.Int32Array?new Int32Array(xb):xb);this.reset()},wb;t(yb,vb);for(var zb=[],Ab=0;63>Ab;Ab++)zb[Ab]=0;var Bb=Ma(128,zb);yb.prototype.reset=function(){this.uc=this.Va=0;this.h=l.Int32Array?new Int32Array(this.Ad):Na(this.Ad)};
	var Cb=function(a){var b=a.Pb;w(b.length==a.ya);for(var c=a.wf,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){var e=c[b-15]|0,d=c[b-2]|0,f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0}for(var d=a.h[0]|0,e=a.h[1]|0,k=a.h[2]|0,n=a.h[3]|0,z=a.h[4]|0,Ea=a.h[5]|0,Wa=a.h[6]|0,f=a.h[7]|0,b=0;64>b;b++)var ne=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&k^e&k)|0,g=z&Ea^~z&Wa,f=f+((z>>>6|
	z<<26)^(z>>>11|z<<21)^(z>>>25|z<<7))|0,g=g+(wb[b]|0)|0,g=f+(g+(c[b]|0)|0)|0,f=Wa,Wa=Ea,Ea=z,z=n+g|0,n=k,k=e,e=d,d=g+ne|0;a.h[0]=a.h[0]+d|0;a.h[1]=a.h[1]+e|0;a.h[2]=a.h[2]+k|0;a.h[3]=a.h[3]+n|0;a.h[4]=a.h[4]+z|0;a.h[5]=a.h[5]+Ea|0;a.h[6]=a.h[6]+Wa|0;a.h[7]=a.h[7]+f|0};
	yb.prototype.update=function(a,b){void 0===b&&(b=a.length);var c=0,d=this.Va;if(p(a))for(;c<b;)this.Pb[d++]=a.charCodeAt(c++),d==this.ya&&(Cb(this),d=0);else if(ea(a))for(;c<b;){var e=a[c++];if(!("number"==typeof e&&0<=e&&255>=e&&e==(e|0)))throw Error("message must be a byte array");this.Pb[d++]=e;d==this.ya&&(Cb(this),d=0)}else throw Error("message must be string or array");this.Va=d;this.uc+=b};
	yb.prototype.digest=function(){var a=[],b=8*this.uc;56>this.Va?this.update(Bb,56-this.Va):this.update(Bb,this.ya-(this.Va-56));for(var c=63;56<=c;c--)this.Pb[c]=b&255,b/=256;Cb(this);for(c=b=0;c<this.Xe;c++)for(var d=24;0<=d;d-=8)a[b++]=this.h[c]>>d&255;return a};
	var xb=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
	4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];var Eb=function(){yb.call(this,8,Db)};t(Eb,yb);var Db=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];var Fb=!A||9<=Number(nb),Gb=A&&!B("9");!gb||B("528");fb&&B("1.9b")||A&&B("8")||cb&&B("9.5")||gb&&B("528");fb&&!B("8")||A&&B("9");var Hb=function(){this.Aa=this.Aa;this.fc=this.fc};Hb.prototype.Aa=!1;Hb.prototype.isDisposed=function(){return this.Aa};Hb.prototype.Ra=function(){if(this.fc)for(;this.fc.length;)this.fc.shift()()};var Ib=function(a,b){this.type=a;this.currentTarget=this.target=b;this.defaultPrevented=this.$a=!1;this.Ld=!0};Ib.prototype.preventDefault=function(){this.defaultPrevented=!0;this.Ld=!1};var Jb=function(a,b){Ib.call(this,a?a.type:"");this.relatedTarget=this.currentTarget=this.target=null;this.charCode=this.keyCode=this.button=this.screenY=this.screenX=this.clientY=this.clientX=this.offsetY=this.offsetX=0;this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.qb=this.state=null;a&&this.init(a,b)};t(Jb,Ib);
	Jb.prototype.init=function(a,b){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.currentTarget=b;if(b=a.relatedTarget){if(fb){var e;a:{try{$a(b.nodeName);e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.offsetX=gb||void 0!==a.offsetX?a.offsetX:a.layerX,this.offsetY=gb||void 0!==a.offsetY?a.offsetY:a.layerY,this.clientX=void 0!==a.clientX?a.clientX:
	a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.keyCode=a.keyCode||0;this.charCode=a.charCode||("keypress"==c?a.keyCode:0);this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=a.metaKey;this.state=a.state;this.qb=a;a.defaultPrevented&&
	this.preventDefault()};Jb.prototype.preventDefault=function(){Jb.gd.preventDefault.call(this);var a=this.qb;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Gb)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};Jb.prototype.ze=function(){return this.qb};var Kb="closure_listenable_"+(1E6*Math.random()|0),Lb=0;var Mb=function(a,b,c,d,e){this.listener=a;this.kc=null;this.src=b;this.type=c;this.capture=!!d;this.Xb=e;this.key=++Lb;this.gb=this.Ob=!1},Nb=function(a){a.gb=!0;a.listener=null;a.kc=null;a.src=null;a.Xb=null};var Ob=function(a){this.src=a;this.C={};this.Kb=0};Ob.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.C[f];a||(a=this.C[f]=[],this.Kb++);var g=Pb(a,b,d,e);-1<g?(b=a[g],c||(b.Ob=!1)):(b=new Mb(b,this.src,f,!!d,e),b.Ob=c,a.push(b));return b};Ob.prototype.remove=function(a,b,c,d){a=a.toString();if(!(a in this.C))return!1;var e=this.C[a];b=Pb(e,b,c,d);return-1<b?(Nb(e[b]),Ja(e,b),0==e.length&&(delete this.C[a],this.Kb--),!0):!1};
	var Qb=function(a,b){var c=b.type;c in a.C&&Ka(a.C[c],b)&&(Nb(b),0==a.C[c].length&&(delete a.C[c],a.Kb--))};Ob.prototype.Jc=function(a,b,c,d){a=this.C[a.toString()];var e=-1;a&&(e=Pb(a,b,c,d));return-1<e?a[e]:null};var Pb=function(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.gb&&f.listener==b&&f.capture==!!c&&f.Xb==d)return e}return-1};var Rb="closure_lm_"+(1E6*Math.random()|0),Sb={},Tb=0,Ub=function(a,b,c,d,e){if(da(b))for(var f=0;f<b.length;f++)Ub(a,b[f],c,d,e);else c=Vb(c),a&&a[Kb]?a.listen(b,c,d,e):Wb(a,b,c,!1,d,e)},Wb=function(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=!!e,k=Xb(a);k||(a[Rb]=k=new Ob(a));c=k.add(b,c,d,e,f);if(!c.kc){d=Yb();c.kc=d;d.src=a;d.listener=c;if(a.addEventListener)a.addEventListener(b.toString(),d,g);else if(a.attachEvent)a.attachEvent(Zb(b.toString()),d);else throw Error("addEventListener and attachEvent are unavailable.");
	Tb++}},Yb=function(){var a=$b,b=Fb?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b},ac=function(a,b,c,d,e){if(da(b))for(var f=0;f<b.length;f++)ac(a,b[f],c,d,e);else c=Vb(c),a&&a[Kb]?bc(a,b,c,d,e):Wb(a,b,c,!0,d,e)},cc=function(a,b,c,d,e){if(da(b))for(var f=0;f<b.length;f++)cc(a,b[f],c,d,e);else c=Vb(c),a&&a[Kb]?a.aa.remove(String(b),c,d,e):a&&(a=Xb(a))&&(b=a.Jc(b,c,!!d,e))&&dc(b)},dc=function(a){if(!fa(a)&&a&&!a.gb){var b=a.src;if(b&&
	b[Kb])Qb(b.aa,a);else{var c=a.type,d=a.kc;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent&&b.detachEvent(Zb(c),d);Tb--;(c=Xb(b))?(Qb(c,a),0==c.Kb&&(c.src=null,b[Rb]=null)):Nb(a)}}},Zb=function(a){return a in Sb?Sb[a]:Sb[a]="on"+a},fc=function(a,b,c,d){var e=!0;if(a=Xb(a))if(b=a.C[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.gb&&(f=ec(f,d),e=e&&!1!==f)}return e},ec=function(a,b){var c=a.listener,d=a.Xb||a.src;a.Ob&&dc(a);return c.call(d,
	b)},$b=function(a,b){if(a.gb)return!0;if(!Fb){if(!b)a:{b=["window","event"];for(var c=l,d;d=b.shift();)if(null!=c[d])c=c[d];else{b=null;break a}b=c}d=b;b=new Jb(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.currentTarget;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;!b.$a&&0<=e;e--){b.currentTarget=d[e];var f=fc(d[e],a,!0,b),c=c&&f}for(e=0;!b.$a&&e<d.length;e++)b.currentTarget=
	d[e],f=fc(d[e],a,!1,b),c=c&&f}return c}return ec(a,new Jb(b,this))},Xb=function(a){a=a[Rb];return a instanceof Ob?a:null},gc="__closure_events_fn_"+(1E9*Math.random()>>>0),Vb=function(a){w(a,"Listener can not be null.");if(q(a))return a;w(a.handleEvent,"An object listener must have handleEvent method.");a[gc]||(a[gc]=function(b){return a.handleEvent(b)});return a[gc]};var hc=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;var jc=function(){this.rc="";this.fe=ic};jc.prototype.ac=!0;jc.prototype.Vb=function(){return this.rc};jc.prototype.toString=function(){return"Const{"+this.rc+"}"};var kc=function(a){if(a instanceof jc&&a.constructor===jc&&a.fe===ic)return a.rc;xa("expected object of type Const, got '"+a+"'");return"type_error:Const"},ic={},lc=function(a){var b=new jc;b.rc=a;return b};lc("");var nc=function(){this.ma="";this.ee=mc};nc.prototype.ac=!0;nc.prototype.Vb=function(){return this.ma};nc.prototype.toString=function(){return"SafeUrl{"+this.ma+"}"};
	var oc=function(a){if(a instanceof nc&&a.constructor===nc&&a.ee===mc)return a.ma;xa("expected object of type SafeUrl, got '"+a+"' of type "+m(a));return"type_error:SafeUrl"},pc=/^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i,rc=function(a){if(a instanceof nc)return a;a=a.ac?a.Vb():String(a);pc.test(a)||(a="about:invalid#zClosurez");return qc(a)},mc={},qc=function(a){var b=new nc;b.ma=a;return b};qc("about:blank");var sc=function(a){return/^\s*$/.test(a)?!1:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/(?:"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)[\s\u2028\u2029]*(?=:|,|]|}|$)/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,""))},tc=function(a){a=String(a);if(sc(a))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);},wc=function(a){var b=[];uc(new vc,a,b);return b.join("")},vc=function(){this.mc=void 0},
	uc=function(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(da(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),e=d[f],uc(a,a.mc?a.mc.call(d,String(f),e):e,c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");f="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(e=b[d],"function"!=typeof e&&(c.push(f),xc(d,c),c.push(":"),uc(a,a.mc?a.mc.call(b,d,e):e,c),f=","));c.push("}");return}}switch(typeof b){case "string":xc(b,
	c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}},yc={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},zc=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,xc=function(a,b){b.push('"',a.replace(zc,function(a){var b=yc[a];b||(b="\\u"+(a.charCodeAt(0)|65536).toString(16).substr(1),
	yc[a]=b);return b}),'"')};var Ac=function(){};Ac.prototype.kd=null;var Bc=function(a){return a.kd||(a.kd=a.Oc())};var Cc,Dc=function(){};t(Dc,Ac);Dc.prototype.Qb=function(){var a=Ec(this);return a?new ActiveXObject(a):new XMLHttpRequest};Dc.prototype.Oc=function(){var a={};Ec(this)&&(a[0]=!0,a[1]=!0);return a};
	var Ec=function(a){if(!a.zd&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.zd=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.zd};Cc=new Dc;var Fc=function(){};t(Fc,Ac);Fc.prototype.Qb=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Gc;throw Error("Unsupported browser");};Fc.prototype.Oc=function(){return{}};
	var Gc=function(){this.pa=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseText="";this.status=-1;this.statusText=this.responseXML=null;this.pa.onload=r(this.Ce,this);this.pa.onerror=r(this.wd,this);this.pa.onprogress=r(this.De,this);this.pa.ontimeout=r(this.Ee,this)};h=Gc.prototype;h.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.pa.open(a,b)};
	h.send=function(a){if(a)if("string"==typeof a)this.pa.send(a);else throw Error("Only string data is supported");else this.pa.send()};h.abort=function(){this.pa.abort()};h.setRequestHeader=function(){};h.Ce=function(){this.status=200;this.responseText=this.pa.responseText;Hc(this,4)};h.wd=function(){this.status=500;this.responseText="";Hc(this,4)};h.Ee=function(){this.wd()};h.De=function(){this.status=200;Hc(this,1)};var Hc=function(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange()};var Jc=function(){this.ic="";this.ge=Ic};Jc.prototype.ac=!0;Jc.prototype.Vb=function(){return this.ic};Jc.prototype.toString=function(){return"TrustedResourceUrl{"+this.ic+"}"};var Ic={};var Lc=function(){this.ma="";this.de=Kc};Lc.prototype.ac=!0;Lc.prototype.Vb=function(){return this.ma};Lc.prototype.toString=function(){return"SafeHtml{"+this.ma+"}"};var Mc=function(a){if(a instanceof Lc&&a.constructor===Lc&&a.de===Kc)return a.ma;xa("expected object of type SafeHtml, got '"+a+"' of type "+m(a));return"type_error:SafeHtml"},Kc={};Lc.prototype.Le=function(a){this.ma=a;return this};!fb&&!A||A&&9<=Number(nb)||fb&&B("1.9.1");A&&B("9");var Oc=function(a,b){Oa(b,function(b,d){"style"==d?a.style.cssText=b:"class"==d?a.className=b:"for"==d?a.htmlFor=b:Nc.hasOwnProperty(d)?a.setAttribute(Nc[d],b):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,b):a[d]=b})},Nc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};var Pc=function(a,b,c){this.Pe=c;this.ne=a;this.cf=b;this.ec=0;this.Yb=null};Pc.prototype.get=function(){var a;0<this.ec?(this.ec--,a=this.Yb,this.Yb=a.next,a.next=null):a=this.ne();return a};Pc.prototype.put=function(a){this.cf(a);this.ec<this.Pe&&(this.ec++,a.next=this.Yb,this.Yb=a)};var Qc=function(a){l.setTimeout(function(){throw a;},0)},Rc,Sc=function(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow,a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+"//"+b.location.host,
	a=r(function(a){if(("*"==d||a.origin==d)&&a.data==c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.nd;c.nd=null;a()}};return function(a){d.next={nd:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?
	function(a){var b=document.createElement("SCRIPT");b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){l.setTimeout(a,0)}};var Tc=function(){this.xc=this.La=null},Vc=new Pc(function(){return new Uc},function(a){a.reset()},100);Tc.prototype.add=function(a,b){var c=Vc.get();c.set(a,b);this.xc?this.xc.next=c:(w(!this.La),this.La=c);this.xc=c};Tc.prototype.remove=function(){var a=null;this.La&&(a=this.La,this.La=this.La.next,this.La||(this.xc=null),a.next=null);return a};var Uc=function(){this.next=this.scope=this.Ic=null};Uc.prototype.set=function(a,b){this.Ic=a;this.scope=b;this.next=null};
	Uc.prototype.reset=function(){this.next=this.scope=this.Ic=null};var $c=function(a,b){Wc||Xc();Yc||(Wc(),Yc=!0);Zc.add(a,b)},Wc,Xc=function(){var a=l.Promise;if(-1!=String(a).indexOf("[native code]")){var b=a.resolve(void 0);Wc=function(){b.then(ad)}}else Wc=function(){var a=ad;!q(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(Rc||(Rc=Sc()),Rc(a)):l.setImmediate(a)}},Yc=!1,Zc=new Tc,ad=function(){for(var a;a=Zc.remove();){try{a.Ic.call(a.scope)}catch(b){Qc(b)}Vc.put(a)}Yc=!1};var bd=function(a){a.prototype.then=a.prototype.then;a.prototype.$goog_Thenable=!0},cd=function(a){if(!a)return!1;try{return!!a.$goog_Thenable}catch(b){return!1}};var C=function(a,b){this.N=0;this.na=void 0;this.Pa=this.ja=this.s=null;this.Wb=this.Hc=!1;if(a!=ba)try{var c=this;a.call(b,function(a){dd(c,2,a)},function(a){if(!(a instanceof ed))try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}dd(c,3,a)})}catch(d){dd(this,3,d)}},fd=function(){this.next=this.context=this.Xa=this.Fa=this.child=null;this.ob=!1};fd.prototype.reset=function(){this.context=this.Xa=this.Fa=this.child=null;this.ob=!1};
	var gd=new Pc(function(){return new fd},function(a){a.reset()},100),hd=function(a,b,c){var d=gd.get();d.Fa=a;d.Xa=b;d.context=c;return d},D=function(a){if(a instanceof C)return a;var b=new C(ba);dd(b,2,a);return b},E=function(a){return new C(function(b,c){c(a)})},jd=function(a,b,c){id(a,b,c,null)||$c(ja(b,a))},kd=function(a){return new C(function(b){var c=a.length,d=[];if(c)for(var e=function(a,e,f){c--;d[a]=e?{xe:!0,value:f}:{xe:!1,reason:f};0==c&&b(d)},f=0,g;f<a.length;f++)g=a[f],jd(g,ja(e,f,!0),
	ja(e,f,!1));else b(d)})};C.prototype.then=function(a,b,c){null!=a&&Aa(a,"opt_onFulfilled should be a function.");null!=b&&Aa(b,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return ld(this,q(a)?a:null,q(b)?b:null,c)};bd(C);var nd=function(a,b){b=hd(b,b,void 0);b.ob=!0;md(a,b);return a};C.prototype.c=function(a,b){return ld(this,null,a,b)};C.prototype.cancel=function(a){0==this.N&&$c(function(){var b=new ed(a);od(this,b)},this)};
	var od=function(a,b){if(0==a.N)if(a.s){var c=a.s;if(c.ja){for(var d=0,e=null,f=null,g=c.ja;g&&(g.ob||(d++,g.child==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(0==c.N&&1==d?od(c,b):(f?(d=f,w(c.ja),w(null!=d),d.next==c.Pa&&(c.Pa=d),d.next=d.next.next):pd(c),qd(c,e,3,b)))}a.s=null}else dd(a,3,b)},md=function(a,b){a.ja||2!=a.N&&3!=a.N||rd(a);w(null!=b.Fa);a.Pa?a.Pa.next=b:a.ja=b;a.Pa=b},ld=function(a,b,c,d){var e=hd(null,null,null);e.child=new C(function(a,g){e.Fa=b?function(c){try{var e=b.call(d,c);a(e)}catch(z){g(z)}}:
	a;e.Xa=c?function(b){try{var e=c.call(d,b);void 0===e&&b instanceof ed?g(b):a(e)}catch(z){g(z)}}:g});e.child.s=a;md(a,e);return e.child};C.prototype.pf=function(a){w(1==this.N);this.N=0;dd(this,2,a)};C.prototype.qf=function(a){w(1==this.N);this.N=0;dd(this,3,a)};
	var dd=function(a,b,c){0==a.N&&(a===c&&(b=3,c=new TypeError("Promise cannot resolve to itself")),a.N=1,id(c,a.pf,a.qf,a)||(a.na=c,a.N=b,a.s=null,rd(a),3!=b||c instanceof ed||sd(a,c)))},id=function(a,b,c,d){if(a instanceof C)return null!=b&&Aa(b,"opt_onFulfilled should be a function."),null!=c&&Aa(c,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"),md(a,hd(b||ba,c||null,d)),!0;if(cd(a))return a.then(b,c,d),!0;if(ga(a))try{var e=a.then;if(q(e))return td(a,
	e,b,c,d),!0}catch(f){return c.call(d,f),!0}return!1},td=function(a,b,c,d,e){var f=!1,g=function(a){f||(f=!0,c.call(e,a))},k=function(a){f||(f=!0,d.call(e,a))};try{b.call(a,g,k)}catch(n){k(n)}},rd=function(a){a.Hc||(a.Hc=!0,$c(a.se,a))},pd=function(a){var b=null;a.ja&&(b=a.ja,a.ja=b.next,b.next=null);a.ja||(a.Pa=null);null!=b&&w(null!=b.Fa);return b};C.prototype.se=function(){for(var a;a=pd(this);)qd(this,a,this.N,this.na);this.Hc=!1};
	var qd=function(a,b,c,d){if(3==c&&b.Xa&&!b.ob)for(;a&&a.Wb;a=a.s)a.Wb=!1;if(b.child)b.child.s=null,ud(b,c,d);else try{b.ob?b.Fa.call(b.context):ud(b,c,d)}catch(e){vd.call(null,e)}gd.put(b)},ud=function(a,b,c){2==b?a.Fa.call(a.context,c):a.Xa&&a.Xa.call(a.context,c)},sd=function(a,b){a.Wb=!0;$c(function(){a.Wb&&vd.call(null,b)})},vd=Qc,ed=function(a){u.call(this,a)};t(ed,u);ed.prototype.name="cancel";/*
	 Portions of this code are from MochiKit, received by
	 The Closure Authors under the MIT license. All other code is Copyright
	 2005-2009 The Closure Authors. All Rights Reserved.
	*/
	var wd=function(a,b){this.oc=[];this.Fd=a;this.qd=b||null;this.sb=this.Ta=!1;this.na=void 0;this.ed=this.jd=this.Cc=!1;this.vc=0;this.s=null;this.Dc=0};wd.prototype.cancel=function(a){if(this.Ta)this.na instanceof wd&&this.na.cancel();else{if(this.s){var b=this.s;delete this.s;a?b.cancel(a):(b.Dc--,0>=b.Dc&&b.cancel())}this.Fd?this.Fd.call(this.qd,this):this.ed=!0;this.Ta||xd(this,new yd)}};wd.prototype.od=function(a,b){this.Cc=!1;zd(this,a,b)};
	var zd=function(a,b,c){a.Ta=!0;a.na=c;a.sb=!b;Ad(a)},Cd=function(a){if(a.Ta){if(!a.ed)throw new Bd;a.ed=!1}};wd.prototype.callback=function(a){Cd(this);Dd(a);zd(this,!0,a)};
	var xd=function(a,b){Cd(a);Dd(b);zd(a,!1,b)},Dd=function(a){w(!(a instanceof wd),"An execution sequence may not be initiated with a blocking Deferred.")},Hd=function(a){var b=Ed("https://apis.google.com/js/client.js?onload="+Fd);Gd(b,null,a,void 0)},Gd=function(a,b,c,d){w(!a.jd,"Blocking Deferreds can not be re-used");a.oc.push([b,c,d]);a.Ta&&Ad(a)};wd.prototype.then=function(a,b,c){var d,e,f=new C(function(a,b){d=a;e=b});Gd(this,d,function(a){a instanceof yd?f.cancel():e(a)});return f.then(a,b,c)};
	bd(wd);
	var Id=function(a){return Fa(a.oc,function(a){return q(a[1])})},Ad=function(a){if(a.vc&&a.Ta&&Id(a)){var b=a.vc,c=Jd[b];c&&(l.clearTimeout(c.tb),delete Jd[b]);a.vc=0}a.s&&(a.s.Dc--,delete a.s);for(var b=a.na,d=c=!1;a.oc.length&&!a.Cc;){var e=a.oc.shift(),f=e[0],g=e[1],e=e[2];if(f=a.sb?g:f)try{var k=f.call(e||a.qd,b);void 0!==k&&(a.sb=a.sb&&(k==b||k instanceof Error),a.na=b=k);if(cd(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.Cc=!0}catch(n){b=n,a.sb=!0,Id(a)||(c=!0)}}a.na=b;d&&
	(k=r(a.od,a,!0),d=r(a.od,a,!1),b instanceof wd?(Gd(b,k,d),b.jd=!0):b.then(k,d));c&&(b=new Kd(b),Jd[b.tb]=b,a.vc=b.tb)},Bd=function(){u.call(this)};t(Bd,u);Bd.prototype.message="Deferred has already fired";Bd.prototype.name="AlreadyCalledError";var yd=function(){u.call(this)};t(yd,u);yd.prototype.message="Deferred was canceled";yd.prototype.name="CanceledError";var Kd=function(a){this.tb=l.setTimeout(r(this.nf,this),0);this.P=a};
	Kd.prototype.nf=function(){w(Jd[this.tb],"Cannot throw an error that is not scheduled.");delete Jd[this.tb];throw this.P;};var Jd={};var Ed=function(a){var b=new Jc;b.ic=a;return Ld(b)},Ld=function(a){var b={},c=b.document||document,d;a instanceof Jc&&a.constructor===Jc&&a.ge===Ic?d=a.ic:(xa("expected object of type TrustedResourceUrl, got '"+a+"' of type "+m(a)),d="type_error:TrustedResourceUrl");var e=document.createElement("SCRIPT");a={Md:e,Jb:void 0};var f=new wd(Md,a),g=null,k=null!=b.timeout?b.timeout:5E3;0<k&&(g=window.setTimeout(function(){Nd(e,!0);xd(f,new Od(1,"Timeout reached for loading script "+d))},k),a.Jb=g);e.onload=
	e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(Nd(e,b.Bf||!1,g),f.callback(null))};e.onerror=function(){Nd(e,!0,g);xd(f,new Od(0,"Error while loading script "+d))};a=b.attributes||{};Va(a,{type:"text/javascript",charset:"UTF-8",src:d});Oc(e,a);Pd(c).appendChild(e);return f},Pd=function(a){var b;return(b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement},Md=function(){if(this&&this.Md){var a=this.Md;a&&"SCRIPT"==a.tagName&&
	Nd(a,!0,this.Jb)}},Nd=function(a,b,c){null!=c&&l.clearTimeout(c);a.onload=ba;a.onerror=ba;a.onreadystatechange=ba;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a)},0)},Od=function(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a};t(Od,u);var Qd=function(){Hb.call(this);this.aa=new Ob(this);this.je=this;this.Uc=null};t(Qd,Hb);Qd.prototype[Kb]=!0;h=Qd.prototype;h.addEventListener=function(a,b,c,d){Ub(this,a,b,c,d)};h.removeEventListener=function(a,b,c,d){cc(this,a,b,c,d)};
	h.dispatchEvent=function(a){Rd(this);var b,c=this.Uc;if(c){b=[];for(var d=1;c;c=c.Uc)b.push(c),w(1E3>++d,"infinite loop")}c=this.je;d=a.type||a;if(p(a))a=new Ib(a,c);else if(a instanceof Ib)a.target=a.target||c;else{var e=a;a=new Ib(d,c);Va(a,e)}var e=!0,f;if(b)for(var g=b.length-1;!a.$a&&0<=g;g--)f=a.currentTarget=b[g],e=Sd(f,d,!0,a)&&e;a.$a||(f=a.currentTarget=c,e=Sd(f,d,!0,a)&&e,a.$a||(e=Sd(f,d,!1,a)&&e));if(b)for(g=0;!a.$a&&g<b.length;g++)f=a.currentTarget=b[g],e=Sd(f,d,!1,a)&&e;return e};
	h.Ra=function(){Qd.gd.Ra.call(this);if(this.aa){var a=this.aa,b=0,c;for(c in a.C){for(var d=a.C[c],e=0;e<d.length;e++)++b,Nb(d[e]);delete a.C[c];a.Kb--}}this.Uc=null};h.listen=function(a,b,c,d){Rd(this);return this.aa.add(String(a),b,!1,c,d)};
	var bc=function(a,b,c,d,e){a.aa.add(String(b),c,!0,d,e)},Sd=function(a,b,c,d){b=a.aa.C[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.gb&&g.capture==c){var k=g.listener,n=g.Xb||g.src;g.Ob&&Qb(a.aa,g);e=!1!==k.call(n,d)&&e}}return e&&0!=d.Ld};Qd.prototype.Jc=function(a,b,c,d){return this.aa.Jc(String(a),b,c,d)};var Rd=function(a){w(a.aa,"Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?")};var Td="StopIteration"in l?l.StopIteration:{message:"StopIteration",stack:""},Ud=function(){};Ud.prototype.next=function(){throw Td;};Ud.prototype.ie=function(){return this};var Vd=function(a,b){this.ba={};this.w=[];this.nb=this.o=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else a&&this.addAll(a)};Vd.prototype.Y=function(){Wd(this);for(var a=[],b=0;b<this.w.length;b++)a.push(this.ba[this.w[b]]);return a};Vd.prototype.ka=function(){Wd(this);return this.w.concat()};Vd.prototype.pb=function(a){return Xd(this.ba,a)};
	Vd.prototype.remove=function(a){return Xd(this.ba,a)?(delete this.ba[a],this.o--,this.nb++,this.w.length>2*this.o&&Wd(this),!0):!1};var Wd=function(a){if(a.o!=a.w.length){for(var b=0,c=0;b<a.w.length;){var d=a.w[b];Xd(a.ba,d)&&(a.w[c++]=d);b++}a.w.length=c}if(a.o!=a.w.length){for(var e={},c=b=0;b<a.w.length;)d=a.w[b],Xd(e,d)||(a.w[c++]=d,e[d]=1),b++;a.w.length=c}};h=Vd.prototype;h.get=function(a,b){return Xd(this.ba,a)?this.ba[a]:b};
	h.set=function(a,b){Xd(this.ba,a)||(this.o++,this.w.push(a),this.nb++);this.ba[a]=b};h.addAll=function(a){var b;a instanceof Vd?(b=a.ka(),a=a.Y()):(b=Qa(a),a=Pa(a));for(var c=0;c<b.length;c++)this.set(b[c],a[c])};h.forEach=function(a,b){for(var c=this.ka(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};h.clone=function(){return new Vd(this)};
	h.ie=function(a){Wd(this);var b=0,c=this.nb,d=this,e=new Ud;e.next=function(){if(c!=d.nb)throw Error("The map has changed since the iterator was created");if(b>=d.w.length)throw Td;var e=d.w[b++];return a?e:d.ba[e]};return e};var Xd=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var Yd=function(a){if(a.Y&&"function"==typeof a.Y)return a.Y();if(p(a))return a.split("");if(ea(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Pa(a)},Zd=function(a){if(a.ka&&"function"==typeof a.ka)return a.ka();if(!a.Y||"function"!=typeof a.Y){if(ea(a)||p(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}return Qa(a)}},$d=function(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ea(a)||p(a))x(a,b,void 0);else for(var c=Zd(a),d=Yd(a),e=
	d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)};var ae=function(a,b,c,d,e){this.reset(a,b,c,d,e)};ae.prototype.sd=null;var be=0;ae.prototype.reset=function(a,b,c,d,e){"number"==typeof e||be++;d||ka();this.wb=a;this.Ue=b;delete this.sd};ae.prototype.Pd=function(a){this.wb=a};var ce=function(a){this.Ve=a;this.xd=this.Ec=this.wb=this.s=null},de=function(a,b){this.name=a;this.value=b};de.prototype.toString=function(){return this.name};var ee=new de("SEVERE",1E3),fe=new de("CONFIG",700),ge=new de("FINE",500);ce.prototype.getParent=function(){return this.s};ce.prototype.Pd=function(a){this.wb=a};var he=function(a){if(a.wb)return a.wb;if(a.s)return he(a.s);xa("Root logger has no level set.");return null};
	ce.prototype.log=function(a,b,c){if(a.value>=he(this).value)for(q(b)&&(b=b()),a=new ae(a,String(b),this.Ve),c&&(a.sd=c),c="log:"+a.Ue,l.console&&(l.console.timeStamp?l.console.timeStamp(c):l.console.markTimeline&&l.console.markTimeline(c)),l.msWriteProfilerMark&&l.msWriteProfilerMark(c),c=this;c;){var d=c,e=a;if(d.xd)for(var f=0;b=d.xd[f];f++)b(e);c=c.getParent()}};
	var ie={},je=null,ke=function(a){je||(je=new ce(""),ie[""]=je,je.Pd(fe));var b;if(!(b=ie[a])){b=new ce(a);var c=a.lastIndexOf("."),d=a.substr(c+1),c=ke(a.substr(0,c));c.Ec||(c.Ec={});c.Ec[d]=b;b.s=c;ie[a]=b}return b};var F=function(a,b){a&&a.log(ge,b,void 0)};var le=function(a,b,c){if(q(a))c&&(a=r(a,c));else if(a&&"function"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)},me=function(a){var b=null;return(new C(function(c,d){b=le(function(){c(void 0)},a);-1==b&&d(Error("Failed to schedule timer."))})).c(function(a){l.clearTimeout(b);throw a;})};var oe=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/,pe=function(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e,f=null;0<=d?(e=a[c].substring(0,d),f=a[c].substring(d+1)):e=a[c];b(e,f?decodeURIComponent(f.replace(/\+/g," ")):"")}}};var G=function(a){Qd.call(this);this.headers=new Vd;this.zc=a||null;this.qa=!1;this.yc=this.b=null;this.vb=this.Dd=this.dc="";this.Ca=this.Mc=this.bc=this.Gc=!1;this.kb=0;this.tc=null;this.Kd="";this.wc=this.af=this.$d=!1};t(G,Qd);var qe=G.prototype,re=ke("goog.net.XhrIo");qe.V=re;var se=/^https?$/i,te=["POST","PUT"];
	G.prototype.send=function(a,b,c,d){if(this.b)throw Error("[goog.net.XhrIo] Object is active with another request="+this.dc+"; newUri="+a);b=b?b.toUpperCase():"GET";this.dc=a;this.vb="";this.Dd=b;this.Gc=!1;this.qa=!0;this.b=this.zc?this.zc.Qb():Cc.Qb();this.yc=this.zc?Bc(this.zc):Bc(Cc);this.b.onreadystatechange=r(this.Hd,this);this.af&&"onprogress"in this.b&&(this.b.onprogress=r(function(a){this.Gd(a,!0)},this),this.b.upload&&(this.b.upload.onprogress=r(this.Gd,this)));try{F(this.V,ue(this,"Opening Xhr")),
	this.Mc=!0,this.b.open(b,String(a),!0),this.Mc=!1}catch(f){F(this.V,ue(this,"Error opening Xhr: "+f.message));this.P(5,f);return}a=c||"";var e=this.headers.clone();d&&$d(d,function(a,b){e.set(b,a)});d=Ha(e.ka());c=l.FormData&&a instanceof l.FormData;!Ia(te,b)||d||c||e.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");e.forEach(function(a,b){this.b.setRequestHeader(b,a)},this);this.Kd&&(this.b.responseType=this.Kd);"withCredentials"in this.b&&this.b.withCredentials!==this.$d&&(this.b.withCredentials=
	this.$d);try{ve(this),0<this.kb&&(this.wc=we(this.b),F(this.V,ue(this,"Will abort after "+this.kb+"ms if incomplete, xhr2 "+this.wc)),this.wc?(this.b.timeout=this.kb,this.b.ontimeout=r(this.Jb,this)):this.tc=le(this.Jb,this.kb,this)),F(this.V,ue(this,"Sending request")),this.bc=!0,this.b.send(a),this.bc=!1}catch(f){F(this.V,ue(this,"Send error: "+f.message)),this.P(5,f)}};var we=function(a){return A&&B(9)&&fa(a.timeout)&&void 0!==a.ontimeout},Ga=function(a){return"content-type"==a.toLowerCase()};
	G.prototype.Jb=function(){"undefined"!=typeof aa&&this.b&&(this.vb="Timed out after "+this.kb+"ms, aborting",F(this.V,ue(this,this.vb)),this.dispatchEvent("timeout"),this.abort(8))};G.prototype.P=function(a,b){this.qa=!1;this.b&&(this.Ca=!0,this.b.abort(),this.Ca=!1);this.vb=b;xe(this);ye(this)};var xe=function(a){a.Gc||(a.Gc=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"))};
	G.prototype.abort=function(){this.b&&this.qa&&(F(this.V,ue(this,"Aborting")),this.qa=!1,this.Ca=!0,this.b.abort(),this.Ca=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ye(this))};G.prototype.Ra=function(){this.b&&(this.qa&&(this.qa=!1,this.Ca=!0,this.b.abort(),this.Ca=!1),ye(this,!0));G.gd.Ra.call(this)};G.prototype.Hd=function(){this.isDisposed()||(this.Mc||this.bc||this.Ca?ze(this):this.Ze())};G.prototype.Ze=function(){ze(this)};
	var ze=function(a){if(a.qa&&"undefined"!=typeof aa)if(a.yc[1]&&4==Ae(a)&&2==Be(a))F(a.V,ue(a,"Local request error detected and ignored"));else if(a.bc&&4==Ae(a))le(a.Hd,0,a);else if(a.dispatchEvent("readystatechange"),4==Ae(a)){F(a.V,ue(a,"Request complete"));a.qa=!1;try{var b=Be(a),c;a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.dc).match(oe)[1]||null;if(!f&&l.self&&l.self.location)var g=l.self.location.protocol,
	f=g.substr(0,g.length-1);e=!se.test(f?f.toLowerCase():"")}d=e}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else{var k;try{k=2<Ae(a)?a.b.statusText:""}catch(n){F(a.V,"Can not get status: "+n.message),k=""}a.vb=k+" ["+Be(a)+"]";xe(a)}}finally{ye(a)}}};G.prototype.Gd=function(a,b){w("progress"===a.type,"goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");this.dispatchEvent(Ce(a,"progress"));this.dispatchEvent(Ce(a,b?"downloadprogress":"uploadprogress"))};
	var Ce=function(a,b){return{type:b,lengthComputable:a.lengthComputable,loaded:a.loaded,total:a.total}},ye=function(a,b){if(a.b){ve(a);var c=a.b,d=a.yc[0]?ba:null;a.b=null;a.yc=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d}catch(e){(a=a.V)&&a.log(ee,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}},ve=function(a){a.b&&a.wc&&(a.b.ontimeout=null);fa(a.tc)&&(l.clearTimeout(a.tc),a.tc=null)},Ae=function(a){return a.b?a.b.readyState:0},Be=function(a){try{return 2<Ae(a)?
	a.b.status:-1}catch(b){return-1}},De=function(a){try{return a.b?a.b.responseText:""}catch(b){return F(a.V,"Can not get responseText: "+b.message),""}},ue=function(a,b){return b+" ["+a.Dd+" "+a.dc+" "+Be(a)+"]"};var Ee=function(a,b){this.$=this.Ja=this.da="";this.Za=null;this.Ba=this.sa="";this.S=this.Oe=!1;var c;a instanceof Ee?(this.S=void 0!==b?b:a.S,Fe(this,a.da),c=a.Ja,H(this),this.Ja=c,Ge(this,a.$),He(this,a.Za),Ie(this,a.sa),Je(this,a.D.clone()),a=a.Ba,H(this),this.Ba=a):a&&(c=String(a).match(oe))?(this.S=!!b,Fe(this,c[1]||"",!0),a=c[2]||"",H(this),this.Ja=Ke(a),Ge(this,c[3]||"",!0),He(this,c[4]),Ie(this,c[5]||"",!0),Je(this,c[6]||"",!0),a=c[7]||"",H(this),this.Ba=Ke(a)):(this.S=!!b,this.D=new I(null,
	0,this.S))};Ee.prototype.toString=function(){var a=[],b=this.da;b&&a.push(Le(b,Me,!0),":");var c=this.$;if(c||"file"==b)a.push("//"),(b=this.Ja)&&a.push(Le(b,Me,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.Za,null!=c&&a.push(":",String(c));if(c=this.sa)this.$&&"/"!=c.charAt(0)&&a.push("/"),a.push(Le(c,"/"==c.charAt(0)?Ne:Oe,!0));(c=this.D.toString())&&a.push("?",c);(c=this.Ba)&&a.push("#",Le(c,Pe));return a.join("")};
	Ee.prototype.resolve=function(a){var b=this.clone(),c=!!a.da;c?Fe(b,a.da):c=!!a.Ja;if(c){var d=a.Ja;H(b);b.Ja=d}else c=!!a.$;c?Ge(b,a.$):c=null!=a.Za;d=a.sa;if(c)He(b,a.Za);else if(c=!!a.sa){if("/"!=d.charAt(0))if(this.$&&!this.sa)d="/"+d;else{var e=b.sa.lastIndexOf("/");-1!=e&&(d=b.sa.substr(0,e+1)+d)}e=d;if(".."==e||"."==e)d="";else if(v(e,"./")||v(e,"/.")){for(var d=0==e.lastIndexOf("/",0),e=e.split("/"),f=[],g=0;g<e.length;){var k=e[g++];"."==k?d&&g==e.length&&f.push(""):".."==k?((1<f.length||
	1==f.length&&""!=f[0])&&f.pop(),d&&g==e.length&&f.push("")):(f.push(k),d=!0)}d=f.join("/")}else d=e}c?Ie(b,d):c=""!==a.D.toString();c?Je(b,a.D.clone()):c=!!a.Ba;c&&(a=a.Ba,H(b),b.Ba=a);return b};Ee.prototype.clone=function(){return new Ee(this)};
	var Fe=function(a,b,c){H(a);a.da=c?Ke(b,!0):b;a.da&&(a.da=a.da.replace(/:$/,""))},Ge=function(a,b,c){H(a);a.$=c?Ke(b,!0):b},He=function(a,b){H(a);if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.Za=b}else a.Za=null},Ie=function(a,b,c){H(a);a.sa=c?Ke(b,!0):b},Je=function(a,b,c){H(a);b instanceof I?(a.D=b,a.D.dd(a.S)):(c||(b=Le(b,Qe)),a.D=new I(b,0,a.S))},J=function(a,b,c){H(a);a.D.set(b,c)},Re=function(a,b){H(a);a.D.remove(b)},H=function(a){if(a.Oe)throw Error("Tried to modify a read-only Uri");
	};Ee.prototype.dd=function(a){this.S=a;this.D&&this.D.dd(a);return this};
	var Se=function(a){return a instanceof Ee?a.clone():new Ee(a,void 0)},Te=function(a,b){var c=new Ee(null,void 0);Fe(c,"https");a&&Ge(c,a);b&&Ie(c,b);return c},Ke=function(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""},Le=function(a,b,c){return p(a)?(a=encodeURI(a).replace(b,Ue),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null},Ue=function(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)},Me=/[#\/\?@]/g,Oe=/[\#\?:]/g,Ne=/[\#\?]/g,Qe=/[\#\?@]/g,
	Pe=/#/g,I=function(a,b,c){this.o=this.l=null;this.O=a||null;this.S=!!c},Ve=function(a){a.l||(a.l=new Vd,a.o=0,a.O&&pe(a.O,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c)}))},Xe=function(a){var b=Zd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new I(null,0,void 0);a=Yd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];da(f)?We(c,e,f):c.add(e,f)}return c};h=I.prototype;
	h.add=function(a,b){Ve(this);this.O=null;a=this.R(a);var c=this.l.get(a);c||this.l.set(a,c=[]);c.push(b);this.o=ya(this.o)+1;return this};h.remove=function(a){Ve(this);a=this.R(a);return this.l.pb(a)?(this.O=null,this.o=ya(this.o)-this.l.get(a).length,this.l.remove(a)):!1};h.pb=function(a){Ve(this);a=this.R(a);return this.l.pb(a)};h.ka=function(){Ve(this);for(var a=this.l.Y(),b=this.l.ka(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
	h.Y=function(a){Ve(this);var b=[];if(p(a))this.pb(a)&&(b=Ma(b,this.l.get(this.R(a))));else{a=this.l.Y();for(var c=0;c<a.length;c++)b=Ma(b,a[c])}return b};h.set=function(a,b){Ve(this);this.O=null;a=this.R(a);this.pb(a)&&(this.o=ya(this.o)-this.l.get(a).length);this.l.set(a,[b]);this.o=ya(this.o)+1;return this};h.get=function(a,b){a=a?this.Y(a):[];return 0<a.length?String(a[0]):b};var We=function(a,b,c){a.remove(b);0<c.length&&(a.O=null,a.l.set(a.R(b),Na(c)),a.o=ya(a.o)+c.length)};
	I.prototype.toString=function(){if(this.O)return this.O;if(!this.l)return"";for(var a=[],b=this.l.ka(),c=0;c<b.length;c++)for(var d=b[c],e=encodeURIComponent(String(d)),d=this.Y(d),f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g)}return this.O=a.join("&")};I.prototype.clone=function(){var a=new I;a.O=this.O;this.l&&(a.l=this.l.clone(),a.o=this.o);return a};I.prototype.R=function(a){a=String(a);this.S&&(a=a.toLowerCase());return a};
	I.prototype.dd=function(a){a&&!this.S&&(Ve(this),this.O=null,this.l.forEach(function(a,c){var b=c.toLowerCase();c!=b&&(this.remove(c),We(this,b,a))},this));this.S=a};var Ye=function(){var a=K();return A&&!!nb&&11==nb||/Edge\/\d+/.test(a)},Ze=function(){return l.window&&l.window.location.href||""},$e=function(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):da(a[d])?Sa(a[d],b[d])||c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<$e(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c},bf=function(){var a;a=K();a="Chrome"!=af(a)?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],
	10):null;return a&&30>a?!1:!A||!nb||9<nb},cf=function(a){a=(a||K()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1},df=function(a){a=a||l.window;try{a.close()}catch(b){}},ef=function(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,
	statusbar:!0,toolbar:!1};c=K().toLowerCase();d&&(b.target=d,v(c,"crios/")&&(b.target="_blank"));"Firefox"==af(K())&&(a=a||"http://localhost",b.scrollbars=!0);var g;c=a||"about:blank";(d=b)||(d={});a=window;b=c instanceof nc?c:rc("undefined"!=typeof c.href?c.href:String(c));c=d.target||c.target;e=[];for(g in d)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+d[g]);break;case "target":case "noreferrer":break;default:e.push(g+"="+(d[g]?1:0))}g=e.join(",");(y("iPhone")&&!y("iPod")&&
	!y("iPad")||y("iPad")||y("iPod"))&&a.navigator&&a.navigator.standalone&&c&&"_self"!=c?(g=a.document.createElement("A"),"undefined"!=typeof HTMLAnchorElement&&"undefined"!=typeof Location&&"undefined"!=typeof Element&&(e=g&&(g instanceof HTMLAnchorElement||!(g instanceof Location||g instanceof Element)),f=ga(g)?g.constructor.displayName||g.constructor.name||Object.prototype.toString.call(g):void 0===g?"undefined":null===g?"null":typeof g,w(e,"Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s",
	f)),b=b instanceof nc?b:rc(b),g.href=oc(b),g.setAttribute("target",c),d.noreferrer&&g.setAttribute("rel","noreferrer"),d=document.createEvent("MouseEvent"),d.initMouseEvent("click",!0,!0,a,1),g.dispatchEvent(d),g={}):d.noreferrer?(g=a.open("",c,g),d=oc(b),g&&(eb&&v(d,";")&&(d="'"+d.replace(/'/g,"%27")+"'"),g.opener=null,a=lc("b/12014412, meta tag with sanitized URL"),ta.test(d)&&(-1!=d.indexOf("&")&&(d=d.replace(na,"&amp;")),-1!=d.indexOf("<")&&(d=d.replace(oa,"&lt;")),-1!=d.indexOf(">")&&(d=d.replace(pa,
	"&gt;")),-1!=d.indexOf('"')&&(d=d.replace(qa,"&quot;")),-1!=d.indexOf("'")&&(d=d.replace(ra,"&#39;")),-1!=d.indexOf("\x00")&&(d=d.replace(sa,"&#0;"))),d='<META HTTP-EQUIV="refresh" content="0; url='+d+'">',za(kc(a),"must provide justification"),w(!/^[\s\xa0]*$/.test(kc(a)),"must provide non-empty justification"),g.document.write(Mc((new Lc).Le(d))),g.document.close())):g=a.open(oc(b),c,g);if(g)try{g.focus()}catch(k){}return g},ff=function(a){return new C(function(b){var c=function(){me(2E3).then(function(){if(!a||
	a.closed)b();else return c()})};return c()})},gf=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,hf=function(){var a=null;return(new C(function(b){"complete"==l.document.readyState?b():(a=function(){b()},ac(window,"load",a))})).c(function(b){cc(window,"load",a);throw b;})},kf=function(){return jf(void 0)?hf().then(function(){return new C(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."))},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a()},
	!1)})}):E(Error("Cordova must run in an Android or iOS file scheme."))},jf=function(a){a=a||K();return!("file:"!==lf()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))},L=function(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":l.hasOwnProperty("process")?"Node":"Browser"},mf=function(){var a=L();return"ReactNative"===a||"Node"===a},af=function(a){var b=a.toLowerCase();if(v(b,"opera/")||v(b,"opr/")||v(b,"opios/"))return"Opera";if(v(b,"iemobile"))return"IEMobile";if(v(b,
	"msie")||v(b,"trident/"))return"IE";if(v(b,"edge/"))return"Edge";if(v(b,"firefox/"))return"Firefox";if(v(b,"silk/"))return"Silk";if(v(b,"blackberry"))return"Blackberry";if(v(b,"webos"))return"Webos";if(!v(b,"safari/")||v(b,"chrome/")||v(b,"crios/")||v(b,"android"))if(!v(b,"chrome/")&&!v(b,"crios/")||v(b,"edge/")){if(v(b,"android"))return"Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==a.length)return a[1]}else return"Chrome";else return"Safari";return"Other"},nf=function(a){var b=L();
	return("Browser"===b?af(K()):b)+"/JsCore/"+a},K=function(){return l.navigator&&l.navigator.userAgent||""},M=function(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b},pf=function(){var a;if(a=("http:"===lf()||"https:"===lf()||jf()&&!1)&&!mf())a:{try{var b=l.localStorage,c=of();if(b){b.setItem(c,"1");b.removeItem(c);a=Ye()?!!l.indexedDB:!0;break a}}catch(d){}a=!1}return a},lf=function(){return l.location&&l.location.protocol||
	null},qf=function(a){a=a||K();return cf(a)||"Firefox"==af(a)?!1:!0},rf=function(a){return"undefined"===typeof a?null:wc(a)},sf=function(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b},tf=function(a){if(null!==a){var b;try{b=tc(a)}catch(c){try{b=JSON.parse(a)}catch(d){throw c;}}return b}},of=function(a){return a?a:""+Math.floor(1E9*Math.random()).toString()},uf=function(a){a=a||K();return"Safari"==af(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0},
	vf=function(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null},wf=function(){return l.navigator&&"boolean"===typeof l.navigator.onLine?l.navigator.onLine:!0},xf=function(a,b,c,d){if(a>b)throw Error("Short delay should be less than long delay!");this.kf=a;this.Te=b;a=c||K();d=d||L();this.Ne=cf(a)||"ReactNative"===d};xf.prototype.get=function(){return this.Ne?this.Te:this.kf};var yf;try{var zf={};Object.defineProperty(zf,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(zf,"abcd",{configurable:!0,enumerable:!0,value:2});yf=2==zf.abcd}catch(a){yf=!1}
	var N=function(a,b,c){yf?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c},Af=function(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&N(a,c,b[c])},Bf=function(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b},Cf=function(a,b){if(!b||!b.length)return!0;if(!a)return!1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return!1}return!0},Df=function(a){var b=a;if("object"==typeof a&&null!=a){var b="length"in a?[]:{},c;for(c in a)N(b,c,
	Df(a[c]))}return b};var Ef=["client_id","response_type","scope","redirect_uri","state"],Ff={ae:{Ab:500,zb:600,providerId:"facebook.com",nc:Ef},be:{Ab:500,zb:620,providerId:"github.com",nc:Ef},ce:{Ab:515,zb:680,providerId:"google.com",nc:Ef},he:{Ab:485,zb:705,providerId:"twitter.com",nc:"oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" ")}},Gf=function(a){for(var b in Ff)if(Ff[b].providerId==a)return Ff[b];return null},Hf=function(a){return(a=Gf(a))&&
	a.nc||[]};var O=function(a,b){this.code="auth/"+a;this.message=b||If[a]||""};t(O,Error);O.prototype.F=function(){return{name:this.code,code:this.code,message:this.message}};
	var Jf=function(a){var b=a&&(a.name||a.code);return b?new O(b.substring(5),a.message):null},If={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","cordova-not-ready":"Cordova framework is not ready.",
	"cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.",
	"expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-user-token":"The user's credential is no longer valid. The user must sign in again.","invalid-auth-event":"An internal error has occurred.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin and cordova-plugin-browsertab",
	"invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
	"invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.",
	"invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","missing-iframe-start":"An internal error has occurred.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
	"network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http or https and web storage must be enabled.',
	"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.",
	"user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.",
	"user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};var P=function(a,b,c,d,e){this.ga=a;this.G=b||null;this.mb=c||null;this.cd=d||null;this.P=e||null;if(this.mb||this.P){if(this.mb&&this.P)throw new O("invalid-auth-event");if(this.mb&&!this.cd)throw new O("invalid-auth-event");}else throw new O("invalid-auth-event");};P.prototype.Ub=function(){return this.cd};P.prototype.getError=function(){return this.P};P.prototype.F=function(){return{type:this.ga,eventId:this.G,urlResponse:this.mb,sessionId:this.cd,error:this.P&&this.P.F()}};
	var Kf=function(a){a=a||{};return a.type?new P(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Jf(a.error)):null};var Lf=function(a){var b="unauthorized-domain",c=void 0,d=Se(a);a=d.$;d=d.da;"http"!=d&&"https"!=d?b="operation-not-supported-in-this-environment":c=la("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a);O.call(this,b,c)};t(Lf,O);var Mf=function(a){this.Se=a.sub;ka();this.Rb=a.email||null};var Nf=function(a,b,c,d){var e={};ga(c)?e=c:b&&p(c)&&p(d)?e={oauthToken:c,oauthTokenSecret:d}:!b&&p(c)&&(e={accessToken:c});if(b||!e.idToken&&!e.accessToken)if(b&&e.oauthToken&&e.oauthTokenSecret)N(this,"accessToken",e.oauthToken),N(this,"secret",e.oauthTokenSecret);else{if(b)throw new O("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");throw new O("argument-error","credential failed: expected 1 argument (the OAuth access token).");}else e.idToken&&N(this,
	"idToken",e.idToken),e.accessToken&&N(this,"accessToken",e.accessToken);N(this,"provider",a)};Nf.prototype.Tb=function(a){return Of(a,Pf(this))};Nf.prototype.Ed=function(a,b){var c=Pf(this);c.idToken=b;return Qf(a,c)};var Pf=function(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.provider;return{postBody:Xe(b).toString(),requestUri:pf()?Ze():"http://localhost"}};
	Nf.prototype.F=function(){var a={provider:this.provider};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);return a};
	var Rf=function(a,b,c){var d=!!b,e=c||[];b=function(){Af(this,{providerId:a,isOAuthProvider:!0});this.bd=[];this.pd={};"google.com"==a&&this.addScope("profile")};d||(b.prototype.addScope=function(a){Ia(this.bd,a)||this.bd.push(a)});b.prototype.setCustomParameters=function(a){this.pd=Ta(a)};b.prototype.Ae=function(){var a=sf(this.pd),b;for(b in a)a[b]=a[b].toString();a=Ta(a);for(b=0;b<e.length;b++){var c=e[b];c in a&&delete a[c]}return a};b.prototype.Be=function(){return Na(this.bd)};b.credential=
	function(b,c){return new Nf(a,d,b,c)};Af(b,{PROVIDER_ID:a});return b},Sf=Rf("facebook.com",!1,Hf("facebook.com"));Sf.prototype.addScope=Sf.prototype.addScope||void 0;var Tf=Rf("github.com",!1,Hf("github.com"));Tf.prototype.addScope=Tf.prototype.addScope||void 0;var Uf=Rf("google.com",!1,Hf("google.com"));Uf.prototype.addScope=Uf.prototype.addScope||void 0;
	Uf.credential=function(a,b){if(!a&&!b)throw new O("argument-error","credential failed: must provide the ID token and/or the access token.");return new Nf("google.com",!1,ga(a)?a:{idToken:a||null,accessToken:b||null})};var Vf=Rf("twitter.com",!0,Hf("twitter.com")),Wf=function(a,b){this.Rb=a;this.Vc=b;N(this,"provider","password")};Wf.prototype.Tb=function(a){return Q(a,Xf,{email:this.Rb,password:this.Vc})};Wf.prototype.Ed=function(a,b){return Q(a,Yf,{idToken:b,email:this.Rb,password:this.Vc})};
	Wf.prototype.F=function(){return{email:this.Rb,password:this.Vc}};var Zf=function(){Af(this,{providerId:"password",isOAuthProvider:!1})};Af(Zf,{PROVIDER_ID:"password"});
	var $f={zf:Zf,ae:Sf,ce:Uf,be:Tf,he:Vf},ag=function(a){var b=a&&a.providerId;if(!b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret;a=a&&a.oauthIdToken;for(var e in $f)if($f[e].PROVIDER_ID==b)try{return $f[e].credential({accessToken:c,idToken:a,oauthToken:c,oauthTokenSecret:d})}catch(f){break}return null},bg=function(a){if(!a.isOAuthProvider)throw new O("invalid-oauth-provider");};var cg=function(a,b,c,d){O.call(this,a,d);N(this,"email",b);N(this,"credential",c)};t(cg,O);cg.prototype.F=function(){var a={code:this.code,message:this.message,email:this.email},b=this.credential&&this.credential.F();b&&(Va(a,b),a.providerId=b.provider,delete a.provider);return a};var dg=function(a){if(a.code){var b=a.code||"";0==b.indexOf("auth/")&&(b=b.substring(5));return a.email?new cg(b,a.email,ag(a),a.message):new O(b,a.message||void 0)}return null};var eg=function(a){this.yf=a};t(eg,Ac);eg.prototype.Qb=function(){return new this.yf};eg.prototype.Oc=function(){return{}};
	var R=function(a,b,c){var d;d="Node"==L();d=l.XMLHttpRequest||d&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!d)throw new O("internal-error","The XMLHttpRequest compatibility library was not found.");this.j=a;a=b||{};this.ff=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.gf=a.secureTokenTimeout||fg;this.Nd=Ta(a.secureTokenHeaders||gg);this.ve=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.we=a.firebaseTimeout||
	hg;this.ud=Ta(a.firebaseHeaders||ig);c&&(this.ud["X-Client-Version"]=c,this.Nd["X-Client-Version"]=c);this.me=new Fc;this.xf=new eg(d)},jg,fg=new xf(1E4,3E4),gg={"Content-Type":"application/x-www-form-urlencoded"},hg=new xf(1E4,3E4),ig={"Content-Type":"application/json"},lg=function(a,b,c,d,e,f,g){wf()?(bf()?a=r(a.jf,a):(jg||(jg=new C(function(a,b){kg(a,b)})),a=r(a.hf,a)),a(b,c,d,e,f,g)):c&&c(null)};
	R.prototype.jf=function(a,b,c,d,e,f){var g="Node"==L(),k=mf()?g?new G(this.xf):new G:new G(this.me),n;f&&(k.kb=Math.max(0,f),n=setTimeout(function(){k.dispatchEvent("timeout")},f));k.listen("complete",function(){n&&clearTimeout(n);var a=null;try{var c;c=this.b?tc(this.b.responseText):void 0;a=c||null}catch(Wa){try{a=JSON.parse(De(this))||null}catch(ne){a=null}}b&&b(a)});bc(k,"ready",function(){n&&clearTimeout(n);this.Aa||(this.Aa=!0,this.Ra())});bc(k,"timeout",function(){n&&clearTimeout(n);this.Aa||
	(this.Aa=!0,this.Ra());b&&b(null)});k.send(a,c,d,e)};var Fd="__fcb"+Math.floor(1E6*Math.random()).toString(),kg=function(a,b){((window.gapi||{}).client||{}).request?a():(l[Fd]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"))},Hd(function(){b(Error("CORS_UNSUPPORTED"))}))};
	R.prototype.hf=function(a,b,c,d,e){var f=this;jg.then(function(){window.gapi.client.setApiKey(f.j);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(a){window.gapi.auth.setToken(g);b&&b(a)}})}).c(function(a){b&&b({error:{message:a&&a.message||"CORS_UNSUPPORTED"}})})};
	var ng=function(a,b){return new C(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?lg(a,a.ff+"?key="+encodeURIComponent(a.j),function(a){a?a.error?d(mg(a)):a.access_token&&a.refresh_token?c(a):d(new O("internal-error")):d(new O("network-request-failed"))},"POST",Xe(b).toString(),a.Nd,a.gf.get()):d(new O("internal-error"))})},og=function(a,b,c,d,e){var f=Se(a.ve+b);J(f,"key",a.j);e&&J(f,"cb",ka().toString());var g="GET"==c;if(g)for(var k in d)d.hasOwnProperty(k)&&
	J(f,k,d[k]);return new C(function(b,e){lg(a,f.toString(),function(a){a?a.error?e(mg(a)):b(a):e(new O("network-request-failed"))},c,g?void 0:wc(sf(d)),a.ud,a.we.get())})},pg=function(a){if(!hc.test(a.email))throw new O("invalid-email");},qg=function(a){"email"in a&&pg(a)},sg=function(a,b){var c=pf()?Ze():"http://localhost";return Q(a,rg,{identifier:b,continueUri:c}).then(function(a){return a.allProviders||[]})},ug=function(a){return Q(a,tg,{}).then(function(a){return a.authorizedDomains||[]})},vg=
	function(a){if(!a.idToken)throw new O("internal-error");};R.prototype.signInAnonymously=function(){return Q(this,wg,{})};R.prototype.updateEmail=function(a,b){return Q(this,xg,{idToken:a,email:b})};R.prototype.updatePassword=function(a,b){return Q(this,Yf,{idToken:a,password:b})};var yg={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};
	R.prototype.updateProfile=function(a,b){var c={idToken:a},d=[];Oa(yg,function(a,f){var e=b[f];null===e?d.push(a):f in b&&(c[f]=e)});d.length&&(c.deleteAttribute=d);return Q(this,xg,c)};R.prototype.sendPasswordResetEmail=function(a){return Q(this,zg,{requestType:"PASSWORD_RESET",email:a})};R.prototype.sendEmailVerification=function(a){return Q(this,Ag,{requestType:"VERIFY_EMAIL",idToken:a})};
	var Cg=function(a,b,c){return Q(a,Bg,{idToken:b,deleteProvider:c})},Dg=function(a){if(!a.requestUri||!a.sessionId&&!a.postBody)throw new O("internal-error");},Eg=function(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=dg(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=dg(a)):"EMAIL_EXISTS"==a.errorMessage&&(a.code="email-already-in-use",b=dg(a));if(b)throw b;if(!a.idToken)throw new O("internal-error");},Of=function(a,
	b){b.returnIdpCredential=!0;return Q(a,Fg,b)},Qf=function(a,b){b.returnIdpCredential=!0;return Q(a,Gg,b)},Hg=function(a){if(!a.oobCode)throw new O("invalid-action-code");};R.prototype.confirmPasswordReset=function(a,b){return Q(this,Ig,{oobCode:a,newPassword:b})};R.prototype.checkActionCode=function(a){return Q(this,Jg,{oobCode:a})};R.prototype.applyActionCode=function(a){return Q(this,Kg,{oobCode:a})};
	var Kg={endpoint:"setAccountInfo",M:Hg,ib:"email"},Jg={endpoint:"resetPassword",M:Hg,va:function(a){if(!a.email||!a.requestType)throw new O("internal-error");}},Lg={endpoint:"signupNewUser",M:function(a){pg(a);if(!a.password)throw new O("weak-password");},va:vg,wa:!0},rg={endpoint:"createAuthUri"},Mg={endpoint:"deleteAccount",hb:["idToken"]},Bg={endpoint:"setAccountInfo",hb:["idToken","deleteProvider"],M:function(a){if(!da(a.deleteProvider))throw new O("internal-error");}},Ng={endpoint:"getAccountInfo"},
	Ag={endpoint:"getOobConfirmationCode",hb:["idToken","requestType"],M:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new O("internal-error");},ib:"email"},zg={endpoint:"getOobConfirmationCode",hb:["requestType"],M:function(a){if("PASSWORD_RESET"!=a.requestType)throw new O("internal-error");pg(a)},ib:"email"},tg={le:!0,endpoint:"getProjectConfig",He:"GET"},Ig={endpoint:"resetPassword",M:Hg,ib:"email"},xg={endpoint:"setAccountInfo",hb:["idToken"],M:qg,wa:!0},Yf={endpoint:"setAccountInfo",hb:["idToken"],
	M:function(a){qg(a);if(!a.password)throw new O("weak-password");},va:vg,wa:!0},wg={endpoint:"signupNewUser",va:vg,wa:!0},Fg={endpoint:"verifyAssertion",M:Dg,va:Eg,wa:!0},Gg={endpoint:"verifyAssertion",M:function(a){Dg(a);if(!a.idToken)throw new O("internal-error");},va:Eg,wa:!0},Og={endpoint:"verifyCustomToken",M:function(a){if(!a.token)throw new O("invalid-custom-token");},va:vg,wa:!0},Xf={endpoint:"verifyPassword",M:function(a){pg(a);if(!a.password)throw new O("wrong-password");},va:vg,wa:!0},Q=
	function(a,b,c){if(!Cf(c,b.hb))return E(new O("internal-error"));var d=b.He||"POST",e;return D(c).then(b.M).then(function(){b.wa&&(c.returnSecureToken=!0);return og(a,b.endpoint,d,c,b.le||!1)}).then(function(a){return e=a}).then(b.va).then(function(){if(!b.ib)return e;if(!(b.ib in e))throw new O("internal-error");return e[b.ib]})},mg=function(a){var b,c;c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?
	new O(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",
	FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",
	TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled"};b=(b=c.match(/^[^\s]+\s*:\s*(.*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new O(d[e],b);!b&&a&&(b=rf(a));return new O("internal-error",b)};var Pg=function(a){this.W=a};Pg.prototype.value=function(){return this.W};Pg.prototype.Qd=function(a){this.W.style=a;return this};var Qg=function(a){this.W=a||{}};Qg.prototype.value=function(){return this.W};Qg.prototype.Qd=function(a){this.W.style=a;return this};var Sg=function(a){this.vf=a;this.$b=null;this.Tc=Rg(this)},Tg=function(a){var b=new Qg;b.W.where=document.body;b.W.url=a.vf;b.W.messageHandlersFilter=M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER");b.W.attributes=b.W.attributes||{};(new Pg(b.W.attributes)).Qd({position:"absolute",top:"-100px",width:"1px",height:"1px"});b.W.dontclear=!0;return b},Rg=function(a){return Ug().then(function(){return new C(function(b,c){M("gapi.iframes.getContext")().open(Tg(a).value(),function(d){a.$b=d;a.$b.restyle({setHideOnLeave:!1});
	var e=setTimeout(function(){c(Error("Network Error"))},Vg.get()),f=function(){clearTimeout(e);b()};d.ping(f).then(f,function(){c(Error("Network Error"))})})})})};Sg.prototype.sendMessage=function(a){var b=this;return this.Tc.then(function(){return new C(function(c){b.$b.send(a.type,a,c,M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})};
	var Wg=function(a,b){a.Tc.then(function(){a.$b.register("authEvent",b,M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})},Xg=new xf(3E3,15E3),Vg=new xf(5E3,15E3),Ug=function(){return new C(function(a,b){if(wf()){var c=function(){vf();M("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){vf();b(Error("Network Error"))},timeout:Xg.get()})};if(M("gapi.iframes.Iframe"))a();else if(M("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){M("gapi.load")?
	c():b(Error("Network Error"))};D(Ed("https://apis.google.com/js/api.js?onload="+d)).c(function(){b(Error("Network Error"))})}}else b(Error("Network Error"))})};var Yg=function(a,b,c){this.v=a;this.j=b;this.B=c;this.Ka=null;this.Lb=Te(this.v,"/__/auth/iframe");J(this.Lb,"apiKey",this.j);J(this.Lb,"appName",this.B)};Yg.prototype.setVersion=function(a){this.Ka=a;return this};Yg.prototype.toString=function(){this.Ka?J(this.Lb,"v",this.Ka):Re(this.Lb,"v");return this.Lb.toString()};var Zg=function(a,b,c,d,e){this.v=a;this.j=b;this.B=c;this.ke=d;this.Ka=this.G=this.$c=null;this.jc=e};Zg.prototype.setVersion=function(a){this.Ka=a;return this};
	Zg.prototype.toString=function(){var a=Te(this.v,"/__/auth/handler");J(a,"apiKey",this.j);J(a,"appName",this.B);J(a,"authType",this.ke);if(this.jc.isOAuthProvider){J(a,"providerId",this.jc.providerId);var b=this.jc.Be();b&&b.length&&J(a,"scopes",b.join(","));b=this.jc.Ae();Ra(b)||J(a,"customParameters",rf(b))}this.$c?J(a,"redirectUrl",this.$c):Re(a,"redirectUrl");this.G?J(a,"eventId",this.G):Re(a,"eventId");this.Ka?J(a,"v",this.Ka):Re(a,"v");if(this.Mb)for(var c in this.Mb)this.Mb.hasOwnProperty(c)&&
	!a.D.get(c)&&J(a,c,this.Mb[c]);return a.toString()};
	var $g=function(a,b,c,d){this.v=a;this.j=b;this.B=c;this.ye=(this.za=d||null)?nf(this.za):null;d=this.za;this.Ie=(new Yg(a,b,c)).setVersion(d).toString();this.ia=[];this.g=new R(b,null,this.ye);this.cc=this.ra=null},ah=function(a){var b=Ze();return ug(a).then(function(a){a:{for(var c=Se(b),e=c.da,c=c.$,f=0;f<a.length;f++){var g;var k=a[f];g=c;var n=e;0==k.indexOf("chrome-extension://")?g=Se(k).$==g&&"chrome-extension"==n:"http"!=n&&"https"!=n?g=!1:gf.test(k)?g=g==k:(k=k.split(".").join("\\."),g=(new RegExp("^(.+\\."+
	k+"|"+k+")$","i")).test(g));if(g){a=!0;break a}}a=!1}if(!a)throw new Lf(Ze());})};h=$g.prototype;h.ub=function(){if(this.cc)return this.cc;var a=this;return this.cc=hf().then(function(){a.Zb=new Sg(a.Ie);bh(a)})};h.Gb=function(a,b,c){var d=new O("popup-closed-by-user"),e=new O("web-storage-unsupported"),f=this,g=!1;return this.Da().then(function(){ch(f).then(function(c){c||(a&&df(a),b(e),g=!0)})}).c(function(){}).then(function(){if(!g)return ff(a)}).then(function(){if(!g)return me(c).then(function(){b(d)})})};
	h.Rd=function(){var a=K();return!qf(a)&&!uf(a)};h.yd=function(){return!1};
	h.Bb=function(a,b,c,d,e,f,g){if(!a)return E(new O("popup-blocked"));if(g)return this.Da().c(function(b){df(a);e(b)}),d(),D();this.ra||(this.ra=ah(this.g));var k=this;return this.ra.then(function(){var b=k.Da().c(function(b){df(a);e(b);throw b;});d();return b}).then(function(){bg(c);var d=dh(k.v,k.j,k.B,b,c,null,f,k.za);(a||l.window).location.href=oc(rc(d))}).c(function(a){"auth/network-request-failed"==a.code&&(k.ra=null);throw a;})};
	h.Cb=function(a,b,c){this.ra||(this.ra=ah(this.g));var d=this;return this.ra.then(function(){bg(b);var e=dh(d.v,d.j,d.B,a,b,Ze(),c,d.za);l.window.location.href=oc(rc(e))})};h.Da=function(){var a=this;return this.ub().then(function(){return a.Zb.Tc}).c(function(){a.ra=null;throw new O("network-request-failed");})};h.Vd=function(){return!0};
	var dh=function(a,b,c,d,e,f,g,k,n){a=new Zg(a,b,c,d,e);a.$c=f;a.G=g;f=a.setVersion(k);f.Mb=Ta(n||null);return f.toString()},bh=function(a){if(!a.Zb)throw Error("IfcHandler must be initialized!");Wg(a.Zb,function(b){var c={};if(b&&b.authEvent){var d=!1;b=Kf(b.authEvent);for(c=0;c<a.ia.length;c++)d=a.ia[c](b)||d;c={};c.status=d?"ACK":"ERROR";return D(c)}c.status="ERROR";return D(c)})},ch=function(a){var b={type:"webStorageSupport"};return a.ub().then(function(){return a.Zb.sendMessage(b)}).then(function(a){if(a&&
	a.length&&"undefined"!==typeof a[0].webStorageSupport)return a[0].webStorageSupport;throw Error();})};$g.prototype.Ma=function(a){this.ia.push(a)};$g.prototype.Fb=function(a){La(this.ia,function(b){return b==a})};var eh=function(a){this.A=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.A)throw new O("internal-error","The React Native compatibility library was not found.");};h=eh.prototype;h.get=function(a){return D(this.A.getItem(a)).then(function(a){return a&&tf(a)})};h.set=function(a,b){return D(this.A.setItem(a,rf(b)))};h.remove=function(a){return D(this.A.removeItem(a))};h.Na=function(){};h.fb=function(){};var fh=function(){this.A={}};h=fh.prototype;h.get=function(a){return D(this.A[a])};h.set=function(a,b){this.A[a]=b;return D()};h.remove=function(a){delete this.A[a];return D()};h.Na=function(){};h.fb=function(){};var hh=function(){if(!gh()){if("Node"==L())throw new O("internal-error","The LocalStorage compatibility library was not found.");throw new O("web-storage-unsupported");}this.A=l.localStorage||firebase.INTERNAL.node.localStorage},gh=function(){var a="Node"==L(),a=l.localStorage||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}};h=hh.prototype;
	h.get=function(a){var b=this;return D().then(function(){var c=b.A.getItem(a);return tf(c)})};h.set=function(a,b){var c=this;return D().then(function(){var d=rf(b);null===d?c.remove(a):c.A.setItem(a,d)})};h.remove=function(a){var b=this;return D().then(function(){b.A.removeItem(a)})};h.Na=function(a){l.window&&Ub(l.window,"storage",a)};h.fb=function(a){l.window&&cc(l.window,"storage",a)};var ih=function(){this.A={}};h=ih.prototype;h.get=function(){return D(null)};h.set=function(){return D()};h.remove=function(){return D()};h.Na=function(){};h.fb=function(){};var kh=function(){if(!jh()){if("Node"==L())throw new O("internal-error","The SessionStorage compatibility library was not found.");throw new O("web-storage-unsupported");}this.A=l.sessionStorage||firebase.INTERNAL.node.sessionStorage},jh=function(){var a="Node"==L(),a=l.sessionStorage||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}};h=kh.prototype;
	h.get=function(a){var b=this;return D().then(function(){var c=b.A.getItem(a);return tf(c)})};h.set=function(a,b){var c=this;return D().then(function(){var d=rf(b);null===d?c.remove(a):c.A.setItem(a,d)})};h.remove=function(a){var b=this;return D().then(function(){b.A.removeItem(a)})};h.Na=function(){};h.fb=function(){};var lh=function(a,b,c,d,e,f){if(!window.indexedDB)throw new O("web-storage-unsupported");this.oe=a;this.Sc=b;this.Fc=c;this.Zd=d;this.nb=e;this.U={};this.Hb=[];this.xb=0;this.Je=f||l.indexedDB},mh,nh=function(a){return new C(function(b,c){var d=a.Je.open(a.oe,a.nb);d.onerror=function(a){c(Error(a.target.errorCode))};d.onupgradeneeded=function(b){b=b.target.result;try{b.createObjectStore(a.Sc,{keyPath:a.Fc})}catch(f){c(f)}};d.onsuccess=function(a){b(a.target.result)}})},oh=function(a){a.Bd||(a.Bd=
	nh(a));return a.Bd},ph=function(a,b){return b.objectStore(a.Sc)},qh=function(a,b,c){return b.transaction([a.Sc],c?"readwrite":"readonly")},rh=function(a){return new C(function(b,c){a.onsuccess=function(a){a&&a.target?b(a.target.result):b()};a.onerror=function(a){c(Error(a.target.errorCode))}})};h=lh.prototype;
	h.set=function(a,b){var c=!1,d,e=this;return nd(oh(this).then(function(b){d=b;b=ph(e,qh(e,d,!0));return rh(b.get(a))}).then(function(f){var g=ph(e,qh(e,d,!0));if(f)return f.value=b,rh(g.put(f));e.xb++;c=!0;f={};f[e.Fc]=a;f[e.Zd]=b;return rh(g.add(f))}).then(function(){e.U[a]=b}),function(){c&&e.xb--})};h.get=function(a){var b=this;return oh(this).then(function(c){return rh(ph(b,qh(b,c,!1)).get(a))}).then(function(a){return a&&a.value})};
	h.remove=function(a){var b=!1,c=this;return nd(oh(this).then(function(d){b=!0;c.xb++;return rh(ph(c,qh(c,d,!0))["delete"](a))}).then(function(){delete c.U[a]}),function(){b&&c.xb--})};
	h.mf=function(){var a=this;return oh(this).then(function(b){var c=ph(a,qh(a,b,!1));return c.getAll?rh(c.getAll()):new C(function(a,b){var d=[],e=c.openCursor();e.onsuccess=function(b){(b=b.target.result)?(d.push(b.value),b["continue"]()):a(d)};e.onerror=function(a){b(Error(a.target.errorCode))}})}).then(function(b){var c={},d=[];if(0==a.xb){for(d=0;d<b.length;d++)c[b[d][a.Fc]]=b[d][a.Zd];d=$e(a.U,c);a.U=c}return d})};h.Na=function(a){0==this.Hb.length&&this.fd();this.Hb.push(a)};
	h.fb=function(a){La(this.Hb,function(b){return b==a});0==this.Hb.length&&this.qc()};h.fd=function(){var a=this;this.qc();var b=function(){a.Wc=me(800).then(r(a.mf,a)).then(function(b){0<b.length&&x(a.Hb,function(a){a(b)})}).then(b).c(function(a){"STOP_EVENT"!=a.message&&b()});return a.Wc};b()};h.qc=function(){this.Wc&&this.Wc.cancel("STOP_EVENT")};var vh=function(){this.rd={Browser:sh,Node:th,ReactNative:uh}[L()]},wh,sh={J:hh,hd:kh},th={J:hh,hd:kh},uh={J:eh,hd:ih};var xh=function(a){var b={},c=a.email,d=a.newEmail;a=a.requestType;if(!c||!a)throw Error("Invalid provider user info!");b.fromEmail=d||null;b.email=c;N(this,"operation",a);N(this,"data",Df(b))};var yh="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" "),S=function(a,b){return{name:a||"",fa:"a valid string",optional:!!b,ha:p}},T=function(a){return{name:a||"",fa:"a valid object",optional:!1,ha:ga}},zh=function(a,b){return{name:a||"",fa:"a function",optional:!!b,ha:q}},Ah=function(){return{name:"",fa:"null",optional:!1,ha:ca}},Bh=function(){return{name:"credential",fa:"a valid credential",optional:!1,ha:function(a){return!(!a||!a.Tb)}}},Ch=function(){return{name:"authProvider",
	fa:"a valid Auth provider",optional:!1,ha:function(a){return!!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}},Dh=function(a,b,c,d){return{name:c||"",fa:a.fa+" or "+b.fa,optional:!!d,ha:function(c){return a.ha(c)||b.ha(c)}}};var Fh=function(a,b){for(var c in b){var d=b[c].name;a[d]=Eh(d,a[c],b[c].a)}},U=function(a,b,c,d){a[b]=Eh(b,c,d)},Eh=function(a,b,c){if(!c)return b;var d=Gh(a);a=function(){var a=Array.prototype.slice.call(arguments),e;a:{e=Array.prototype.slice.call(a);var k;k=0;for(var n=!1,z=0;z<c.length;z++)if(c[z].optional)n=!0;else{if(n)throw new O("internal-error","Argument validator encountered a required argument after an optional argument.");k++}n=c.length;if(e.length<k||n<e.length)e="Expected "+(k==n?1==
	k?"1 argument":k+" arguments":k+"-"+n+" arguments")+" but got "+e.length+".";else{for(k=0;k<e.length;k++)if(n=c[k].optional&&void 0===e[k],!c[k].ha(e[k])&&!n){e=c[k];if(0>k||k>=yh.length)throw new O("internal-error","Argument validator received an unsupported number of arguments.");e=yh[k]+" argument "+(e.name?'"'+e.name+'" ':"")+"must be "+e.fa+".";break a}e=null}}if(e)throw new O("argument-error",d+" failed: "+e);return b.apply(this,a)};for(var e in b)a[e]=b[e];for(e in b.prototype)a.prototype[e]=
	b.prototype[e];return a},Gh=function(a){a=a.split(".");return a[a.length-1]};var Hh=function(a,b,c,d){this.We=a;this.Od=b;this.df=c;this.jb=d;this.T={};wh||(wh=new vh);a=wh;try{var e;Ye()?(mh||(mh=new lh("firebaseLocalStorageDb","firebaseLocalStorage","fbase_key","value",1)),e=mh):e=new a.rd.J;this.Ya=e}catch(f){this.Ya=new fh,this.jb=!0}try{this.sc=new a.rd.hd}catch(f){this.sc=new fh}this.Sd=r(this.Td,this);this.U={}},Ih,Jh=function(){Ih||(Ih=new Hh("firebase",":",!uf(K())&&l.window&&l.window!=l.window.top?!0:!1,qf()));return Ih};h=Hh.prototype;
	h.R=function(a,b){return this.We+this.Od+a.name+(b?this.Od+b:"")};h.get=function(a,b){return(a.J?this.Ya:this.sc).get(this.R(a,b))};h.remove=function(a,b){b=this.R(a,b);a.J&&!this.jb&&(this.U[b]=null);return(a.J?this.Ya:this.sc).remove(b)};h.set=function(a,b,c){var d=this.R(a,c),e=this,f=a.J?this.Ya:this.sc;return f.set(d,b).then(function(){return f.get(d)}).then(function(b){a.J&&!this.jb&&(e.U[d]=b)})};
	h.addListener=function(a,b,c){a=this.R(a,b);this.jb||(this.U[a]=l.localStorage.getItem(a));Ra(this.T)&&this.fd();this.T[a]||(this.T[a]=[]);this.T[a].push(c)};h.removeListener=function(a,b,c){a=this.R(a,b);this.T[a]&&(La(this.T[a],function(a){return a==c}),0==this.T[a].length&&delete this.T[a]);Ra(this.T)&&this.qc()};h.fd=function(){this.Ya.Na(this.Sd);this.jb||Kh(this)};
	var Kh=function(a){Lh(a);a.Rc=setInterval(function(){for(var b in a.T){var c=l.localStorage.getItem(b);c!=a.U[b]&&(a.U[b]=c,c=new Jb({type:"storage",key:b,target:window,oldValue:a.U[b],newValue:c}),a.Td(c))}},1E3)},Lh=function(a){a.Rc&&(clearInterval(a.Rc),a.Rc=null)};Hh.prototype.qc=function(){this.Ya.fb(this.Sd);this.jb||Lh(this)};
	Hh.prototype.Td=function(a){if(a&&a.ze){var b=a.qb.key;if(this.df){var c=l.localStorage.getItem(b);a=a.qb.newValue;a!=c&&(a?l.localStorage.setItem(b,a):a||l.localStorage.removeItem(b))}this.U[b]=l.localStorage.getItem(b);this.ld(b)}else x(a,r(this.ld,this))};Hh.prototype.ld=function(a){this.T[a]&&x(this.T[a],function(a){a()})};var Mh=function(a,b){this.u=a;this.i=b||Jh()},Nh={name:"authEvent",J:!0},Oh=function(a){return a.i.get(Nh,a.u).then(function(a){return Kf(a)})};Mh.prototype.Ma=function(a){this.i.addListener(Nh,this.u,a)};Mh.prototype.Fb=function(a){this.i.removeListener(Nh,this.u,a)};var Ph=function(a){this.i=a||Jh()},Qh={name:"sessionId",J:!1};Ph.prototype.Ub=function(a){return this.i.get(Qh,a)};var Rh=function(a,b,c,d,e,f){this.v=a;this.j=b;this.B=c;this.za=d||null;this.Ud=b+":"+c;this.ef=new Ph;this.vd=new Mh(this.Ud);this.Nc=null;this.ia=[];this.Me=e||500;this.bf=f||2E3;this.gc=null},Sh=function(a){return new O("invalid-cordova-configuration",a)};
	Rh.prototype.Da=function(){return this.Pc?this.Pc:this.Pc=kf().then(function(){if("function"!==typeof M("universalLinks.subscribe",l))throw Sh("cordova-universal-links-plugin is not installed");if("undefined"===typeof M("BuildInfo.packageName",l))throw Sh("cordova-plugin-buildinfo is not installed");if("function"!==typeof M("cordova.plugins.browsertab.openUrl",l))throw Sh("cordova-plugin-browsertab is not installed");},function(){throw new O("cordova-not-ready");})};
	var Th=function(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")},Uh=function(a){var b=new Eb;b.update(a);return pb(b.digest())};h=Rh.prototype;h.Gb=function(a,b){b(new O("operation-not-supported-in-this-environment"));return D()};h.Bb=function(){return E(new O("operation-not-supported-in-this-environment"))};h.Vd=function(){return!1};h.Rd=function(){return!0};h.yd=function(){return!0};
	h.Cb=function(a,b,c){if(this.gc)return E(new O("redirect-operation-pending"));var d=this,e=l.document,f=null,g=null,k=null;return this.gc=nd(D().then(function(){bg(b);return Vh(d)}).then(function(){return Wh(d,a,b,c)}).then(function(){return(new C(function(a,b){g=function(){a();return!1};d.Ma(g);k=function(){f=me(d.bf).then(function(){b(new O("redirect-cancelled-by-user"))})};e.addEventListener("resume",k,!1)})).c(function(a){return Xh(d).then(function(){throw a;})})}),function(){k&&e.removeEventListener("resume",
	k,!1);f&&f.cancel();g&&d.Fb(g);d.gc=null})};
	var Wh=function(a,b,c,d){var e=Th(),f=new P(b,d,null,e,new O("no-auth-event")),g=M("BuildInfo.packageName",l);if("string"!==typeof g)throw new O("invalid-cordova-configuration");var k=M("BuildInfo.displayName",l),n={};if(K().toLowerCase().match(/iphone|ipad|ipod/))n.ibi=g;else if(K().toLowerCase().match(/android/))n.apn=g;else return E(new O("operation-not-supported-in-this-environment"));k&&(n.appDisplayName=k);e=Uh(e);n.sessionId=e;var z=dh(a.v,a.j,a.B,b,c,null,d,a.za,n);return a.Da().then(function(){var b=
	a.Ud;return a.ef.i.set(Nh,f.F(),b)}).then(function(){var a=M("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof a)throw new O("invalid-cordova-configuration");a(z)})},Yh=function(a,b){for(var c=0;c<a.ia.length;c++)a.ia[c](b)},Vh=function(a){a.Nc||(a.Nc=a.Da().then(function(){return new C(function(b){var c=function(d){b(d);a.Fb(c);return!1};a.Ma(c);Zh(a)})}));return a.Nc},Xh=function(a){var b=null;return Oh(a.vd).then(function(c){b=c;c=a.vd;return c.i.remove(Nh,c.u)}).then(function(){return b})},
	Zh=function(a){var b=M("universalLinks.subscribe",l);if("function"!==typeof b)throw new O("invalid-cordova-configuration");var c=new P("unknown",null,null,null,new O("no-auth-event")),d=!1,e=me(a.Me).then(function(){return Xh(a).then(function(){d||Yh(a,c)})});b(null,function(b){d=!0;e&&e.cancel();Xh(a).then(function(d){var e=c;if(d&&b&&b.url){var f=b.url,e=null,g=Se(f),Ea=g.D.get("link"),f=g.D.get("deep_link_id")||Ea||f;-1!=f.indexOf("/__/auth/callback")&&(g=Se(f),e=tf(g.D.get("error")||null),e=(e=
	"object"===typeof e?Jf(e):null)?new P(d.ga,d.G,null,null,e):new P(d.ga,d.G,f,d.Ub()));e=e||c}Yh(a,e)})})};Rh.prototype.Ma=function(a){this.ia.push(a);Vh(this).c(function(){})};Rh.prototype.Fb=function(a){La(this.ia,function(b){return b==a})};var $h=function(a){this.u=a;this.i=Jh()},ai={name:"pendingRedirect",J:!1},bi=function(a){return a.i.set(ai,"pending",a.u)},ci=function(a){return a.i.remove(ai,a.u)},di=function(a){return a.i.get(ai,a.u).then(function(a){return"pending"==a})};var V=function(a,b,c){this.v=a;this.j=b;this.B=c;this.Ib=[];this.Wa=!1;this.Bc=r(this.Lc,this);this.ab=new ei(this);this.Id=new fi(this);this.yb=new $h(this.j+":"+this.B);this.lb={};this.lb.unknown=this.ab;this.lb.signInViaRedirect=this.ab;this.lb.linkViaRedirect=this.ab;this.lb.signInViaPopup=this.Id;this.lb.linkViaPopup=this.Id;this.I=gi(this.v,this.j,this.B)},gi=function(a,b,c){var d=firebase.SDK_VERSION||null;return jf()?new Rh(a,b,c,d):new $g(a,b,c,d)};
	V.prototype.reset=function(){this.Wa=!1;this.I.Fb(this.Bc);this.I=gi(this.v,this.j,this.B)};V.prototype.ub=function(){var a=this;this.Wa||(this.Wa=!0,this.I.Ma(this.Bc));var b=this.I;return this.I.Da().c(function(c){a.I==b&&a.reset();throw c;})};var ji=function(a){a.I.Rd()&&a.ub().c(function(b){var c=new P("unknown",null,null,null,new O("operation-not-supported-in-this-environment"));hi(b)&&a.Lc(c)});a.I.yd()||ii(a.ab)};
	V.prototype.subscribe=function(a){Ia(this.Ib,a)||this.Ib.push(a);if(!this.Wa){var b=this;di(this.yb).then(function(a){a?ci(b.yb).then(function(){b.ub().c(function(a){var c=new P("unknown",null,null,null,new O("operation-not-supported-in-this-environment"));hi(a)&&b.Lc(c)})}):ji(b)}).c(function(){ji(b)})}};V.prototype.unsubscribe=function(a){La(this.Ib,function(b){return b==a})};
	V.prototype.Lc=function(a){if(!a)throw new O("invalid-auth-event");for(var b=!1,c=0;c<this.Ib.length;c++){var d=this.Ib[c];if(d.md(a.ga,a.G)){(b=this.lb[a.ga])&&b.Jd(a,d);b=!0;break}}ii(this.ab);return b};var ki=new xf(2E3,1E4),li=new xf(1E4,3E4);V.prototype.getRedirectResult=function(){return this.ab.getRedirectResult()};V.prototype.Bb=function(a,b,c,d,e){var f=this;return this.I.Bb(a,b,c,function(){f.Wa||(f.Wa=!0,f.I.Ma(f.Bc))},function(){f.reset()},d,e)};
	var hi=function(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1};V.prototype.Cb=function(a,b,c){var d=this,e;return bi(this.yb).then(function(){return d.I.Cb(a,b,c).c(function(a){if(hi(a))throw new O("operation-not-supported-in-this-environment");e=a;return ci(d.yb).then(function(){throw e;})}).then(function(){return d.I.Vd()?new C(function(){}):ci(d.yb).then(function(){return d.getRedirectResult()}).then(function(){}).c(function(){})})})};
	V.prototype.Gb=function(a,b,c,d){return this.I.Gb(c,function(c){a.Ia(b,null,c,d)},ki.get())};var mi={},ni=function(a,b,c){var d=b+":"+c;mi[d]||(mi[d]=new V(a,b,c));return mi[d]},ei=function(a){this.i=a;this.eb=null;this.Eb=[];this.Db=[];this.bb=null;this.Zc=!1};ei.prototype.reset=function(){this.eb=null;this.bb&&(this.bb.cancel(),this.bb=null)};
	ei.prototype.Jd=function(a,b){if(!a)return E(new O("invalid-auth-event"));this.reset();this.Zc=!0;var c=a.ga,d=a.G,e=a.getError()&&"auth/web-storage-unsupported"==a.getError().code,f=a.getError()&&"auth/operation-not-supported-in-this-environment"==a.getError().code;"unknown"!=c||e||f?a=a.P?this.Xc(a,b):b.rb(c,d)?this.Yc(a,b):E(new O("invalid-auth-event")):(oi(this,!1,null,null),a=D());return a};var ii=function(a){a.Zc||(a.Zc=!0,oi(a,!1,null,null))};
	ei.prototype.Xc=function(a){oi(this,!0,null,a.getError());return D()};ei.prototype.Yc=function(a,b){var c=this,d=a.ga;b=b.rb(d,a.G);var e=a.mb;a=a.Ub();var f="signInViaRedirect"==d||"linkViaRedirect"==d;return b(e,a).then(function(a){oi(c,f,a,null)}).c(function(a){oi(c,f,null,a)})};
	var pi=function(a,b){a.eb=function(){return E(b)};if(a.Db.length)for(var c=0;c<a.Db.length;c++)a.Db[c](b)},qi=function(a,b){a.eb=function(){return D(b)};if(a.Eb.length)for(var c=0;c<a.Eb.length;c++)a.Eb[c](b)},oi=function(a,b,c,d){b?d?pi(a,d):qi(a,c):qi(a,{user:null});a.Eb=[];a.Db=[]};ei.prototype.getRedirectResult=function(){var a=this;return new C(function(b,c){a.eb?a.eb().then(b,c):(a.Eb.push(b),a.Db.push(c),ri(a))})};
	var ri=function(a){var b=new O("timeout");a.bb&&a.bb.cancel();a.bb=me(li.get()).then(function(){a.eb||oi(a,!0,null,b)})},fi=function(a){this.i=a};fi.prototype.Jd=function(a,b){if(!a)return E(new O("invalid-auth-event"));var c=a.ga,d=a.G;return a.P?this.Xc(a,b):b.rb(c,d)?this.Yc(a,b):E(new O("invalid-auth-event"))};fi.prototype.Xc=function(a,b){b.Ia(a.ga,null,a.getError(),a.G);return D()};
	fi.prototype.Yc=function(a,b){var c=a.G,d=a.ga,e=b.rb(d,c),f=a.mb;a=a.Ub();return e(f,a).then(function(a){b.Ia(d,a,null,c)}).c(function(a){b.Ia(d,null,a,c)})};var si=function(a){this.g=a;this.xa=this.X=null;this.Sa=0};si.prototype.F=function(){return{apiKey:this.g.j,refreshToken:this.X,accessToken:this.xa,expirationTime:this.Sa}};
	var ui=function(a,b){var c=b.idToken,d=b.refreshToken;b=ti(b.expiresIn);a.xa=c;a.Sa=b;a.X=d},ti=function(a){return ka()+1E3*parseInt(a,10)},vi=function(a,b){return ng(a.g,b).then(function(b){a.xa=b.access_token;a.Sa=ti(b.expires_in);a.X=b.refresh_token;return{accessToken:a.xa,expirationTime:a.Sa,refreshToken:a.X}}).c(function(b){"auth/user-token-expired"==b.code&&(a.X=null);throw b;})},wi=function(a){return!(!a.xa||a.X)};
	si.prototype.getToken=function(a){a=!!a;return wi(this)?E(new O("user-token-expired")):a||!this.xa||ka()>this.Sa-3E4?this.X?vi(this,{grant_type:"refresh_token",refresh_token:this.X}):D(null):D({accessToken:this.xa,expirationTime:this.Sa,refreshToken:this.X})};var xi=function(a,b,c,d,e){Af(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,providerId:b})},yi=function(a,b){Ib.call(this,a);for(var c in b)this[c]=b[c]};t(yi,Ib);
	var W=function(a,b,c){this.Z=[];this.j=a.apiKey;this.B=a.appName;this.v=a.authDomain||null;a=firebase.SDK_VERSION?nf(firebase.SDK_VERSION):null;this.g=new R(this.j,null,a);this.ea=new si(this.g);zi(this,b.idToken);ui(this.ea,b);N(this,"refreshToken",this.ea.X);Ai(this,c||{});Qd.call(this);this.hc=!1;this.v&&pf()&&(this.m=ni(this.v,this.j,this.B));this.pc=[];this.Ac=D()};t(W,Qd);
	W.prototype.ta=function(a,b){var c=Array.prototype.slice.call(arguments,1),d=this;return this.Ac=this.Ac.then(function(){return a.apply(d,c)},function(){return a.apply(d,c)})};
	var zi=function(a,b){a.Cd=b;N(a,"_lat",b)},Bi=function(a,b){La(a.pc,function(a){return a==b})},Ci=function(a){for(var b=[],c=0;c<a.pc.length;c++)b.push(a.pc[c](a));return kd(b).then(function(){return a})},Di=function(a){a.m&&!a.hc&&(a.hc=!0,a.m.subscribe(a))},Ai=function(a,b){Af(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,isAnonymous:b.isAnonymous||!1,providerData:[]})};N(W.prototype,"providerId","firebase");
	var Ei=function(){},Fi=function(a){return D().then(function(){if(a.qe)throw new O("app-deleted");})},Gi=function(a){return Da(a.providerData,function(a){return a.providerId})},Ii=function(a,b){b&&(Hi(a,b.providerId),a.providerData.push(b))},Hi=function(a,b){La(a.providerData,function(a){return a.providerId==b})},Ji=function(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&N(a,b,c)};
	W.prototype.copy=function(a){var b=this;b!=a&&(Af(this,{uid:a.uid,displayName:a.displayName,photoURL:a.photoURL,email:a.email,emailVerified:a.emailVerified,isAnonymous:a.isAnonymous,providerData:[]}),x(a.providerData,function(a){Ii(b,a)}),this.ea=a.ea,N(this,"refreshToken",this.ea.X))};W.prototype.reload=function(){var a=this;return Fi(this).then(function(){return Ki(a).then(function(){return Ci(a)}).then(Ei)})};
	var Ki=function(a){return a.getToken().then(function(b){var c=a.isAnonymous;return Li(a,b).then(function(){c||Ji(a,"isAnonymous",!1);return b}).c(function(b){"auth/user-token-expired"==b.code&&(a.dispatchEvent(new yi("userDeleted")),Mi(a));throw b;})})};
	W.prototype.getToken=function(a){var b=this,c=wi(this.ea);return Fi(this).then(function(){return b.ea.getToken(a)}).then(function(a){if(!a)throw new O("internal-error");a.accessToken!=b.Cd&&(zi(b,a.accessToken),b.Ea());Ji(b,"refreshToken",a.refreshToken);return a.accessToken}).c(function(a){if("auth/user-token-expired"==a.code&&!c)return Ci(b).then(function(){Ji(b,"refreshToken",null);throw a;});throw a;})};
	var Ni=function(a,b){b.idToken&&a.Cd!=b.idToken&&(ui(a.ea,b),a.Ea(),zi(a,b.idToken),Ji(a,"refreshToken",a.ea.X))};W.prototype.Ea=function(){this.dispatchEvent(new yi("tokenChanged"))};var Li=function(a,b){return Q(a.g,Ng,{idToken:b}).then(r(a.$e,a))};
	W.prototype.$e=function(a){a=a.users;if(!a||!a.length)throw new O("internal-error");a=a[0];Ai(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified});for(var b=Oi(a),c=0;c<b.length;c++)Ii(this,b[c]);Ji(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length))};
	var Oi=function(a){return(a=a.providerUserInfo)&&a.length?Da(a,function(a){return new xi(a.rawId,a.providerId,a.email,a.displayName,a.photoUrl)}):[]};W.prototype.reauthenticate=function(a){var b=this;return this.f(a.Tb(this.g).then(function(a){var c;a:{var e=a.idToken.split(".");if(3==e.length){for(var e=e[1],f=(4-e.length%4)%4,g=0;g<f;g++)e+=".";try{var k=tc(tb(e));if(k.sub&&k.iss&&k.aud&&k.exp){c=new Mf(k);break a}}catch(n){}}c=null}if(!c||b.uid!=c.Se)throw new O("user-mismatch");Ni(b,a);return b.reload()}))};
	var Pi=function(a,b){return Ki(a).then(function(){if(Ia(Gi(a),b))return Ci(a).then(function(){throw new O("provider-already-linked");})})};h=W.prototype;h.Qe=function(a){var b=this;return this.f(Pi(this,a.provider).then(function(){return b.getToken()}).then(function(c){return a.Ed(b.g,c)}).then(r(this.td,this)))};h.link=function(a){return this.ta(this.Qe,a)};h.td=function(a){Ni(this,a);var b=this;return this.reload().then(function(){return b})};
	h.sf=function(a){var b=this;return this.f(this.getToken().then(function(c){return b.g.updateEmail(c,a)}).then(function(a){Ni(b,a);return b.reload()}))};h.updateEmail=function(a){return this.ta(this.sf,a)};h.tf=function(a){var b=this;return this.f(this.getToken().then(function(c){return b.g.updatePassword(c,a)}).then(function(a){Ni(b,a);return b.reload()}))};h.updatePassword=function(a){return this.ta(this.tf,a)};
	h.uf=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Fi(this);var b=this;return this.f(this.getToken().then(function(c){return b.g.updateProfile(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(a){Ni(b,a);Ji(b,"displayName",a.displayName||null);Ji(b,"photoURL",a.photoUrl||null);return Ci(b)}).then(Ei))};h.updateProfile=function(a){return this.ta(this.uf,a)};
	h.rf=function(a){var b=this;return this.f(Ki(this).then(function(c){return Ia(Gi(b),a)?Cg(b.g,c,[a]).then(function(a){var c={};x(a.providerUserInfo||[],function(a){c[a.providerId]=!0});x(Gi(b),function(a){c[a]||Hi(b,a)});return Ci(b)}):Ci(b).then(function(){throw new O("no-such-provider");})}))};h.unlink=function(a){return this.ta(this.rf,a)};h.pe=function(){var a=this;return this.f(this.getToken().then(function(b){return Q(a.g,Mg,{idToken:b})}).then(function(){a.dispatchEvent(new yi("userDeleted"))})).then(function(){Mi(a)})};
	h["delete"]=function(){return this.ta(this.pe)};h.md=function(a,b){return"linkViaPopup"==a&&(this.la||null)==b&&this.ca||"linkViaRedirect"==a&&(this.lc||null)==b?!0:!1};h.Ia=function(a,b,c,d){"linkViaPopup"==a&&d==(this.la||null)&&(c&&this.Ga?this.Ga(c):b&&!c&&this.ca&&this.ca(b),this.K&&(this.K.cancel(),this.K=null),delete this.ca,delete this.Ga)};h.rb=function(a,b){return"linkViaPopup"==a&&b==(this.la||null)||"linkViaRedirect"==a&&(this.lc||null)==b?r(this.te,this):null};
	h.Sb=function(){return of(this.uid+":::")};
	var Ri=function(a,b){if(!pf())return E(new O("operation-not-supported-in-this-environment"));var c=Gf(b.providerId),d=a.Sb(),e=null;!qf()&&a.v&&b.isOAuthProvider&&(e=dh(a.v,a.j,a.B,"linkViaPopup",b,null,d,firebase.SDK_VERSION||null));var f=ef(e,c&&c.Ab,c&&c.zb),c=Pi(a,b.providerId).then(function(){return Ci(a)}).then(function(){Qi(a);return a.getToken()}).then(function(){return a.m.Bb(f,"linkViaPopup",b,d,!!e)}).then(function(){return new C(function(b,c){a.Ia("linkViaPopup",null,new O("cancelled-popup-request"),
	a.la||null);a.ca=b;a.Ga=c;a.la=d;a.K=a.m.Gb(a,"linkViaPopup",f,d)})}).then(function(a){f&&df(f);return a}).c(function(a){f&&df(f);throw a;});return a.f(c)};W.prototype.linkWithPopup=function(a){var b=Ri(this,a);return this.ta(function(){return b})};
	W.prototype.Re=function(a){if(!pf())return E(new O("operation-not-supported-in-this-environment"));var b=this,c=null,d=this.Sb(),e=Pi(this,a.providerId).then(function(){Qi(b);return b.getToken()}).then(function(){b.lc=d;return Ci(b)}).then(function(a){b.Ha&&(a=b.Ha,a=a.i.set(Si,b.F(),a.u));return a}).then(function(){return b.m.Cb("linkViaRedirect",a,d)}).c(function(a){c=a;if(b.Ha)return Ti(b.Ha);throw c;}).then(function(){if(c)throw c;});return this.f(e)};
	W.prototype.linkWithRedirect=function(a){return this.ta(this.Re,a)};var Qi=function(a){if(!a.m||!a.hc){if(a.m&&!a.hc)throw new O("internal-error");throw new O("auth-domain-config-required");}};W.prototype.te=function(a,b){var c=this;this.K&&(this.K.cancel(),this.K=null);var d=null,e=this.getToken().then(function(d){return Qf(c.g,{requestUri:a,sessionId:b,idToken:d})}).then(function(a){d=ag(a);return c.td(a)}).then(function(a){return{user:a,credential:d}});return this.f(e)};
	W.prototype.sendEmailVerification=function(){var a=this;return this.f(this.getToken().then(function(b){return a.g.sendEmailVerification(b)}).then(function(b){if(a.email!=b)return a.reload()}).then(function(){}))};var Mi=function(a){for(var b=0;b<a.Z.length;b++)a.Z[b].cancel("app-deleted");a.Z=[];a.qe=!0;N(a,"refreshToken",null);a.m&&a.m.unsubscribe(a)};W.prototype.f=function(a){var b=this;this.Z.push(a);nd(a,function(){Ka(b.Z,a)});return a};W.prototype.toJSON=function(){return this.F()};
	W.prototype.F=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.j,appName:this.B,authDomain:this.v,stsTokenManager:this.ea.F(),redirectEventId:this.lc||null};x(this.providerData,function(b){a.providerData.push(Bf(b))});return a};
	var Ui=function(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken&&a.stsTokenManager.expirationTime)c.idToken=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null,c.expiresIn=(a.stsTokenManager.expirationTime-ka())/1E3;else return null;var d=new W(b,c,a);a.providerData&&x(a.providerData,function(a){if(a){var b={};Af(b,a);Ii(d,b)}});a.redirectEventId&&(d.lc=a.redirectEventId);
	return d},Vi=function(a,b,c){var d=new W(a,b);c&&(d.Ha=c);return d.reload().then(function(){return d})};var Wi=function(a){this.u=a;this.i=Jh()},Si={name:"redirectUser",J:!1},Ti=function(a){return a.i.remove(Si,a.u)},Xi=function(a,b){return a.i.get(Si,a.u).then(function(a){a&&b&&(a.authDomain=b);return Ui(a||{})})};var Yi=function(a){this.u=a;this.i=Jh()},Zi={name:"authUser",J:!0},$i=function(a,b){return a.i.set(Zi,b.F(),a.u)},aj=function(a){return a.i.remove(Zi,a.u)},bj=function(a,b){return a.i.get(Zi,a.u).then(function(a){a&&b&&(a.authDomain=b);return Ui(a||{})})};var Y=function(a){this.Qa=!1;N(this,"app",a);if(X(this).options&&X(this).options.apiKey)a=firebase.SDK_VERSION?nf(firebase.SDK_VERSION):null,this.g=new R(X(this).options&&X(this).options.apiKey,null,a);else throw new O("invalid-api-key");this.Z=[];this.Oa=[];this.Ye=firebase.INTERNAL.createSubscribe(r(this.Ke,this));cj(this,null);this.oa=new Yi(X(this).options.apiKey+":"+X(this).name);this.cb=new Wi(X(this).options.apiKey+":"+X(this).name);this.Nb=this.f(dj(this));this.ua=this.f(ej(this));this.Qc=
	!1;this.Kc=r(this.lf,this);this.Xd=r(this.Ua,this);this.Yd=r(this.Ge,this);this.Wd=r(this.Fe,this);fj(this);this.INTERNAL={};this.INTERNAL["delete"]=r(this["delete"],this)};Y.prototype.toJSON=function(){return{apiKey:X(this).options.apiKey,authDomain:X(this).options.authDomain,appName:X(this).name,currentUser:Z(this)&&Z(this).F()}};
	var gj=function(a){return a.re||E(new O("auth-domain-config-required"))},fj=function(a){var b=X(a).options.authDomain,c=X(a).options.apiKey;b&&pf()&&(a.re=a.Nb.then(function(){if(!a.Qa)return a.m=ni(b,c,X(a).name),a.m.subscribe(a),Z(a)&&Di(Z(a)),a.ad&&(Di(a.ad),a.ad=null),a.m}))};h=Y.prototype;h.md=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return!0;case "signInViaPopup":return this.la==b&&!!this.ca;default:return!1}};
	h.Ia=function(a,b,c,d){"signInViaPopup"==a&&this.la==d&&(c&&this.Ga?this.Ga(c):b&&!c&&this.ca&&this.ca(b),this.K&&(this.K.cancel(),this.K=null),delete this.ca,delete this.Ga)};h.rb=function(a,b){return"signInViaRedirect"==a||"signInViaPopup"==a&&this.la==b&&this.ca?r(this.ue,this):null};
	h.ue=function(a,b){var c=this;a={requestUri:a,sessionId:b};this.K&&(this.K.cancel(),this.K=null);var d=null,e=Of(c.g,a).then(function(a){d=ag(a);return a});a=c.Nb.then(function(){return e}).then(function(a){return hj(c,a)}).then(function(){return{user:Z(c),credential:d}});return this.f(a)};h.Sb=function(){return of()};
	h.signInWithPopup=function(a){if(!pf())return E(new O("operation-not-supported-in-this-environment"));var b=this,c=Gf(a.providerId),d=this.Sb(),e=null;!qf()&&X(this).options.authDomain&&a.isOAuthProvider&&(e=dh(X(this).options.authDomain,X(this).options.apiKey,X(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null));var f=ef(e,c&&c.Ab,c&&c.zb),c=gj(this).then(function(b){return b.Bb(f,"signInViaPopup",a,d,!!e)}).then(function(){return new C(function(a,c){b.Ia("signInViaPopup",null,new O("cancelled-popup-request"),
	b.la);b.ca=a;b.Ga=c;b.la=d;b.K=b.m.Gb(b,"signInViaPopup",f,d)})}).then(function(a){f&&df(f);return a}).c(function(a){f&&df(f);throw a;});return this.f(c)};h.signInWithRedirect=function(a){if(!pf())return E(new O("operation-not-supported-in-this-environment"));var b=this,c=gj(this).then(function(){return b.m.Cb("signInViaRedirect",a)});return this.f(c)};
	h.getRedirectResult=function(){if(!pf())return E(new O("operation-not-supported-in-this-environment"));var a=this,b=gj(this).then(function(){return a.m.getRedirectResult()});return this.f(b)};
	var hj=function(a,b){var c={};c.apiKey=X(a).options.apiKey;c.authDomain=X(a).options.authDomain;c.appName=X(a).name;return a.Nb.then(function(){return Vi(c,b,a.cb)}).then(function(b){if(Z(a)&&b.uid==Z(a).uid)return Z(a).copy(b),a.Ua(b);cj(a,b);Di(b);return a.Ua(b)}).then(function(){a.Ea()})},cj=function(a,b){Z(a)&&(Bi(Z(a),a.Xd),cc(Z(a),"tokenChanged",a.Yd),cc(Z(a),"userDeleted",a.Wd));b&&(b.pc.push(a.Xd),Ub(b,"tokenChanged",a.Yd),Ub(b,"userDeleted",a.Wd));N(a,"currentUser",b)};
	Y.prototype.signOut=function(){var a=this,b=this.ua.then(function(){if(!Z(a))return D();cj(a,null);return aj(a.oa).then(function(){a.Ea()})});return this.f(b)};
	var ij=function(a){var b=Xi(a.cb,X(a).options.authDomain).then(function(b){if(a.ad=b)b.Ha=a.cb;return Ti(a.cb)});return a.f(b)},dj=function(a){var b=X(a).options.authDomain,c=ij(a).then(function(){return bj(a.oa,b)}).then(function(b){return b?(b.Ha=a.cb,b.reload().then(function(){return $i(a.oa,b).then(function(){return b})}).c(function(c){return"auth/network-request-failed"==c.code?b:aj(a.oa)})):null}).then(function(b){cj(a,b||null)});return a.f(c)},ej=function(a){return a.Nb.then(function(){return a.getRedirectResult()}).c(function(){}).then(function(){if(!a.Qa)return a.Kc()}).c(function(){}).then(function(){if(!a.Qa){a.Qc=
	!0;var b=a.oa;b.i.addListener(Zi,b.u,a.Kc)}})};Y.prototype.lf=function(){var a=this;return bj(this.oa,X(this).options.authDomain).then(function(b){if(!a.Qa){var c;if(c=Z(a)&&b){c=Z(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d}if(c)return Z(a).copy(b),Z(a).getToken();if(Z(a)||b)cj(a,b),b&&(Di(b),b.Ha=a.cb),a.m&&a.m.subscribe(a),a.Ea()}})};Y.prototype.Ua=function(a){return $i(this.oa,a)};Y.prototype.Ge=function(){this.Ea();this.Ua(Z(this))};
	Y.prototype.Fe=function(){this.signOut()};var jj=function(a,b){return a.f(b.then(function(b){return hj(a,b)}).then(function(){return Z(a)}))};h=Y.prototype;h.Ke=function(a){var b=this;this.addAuthTokenListener(function(){a.next(Z(b))})};h.onAuthStateChanged=function(a,b,c){var d=this;this.Qc&&firebase.Promise.resolve().then(function(){q(a)?a(Z(d)):q(a.next)&&a.next(Z(d))});return this.Ye(a,b,c)};
	h.getToken=function(a){var b=this,c=this.ua.then(function(){return Z(b)?Z(b).getToken(a).then(function(a){return{accessToken:a}}):null});return this.f(c)};h.signInWithCustomToken=function(a){var b=this;return this.ua.then(function(){return jj(b,Q(b.g,Og,{token:a}))}).then(function(a){Ji(a,"isAnonymous",!1);return b.Ua(a)}).then(function(){return Z(b)})};h.signInWithEmailAndPassword=function(a,b){var c=this;return this.ua.then(function(){return jj(c,Q(c.g,Xf,{email:a,password:b}))})};
	h.createUserWithEmailAndPassword=function(a,b){var c=this;return this.ua.then(function(){return jj(c,Q(c.g,Lg,{email:a,password:b}))})};h.signInWithCredential=function(a){var b=this;return this.ua.then(function(){return jj(b,a.Tb(b.g))})};h.signInAnonymously=function(){var a=Z(this),b=this;return a&&a.isAnonymous?D(a):this.ua.then(function(){return jj(b,b.g.signInAnonymously())}).then(function(a){Ji(a,"isAnonymous",!0);return b.Ua(a)}).then(function(){return Z(b)})};
	var X=function(a){return a.app},Z=function(a){return a.currentUser};h=Y.prototype;h.Ea=function(){if(this.Qc)for(var a=0;a<this.Oa.length;a++)if(this.Oa[a])this.Oa[a](Z(this)&&Z(this)._lat||null)};h.addAuthTokenListener=function(a){var b=this;this.Oa.push(a);this.f(this.ua.then(function(){b.Qa||Ia(b.Oa,a)&&a(Z(b)&&Z(b)._lat||null)}))};h.removeAuthTokenListener=function(a){La(this.Oa,function(b){return b==a})};
	h["delete"]=function(){this.Qa=!0;for(var a=0;a<this.Z.length;a++)this.Z[a].cancel("app-deleted");this.Z=[];this.oa&&(a=this.oa,a.i.removeListener(Zi,a.u,this.Kc));this.m&&this.m.unsubscribe(this);return firebase.Promise.resolve()};h.f=function(a){var b=this;this.Z.push(a);nd(a,function(){Ka(b.Z,a)});return a};h.fetchProvidersForEmail=function(a){return this.f(sg(this.g,a))};h.verifyPasswordResetCode=function(a){return this.checkActionCode(a).then(function(a){return a.data.email})};
	h.confirmPasswordReset=function(a,b){return this.f(this.g.confirmPasswordReset(a,b).then(function(){}))};h.checkActionCode=function(a){return this.f(this.g.checkActionCode(a).then(function(a){return new xh(a)}))};h.applyActionCode=function(a){return this.f(this.g.applyActionCode(a).then(function(){}))};h.sendPasswordResetEmail=function(a){return this.f(this.g.sendPasswordResetEmail(a).then(function(){}))};Fh(Y.prototype,{applyActionCode:{name:"applyActionCode",a:[S("code")]},checkActionCode:{name:"checkActionCode",a:[S("code")]},confirmPasswordReset:{name:"confirmPasswordReset",a:[S("code"),S("newPassword")]},createUserWithEmailAndPassword:{name:"createUserWithEmailAndPassword",a:[S("email"),S("password")]},fetchProvidersForEmail:{name:"fetchProvidersForEmail",a:[S("email")]},getRedirectResult:{name:"getRedirectResult",a:[]},onAuthStateChanged:{name:"onAuthStateChanged",a:[Dh(T(),zh(),"nextOrObserver"),
	zh("opt_error",!0),zh("opt_completed",!0)]},sendPasswordResetEmail:{name:"sendPasswordResetEmail",a:[S("email")]},signInAnonymously:{name:"signInAnonymously",a:[]},signInWithCredential:{name:"signInWithCredential",a:[Bh()]},signInWithCustomToken:{name:"signInWithCustomToken",a:[S("token")]},signInWithEmailAndPassword:{name:"signInWithEmailAndPassword",a:[S("email"),S("password")]},signInWithPopup:{name:"signInWithPopup",a:[Ch()]},signInWithRedirect:{name:"signInWithRedirect",a:[Ch()]},signOut:{name:"signOut",
	a:[]},toJSON:{name:"toJSON",a:[S(null,!0)]},verifyPasswordResetCode:{name:"verifyPasswordResetCode",a:[S("code")]}});
	Fh(W.prototype,{"delete":{name:"delete",a:[]},getToken:{name:"getToken",a:[{name:"opt_forceRefresh",fa:"a boolean",optional:!0,ha:function(a){return"boolean"==typeof a}}]},link:{name:"link",a:[Bh()]},linkWithPopup:{name:"linkWithPopup",a:[Ch()]},linkWithRedirect:{name:"linkWithRedirect",a:[Ch()]},reauthenticate:{name:"reauthenticate",a:[Bh()]},reload:{name:"reload",a:[]},sendEmailVerification:{name:"sendEmailVerification",a:[]},toJSON:{name:"toJSON",a:[S(null,!0)]},unlink:{name:"unlink",a:[S("provider")]},
	updateEmail:{name:"updateEmail",a:[S("email")]},updatePassword:{name:"updatePassword",a:[S("password")]},updateProfile:{name:"updateProfile",a:[T("profile")]}});Fh(C.prototype,{c:{name:"catch"},then:{name:"then"}});U(Zf,"credential",function(a,b){return new Wf(a,b)},[S("email"),S("password")]);Fh(Sf.prototype,{addScope:{name:"addScope",a:[S("scope")]},setCustomParameters:{name:"setCustomParameters",a:[T("customOAuthParameters")]}});U(Sf,"credential",Sf.credential,[Dh(S(),T(),"token")]);
	Fh(Tf.prototype,{addScope:{name:"addScope",a:[S("scope")]},setCustomParameters:{name:"setCustomParameters",a:[T("customOAuthParameters")]}});U(Tf,"credential",Tf.credential,[Dh(S(),T(),"token")]);Fh(Uf.prototype,{addScope:{name:"addScope",a:[S("scope")]},setCustomParameters:{name:"setCustomParameters",a:[T("customOAuthParameters")]}});U(Uf,"credential",Uf.credential,[Dh(S(),Dh(T(),Ah()),"idToken"),Dh(S(),Ah(),"accessToken",!0)]);Fh(Vf.prototype,{setCustomParameters:{name:"setCustomParameters",a:[T("customOAuthParameters")]}});
	U(Vf,"credential",Vf.credential,[Dh(S(),T(),"token"),S("secret",!0)]);
	(function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService){var a={Auth:Y,Error:O};U(a,"EmailAuthProvider",Zf,[]);U(a,"FacebookAuthProvider",Sf,[]);U(a,"GithubAuthProvider",Tf,[]);U(a,"GoogleAuthProvider",Uf,[]);U(a,"TwitterAuthProvider",Vf,[]);firebase.INTERNAL.registerService("auth",function(a,c){a=new Y(a);c({INTERNAL:{getToken:r(a.getToken,a),addAuthTokenListener:r(a.addAuthTokenListener,a),removeAuthTokenListener:r(a.removeAuthTokenListener,a)}});return a},
	a,function(a,c){if("create"===a)try{c.auth()}catch(d){}});firebase.INTERNAL.extendNamespace({User:W})}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();}).call(this);
	}).call(global);
	module.exports = firebase.auth;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var firebase = __webpack_require__(32);
	(function(){
	/*! @license Firebase v3.6.4
	    Build: 3.6.4-rc.2
	    Terms: https://firebase.google.com/terms/

	    ---

	    typedarray.js
	    Copyright (c) 2010, Linden Research, Inc.

	    Permission is hereby granted, free of charge, to any person obtaining a copy
	    of this software and associated documentation files (the "Software"), to deal
	    in the Software without restriction, including without limitation the rights
	    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	    copies of the Software, and to permit persons to whom the Software is
	    furnished to do so, subject to the following conditions:

	    The above copyright notice and this permission notice shall be included in
	    all copies or substantial portions of the Software.

	    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	    THE SOFTWARE. */
	(function() {var g,aa=this;function n(a){return void 0!==a}function ba(){}function ca(a){a.Vb=function(){return a.Ye?a.Ye:a.Ye=new a}}
	function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return"array"==da(a)}function fa(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"string"==typeof a}function ga(a){return"number"==typeof a}function ha(a){return"function"==da(a)}function ia(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function ja(a,b,c){return a.call.apply(a.bind,arguments)}
	function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka;return q.apply(null,arguments)}
	function la(a,b){function c(){}c.prototype=b.prototype;a.wg=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.sg=function(a,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[c].apply(a,h)}};function ma(){this.Wa=-1};function na(){this.Wa=-1;this.Wa=64;this.M=[];this.Vd=[];this.Af=[];this.zd=[];this.zd[0]=128;for(var a=1;a<this.Wa;++a)this.zd[a]=0;this.Pd=this.$b=0;this.reset()}la(na,ma);na.prototype.reset=function(){this.M[0]=1732584193;this.M[1]=4023233417;this.M[2]=2562383102;this.M[3]=271733878;this.M[4]=3285377520;this.Pd=this.$b=0};
	function oa(a,b,c){c||(c=0);var d=a.Af;if(p(b))for(var e=0;16>e;e++)d[e]=b.charCodeAt(c)<<24|b.charCodeAt(c+1)<<16|b.charCodeAt(c+2)<<8|b.charCodeAt(c+3),c+=4;else for(e=0;16>e;e++)d[e]=b[c]<<24|b[c+1]<<16|b[c+2]<<8|b[c+3],c+=4;for(e=16;80>e;e++){var f=d[e-3]^d[e-8]^d[e-14]^d[e-16];d[e]=(f<<1|f>>>31)&4294967295}b=a.M[0];c=a.M[1];for(var h=a.M[2],k=a.M[3],l=a.M[4],m,e=0;80>e;e++)40>e?20>e?(f=k^c&(h^k),m=1518500249):(f=c^h^k,m=1859775393):60>e?(f=c&h|k&(c|h),m=2400959708):(f=c^h^k,m=3395469782),f=(b<<
	5|b>>>27)+f+l+m+d[e]&4294967295,l=k,k=h,h=(c<<30|c>>>2)&4294967295,c=b,b=f;a.M[0]=a.M[0]+b&4294967295;a.M[1]=a.M[1]+c&4294967295;a.M[2]=a.M[2]+h&4294967295;a.M[3]=a.M[3]+k&4294967295;a.M[4]=a.M[4]+l&4294967295}
	na.prototype.update=function(a,b){if(null!=a){n(b)||(b=a.length);for(var c=b-this.Wa,d=0,e=this.Vd,f=this.$b;d<b;){if(0==f)for(;d<=c;)oa(this,a,d),d+=this.Wa;if(p(a))for(;d<b;){if(e[f]=a.charCodeAt(d),++f,++d,f==this.Wa){oa(this,e);f=0;break}}else for(;d<b;)if(e[f]=a[d],++f,++d,f==this.Wa){oa(this,e);f=0;break}}this.$b=f;this.Pd+=b}};function r(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function pa(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}function qa(a,b){for(var c in a)if(!b.call(void 0,a[c],c,a))return!1;return!0}function ra(a){var b=0,c;for(c in a)b++;return b}function sa(a){for(var b in a)return b}function ta(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function ua(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function va(a,b){for(var c in a)if(a[c]==b)return!0;return!1}
	function wa(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d}function xa(a,b){var c=wa(a,b,void 0);return c&&a[c]}function ya(a){for(var b in a)return!1;return!0}function za(a){var b={},c;for(c in a)b[c]=a[c];return b};function Aa(a){a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function Ba(){this.Fd=void 0}
	function Ca(a,b,c){switch(typeof b){case "string":Da(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined":c.push("null");break;case "object":if(null==b){c.push("null");break}if(ea(b)){var d=b.length;c.push("[");for(var e="",f=0;f<d;f++)c.push(e),e=b[f],Ca(a,a.Fd?a.Fd.call(b,String(f),e):e,c),e=",";c.push("]");break}c.push("{");d="";for(f in b)Object.prototype.hasOwnProperty.call(b,f)&&(e=b[f],"function"!=typeof e&&(c.push(d),Da(f,c),
	c.push(":"),Ca(a,a.Fd?a.Fd.call(b,f,e):e,c),d=","));c.push("}");break;case "function":break;default:throw Error("Unknown type: "+typeof b);}}var Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
	function Da(a,b){b.push('"',a.replace(Fa,function(a){if(a in Ea)return Ea[a];var b=a.charCodeAt(0),e="\\u";16>b?e+="000":256>b?e+="00":4096>b&&(e+="0");return Ea[a]=e+b.toString(16)}),'"')};var t;a:{var Ga=aa.navigator;if(Ga){var Ha=Ga.userAgent;if(Ha){t=Ha;break a}}t=""};var v=Array.prototype,Ia=v.indexOf?function(a,b,c){return v.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},Ja=v.forEach?function(a,b,c){v.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Ka=v.filter?function(a,b,c){return v.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,h=p(a)?
	a.split(""):a,k=0;k<d;k++)if(k in h){var l=h[k];b.call(c,l,k,a)&&(e[f++]=l)}return e},La=v.map?function(a,b,c){return v.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,h=0;h<d;h++)h in f&&(e[h]=b.call(c,f[h],h,a));return e},Ma=v.reduce?function(a,b,c,d){for(var e=[],f=1,h=arguments.length;f<h;f++)e.push(arguments[f]);d&&(e[0]=q(b,d));return v.reduce.apply(a,e)}:function(a,b,c,d){var e=c;Ja(a,function(c,h){e=b.call(d,e,c,h,a)});return e},Na=v.every?function(a,b,
	c){return v.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};function Oa(a,b){var c=Pa(a,b,void 0);return 0>c?null:p(a)?a.charAt(c):a[c]}function Pa(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}function Qa(a,b){var c=Ia(a,b);0<=c&&v.splice.call(a,c,1)}function Ra(a,b,c){return 2>=arguments.length?v.slice.call(a,b):v.slice.call(a,b,c)}
	function Sa(a,b){a.sort(b||Ta)}function Ta(a,b){return a>b?1:a<b?-1:0};var Ua=-1!=t.indexOf("Opera")||-1!=t.indexOf("OPR"),Va=-1!=t.indexOf("Trident")||-1!=t.indexOf("MSIE"),Wa=-1!=t.indexOf("Gecko")&&-1==t.toLowerCase().indexOf("webkit")&&!(-1!=t.indexOf("Trident")||-1!=t.indexOf("MSIE")),Xa=-1!=t.toLowerCase().indexOf("webkit");
	(function(){var a="",b;if(Ua&&aa.opera)return a=aa.opera.version,ha(a)?a():a;Wa?b=/rv\:([^\);]+)(\)|;)/:Va?b=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:Xa&&(b=/WebKit\/(\S+)/);b&&(a=(a=b.exec(t))?a[1]:"");return Va&&(b=(b=aa.document)?b.documentMode:void 0,b>parseFloat(a))?String(b):a})();var Ya=null,Za=null,$a=null;function ab(a,b){if(!fa(a))throw Error("encodeByteArray takes an array as a parameter");bb();for(var c=b?Za:Ya,d=[],e=0;e<a.length;e+=3){var f=a[e],h=e+1<a.length,k=h?a[e+1]:0,l=e+2<a.length,m=l?a[e+2]:0,u=f>>2,f=(f&3)<<4|k>>4,k=(k&15)<<2|m>>6,m=m&63;l||(m=64,h||(k=64));d.push(c[u],c[f],c[k],c[m])}return d.join("")}
	function bb(){if(!Ya){Ya={};Za={};$a={};for(var a=0;65>a;a++)Ya[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),Za[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a),$a[Za[a]]=a,62<=a&&($a["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)]=a)}};function cb(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function w(a,b){if(Object.prototype.hasOwnProperty.call(a,b))return a[b]}function db(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])};function x(a,b,c,d){var e;d<b?e="at least "+b:d>c&&(e=0===c?"none":"no more than "+c);if(e)throw Error(a+" failed: Was called with "+d+(1===d?" argument.":" arguments.")+" Expects "+e+".");}function y(a,b,c){var d="";switch(b){case 1:d=c?"first":"First";break;case 2:d=c?"second":"Second";break;case 3:d=c?"third":"Third";break;case 4:d=c?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a=a+" failed: "+(d+" argument ")}
	function A(a,b,c,d){if((!d||n(c))&&!ha(c))throw Error(y(a,b,d)+"must be a valid function.");}function eb(a,b,c){if(n(c)&&(!ia(c)||null===c))throw Error(y(a,b,!0)+"must be a valid context object.");};function fb(a){var b=[];db(a,function(a,d){ea(d)?Ja(d,function(d){b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))}):b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))});return b.length?"&"+b.join("&"):""};var gb=firebase.Promise;function hb(){var a=this;this.reject=this.resolve=null;this.ra=new gb(function(b,c){a.resolve=b;a.reject=c})}function ib(a,b){return function(c,d){c?a.reject(c):a.resolve(d);ha(b)&&(jb(a.ra),1===b.length?b(c):b(c,d))}}function jb(a){a.then(void 0,ba)};function kb(a,b){if(!a)throw lb(b);}function lb(a){return Error("Firebase Database ("+firebase.SDK_VERSION+") INTERNAL ASSERT FAILED: "+a)};function mb(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);55296<=e&&56319>=e&&(e-=55296,d++,kb(d<a.length,"Surrogate pair missing trail surrogate."),e=65536+(e<<10)+(a.charCodeAt(d)-56320));128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(65536>e?b[c++]=e>>12|224:(b[c++]=e>>18|240,b[c++]=e>>12&63|128),b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b}function nb(a){for(var b=0,c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b++:2048>d?b+=2:55296<=d&&56319>=d?(b+=4,c++):b+=3}return b};function ob(a){return"undefined"!==typeof JSON&&n(JSON.parse)?JSON.parse(a):Aa(a)}function B(a){if("undefined"!==typeof JSON&&n(JSON.stringify))a=JSON.stringify(a);else{var b=[];Ca(new Ba,a,b);a=b.join("")}return a};function pb(a,b){this.committed=a;this.snapshot=b};function qb(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined"!==typeof navigator&&"string"===typeof navigator.userAgent?navigator.userAgent:"")};function rb(a){this.re=a;this.Bd=[];this.Qb=0;this.Xd=-1;this.Fb=null}function sb(a,b,c){a.Xd=b;a.Fb=c;a.Xd<a.Qb&&(a.Fb(),a.Fb=null)}function tb(a,b,c){for(a.Bd[b]=c;a.Bd[a.Qb];){var d=a.Bd[a.Qb];delete a.Bd[a.Qb];for(var e=0;e<d.length;++e)if(d[e]){var f=a;ub(function(){f.re(d[e])})}if(a.Qb===a.Xd){a.Fb&&(clearTimeout(a.Fb),a.Fb(),a.Fb=null);break}a.Qb++}};function vb(){this.pc={}}vb.prototype.set=function(a,b){null==b?delete this.pc[a]:this.pc[a]=b};vb.prototype.get=function(a){return cb(this.pc,a)?this.pc[a]:null};vb.prototype.remove=function(a){delete this.pc[a]};vb.prototype.Ze=!0;function wb(a){this.uc=a;this.Cd="firebase:"}g=wb.prototype;g.set=function(a,b){null==b?this.uc.removeItem(this.Cd+a):this.uc.setItem(this.Cd+a,B(b))};g.get=function(a){a=this.uc.getItem(this.Cd+a);return null==a?null:ob(a)};g.remove=function(a){this.uc.removeItem(this.Cd+a)};g.Ze=!1;g.toString=function(){return this.uc.toString()};function xb(a){try{if("undefined"!==typeof window&&"undefined"!==typeof window[a]){var b=window[a];b.setItem("firebase:sentinel","cache");b.removeItem("firebase:sentinel");return new wb(b)}}catch(c){}return new vb}var yb=xb("localStorage"),zb=xb("sessionStorage");function Ab(a,b,c){this.type=Bb;this.source=a;this.path=b;this.Ga=c}Ab.prototype.Mc=function(a){return this.path.e()?new Ab(this.source,C,this.Ga.Q(a)):new Ab(this.source,D(this.path),this.Ga)};Ab.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};function Cb(a,b){this.type=Db;this.source=a;this.path=b}Cb.prototype.Mc=function(){return this.path.e()?new Cb(this.source,C):new Cb(this.source,D(this.path))};Cb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"};function Eb(a){this.oc=a}Eb.prototype.getToken=function(a){return this.oc.INTERNAL.getToken(a).then(null,function(a){return a&&"auth/token-not-initialized"===a.code?(E("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(a)})};function Fb(a,b){a.oc.INTERNAL.addAuthTokenListener(b)};function Gb(){this.Jd=G}Gb.prototype.j=function(a){return this.Jd.P(a)};Gb.prototype.toString=function(){return this.Jd.toString()};function Hb(a,b,c,d,e){this.host=a.toLowerCase();this.domain=this.host.substr(this.host.indexOf(".")+1);this.Sc=b;this.ne=c;this.qg=d;this.gf=e||"";this.$a=yb.get("host:"+a)||this.host}function Ib(a,b){b!==a.$a&&(a.$a=b,"s-"===a.$a.substr(0,2)&&yb.set("host:"+a.host,a.$a))}
	function Jb(a,b,c){H("string"===typeof b,"typeof type must == string");H("object"===typeof c,"typeof params must == object");if("websocket"===b)b=(a.Sc?"wss://":"ws://")+a.$a+"/.ws?";else if("long_polling"===b)b=(a.Sc?"https://":"http://")+a.$a+"/.lp?";else throw Error("Unknown connection type: "+b);a.host!==a.$a&&(c.ns=a.ne);var d=[];r(c,function(a,b){d.push(b+"="+a)});return b+d.join("&")}
	Hb.prototype.toString=function(){var a=(this.Sc?"https://":"http://")+this.host;this.gf&&(a+="<"+this.gf+">");return a};function Kb(){this.tc={}}function Lb(a,b,c){n(c)||(c=1);cb(a.tc,b)||(a.tc[b]=0);a.tc[b]+=c}Kb.prototype.get=function(){return za(this.tc)};function Mb(a){this.Ef=a;this.rd=null}Mb.prototype.get=function(){var a=this.Ef.get(),b=za(a);if(this.rd)for(var c in this.rd)b[c]-=this.rd[c];this.rd=a;return b};function Nb(){this.vb=[]}function Ob(a,b){for(var c=null,d=0;d<b.length;d++){var e=b[d],f=e.Yb();null===c||f.Z(c.Yb())||(a.vb.push(c),c=null);null===c&&(c=new Pb(f));c.add(e)}c&&a.vb.push(c)}function Qb(a,b,c){Ob(a,c);Rb(a,function(a){return a.Z(b)})}function Sb(a,b,c){Ob(a,c);Rb(a,function(a){return a.contains(b)||b.contains(a)})}
	function Rb(a,b){for(var c=!0,d=0;d<a.vb.length;d++){var e=a.vb[d];if(e)if(e=e.Yb(),b(e)){for(var e=a.vb[d],f=0;f<e.jd.length;f++){var h=e.jd[f];if(null!==h){e.jd[f]=null;var k=h.Tb();Tb&&E("event: "+h.toString());ub(k)}}a.vb[d]=null}else c=!1}c&&(a.vb=[])}function Pb(a){this.qa=a;this.jd=[]}Pb.prototype.add=function(a){this.jd.push(a)};Pb.prototype.Yb=function(){return this.qa};function Ub(a,b,c,d){this.$d=b;this.Md=c;this.Dd=d;this.hd=a}Ub.prototype.Yb=function(){var a=this.Md.wb();return"value"===this.hd?a.path:a.getParent().path};Ub.prototype.ee=function(){return this.hd};Ub.prototype.Tb=function(){return this.$d.Tb(this)};Ub.prototype.toString=function(){return this.Yb().toString()+":"+this.hd+":"+B(this.Md.Qe())};function Vb(a,b,c){this.$d=a;this.error=b;this.path=c}Vb.prototype.Yb=function(){return this.path};Vb.prototype.ee=function(){return"cancel"};
	Vb.prototype.Tb=function(){return this.$d.Tb(this)};Vb.prototype.toString=function(){return this.path.toString()+":cancel"};function Wb(){}Wb.prototype.Te=function(){return null};Wb.prototype.de=function(){return null};var Xb=new Wb;function Yb(a,b,c){this.xf=a;this.Ka=b;this.yd=c}Yb.prototype.Te=function(a){var b=this.Ka.N;if(Zb(b,a))return b.j().Q(a);b=null!=this.yd?new $b(this.yd,!0,!1):this.Ka.w();return this.xf.qc(a,b)};Yb.prototype.de=function(a,b,c){var d=null!=this.yd?this.yd:ac(this.Ka);a=this.xf.Wd(d,b,1,c,a);return 0===a.length?null:a[0]};function I(a,b,c,d){this.type=a;this.Ja=b;this.Xa=c;this.oe=d;this.Dd=void 0}function bc(a){return new I(cc,a)}var cc="value";function $b(a,b,c){this.A=a;this.da=b;this.Sb=c}function dc(a){return a.da}function ec(a){return a.Sb}function fc(a,b){return b.e()?a.da&&!a.Sb:Zb(a,J(b))}function Zb(a,b){return a.da&&!a.Sb||a.A.Da(b)}$b.prototype.j=function(){return this.A};function gc(a,b){return hc(a.name,b.name)}function ic(a,b){return hc(a,b)};function K(a,b){this.name=a;this.R=b}function jc(a,b){return new K(a,b)};function kc(a,b){return a&&"object"===typeof a?(H(".sv"in a,"Unexpected leaf node or priority contents"),b[a[".sv"]]):a}function lc(a,b){var c=new mc;nc(a,new L(""),function(a,e){oc(c,a,pc(e,b))});return c}function pc(a,b){var c=a.C().H(),c=kc(c,b),d;if(a.J()){var e=kc(a.Ca(),b);return e!==a.Ca()||c!==a.C().H()?new qc(e,M(c)):a}d=a;c!==a.C().H()&&(d=d.fa(new qc(c)));a.O(N,function(a,c){var e=pc(c,b);e!==c&&(d=d.T(a,e))});return d};var rc=function(){var a=1;return function(){return a++}}(),H=kb,sc=lb;
	function tc(a){try{var b;bb();for(var c=$a,d=[],e=0;e<a.length;){var f=c[a.charAt(e++)],h=e<a.length?c[a.charAt(e)]:0;++e;var k=e<a.length?c[a.charAt(e)]:64;++e;var l=e<a.length?c[a.charAt(e)]:64;++e;if(null==f||null==h||null==k||null==l)throw Error();d.push(f<<2|h>>4);64!=k&&(d.push(h<<4&240|k>>2),64!=l&&d.push(k<<6&192|l))}if(8192>d.length)b=String.fromCharCode.apply(null,d);else{a="";for(c=0;c<d.length;c+=8192)a+=String.fromCharCode.apply(null,Ra(d,c,c+8192));b=a}return b}catch(m){E("base64Decode failed: ",
	m)}return null}function uc(a){var b=mb(a);a=new na;a.update(b);var b=[],c=8*a.Pd;56>a.$b?a.update(a.zd,56-a.$b):a.update(a.zd,a.Wa-(a.$b-56));for(var d=a.Wa-1;56<=d;d--)a.Vd[d]=c&255,c/=256;oa(a,a.Vd);for(d=c=0;5>d;d++)for(var e=24;0<=e;e-=8)b[c]=a.M[d]>>e&255,++c;return ab(b)}function vc(a){for(var b="",c=0;c<arguments.length;c++)b=fa(arguments[c])?b+vc.apply(null,arguments[c]):"object"===typeof arguments[c]?b+B(arguments[c]):b+arguments[c],b+=" ";return b}var Tb=null,wc=!0;
	function xc(a,b){kb(!b||!0===a||!1===a,"Can't turn on custom loggers persistently.");!0===a?("undefined"!==typeof console&&("function"===typeof console.log?Tb=q(console.log,console):"object"===typeof console.log&&(Tb=function(a){console.log(a)})),b&&zb.set("logging_enabled",!0)):ha(a)?Tb=a:(Tb=null,zb.remove("logging_enabled"))}function E(a){!0===wc&&(wc=!1,null===Tb&&!0===zb.get("logging_enabled")&&xc(!0));if(Tb){var b=vc.apply(null,arguments);Tb(b)}}
	function yc(a){return function(){E(a,arguments)}}function zc(a){if("undefined"!==typeof console){var b="FIREBASE INTERNAL ERROR: "+vc.apply(null,arguments);"undefined"!==typeof console.error?console.error(b):console.log(b)}}function Ac(a){var b=vc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+b);}function O(a){if("undefined"!==typeof console){var b="FIREBASE WARNING: "+vc.apply(null,arguments);"undefined"!==typeof console.warn?console.warn(b):console.log(b)}}
	function Bc(a){var b,c,d,e,f,h=a;f=c=a=b="";d=!0;e="https";if(p(h)){var k=h.indexOf("//");0<=k&&(e=h.substring(0,k-1),h=h.substring(k+2));k=h.indexOf("/");-1===k&&(k=h.length);b=h.substring(0,k);f="";h=h.substring(k).split("/");for(k=0;k<h.length;k++)if(0<h[k].length){var l=h[k];try{l=decodeURIComponent(l.replace(/\+/g," "))}catch(m){}f+="/"+l}h=b.split(".");3===h.length?(a=h[1],c=h[0].toLowerCase()):2===h.length&&(a=h[0]);k=b.indexOf(":");0<=k&&(d="https"===e||"wss"===e)}"firebase"===a&&Ac(b+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
	c&&"undefined"!=c||Ac("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d||"undefined"!==typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");return{jc:new Hb(b,d,c,"ws"===e||"wss"===e),path:new L(f)}}function Cc(a){return ga(a)&&(a!=a||a==Number.POSITIVE_INFINITY||a==Number.NEGATIVE_INFINITY)}
	function Dc(a){if("complete"===document.readyState)a();else{var b=!1,c=function(){document.body?b||(b=!0,a()):setTimeout(c,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",c,!1),window.addEventListener("load",c,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&c()}),window.attachEvent("onload",c))}}
	function hc(a,b){if(a===b)return 0;if("[MIN_NAME]"===a||"[MAX_NAME]"===b)return-1;if("[MIN_NAME]"===b||"[MAX_NAME]"===a)return 1;var c=Ec(a),d=Ec(b);return null!==c?null!==d?0==c-d?a.length-b.length:c-d:-1:null!==d?1:a<b?-1:1}function Fc(a,b){if(b&&a in b)return b[a];throw Error("Missing required key ("+a+") in object: "+B(b));}
	function Gc(a){if("object"!==typeof a||null===a)return B(a);var b=[],c;for(c in a)b.push(c);b.sort();c="{";for(var d=0;d<b.length;d++)0!==d&&(c+=","),c+=B(b[d]),c+=":",c+=Gc(a[b[d]]);return c+"}"}function Hc(a,b){if(a.length<=b)return[a];for(var c=[],d=0;d<a.length;d+=b)d+b>a?c.push(a.substring(d,a.length)):c.push(a.substring(d,d+b));return c}function Ic(a,b){if(ea(a))for(var c=0;c<a.length;++c)b(c,a[c]);else r(a,b)}
	function Jc(a){H(!Cc(a),"Invalid JSON number");var b,c,d,e;0===a?(d=c=0,b=-Infinity===1/a?1:0):(b=0>a,a=Math.abs(a),a>=Math.pow(2,-1022)?(d=Math.min(Math.floor(Math.log(a)/Math.LN2),1023),c=d+1023,d=Math.round(a*Math.pow(2,52-d)-Math.pow(2,52))):(c=0,d=Math.round(a/Math.pow(2,-1074))));e=[];for(a=52;a;--a)e.push(d%2?1:0),d=Math.floor(d/2);for(a=11;a;--a)e.push(c%2?1:0),c=Math.floor(c/2);e.push(b?1:0);e.reverse();b=e.join("");c="";for(a=0;64>a;a+=8)d=parseInt(b.substr(a,8),2).toString(16),1===d.length&&
	(d="0"+d),c+=d;return c.toLowerCase()}var Kc=/^-?\d{1,10}$/;function Ec(a){return Kc.test(a)&&(a=Number(a),-2147483648<=a&&2147483647>=a)?a:null}function ub(a){try{a()}catch(b){setTimeout(function(){O("Exception was thrown by user callback.",b.stack||"");throw b;},Math.floor(0))}}function Lc(a,b,c){Object.defineProperty(a,b,{get:c})}function Mc(a,b){var c=setTimeout(a,b);"object"===typeof c&&c.unref&&c.unref();return c};function Nc(a){var b={},c={},d={},e="";try{var f=a.split("."),b=ob(tc(f[0])||""),c=ob(tc(f[1])||""),e=f[2],d=c.d||{};delete c.d}catch(h){}return{tg:b,Ie:c,data:d,mg:e}}function Oc(a){a=Nc(a);var b=a.Ie;return!!a.mg&&!!b&&"object"===typeof b&&b.hasOwnProperty("iat")}function Pc(a){a=Nc(a).Ie;return"object"===typeof a&&!0===w(a,"admin")};function Qc(a,b,c){this.f=yc("p:rest:");this.L=a;this.Gb=b;this.$c=c;this.$={}}function Rc(a,b){if(n(b))return"tag$"+b;H(Sc(a.m),"should have a tag if it's not a default query.");return a.path.toString()}g=Qc.prototype;
	g.$e=function(a,b,c,d){var e=a.path.toString();this.f("Listen called for "+e+" "+a.ja());var f=Rc(a,c),h={};this.$[f]=h;a=Tc(a.m);var k=this;Uc(this,e+".json",a,function(a,b){var u=b;404===a&&(a=u=null);null===a&&k.Gb(e,u,!1,c);w(k.$,f)===h&&d(a?401==a?"permission_denied":"rest_error:"+a:"ok",null)})};g.uf=function(a,b){var c=Rc(a,b);delete this.$[c]};g.kf=function(){};g.pe=function(){};g.cf=function(){};g.xd=function(){};g.put=function(){};g.af=function(){};g.we=function(){};
	function Uc(a,b,c,d){c=c||{};c.format="export";a.$c.getToken(!1).then(function(e){(e=e&&e.accessToken)&&(c.auth=e);var f=(a.L.Sc?"https://":"http://")+a.L.host+b+"?"+fb(c);a.f("Sending REST request for "+f);var h=new XMLHttpRequest;h.onreadystatechange=function(){if(d&&4===h.readyState){a.f("REST Response for "+f+" received. status:",h.status,"response:",h.responseText);var b=null;if(200<=h.status&&300>h.status){try{b=ob(h.responseText)}catch(c){O("Failed to parse JSON response for "+f+": "+h.responseText)}d(null,
	b)}else 401!==h.status&&404!==h.status&&O("Got unsuccessful REST response for "+f+" Status: "+h.status),d(h.status);d=null}};h.open("GET",f,!0);h.send()})};function Vc(a,b,c){this.type=Wc;this.source=a;this.path=b;this.children=c}Vc.prototype.Mc=function(a){if(this.path.e())return a=this.children.subtree(new L(a)),a.e()?null:a.value?new Ab(this.source,C,a.value):new Vc(this.source,C,a);H(J(this.path)===a,"Can't get a merge for a child not on the path of the operation");return new Vc(this.source,D(this.path),this.children)};Vc.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"};function Xc(a,b){this.rf={};this.Vc=new Mb(a);this.va=b;var c=1E4+2E4*Math.random();Mc(q(this.lf,this),Math.floor(c))}Xc.prototype.lf=function(){var a=this.Vc.get(),b={},c=!1,d;for(d in a)0<a[d]&&cb(this.rf,d)&&(b[d]=a[d],c=!0);c&&this.va.we(b);Mc(q(this.lf,this),Math.floor(6E5*Math.random()))};var Yc={},Zc={};function $c(a){a=a.toString();Yc[a]||(Yc[a]=new Kb);return Yc[a]}function ad(a,b){var c=a.toString();Zc[c]||(Zc[c]=b());return Zc[c]};var bd=null;"undefined"!==typeof MozWebSocket?bd=MozWebSocket:"undefined"!==typeof WebSocket&&(bd=WebSocket);function cd(a,b,c,d){this.Yd=a;this.f=yc(this.Yd);this.frames=this.zc=null;this.pb=this.qb=this.De=0;this.Va=$c(b);a={v:"5"};"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");c&&(a.s=c);d&&(a.ls=d);this.Je=Jb(b,"websocket",a)}var dd;
	cd.prototype.open=function(a,b){this.ib=b;this.Xf=a;this.f("Websocket connecting to "+this.Je);this.wc=!1;yb.set("previous_websocket_failure",!0);try{this.Ia=new bd(this.Je)}catch(c){this.f("Error instantiating WebSocket.");var d=c.message||c.data;d&&this.f(d);this.bb();return}var e=this;this.Ia.onopen=function(){e.f("Websocket connected.");e.wc=!0};this.Ia.onclose=function(){e.f("Websocket connection was disconnected.");e.Ia=null;e.bb()};this.Ia.onmessage=function(a){if(null!==e.Ia)if(a=a.data,e.pb+=
	a.length,Lb(e.Va,"bytes_received",a.length),ed(e),null!==e.frames)fd(e,a);else{a:{H(null===e.frames,"We already have a frame buffer");if(6>=a.length){var b=Number(a);if(!isNaN(b)){e.De=b;e.frames=[];a=null;break a}}e.De=1;e.frames=[]}null!==a&&fd(e,a)}};this.Ia.onerror=function(a){e.f("WebSocket error.  Closing connection.");(a=a.message||a.data)&&e.f(a);e.bb()}};cd.prototype.start=function(){};
	cd.isAvailable=function(){var a=!1;if("undefined"!==typeof navigator&&navigator.userAgent){var b=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b&&1<b.length&&4.4>parseFloat(b[1])&&(a=!0)}return!a&&null!==bd&&!dd};cd.responsesRequiredToBeHealthy=2;cd.healthyTimeout=3E4;g=cd.prototype;g.sd=function(){yb.remove("previous_websocket_failure")};function fd(a,b){a.frames.push(b);if(a.frames.length==a.De){var c=a.frames.join("");a.frames=null;c=ob(c);a.Xf(c)}}
	g.send=function(a){ed(this);a=B(a);this.qb+=a.length;Lb(this.Va,"bytes_sent",a.length);a=Hc(a,16384);1<a.length&&gd(this,String(a.length));for(var b=0;b<a.length;b++)gd(this,a[b])};g.Tc=function(){this.Ab=!0;this.zc&&(clearInterval(this.zc),this.zc=null);this.Ia&&(this.Ia.close(),this.Ia=null)};g.bb=function(){this.Ab||(this.f("WebSocket is closing itself"),this.Tc(),this.ib&&(this.ib(this.wc),this.ib=null))};g.close=function(){this.Ab||(this.f("WebSocket is being closed"),this.Tc())};
	function ed(a){clearInterval(a.zc);a.zc=setInterval(function(){a.Ia&&gd(a,"0");ed(a)},Math.floor(45E3))}function gd(a,b){try{a.Ia.send(b)}catch(c){a.f("Exception thrown from WebSocket.send():",c.message||c.data,"Closing connection."),setTimeout(q(a.bb,a),0)}};function hd(){this.fb={}}
	function jd(a,b){var c=b.type,d=b.Xa;H("child_added"==c||"child_changed"==c||"child_removed"==c,"Only child changes supported for tracking");H(".priority"!==d,"Only non-priority child changes can be tracked.");var e=w(a.fb,d);if(e){var f=e.type;if("child_added"==c&&"child_removed"==f)a.fb[d]=new I("child_changed",b.Ja,d,e.Ja);else if("child_removed"==c&&"child_added"==f)delete a.fb[d];else if("child_removed"==c&&"child_changed"==f)a.fb[d]=new I("child_removed",e.oe,d);else if("child_changed"==c&&
	"child_added"==f)a.fb[d]=new I("child_added",b.Ja,d);else if("child_changed"==c&&"child_changed"==f)a.fb[d]=new I("child_changed",b.Ja,d,e.oe);else throw sc("Illegal combination of changes: "+b+" occurred after "+e);}else a.fb[d]=b};function kd(a){this.V=a;this.g=a.m.g}function ld(a,b,c,d){var e=[],f=[];Ja(b,function(b){"child_changed"===b.type&&a.g.nd(b.oe,b.Ja)&&f.push(new I("child_moved",b.Ja,b.Xa))});md(a,e,"child_removed",b,d,c);md(a,e,"child_added",b,d,c);md(a,e,"child_moved",f,d,c);md(a,e,"child_changed",b,d,c);md(a,e,cc,b,d,c);return e}function md(a,b,c,d,e,f){d=Ka(d,function(a){return a.type===c});Sa(d,q(a.Ff,a));Ja(d,function(c){var d=nd(a,c,f);Ja(e,function(e){e.nf(c.type)&&b.push(e.createEvent(d,a.V))})})}
	function nd(a,b,c){"value"!==b.type&&"child_removed"!==b.type&&(b.Dd=c.Ve(b.Xa,b.Ja,a.g));return b}kd.prototype.Ff=function(a,b){if(null==a.Xa||null==b.Xa)throw sc("Should only compare child_ events.");return this.g.compare(new K(a.Xa,a.Ja),new K(b.Xa,b.Ja))};function od(a,b){this.Sd=a;this.Df=b}function pd(a){this.U=a}
	pd.prototype.eb=function(a,b,c,d){var e=new hd,f;if(b.type===Bb)b.source.ce?c=qd(this,a,b.path,b.Ga,c,d,e):(H(b.source.Se,"Unknown source."),f=b.source.Ce||ec(a.w())&&!b.path.e(),c=rd(this,a,b.path,b.Ga,c,d,f,e));else if(b.type===Wc)b.source.ce?c=sd(this,a,b.path,b.children,c,d,e):(H(b.source.Se,"Unknown source."),f=b.source.Ce||ec(a.w()),c=td(this,a,b.path,b.children,c,d,f,e));else if(b.type===ud)if(b.Id)if(b=b.path,null!=c.lc(b))c=a;else{f=new Yb(c,a,d);d=a.N.j();if(b.e()||".priority"===J(b))dc(a.w())?
	b=c.Aa(ac(a)):(b=a.w().j(),H(b instanceof P,"serverChildren would be complete if leaf node"),b=c.rc(b)),b=this.U.ya(d,b,e);else{var h=J(b),k=c.qc(h,a.w());null==k&&Zb(a.w(),h)&&(k=d.Q(h));b=null!=k?this.U.F(d,h,k,D(b),f,e):a.N.j().Da(h)?this.U.F(d,h,G,D(b),f,e):d;b.e()&&dc(a.w())&&(d=c.Aa(ac(a)),d.J()&&(b=this.U.ya(b,d,e)))}d=dc(a.w())||null!=c.lc(C);c=vd(a,b,d,this.U.Na())}else c=wd(this,a,b.path,b.Ob,c,d,e);else if(b.type===Db)d=b.path,b=a.w(),f=b.j(),h=b.da||d.e(),c=xd(this,new yd(a.N,new $b(f,
	h,b.Sb)),d,c,Xb,e);else throw sc("Unknown operation type: "+b.type);e=ta(e.fb);d=c;b=d.N;b.da&&(f=b.j().J()||b.j().e(),h=zd(a),(0<e.length||!a.N.da||f&&!b.j().Z(h)||!b.j().C().Z(h.C()))&&e.push(bc(zd(d))));return new od(c,e)};
	function xd(a,b,c,d,e,f){var h=b.N;if(null!=d.lc(c))return b;var k;if(c.e())H(dc(b.w()),"If change path is empty, we must have complete server data"),ec(b.w())?(e=ac(b),d=d.rc(e instanceof P?e:G)):d=d.Aa(ac(b)),f=a.U.ya(b.N.j(),d,f);else{var l=J(c);if(".priority"==l)H(1==Ad(c),"Can't have a priority with additional path components"),f=h.j(),k=b.w().j(),d=d.ad(c,f,k),f=null!=d?a.U.fa(f,d):h.j();else{var m=D(c);Zb(h,l)?(k=b.w().j(),d=d.ad(c,h.j(),k),d=null!=d?h.j().Q(l).F(m,d):h.j().Q(l)):d=d.qc(l,
	b.w());f=null!=d?a.U.F(h.j(),l,d,m,e,f):h.j()}}return vd(b,f,h.da||c.e(),a.U.Na())}function rd(a,b,c,d,e,f,h,k){var l=b.w();h=h?a.U:a.U.Ub();if(c.e())d=h.ya(l.j(),d,null);else if(h.Na()&&!l.Sb)d=l.j().F(c,d),d=h.ya(l.j(),d,null);else{var m=J(c);if(!fc(l,c)&&1<Ad(c))return b;var u=D(c);d=l.j().Q(m).F(u,d);d=".priority"==m?h.fa(l.j(),d):h.F(l.j(),m,d,u,Xb,null)}l=l.da||c.e();b=new yd(b.N,new $b(d,l,h.Na()));return xd(a,b,c,e,new Yb(e,b,f),k)}
	function qd(a,b,c,d,e,f,h){var k=b.N;e=new Yb(e,b,f);if(c.e())h=a.U.ya(b.N.j(),d,h),a=vd(b,h,!0,a.U.Na());else if(f=J(c),".priority"===f)h=a.U.fa(b.N.j(),d),a=vd(b,h,k.da,k.Sb);else{c=D(c);var l=k.j().Q(f);if(!c.e()){var m=e.Te(f);d=null!=m?".priority"===Bd(c)&&m.P(c.parent()).e()?m:m.F(c,d):G}l.Z(d)?a=b:(h=a.U.F(k.j(),f,d,c,e,h),a=vd(b,h,k.da,a.U.Na()))}return a}
	function sd(a,b,c,d,e,f,h){var k=b;Cd(d,function(d,m){var u=c.n(d);Zb(b.N,J(u))&&(k=qd(a,k,u,m,e,f,h))});Cd(d,function(d,m){var u=c.n(d);Zb(b.N,J(u))||(k=qd(a,k,u,m,e,f,h))});return k}function Dd(a,b){Cd(b,function(b,d){a=a.F(b,d)});return a}
	function td(a,b,c,d,e,f,h,k){if(b.w().j().e()&&!dc(b.w()))return b;var l=b;c=c.e()?d:Ed(Q,c,d);var m=b.w().j();c.children.ha(function(c,d){if(m.Da(c)){var F=b.w().j().Q(c),F=Dd(F,d);l=rd(a,l,new L(c),F,e,f,h,k)}});c.children.ha(function(c,d){var F=!Zb(b.w(),c)&&null==d.value;m.Da(c)||F||(F=b.w().j().Q(c),F=Dd(F,d),l=rd(a,l,new L(c),F,e,f,h,k))});return l}
	function wd(a,b,c,d,e,f,h){if(null!=e.lc(c))return b;var k=ec(b.w()),l=b.w();if(null!=d.value){if(c.e()&&l.da||fc(l,c))return rd(a,b,c,l.j().P(c),e,f,k,h);if(c.e()){var m=Q;l.j().O(Fd,function(a,b){m=m.set(new L(a),b)});return td(a,b,c,m,e,f,k,h)}return b}m=Q;Cd(d,function(a){var b=c.n(a);fc(l,b)&&(m=m.set(a,l.j().P(b)))});return td(a,b,c,m,e,f,k,h)};function Gd(a){this.g=a}g=Gd.prototype;g.F=function(a,b,c,d,e,f){H(a.yc(this.g),"A node must be indexed if only a child is updated");e=a.Q(b);if(e.P(d).Z(c.P(d))&&e.e()==c.e())return a;null!=f&&(c.e()?a.Da(b)?jd(f,new I("child_removed",e,b)):H(a.J(),"A child remove without an old child only makes sense on a leaf node"):e.e()?jd(f,new I("child_added",c,b)):jd(f,new I("child_changed",c,b,e)));return a.J()&&c.e()?a:a.T(b,c).nb(this.g)};
	g.ya=function(a,b,c){null!=c&&(a.J()||a.O(N,function(a,e){b.Da(a)||jd(c,new I("child_removed",e,a))}),b.J()||b.O(N,function(b,e){if(a.Da(b)){var f=a.Q(b);f.Z(e)||jd(c,new I("child_changed",e,b,f))}else jd(c,new I("child_added",e,b))}));return b.nb(this.g)};g.fa=function(a,b){return a.e()?G:a.fa(b)};g.Na=function(){return!1};g.Ub=function(){return this};function Hd(a){this.fe=new Gd(a.g);this.g=a.g;var b;a.ka?(b=Id(a),b=a.g.Ec(Jd(a),b)):b=a.g.Hc();this.Uc=b;a.na?(b=Kd(a),a=a.g.Ec(Ld(a),b)):a=a.g.Fc();this.vc=a}g=Hd.prototype;g.matches=function(a){return 0>=this.g.compare(this.Uc,a)&&0>=this.g.compare(a,this.vc)};g.F=function(a,b,c,d,e,f){this.matches(new K(b,c))||(c=G);return this.fe.F(a,b,c,d,e,f)};
	g.ya=function(a,b,c){b.J()&&(b=G);var d=b.nb(this.g),d=d.fa(G),e=this;b.O(N,function(a,b){e.matches(new K(a,b))||(d=d.T(a,G))});return this.fe.ya(a,d,c)};g.fa=function(a){return a};g.Na=function(){return!0};g.Ub=function(){return this.fe};function Md(a){this.sa=new Hd(a);this.g=a.g;H(a.xa,"Only valid if limit has been set");this.oa=a.oa;this.Ib=!Nd(a)}g=Md.prototype;g.F=function(a,b,c,d,e,f){this.sa.matches(new K(b,c))||(c=G);return a.Q(b).Z(c)?a:a.Eb()<this.oa?this.sa.Ub().F(a,b,c,d,e,f):Od(this,a,b,c,e,f)};
	g.ya=function(a,b,c){var d;if(b.J()||b.e())d=G.nb(this.g);else if(2*this.oa<b.Eb()&&b.yc(this.g)){d=G.nb(this.g);b=this.Ib?b.Zb(this.sa.vc,this.g):b.Xb(this.sa.Uc,this.g);for(var e=0;0<b.Pa.length&&e<this.oa;){var f=R(b),h;if(h=this.Ib?0>=this.g.compare(this.sa.Uc,f):0>=this.g.compare(f,this.sa.vc))d=d.T(f.name,f.R),e++;else break}}else{d=b.nb(this.g);d=d.fa(G);var k,l,m;if(this.Ib){b=d.We(this.g);k=this.sa.vc;l=this.sa.Uc;var u=Pd(this.g);m=function(a,b){return u(b,a)}}else b=d.Wb(this.g),k=this.sa.Uc,
	l=this.sa.vc,m=Pd(this.g);for(var e=0,z=!1;0<b.Pa.length;)f=R(b),!z&&0>=m(k,f)&&(z=!0),(h=z&&e<this.oa&&0>=m(f,l))?e++:d=d.T(f.name,G)}return this.sa.Ub().ya(a,d,c)};g.fa=function(a){return a};g.Na=function(){return!0};g.Ub=function(){return this.sa.Ub()};
	function Od(a,b,c,d,e,f){var h;if(a.Ib){var k=Pd(a.g);h=function(a,b){return k(b,a)}}else h=Pd(a.g);H(b.Eb()==a.oa,"");var l=new K(c,d),m=a.Ib?Qd(b,a.g):Rd(b,a.g),u=a.sa.matches(l);if(b.Da(c)){for(var z=b.Q(c),m=e.de(a.g,m,a.Ib);null!=m&&(m.name==c||b.Da(m.name));)m=e.de(a.g,m,a.Ib);e=null==m?1:h(m,l);if(u&&!d.e()&&0<=e)return null!=f&&jd(f,new I("child_changed",d,c,z)),b.T(c,d);null!=f&&jd(f,new I("child_removed",z,c));b=b.T(c,G);return null!=m&&a.sa.matches(m)?(null!=f&&jd(f,new I("child_added",
	m.R,m.name)),b.T(m.name,m.R)):b}return d.e()?b:u&&0<=h(m,l)?(null!=f&&(jd(f,new I("child_removed",m.R,m.name)),jd(f,new I("child_added",d,c))),b.T(c,d).T(m.name,G)):b};function qc(a,b){this.B=a;H(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value.");this.aa=b||G;Sd(this.aa);this.Db=null}var Td=["object","boolean","number","string"];g=qc.prototype;g.J=function(){return!0};g.C=function(){return this.aa};g.fa=function(a){return new qc(this.B,a)};g.Q=function(a){return".priority"===a?this.aa:G};g.P=function(a){return a.e()?this:".priority"===J(a)?this.aa:G};g.Da=function(){return!1};g.Ve=function(){return null};
	g.T=function(a,b){return".priority"===a?this.fa(b):b.e()&&".priority"!==a?this:G.T(a,b).fa(this.aa)};g.F=function(a,b){var c=J(a);if(null===c)return b;if(b.e()&&".priority"!==c)return this;H(".priority"!==c||1===Ad(a),".priority must be the last token in a path");return this.T(c,G.F(D(a),b))};g.e=function(){return!1};g.Eb=function(){return 0};g.O=function(){return!1};g.H=function(a){return a&&!this.C().e()?{".value":this.Ca(),".priority":this.C().H()}:this.Ca()};
	g.hash=function(){if(null===this.Db){var a="";this.aa.e()||(a+="priority:"+Ud(this.aa.H())+":");var b=typeof this.B,a=a+(b+":"),a="number"===b?a+Jc(this.B):a+this.B;this.Db=uc(a)}return this.Db};g.Ca=function(){return this.B};g.sc=function(a){if(a===G)return 1;if(a instanceof P)return-1;H(a.J(),"Unknown node type");var b=typeof a.B,c=typeof this.B,d=Ia(Td,b),e=Ia(Td,c);H(0<=d,"Unknown leaf type: "+b);H(0<=e,"Unknown leaf type: "+c);return d===e?"object"===c?0:this.B<a.B?-1:this.B===a.B?0:1:e-d};
	g.nb=function(){return this};g.yc=function(){return!0};g.Z=function(a){return a===this?!0:a.J()?this.B===a.B&&this.aa.Z(a.aa):!1};g.toString=function(){return B(this.H(!0))};function Vd(){}var Wd={};function Pd(a){return q(a.compare,a)}Vd.prototype.nd=function(a,b){return 0!==this.compare(new K("[MIN_NAME]",a),new K("[MIN_NAME]",b))};Vd.prototype.Hc=function(){return Xd};function Yd(a){H(!a.e()&&".priority"!==J(a),"Can't create PathIndex with empty path or .priority key");this.bc=a}la(Yd,Vd);g=Yd.prototype;g.xc=function(a){return!a.P(this.bc).e()};g.compare=function(a,b){var c=a.R.P(this.bc),d=b.R.P(this.bc),c=c.sc(d);return 0===c?hc(a.name,b.name):c};
	g.Ec=function(a,b){var c=M(a),c=G.F(this.bc,c);return new K(b,c)};g.Fc=function(){var a=G.F(this.bc,Zd);return new K("[MAX_NAME]",a)};g.toString=function(){return this.bc.slice().join("/")};function $d(){}la($d,Vd);g=$d.prototype;g.compare=function(a,b){var c=a.R.C(),d=b.R.C(),c=c.sc(d);return 0===c?hc(a.name,b.name):c};g.xc=function(a){return!a.C().e()};g.nd=function(a,b){return!a.C().Z(b.C())};g.Hc=function(){return Xd};g.Fc=function(){return new K("[MAX_NAME]",new qc("[PRIORITY-POST]",Zd))};
	g.Ec=function(a,b){var c=M(a);return new K(b,new qc("[PRIORITY-POST]",c))};g.toString=function(){return".priority"};var N=new $d;function ae(){}la(ae,Vd);g=ae.prototype;g.compare=function(a,b){return hc(a.name,b.name)};g.xc=function(){throw sc("KeyIndex.isDefinedOn not expected to be called.");};g.nd=function(){return!1};g.Hc=function(){return Xd};g.Fc=function(){return new K("[MAX_NAME]",G)};g.Ec=function(a){H(p(a),"KeyIndex indexValue must always be a string.");return new K(a,G)};g.toString=function(){return".key"};
	var Fd=new ae;function be(){}la(be,Vd);g=be.prototype;g.compare=function(a,b){var c=a.R.sc(b.R);return 0===c?hc(a.name,b.name):c};g.xc=function(){return!0};g.nd=function(a,b){return!a.Z(b)};g.Hc=function(){return Xd};g.Fc=function(){return ce};g.Ec=function(a,b){var c=M(a);return new K(b,c)};g.toString=function(){return".value"};var de=new be;function ee(){this.Rb=this.na=this.Kb=this.ka=this.xa=!1;this.oa=0;this.mb="";this.dc=null;this.zb="";this.ac=null;this.xb="";this.g=N}var fe=new ee;function Nd(a){return""===a.mb?a.ka:"l"===a.mb}function Jd(a){H(a.ka,"Only valid if start has been set");return a.dc}function Id(a){H(a.ka,"Only valid if start has been set");return a.Kb?a.zb:"[MIN_NAME]"}function Ld(a){H(a.na,"Only valid if end has been set");return a.ac}
	function Kd(a){H(a.na,"Only valid if end has been set");return a.Rb?a.xb:"[MAX_NAME]"}function ge(a){var b=new ee;b.xa=a.xa;b.oa=a.oa;b.ka=a.ka;b.dc=a.dc;b.Kb=a.Kb;b.zb=a.zb;b.na=a.na;b.ac=a.ac;b.Rb=a.Rb;b.xb=a.xb;b.g=a.g;b.mb=a.mb;return b}g=ee.prototype;g.le=function(a){var b=ge(this);b.xa=!0;b.oa=a;b.mb="l";return b};g.me=function(a){var b=ge(this);b.xa=!0;b.oa=a;b.mb="r";return b};g.Nd=function(a,b){var c=ge(this);c.ka=!0;n(a)||(a=null);c.dc=a;null!=b?(c.Kb=!0,c.zb=b):(c.Kb=!1,c.zb="");return c};
	g.gd=function(a,b){var c=ge(this);c.na=!0;n(a)||(a=null);c.ac=a;n(b)?(c.Rb=!0,c.xb=b):(c.vg=!1,c.xb="");return c};function he(a,b){var c=ge(a);c.g=b;return c}function ie(a){var b={};a.ka&&(b.sp=a.dc,a.Kb&&(b.sn=a.zb));a.na&&(b.ep=a.ac,a.Rb&&(b.en=a.xb));if(a.xa){b.l=a.oa;var c=a.mb;""===c&&(c=Nd(a)?"l":"r");b.vf=c}a.g!==N&&(b.i=a.g.toString());return b}function S(a){return!(a.ka||a.na||a.xa)}function Sc(a){return S(a)&&a.g==N}
	function Tc(a){var b={};if(Sc(a))return b;var c;a.g===N?c="$priority":a.g===de?c="$value":a.g===Fd?c="$key":(H(a.g instanceof Yd,"Unrecognized index type!"),c=a.g.toString());b.orderBy=B(c);a.ka&&(b.startAt=B(a.dc),a.Kb&&(b.startAt+=","+B(a.zb)));a.na&&(b.endAt=B(a.ac),a.Rb&&(b.endAt+=","+B(a.xb)));a.xa&&(Nd(a)?b.limitToFirst=a.oa:b.limitToLast=a.oa);return b}g.toString=function(){return B(ie(this))};function je(a,b){this.od=a;this.cc=b}je.prototype.get=function(a){var b=w(this.od,a);if(!b)throw Error("No index defined for "+a);return b===Wd?null:b};function ke(a,b,c){var d=pa(a.od,function(d,f){var h=w(a.cc,f);H(h,"Missing index implementation for "+f);if(d===Wd){if(h.xc(b.R)){for(var k=[],l=c.Wb(jc),m=R(l);m;)m.name!=b.name&&k.push(m),m=R(l);k.push(b);return le(k,Pd(h))}return Wd}h=c.get(b.name);k=d;h&&(k=k.remove(new K(b.name,h)));return k.Oa(b,b.R)});return new je(d,a.cc)}
	function me(a,b,c){var d=pa(a.od,function(a){if(a===Wd)return a;var d=c.get(b.name);return d?a.remove(new K(b.name,d)):a});return new je(d,a.cc)}var ne=new je({".priority":Wd},{".priority":N});function oe(){this.set={}}g=oe.prototype;g.add=function(a,b){this.set[a]=null!==b?b:!0};g.contains=function(a){return cb(this.set,a)};g.get=function(a){return this.contains(a)?this.set[a]:void 0};g.remove=function(a){delete this.set[a]};g.clear=function(){this.set={}};g.e=function(){return ya(this.set)};g.count=function(){return ra(this.set)};function pe(a,b){r(a.set,function(a,d){b(d,a)})}g.keys=function(){var a=[];r(this.set,function(b,c){a.push(c)});return a};function qe(a,b,c,d){this.Yd=a;this.f=yc(a);this.jc=b;this.pb=this.qb=0;this.Va=$c(b);this.tf=c;this.wc=!1;this.Cb=d;this.Yc=function(a){return Jb(b,"long_polling",a)}}var re,se;
	qe.prototype.open=function(a,b){this.Me=0;this.ia=b;this.bf=new rb(a);this.Ab=!1;var c=this;this.sb=setTimeout(function(){c.f("Timed out trying to connect.");c.bb();c.sb=null},Math.floor(3E4));Dc(function(){if(!c.Ab){c.Ta=new te(function(a,b,d,k,l){ue(c,arguments);if(c.Ta)if(c.sb&&(clearTimeout(c.sb),c.sb=null),c.wc=!0,"start"==a)c.id=b,c.ff=d;else if("close"===a)b?(c.Ta.Kd=!1,sb(c.bf,b,function(){c.bb()})):c.bb();else throw Error("Unrecognized command received: "+a);},function(a,b){ue(c,arguments);
	tb(c.bf,a,b)},function(){c.bb()},c.Yc);var a={start:"t"};a.ser=Math.floor(1E8*Math.random());c.Ta.Qd&&(a.cb=c.Ta.Qd);a.v="5";c.tf&&(a.s=c.tf);c.Cb&&(a.ls=c.Cb);"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");a=c.Yc(a);c.f("Connecting via long-poll to "+a);ve(c.Ta,a,function(){})}})};
	qe.prototype.start=function(){var a=this.Ta,b=this.ff;a.Vf=this.id;a.Wf=b;for(a.Ud=!0;we(a););a=this.id;b=this.ff;this.fc=document.createElement("iframe");var c={dframe:"t"};c.id=a;c.pw=b;this.fc.src=this.Yc(c);this.fc.style.display="none";document.body.appendChild(this.fc)};
	qe.isAvailable=function(){return re||!se&&"undefined"!==typeof document&&null!=document.createElement&&!("object"===typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"===typeof Windows&&"object"===typeof Windows.rg)&&!0};g=qe.prototype;g.sd=function(){};g.Tc=function(){this.Ab=!0;this.Ta&&(this.Ta.close(),this.Ta=null);this.fc&&(document.body.removeChild(this.fc),this.fc=null);this.sb&&(clearTimeout(this.sb),this.sb=null)};
	g.bb=function(){this.Ab||(this.f("Longpoll is closing itself"),this.Tc(),this.ia&&(this.ia(this.wc),this.ia=null))};g.close=function(){this.Ab||(this.f("Longpoll is being closed."),this.Tc())};g.send=function(a){a=B(a);this.qb+=a.length;Lb(this.Va,"bytes_sent",a.length);a=mb(a);a=ab(a,!0);a=Hc(a,1840);for(var b=0;b<a.length;b++){var c=this.Ta;c.Qc.push({jg:this.Me,pg:a.length,Oe:a[b]});c.Ud&&we(c);this.Me++}};function ue(a,b){var c=B(b).length;a.pb+=c;Lb(a.Va,"bytes_received",c)}
	function te(a,b,c,d){this.Yc=d;this.ib=c;this.te=new oe;this.Qc=[];this.Zd=Math.floor(1E8*Math.random());this.Kd=!0;this.Qd=rc();window["pLPCommand"+this.Qd]=a;window["pRTLPCB"+this.Qd]=b;a=document.createElement("iframe");a.style.display="none";if(document.body){document.body.appendChild(a);try{a.contentWindow.document||E("No IE domain setting required")}catch(e){a.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}}else throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
	a.contentDocument?a.gb=a.contentDocument:a.contentWindow?a.gb=a.contentWindow.document:a.document&&(a.gb=a.document);this.Ea=a;a="";this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(a='<script>document.domain="'+document.domain+'";\x3c/script>');a="<html><body>"+a+"</body></html>";try{this.Ea.gb.open(),this.Ea.gb.write(a),this.Ea.gb.close()}catch(f){E("frame writing exception"),f.stack&&E(f.stack),E(f)}}
	te.prototype.close=function(){this.Ud=!1;if(this.Ea){this.Ea.gb.body.innerHTML="";var a=this;setTimeout(function(){null!==a.Ea&&(document.body.removeChild(a.Ea),a.Ea=null)},Math.floor(0))}var b=this.ib;b&&(this.ib=null,b())};
	function we(a){if(a.Ud&&a.Kd&&a.te.count()<(0<a.Qc.length?2:1)){a.Zd++;var b={};b.id=a.Vf;b.pw=a.Wf;b.ser=a.Zd;for(var b=a.Yc(b),c="",d=0;0<a.Qc.length;)if(1870>=a.Qc[0].Oe.length+30+c.length){var e=a.Qc.shift(),c=c+"&seg"+d+"="+e.jg+"&ts"+d+"="+e.pg+"&d"+d+"="+e.Oe;d++}else break;xe(a,b+c,a.Zd);return!0}return!1}function xe(a,b,c){function d(){a.te.remove(c);we(a)}a.te.add(c,1);var e=setTimeout(d,Math.floor(25E3));ve(a,b,function(){clearTimeout(e);d()})}
	function ve(a,b,c){setTimeout(function(){try{if(a.Kd){var d=a.Ea.gb.createElement("script");d.type="text/javascript";d.async=!0;d.src=b;d.onload=d.onreadystatechange=function(){var a=d.readyState;a&&"loaded"!==a&&"complete"!==a||(d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),c())};d.onerror=function(){E("Long-poll script failed to load: "+b);a.Kd=!1;a.close()};a.Ea.gb.body.appendChild(d)}}catch(e){}},Math.floor(1))};function ye(a){ze(this,a)}var Ae=[qe,cd];function ze(a,b){var c=cd&&cd.isAvailable(),d=c&&!(yb.Ze||!0===yb.get("previous_websocket_failure"));b.qg&&(c||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),d=!0);if(d)a.Wc=[cd];else{var e=a.Wc=[];Ic(Ae,function(a,b){b&&b.isAvailable()&&e.push(b)})}}function Be(a){if(0<a.Wc.length)return a.Wc[0];throw Error("No transports available");};function Ce(a,b,c,d,e,f,h){this.id=a;this.f=yc("c:"+this.id+":");this.re=c;this.Lc=d;this.ia=e;this.qe=f;this.L=b;this.Ad=[];this.Ke=0;this.sf=new ye(b);this.Ua=0;this.Cb=h;this.f("Connection created");De(this)}
	function De(a){var b=Be(a.sf);a.I=new b("c:"+a.id+":"+a.Ke++,a.L,void 0,a.Cb);a.ve=b.responsesRequiredToBeHealthy||0;var c=Ee(a,a.I),d=Fe(a,a.I);a.Xc=a.I;a.Rc=a.I;a.D=null;a.Bb=!1;setTimeout(function(){a.I&&a.I.open(c,d)},Math.floor(0));b=b.healthyTimeout||0;0<b&&(a.md=Mc(function(){a.md=null;a.Bb||(a.I&&102400<a.I.pb?(a.f("Connection exceeded healthy timeout but has received "+a.I.pb+" bytes.  Marking connection healthy."),a.Bb=!0,a.I.sd()):a.I&&10240<a.I.qb?a.f("Connection exceeded healthy timeout but has sent "+
	a.I.qb+" bytes.  Leaving connection alive."):(a.f("Closing unhealthy connection after timeout."),a.close()))},Math.floor(b)))}function Fe(a,b){return function(c){b===a.I?(a.I=null,c||0!==a.Ua?1===a.Ua&&a.f("Realtime connection lost."):(a.f("Realtime connection failed."),"s-"===a.L.$a.substr(0,2)&&(yb.remove("host:"+a.L.host),a.L.$a=a.L.host)),a.close()):b===a.D?(a.f("Secondary connection lost."),c=a.D,a.D=null,a.Xc!==c&&a.Rc!==c||a.close()):a.f("closing an old connection")}}
	function Ee(a,b){return function(c){if(2!=a.Ua)if(b===a.Rc){var d=Fc("t",c);c=Fc("d",c);if("c"==d){if(d=Fc("t",c),"d"in c)if(c=c.d,"h"===d){var d=c.ts,e=c.v,f=c.h;a.qf=c.s;Ib(a.L,f);0==a.Ua&&(a.I.start(),Ge(a,a.I,d),"5"!==e&&O("Protocol version mismatch detected"),c=a.sf,(c=1<c.Wc.length?c.Wc[1]:null)&&He(a,c))}else if("n"===d){a.f("recvd end transmission on primary");a.Rc=a.D;for(c=0;c<a.Ad.length;++c)a.wd(a.Ad[c]);a.Ad=[];Ie(a)}else"s"===d?(a.f("Connection shutdown command received. Shutting down..."),
	a.qe&&(a.qe(c),a.qe=null),a.ia=null,a.close()):"r"===d?(a.f("Reset packet received.  New host: "+c),Ib(a.L,c),1===a.Ua?a.close():(Je(a),De(a))):"e"===d?zc("Server Error: "+c):"o"===d?(a.f("got pong on primary."),Ke(a),Le(a)):zc("Unknown control packet command: "+d)}else"d"==d&&a.wd(c)}else if(b===a.D)if(d=Fc("t",c),c=Fc("d",c),"c"==d)"t"in c&&(c=c.t,"a"===c?Me(a):"r"===c?(a.f("Got a reset on secondary, closing it"),a.D.close(),a.Xc!==a.D&&a.Rc!==a.D||a.close()):"o"===c&&(a.f("got pong on secondary."),
	a.pf--,Me(a)));else if("d"==d)a.Ad.push(c);else throw Error("Unknown protocol layer: "+d);else a.f("message on old connection")}}Ce.prototype.ua=function(a){Ne(this,{t:"d",d:a})};function Ie(a){a.Xc===a.D&&a.Rc===a.D&&(a.f("cleaning up and promoting a connection: "+a.D.Yd),a.I=a.D,a.D=null)}
	function Me(a){0>=a.pf?(a.f("Secondary connection is healthy."),a.Bb=!0,a.D.sd(),a.D.start(),a.f("sending client ack on secondary"),a.D.send({t:"c",d:{t:"a",d:{}}}),a.f("Ending transmission on primary"),a.I.send({t:"c",d:{t:"n",d:{}}}),a.Xc=a.D,Ie(a)):(a.f("sending ping on secondary."),a.D.send({t:"c",d:{t:"p",d:{}}}))}Ce.prototype.wd=function(a){Ke(this);this.re(a)};function Ke(a){a.Bb||(a.ve--,0>=a.ve&&(a.f("Primary connection is healthy."),a.Bb=!0,a.I.sd()))}
	function He(a,b){a.D=new b("c:"+a.id+":"+a.Ke++,a.L,a.qf);a.pf=b.responsesRequiredToBeHealthy||0;a.D.open(Ee(a,a.D),Fe(a,a.D));Mc(function(){a.D&&(a.f("Timed out trying to upgrade."),a.D.close())},Math.floor(6E4))}function Ge(a,b,c){a.f("Realtime connection established.");a.I=b;a.Ua=1;a.Lc&&(a.Lc(c,a.qf),a.Lc=null);0===a.ve?(a.f("Primary connection is healthy."),a.Bb=!0):Mc(function(){Le(a)},Math.floor(5E3))}
	function Le(a){a.Bb||1!==a.Ua||(a.f("sending ping on primary."),Ne(a,{t:"c",d:{t:"p",d:{}}}))}function Ne(a,b){if(1!==a.Ua)throw"Connection is not connected";a.Xc.send(b)}Ce.prototype.close=function(){2!==this.Ua&&(this.f("Closing realtime connection."),this.Ua=2,Je(this),this.ia&&(this.ia(),this.ia=null))};function Je(a){a.f("Shutting down all connections");a.I&&(a.I.close(),a.I=null);a.D&&(a.D.close(),a.D=null);a.md&&(clearTimeout(a.md),a.md=null)};function L(a,b){if(1==arguments.length){this.o=a.split("/");for(var c=0,d=0;d<this.o.length;d++)0<this.o[d].length&&(this.o[c]=this.o[d],c++);this.o.length=c;this.Y=0}else this.o=a,this.Y=b}function T(a,b){var c=J(a);if(null===c)return b;if(c===J(b))return T(D(a),D(b));throw Error("INTERNAL ERROR: innerPath ("+b+") is not within outerPath ("+a+")");}
	function Oe(a,b){for(var c=a.slice(),d=b.slice(),e=0;e<c.length&&e<d.length;e++){var f=hc(c[e],d[e]);if(0!==f)return f}return c.length===d.length?0:c.length<d.length?-1:1}function J(a){return a.Y>=a.o.length?null:a.o[a.Y]}function Ad(a){return a.o.length-a.Y}function D(a){var b=a.Y;b<a.o.length&&b++;return new L(a.o,b)}function Bd(a){return a.Y<a.o.length?a.o[a.o.length-1]:null}g=L.prototype;
	g.toString=function(){for(var a="",b=this.Y;b<this.o.length;b++)""!==this.o[b]&&(a+="/"+this.o[b]);return a||"/"};g.slice=function(a){return this.o.slice(this.Y+(a||0))};g.parent=function(){if(this.Y>=this.o.length)return null;for(var a=[],b=this.Y;b<this.o.length-1;b++)a.push(this.o[b]);return new L(a,0)};
	g.n=function(a){for(var b=[],c=this.Y;c<this.o.length;c++)b.push(this.o[c]);if(a instanceof L)for(c=a.Y;c<a.o.length;c++)b.push(a.o[c]);else for(a=a.split("/"),c=0;c<a.length;c++)0<a[c].length&&b.push(a[c]);return new L(b,0)};g.e=function(){return this.Y>=this.o.length};g.Z=function(a){if(Ad(this)!==Ad(a))return!1;for(var b=this.Y,c=a.Y;b<=this.o.length;b++,c++)if(this.o[b]!==a.o[c])return!1;return!0};
	g.contains=function(a){var b=this.Y,c=a.Y;if(Ad(this)>Ad(a))return!1;for(;b<this.o.length;){if(this.o[b]!==a.o[c])return!1;++b;++c}return!0};var C=new L("");function Pe(a,b){this.Qa=a.slice();this.Ha=Math.max(1,this.Qa.length);this.Pe=b;for(var c=0;c<this.Qa.length;c++)this.Ha+=nb(this.Qa[c]);Qe(this)}Pe.prototype.push=function(a){0<this.Qa.length&&(this.Ha+=1);this.Qa.push(a);this.Ha+=nb(a);Qe(this)};Pe.prototype.pop=function(){var a=this.Qa.pop();this.Ha-=nb(a);0<this.Qa.length&&--this.Ha};
	function Qe(a){if(768<a.Ha)throw Error(a.Pe+"has a key path longer than 768 bytes ("+a.Ha+").");if(32<a.Qa.length)throw Error(a.Pe+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Re(a));}function Re(a){return 0==a.Qa.length?"":"in property '"+a.Qa.join(".")+"'"};function Se(a){a instanceof Te||Ac("Don't call new Database() directly - please use firebase.database().");this.ta=a;this.ba=new U(a,C);this.INTERNAL=new Ue(this)}var Ve={TIMESTAMP:{".sv":"timestamp"}};g=Se.prototype;g.app=null;g.jf=function(a){We(this,"ref");x("database.ref",0,1,arguments.length);return n(a)?this.ba.n(a):this.ba};
	g.gg=function(a){We(this,"database.refFromURL");x("database.refFromURL",1,1,arguments.length);var b=Bc(a);Xe("database.refFromURL",b);var c=b.jc;c.host!==this.ta.L.host&&Ac("database.refFromURL: Host name does not match the current database: (found "+c.host+" but expected "+this.ta.L.host+")");return this.jf(b.path.toString())};function We(a,b){null===a.ta&&Ac("Cannot call "+b+" on a deleted database.")}g.Pf=function(){x("database.goOffline",0,0,arguments.length);We(this,"goOffline");this.ta.ab()};
	g.Qf=function(){x("database.goOnline",0,0,arguments.length);We(this,"goOnline");this.ta.kc()};Object.defineProperty(Se.prototype,"app",{get:function(){return this.ta.app}});function Ue(a){this.Ya=a}Ue.prototype.delete=function(){We(this.Ya,"delete");var a=Ye.Vb(),b=this.Ya.ta;w(a.lb,b.app.name)!==b&&Ac("Database "+b.app.name+" has already been deleted.");b.ab();delete a.lb[b.app.name];this.Ya.ta=null;this.Ya.ba=null;this.Ya=this.Ya.INTERNAL=null;return firebase.Promise.resolve()};
	Se.prototype.ref=Se.prototype.jf;Se.prototype.refFromURL=Se.prototype.gg;Se.prototype.goOnline=Se.prototype.Qf;Se.prototype.goOffline=Se.prototype.Pf;Ue.prototype["delete"]=Ue.prototype.delete;function mc(){this.k=this.B=null}mc.prototype.find=function(a){if(null!=this.B)return this.B.P(a);if(a.e()||null==this.k)return null;var b=J(a);a=D(a);return this.k.contains(b)?this.k.get(b).find(a):null};function oc(a,b,c){if(b.e())a.B=c,a.k=null;else if(null!==a.B)a.B=a.B.F(b,c);else{null==a.k&&(a.k=new oe);var d=J(b);a.k.contains(d)||a.k.add(d,new mc);a=a.k.get(d);b=D(b);oc(a,b,c)}}
	function Ze(a,b){if(b.e())return a.B=null,a.k=null,!0;if(null!==a.B){if(a.B.J())return!1;var c=a.B;a.B=null;c.O(N,function(b,c){oc(a,new L(b),c)});return Ze(a,b)}return null!==a.k?(c=J(b),b=D(b),a.k.contains(c)&&Ze(a.k.get(c),b)&&a.k.remove(c),a.k.e()?(a.k=null,!0):!1):!0}function nc(a,b,c){null!==a.B?c(b,a.B):a.O(function(a,e){var f=new L(b.toString()+"/"+a);nc(e,f,c)})}mc.prototype.O=function(a){null!==this.k&&pe(this.k,function(b,c){a(b,c)})};var $e=/[\[\].#$\/\u0000-\u001F\u007F]/,af=/[\[\].#$\u0000-\u001F\u007F]/;function bf(a){return p(a)&&0!==a.length&&!$e.test(a)}function cf(a){return null===a||p(a)||ga(a)&&!Cc(a)||ia(a)&&cb(a,".sv")}function df(a,b,c,d){d&&!n(b)||ef(y(a,1,d),b,c)}
	function ef(a,b,c){c instanceof L&&(c=new Pe(c,a));if(!n(b))throw Error(a+"contains undefined "+Re(c));if(ha(b))throw Error(a+"contains a function "+Re(c)+" with contents: "+b.toString());if(Cc(b))throw Error(a+"contains "+b.toString()+" "+Re(c));if(p(b)&&b.length>10485760/3&&10485760<nb(b))throw Error(a+"contains a string greater than 10485760 utf8 bytes "+Re(c)+" ('"+b.substring(0,50)+"...')");if(ia(b)){var d=!1,e=!1;db(b,function(b,h){if(".value"===b)d=!0;else if(".priority"!==b&&".sv"!==b&&(e=
	!0,!bf(b)))throw Error(a+" contains an invalid key ("+b+") "+Re(c)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);ef(a,h,c);c.pop()});if(d&&e)throw Error(a+' contains ".value" child '+Re(c)+" in addition to actual children.");}}
	function ff(a,b){var c,d;for(c=0;c<b.length;c++){d=b[c];for(var e=d.slice(),f=0;f<e.length;f++)if((".priority"!==e[f]||f!==e.length-1)&&!bf(e[f]))throw Error(a+"contains an invalid key ("+e[f]+") in path "+d.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');}b.sort(Oe);e=null;for(c=0;c<b.length;c++){d=b[c];if(null!==e&&e.contains(d))throw Error(a+"contains a path "+e.toString()+" that is ancestor of another path "+d.toString());e=d}}
	function gf(a,b,c){var d=y(a,1,!1);if(!ia(b)||ea(b))throw Error(d+" must be an object containing the children to replace.");var e=[];db(b,function(a,b){var k=new L(a);ef(d,b,c.n(k));if(".priority"===Bd(k)&&!cf(b))throw Error(d+"contains an invalid value for '"+k.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k)});ff(d,e)}
	function hf(a,b,c){if(Cc(c))throw Error(y(a,b,!1)+"is "+c.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!cf(c))throw Error(y(a,b,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).");}
	function jf(a,b,c){if(!c||n(b))switch(b){case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":break;default:throw Error(y(a,1,c)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}}function kf(a,b){if(n(b)&&!bf(b))throw Error(y(a,2,!0)+'was an invalid key: "'+b+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');}
	function lf(a,b){if(!p(b)||0===b.length||af.test(b))throw Error(y(a,1,!1)+'was an invalid path: "'+b+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');}function mf(a,b){if(".info"===J(b))throw Error(a+" failed: Can't modify data under /.info/");}
	function Xe(a,b){var c=b.path.toString(),d;!(d=!p(b.jc.host)||0===b.jc.host.length||!bf(b.jc.ne))&&(d=0!==c.length)&&(c&&(c=c.replace(/^\/*\.info(\/|$)/,"/")),d=!(p(c)&&0!==c.length&&!af.test(c)));if(d)throw Error(y(a,1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');};function V(a,b){this.ta=a;this.qa=b}V.prototype.cancel=function(a){x("Firebase.onDisconnect().cancel",0,1,arguments.length);A("Firebase.onDisconnect().cancel",1,a,!0);var b=new hb;this.ta.xd(this.qa,ib(b,a));return b.ra};V.prototype.cancel=V.prototype.cancel;V.prototype.remove=function(a){x("Firebase.onDisconnect().remove",0,1,arguments.length);mf("Firebase.onDisconnect().remove",this.qa);A("Firebase.onDisconnect().remove",1,a,!0);var b=new hb;nf(this.ta,this.qa,null,ib(b,a));return b.ra};
	V.prototype.remove=V.prototype.remove;V.prototype.set=function(a,b){x("Firebase.onDisconnect().set",1,2,arguments.length);mf("Firebase.onDisconnect().set",this.qa);df("Firebase.onDisconnect().set",a,this.qa,!1);A("Firebase.onDisconnect().set",2,b,!0);var c=new hb;nf(this.ta,this.qa,a,ib(c,b));return c.ra};V.prototype.set=V.prototype.set;
	V.prototype.Jb=function(a,b,c){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length);mf("Firebase.onDisconnect().setWithPriority",this.qa);df("Firebase.onDisconnect().setWithPriority",a,this.qa,!1);hf("Firebase.onDisconnect().setWithPriority",2,b);A("Firebase.onDisconnect().setWithPriority",3,c,!0);var d=new hb;of(this.ta,this.qa,a,b,ib(d,c));return d.ra};V.prototype.setWithPriority=V.prototype.Jb;
	V.prototype.update=function(a,b){x("Firebase.onDisconnect().update",1,2,arguments.length);mf("Firebase.onDisconnect().update",this.qa);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}gf("Firebase.onDisconnect().update",a,this.qa);A("Firebase.onDisconnect().update",2,b,!0);
	c=new hb;pf(this.ta,this.qa,a,ib(c,b));return c.ra};V.prototype.update=V.prototype.update;function qf(a){H(ea(a)&&0<a.length,"Requires a non-empty array");this.Bf=a;this.Dc={}}qf.prototype.Ee=function(a,b){var c;c=this.Dc[a]||[];var d=c.length;if(0<d){for(var e=Array(d),f=0;f<d;f++)e[f]=c[f];c=e}else c=[];for(d=0;d<c.length;d++)c[d].He.apply(c[d].Ma,Array.prototype.slice.call(arguments,1))};qf.prototype.gc=function(a,b,c){rf(this,a);this.Dc[a]=this.Dc[a]||[];this.Dc[a].push({He:b,Ma:c});(a=this.Ue(a))&&b.apply(c,a)};
	qf.prototype.Ic=function(a,b,c){rf(this,a);a=this.Dc[a]||[];for(var d=0;d<a.length;d++)if(a[d].He===b&&(!c||c===a[d].Ma)){a.splice(d,1);break}};function rf(a,b){H(Oa(a.Bf,function(a){return a===b}),"Unknown event: "+b)};function sf(){qf.call(this,["online"]);this.hc=!0;if("undefined"!==typeof window&&"undefined"!==typeof window.addEventListener&&!qb()){var a=this;window.addEventListener("online",function(){a.hc||(a.hc=!0,a.Ee("online",!0))},!1);window.addEventListener("offline",function(){a.hc&&(a.hc=!1,a.Ee("online",!1))},!1)}}la(sf,qf);sf.prototype.Ue=function(a){H("online"===a,"Unknown event type: "+a);return[this.hc]};ca(sf);function tf(){qf.call(this,["visible"]);var a,b;"undefined"!==typeof document&&"undefined"!==typeof document.addEventListener&&("undefined"!==typeof document.hidden?(b="visibilitychange",a="hidden"):"undefined"!==typeof document.mozHidden?(b="mozvisibilitychange",a="mozHidden"):"undefined"!==typeof document.msHidden?(b="msvisibilitychange",a="msHidden"):"undefined"!==typeof document.webkitHidden&&(b="webkitvisibilitychange",a="webkitHidden"));this.Mb=!0;if(b){var c=this;document.addEventListener(b,
	function(){var b=!document[a];b!==c.Mb&&(c.Mb=b,c.Ee("visible",b))},!1)}}la(tf,qf);tf.prototype.Ue=function(a){H("visible"===a,"Unknown event type: "+a);return[this.Mb]};ca(tf);var uf=function(){var a=0,b=[];return function(c){var d=c===a;a=c;for(var e=Array(8),f=7;0<=f;f--)e[f]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c%64),c=Math.floor(c/64);H(0===c,"Cannot push at time == 0");c=e.join("");if(d){for(f=11;0<=f&&63===b[f];f--)b[f]=0;b[f]++}else for(f=0;12>f;f++)b[f]=Math.floor(64*Math.random());for(f=0;12>f;f++)c+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);H(20===c.length,"nextPushId: Length should be 20.");
	return c}}();function vf(a,b){this.La=a;this.ba=b?b:wf}g=vf.prototype;g.Oa=function(a,b){return new vf(this.La,this.ba.Oa(a,b,this.La).X(null,null,!1,null,null))};g.remove=function(a){return new vf(this.La,this.ba.remove(a,this.La).X(null,null,!1,null,null))};g.get=function(a){for(var b,c=this.ba;!c.e();){b=this.La(a,c.key);if(0===b)return c.value;0>b?c=c.left:0<b&&(c=c.right)}return null};
	function xf(a,b){for(var c,d=a.ba,e=null;!d.e();){c=a.La(b,d.key);if(0===c){if(d.left.e())return e?e.key:null;for(d=d.left;!d.right.e();)d=d.right;return d.key}0>c?d=d.left:0<c&&(e=d,d=d.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");}g.e=function(){return this.ba.e()};g.count=function(){return this.ba.count()};g.Gc=function(){return this.ba.Gc()};g.ec=function(){return this.ba.ec()};g.ha=function(a){return this.ba.ha(a)};
	g.Wb=function(a){return new yf(this.ba,null,this.La,!1,a)};g.Xb=function(a,b){return new yf(this.ba,a,this.La,!1,b)};g.Zb=function(a,b){return new yf(this.ba,a,this.La,!0,b)};g.We=function(a){return new yf(this.ba,null,this.La,!0,a)};function yf(a,b,c,d,e){this.Hd=e||null;this.je=d;this.Pa=[];for(e=1;!a.e();)if(e=b?c(a.key,b):1,d&&(e*=-1),0>e)a=this.je?a.left:a.right;else if(0===e){this.Pa.push(a);break}else this.Pa.push(a),a=this.je?a.right:a.left}
	function R(a){if(0===a.Pa.length)return null;var b=a.Pa.pop(),c;c=a.Hd?a.Hd(b.key,b.value):{key:b.key,value:b.value};if(a.je)for(b=b.left;!b.e();)a.Pa.push(b),b=b.right;else for(b=b.right;!b.e();)a.Pa.push(b),b=b.left;return c}function zf(a){if(0===a.Pa.length)return null;var b;b=a.Pa;b=b[b.length-1];return a.Hd?a.Hd(b.key,b.value):{key:b.key,value:b.value}}function Af(a,b,c,d,e){this.key=a;this.value=b;this.color=null!=c?c:!0;this.left=null!=d?d:wf;this.right=null!=e?e:wf}g=Af.prototype;
	g.X=function(a,b,c,d,e){return new Af(null!=a?a:this.key,null!=b?b:this.value,null!=c?c:this.color,null!=d?d:this.left,null!=e?e:this.right)};g.count=function(){return this.left.count()+1+this.right.count()};g.e=function(){return!1};g.ha=function(a){return this.left.ha(a)||a(this.key,this.value)||this.right.ha(a)};function Bf(a){return a.left.e()?a:Bf(a.left)}g.Gc=function(){return Bf(this).key};g.ec=function(){return this.right.e()?this.key:this.right.ec()};
	g.Oa=function(a,b,c){var d,e;e=this;d=c(a,e.key);e=0>d?e.X(null,null,null,e.left.Oa(a,b,c),null):0===d?e.X(null,b,null,null,null):e.X(null,null,null,null,e.right.Oa(a,b,c));return Cf(e)};function Df(a){if(a.left.e())return wf;a.left.ea()||a.left.left.ea()||(a=Ef(a));a=a.X(null,null,null,Df(a.left),null);return Cf(a)}
	g.remove=function(a,b){var c,d;c=this;if(0>b(a,c.key))c.left.e()||c.left.ea()||c.left.left.ea()||(c=Ef(c)),c=c.X(null,null,null,c.left.remove(a,b),null);else{c.left.ea()&&(c=Ff(c));c.right.e()||c.right.ea()||c.right.left.ea()||(c=Gf(c),c.left.left.ea()&&(c=Ff(c),c=Gf(c)));if(0===b(a,c.key)){if(c.right.e())return wf;d=Bf(c.right);c=c.X(d.key,d.value,null,null,Df(c.right))}c=c.X(null,null,null,null,c.right.remove(a,b))}return Cf(c)};g.ea=function(){return this.color};
	function Cf(a){a.right.ea()&&!a.left.ea()&&(a=Hf(a));a.left.ea()&&a.left.left.ea()&&(a=Ff(a));a.left.ea()&&a.right.ea()&&(a=Gf(a));return a}function Ef(a){a=Gf(a);a.right.left.ea()&&(a=a.X(null,null,null,null,Ff(a.right)),a=Hf(a),a=Gf(a));return a}function Hf(a){return a.right.X(null,null,a.color,a.X(null,null,!0,null,a.right.left),null)}function Ff(a){return a.left.X(null,null,a.color,null,a.X(null,null,!0,a.left.right,null))}
	function Gf(a){return a.X(null,null,!a.color,a.left.X(null,null,!a.left.color,null,null),a.right.X(null,null,!a.right.color,null,null))}function If(){}g=If.prototype;g.X=function(){return this};g.Oa=function(a,b){return new Af(a,b,null)};g.remove=function(){return this};g.count=function(){return 0};g.e=function(){return!0};g.ha=function(){return!1};g.Gc=function(){return null};g.ec=function(){return null};g.ea=function(){return!1};var wf=new If;function P(a,b,c){this.k=a;(this.aa=b)&&Sd(this.aa);a.e()&&H(!this.aa||this.aa.e(),"An empty node cannot have a priority");this.yb=c;this.Db=null}g=P.prototype;g.J=function(){return!1};g.C=function(){return this.aa||G};g.fa=function(a){return this.k.e()?this:new P(this.k,a,this.yb)};g.Q=function(a){if(".priority"===a)return this.C();a=this.k.get(a);return null===a?G:a};g.P=function(a){var b=J(a);return null===b?this:this.Q(b).P(D(a))};g.Da=function(a){return null!==this.k.get(a)};
	g.T=function(a,b){H(b,"We should always be passing snapshot nodes");if(".priority"===a)return this.fa(b);var c=new K(a,b),d,e;b.e()?(d=this.k.remove(a),c=me(this.yb,c,this.k)):(d=this.k.Oa(a,b),c=ke(this.yb,c,this.k));e=d.e()?G:this.aa;return new P(d,e,c)};g.F=function(a,b){var c=J(a);if(null===c)return b;H(".priority"!==J(a)||1===Ad(a),".priority must be the last token in a path");var d=this.Q(c).F(D(a),b);return this.T(c,d)};g.e=function(){return this.k.e()};g.Eb=function(){return this.k.count()};
	var Jf=/^(0|[1-9]\d*)$/;g=P.prototype;g.H=function(a){if(this.e())return null;var b={},c=0,d=0,e=!0;this.O(N,function(f,h){b[f]=h.H(a);c++;e&&Jf.test(f)?d=Math.max(d,Number(f)):e=!1});if(!a&&e&&d<2*c){var f=[],h;for(h in b)f[h]=b[h];return f}a&&!this.C().e()&&(b[".priority"]=this.C().H());return b};g.hash=function(){if(null===this.Db){var a="";this.C().e()||(a+="priority:"+Ud(this.C().H())+":");this.O(N,function(b,c){var d=c.hash();""!==d&&(a+=":"+b+":"+d)});this.Db=""===a?"":uc(a)}return this.Db};
	g.Ve=function(a,b,c){return(c=Kf(this,c))?(a=xf(c,new K(a,b)))?a.name:null:xf(this.k,a)};function Qd(a,b){var c;c=(c=Kf(a,b))?(c=c.Gc())&&c.name:a.k.Gc();return c?new K(c,a.k.get(c)):null}function Rd(a,b){var c;c=(c=Kf(a,b))?(c=c.ec())&&c.name:a.k.ec();return c?new K(c,a.k.get(c)):null}g.O=function(a,b){var c=Kf(this,a);return c?c.ha(function(a){return b(a.name,a.R)}):this.k.ha(b)};g.Wb=function(a){return this.Xb(a.Hc(),a)};
	g.Xb=function(a,b){var c=Kf(this,b);if(c)return c.Xb(a,function(a){return a});for(var c=this.k.Xb(a.name,jc),d=zf(c);null!=d&&0>b.compare(d,a);)R(c),d=zf(c);return c};g.We=function(a){return this.Zb(a.Fc(),a)};g.Zb=function(a,b){var c=Kf(this,b);if(c)return c.Zb(a,function(a){return a});for(var c=this.k.Zb(a.name,jc),d=zf(c);null!=d&&0<b.compare(d,a);)R(c),d=zf(c);return c};g.sc=function(a){return this.e()?a.e()?0:-1:a.J()||a.e()?1:a===Zd?-1:0};
	g.nb=function(a){if(a===Fd||va(this.yb.cc,a.toString()))return this;var b=this.yb,c=this.k;H(a!==Fd,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var d=[],e=!1,c=c.Wb(jc),f=R(c);f;)e=e||a.xc(f.R),d.push(f),f=R(c);d=e?le(d,Pd(a)):Wd;e=a.toString();c=za(b.cc);c[e]=a;a=za(b.od);a[e]=d;return new P(this.k,this.aa,new je(a,c))};g.yc=function(a){return a===Fd||va(this.yb.cc,a.toString())};
	g.Z=function(a){if(a===this)return!0;if(a.J())return!1;if(this.C().Z(a.C())&&this.k.count()===a.k.count()){var b=this.Wb(N);a=a.Wb(N);for(var c=R(b),d=R(a);c&&d;){if(c.name!==d.name||!c.R.Z(d.R))return!1;c=R(b);d=R(a)}return null===c&&null===d}return!1};function Kf(a,b){return b===Fd?null:a.yb.get(b.toString())}g.toString=function(){return B(this.H(!0))};function M(a,b){if(null===a)return G;var c=null;"object"===typeof a&&".priority"in a?c=a[".priority"]:"undefined"!==typeof b&&(c=b);H(null===c||"string"===typeof c||"number"===typeof c||"object"===typeof c&&".sv"in c,"Invalid priority type found: "+typeof c);"object"===typeof a&&".value"in a&&null!==a[".value"]&&(a=a[".value"]);if("object"!==typeof a||".sv"in a)return new qc(a,M(c));if(a instanceof Array){var d=G,e=a;r(e,function(a,b){if(cb(e,b)&&"."!==b.substring(0,1)){var c=M(a);if(c.J()||!c.e())d=
	d.T(b,c)}});return d.fa(M(c))}var f=[],h=!1,k=a;db(k,function(a){if("string"!==typeof a||"."!==a.substring(0,1)){var b=M(k[a]);b.e()||(h=h||!b.C().e(),f.push(new K(a,b)))}});if(0==f.length)return G;var l=le(f,gc,function(a){return a.name},ic);if(h){var m=le(f,Pd(N));return new P(l,M(c),new je({".priority":m},{".priority":N}))}return new P(l,M(c),ne)}var Lf=Math.log(2);
	function Mf(a){this.count=parseInt(Math.log(a+1)/Lf,10);this.Ne=this.count-1;this.Cf=a+1&parseInt(Array(this.count+1).join("1"),2)}function Nf(a){var b=!(a.Cf&1<<a.Ne);a.Ne--;return b}
	function le(a,b,c,d){function e(b,d){var f=d-b;if(0==f)return null;if(1==f){var m=a[b],u=c?c(m):m;return new Af(u,m.R,!1,null,null)}var m=parseInt(f/2,10)+b,f=e(b,m),z=e(m+1,d),m=a[m],u=c?c(m):m;return new Af(u,m.R,!1,f,z)}a.sort(b);var f=function(b){function d(b,h){var k=u-b,z=u;u-=b;var z=e(k+1,z),k=a[k],F=c?c(k):k,z=new Af(F,k.R,h,null,z);f?f.left=z:m=z;f=z}for(var f=null,m=null,u=a.length,z=0;z<b.count;++z){var F=Nf(b),id=Math.pow(2,b.count-(z+1));F?d(id,!1):(d(id,!1),d(id,!0))}return m}(new Mf(a.length));
	return null!==f?new vf(d||b,f):new vf(d||b)}function Ud(a){return"number"===typeof a?"number:"+Jc(a):"string:"+a}function Sd(a){if(a.J()){var b=a.H();H("string"===typeof b||"number"===typeof b||"object"===typeof b&&cb(b,".sv"),"Priority must be a string or number.")}else H(a===Zd||a.e(),"priority of unexpected type.");H(a===Zd||a.C().e(),"Priority nodes can't have a priority of their own.")}var G=new P(new vf(ic),null,ne);function Of(){P.call(this,new vf(ic),G,ne)}la(Of,P);g=Of.prototype;
	g.sc=function(a){return a===this?0:1};g.Z=function(a){return a===this};g.C=function(){return this};g.Q=function(){return G};g.e=function(){return!1};var Zd=new Of,Xd=new K("[MIN_NAME]",G),ce=new K("[MAX_NAME]",Zd);function W(a,b,c){this.A=a;this.V=b;this.g=c}W.prototype.H=function(){x("Firebase.DataSnapshot.val",0,0,arguments.length);return this.A.H()};W.prototype.val=W.prototype.H;W.prototype.Qe=function(){x("Firebase.DataSnapshot.exportVal",0,0,arguments.length);return this.A.H(!0)};W.prototype.exportVal=W.prototype.Qe;W.prototype.Lf=function(){x("Firebase.DataSnapshot.exists",0,0,arguments.length);return!this.A.e()};W.prototype.exists=W.prototype.Lf;
	W.prototype.n=function(a){x("Firebase.DataSnapshot.child",0,1,arguments.length);ga(a)&&(a=String(a));lf("Firebase.DataSnapshot.child",a);var b=new L(a),c=this.V.n(b);return new W(this.A.P(b),c,N)};W.prototype.child=W.prototype.n;W.prototype.Da=function(a){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length);lf("Firebase.DataSnapshot.hasChild",a);var b=new L(a);return!this.A.P(b).e()};W.prototype.hasChild=W.prototype.Da;
	W.prototype.C=function(){x("Firebase.DataSnapshot.getPriority",0,0,arguments.length);return this.A.C().H()};W.prototype.getPriority=W.prototype.C;W.prototype.forEach=function(a){x("Firebase.DataSnapshot.forEach",1,1,arguments.length);A("Firebase.DataSnapshot.forEach",1,a,!1);if(this.A.J())return!1;var b=this;return!!this.A.O(this.g,function(c,d){return a(new W(d,b.V.n(c),N))})};W.prototype.forEach=W.prototype.forEach;
	W.prototype.kd=function(){x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length);return this.A.J()?!1:!this.A.e()};W.prototype.hasChildren=W.prototype.kd;W.prototype.getKey=function(){x("Firebase.DataSnapshot.key",0,0,arguments.length);return this.V.getKey()};Lc(W.prototype,"key",W.prototype.getKey);W.prototype.Eb=function(){x("Firebase.DataSnapshot.numChildren",0,0,arguments.length);return this.A.Eb()};W.prototype.numChildren=W.prototype.Eb;
	W.prototype.wb=function(){x("Firebase.DataSnapshot.ref",0,0,arguments.length);return this.V};Lc(W.prototype,"ref",W.prototype.wb);function yd(a,b){this.N=a;this.Ld=b}function vd(a,b,c,d){return new yd(new $b(b,c,d),a.Ld)}function zd(a){return a.N.da?a.N.j():null}yd.prototype.w=function(){return this.Ld};function ac(a){return a.Ld.da?a.Ld.j():null};function Pf(a,b){this.V=a;var c=a.m,d=new Gd(c.g),c=S(c)?new Gd(c.g):c.xa?new Md(c):new Hd(c);this.hf=new pd(c);var e=b.w(),f=b.N,h=d.ya(G,e.j(),null),k=c.ya(G,f.j(),null);this.Ka=new yd(new $b(k,f.da,c.Na()),new $b(h,e.da,d.Na()));this.Za=[];this.Jf=new kd(a)}function Qf(a){return a.V}g=Pf.prototype;g.w=function(){return this.Ka.w().j()};g.hb=function(a){var b=ac(this.Ka);return b&&(S(this.V.m)||!a.e()&&!b.Q(J(a)).e())?b.P(a):null};g.e=function(){return 0===this.Za.length};g.Nb=function(a){this.Za.push(a)};
	g.kb=function(a,b){var c=[];if(b){H(null==a,"A cancel should cancel all event registrations.");var d=this.V.path;Ja(this.Za,function(a){(a=a.Le(b,d))&&c.push(a)})}if(a){for(var e=[],f=0;f<this.Za.length;++f){var h=this.Za[f];if(!h.matches(a))e.push(h);else if(a.Xe()){e=e.concat(this.Za.slice(f+1));break}}this.Za=e}else this.Za=[];return c};
	g.eb=function(a,b,c){a.type===Wc&&null!==a.source.Hb&&(H(ac(this.Ka),"We should always have a full cache before handling merges"),H(zd(this.Ka),"Missing event cache, even though we have a server cache"));var d=this.Ka;a=this.hf.eb(d,a,b,c);b=this.hf;c=a.Sd;H(c.N.j().yc(b.U.g),"Event snap not indexed");H(c.w().j().yc(b.U.g),"Server snap not indexed");H(dc(a.Sd.w())||!dc(d.w()),"Once a server snap is complete, it should never go back");this.Ka=a.Sd;return Rf(this,a.Df,a.Sd.N.j(),null)};
	function Sf(a,b){var c=a.Ka.N,d=[];c.j().J()||c.j().O(N,function(a,b){d.push(new I("child_added",b,a))});c.da&&d.push(bc(c.j()));return Rf(a,d,c.j(),b)}function Rf(a,b,c,d){return ld(a.Jf,b,c,d?[d]:a.Za)};function Tf(a,b,c){this.Pb=a;this.rb=b;this.tb=c||null}g=Tf.prototype;g.nf=function(a){return"value"===a};g.createEvent=function(a,b){var c=b.m.g;return new Ub("value",this,new W(a.Ja,b.wb(),c))};g.Tb=function(a){var b=this.tb;if("cancel"===a.ee()){H(this.rb,"Raising a cancel event on a listener with no cancel callback");var c=this.rb;return function(){c.call(b,a.error)}}var d=this.Pb;return function(){d.call(b,a.Md)}};g.Le=function(a,b){return this.rb?new Vb(this,a,b):null};
	g.matches=function(a){return a instanceof Tf?a.Pb&&this.Pb?a.Pb===this.Pb&&a.tb===this.tb:!0:!1};g.Xe=function(){return null!==this.Pb};function Uf(a,b,c){this.ga=a;this.rb=b;this.tb=c}g=Uf.prototype;g.nf=function(a){a="children_added"===a?"child_added":a;return("children_removed"===a?"child_removed":a)in this.ga};g.Le=function(a,b){return this.rb?new Vb(this,a,b):null};
	g.createEvent=function(a,b){H(null!=a.Xa,"Child events should have a childName.");var c=b.wb().n(a.Xa);return new Ub(a.type,this,new W(a.Ja,c,b.m.g),a.Dd)};g.Tb=function(a){var b=this.tb;if("cancel"===a.ee()){H(this.rb,"Raising a cancel event on a listener with no cancel callback");var c=this.rb;return function(){c.call(b,a.error)}}var d=this.ga[a.hd];return function(){d.call(b,a.Md,a.Dd)}};
	g.matches=function(a){if(a instanceof Uf){if(!this.ga||!a.ga)return!0;if(this.tb===a.tb){var b=ra(a.ga);if(b===ra(this.ga)){if(1===b){var b=sa(a.ga),c=sa(this.ga);return c===b&&(!a.ga[b]||!this.ga[c]||a.ga[b]===this.ga[c])}return qa(this.ga,function(b,c){return a.ga[c]===b})}}}return!1};g.Xe=function(){return null!==this.ga};function X(a,b,c,d){this.u=a;this.path=b;this.m=c;this.Nc=d}
	function Vf(a){var b=null,c=null;a.ka&&(b=Jd(a));a.na&&(c=Ld(a));if(a.g===Fd){if(a.ka){if("[MIN_NAME]"!=Id(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==typeof b)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}if(a.na){if("[MAX_NAME]"!=Kd(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==
	typeof c)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}}else if(a.g===N){if(null!=b&&!cf(b)||null!=c&&!cf(c))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");}else if(H(a.g instanceof Yd||a.g===de,"unknown index type."),null!=b&&"object"===typeof b||null!=c&&"object"===typeof c)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
	}function Wf(a){if(a.ka&&a.na&&a.xa&&(!a.xa||""===a.mb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}function Xf(a,b){if(!0===a.Nc)throw Error(b+": You can't combine multiple orderBy calls.");}g=X.prototype;g.wb=function(){x("Query.ref",0,0,arguments.length);return new U(this.u,this.path)};
	g.gc=function(a,b,c,d){x("Query.on",2,4,arguments.length);jf("Query.on",a,!1);A("Query.on",2,b,!1);var e=Yf("Query.on",c,d);if("value"===a)Zf(this.u,this,new Tf(b,e.cancel||null,e.Ma||null));else{var f={};f[a]=b;Zf(this.u,this,new Uf(f,e.cancel,e.Ma))}return b};
	g.Ic=function(a,b,c){x("Query.off",0,3,arguments.length);jf("Query.off",a,!0);A("Query.off",2,b,!0);eb("Query.off",3,c);var d=null,e=null;"value"===a?d=new Tf(b||null,null,c||null):a&&(b&&(e={},e[a]=b),d=new Uf(e,null,c||null));e=this.u;d=".info"===J(this.path)?e.pd.kb(this,d):e.K.kb(this,d);Qb(e.ca,this.path,d)};
	g.$f=function(a,b){function c(k){f&&(f=!1,e.Ic(a,c),b&&b.call(d.Ma,k),h.resolve(k))}x("Query.once",1,4,arguments.length);jf("Query.once",a,!1);A("Query.once",2,b,!0);var d=Yf("Query.once",arguments[2],arguments[3]),e=this,f=!0,h=new hb;jb(h.ra);this.gc(a,c,function(b){e.Ic(a,c);d.cancel&&d.cancel.call(d.Ma,b);h.reject(b)});return h.ra};
	g.le=function(a){x("Query.limitToFirst",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.m.xa)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u,this.path,this.m.le(a),this.Nc)};
	g.me=function(a){x("Query.limitToLast",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.m.xa)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u,this.path,this.m.me(a),this.Nc)};
	g.ag=function(a){x("Query.orderByChild",1,1,arguments.length);if("$key"===a)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===a)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===a)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');lf("Query.orderByChild",a);Xf(this,"Query.orderByChild");var b=new L(a);if(b.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
	b=new Yd(b);b=he(this.m,b);Vf(b);return new X(this.u,this.path,b,!0)};g.bg=function(){x("Query.orderByKey",0,0,arguments.length);Xf(this,"Query.orderByKey");var a=he(this.m,Fd);Vf(a);return new X(this.u,this.path,a,!0)};g.cg=function(){x("Query.orderByPriority",0,0,arguments.length);Xf(this,"Query.orderByPriority");var a=he(this.m,N);Vf(a);return new X(this.u,this.path,a,!0)};
	g.dg=function(){x("Query.orderByValue",0,0,arguments.length);Xf(this,"Query.orderByValue");var a=he(this.m,de);Vf(a);return new X(this.u,this.path,a,!0)};g.Nd=function(a,b){x("Query.startAt",0,2,arguments.length);df("Query.startAt",a,this.path,!0);kf("Query.startAt",b);var c=this.m.Nd(a,b);Wf(c);Vf(c);if(this.m.ka)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a)||(b=a=null);return new X(this.u,this.path,c,this.Nc)};
	g.gd=function(a,b){x("Query.endAt",0,2,arguments.length);df("Query.endAt",a,this.path,!0);kf("Query.endAt",b);var c=this.m.gd(a,b);Wf(c);Vf(c);if(this.m.na)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new X(this.u,this.path,c,this.Nc)};
	g.If=function(a,b){x("Query.equalTo",1,2,arguments.length);df("Query.equalTo",a,this.path,!1);kf("Query.equalTo",b);if(this.m.ka)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.m.na)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.Nd(a,b).gd(a,b)};
	g.toString=function(){x("Query.toString",0,0,arguments.length);for(var a=this.path,b="",c=a.Y;c<a.o.length;c++)""!==a.o[c]&&(b+="/"+encodeURIComponent(String(a.o[c])));return this.u.toString()+(b||"/")};g.ja=function(){var a=Gc(ie(this.m));return"{}"===a?"default":a};
	g.isEqual=function(a){x("Query.isEqual",1,1,arguments.length);if(!(a instanceof X))throw Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.");var b=this.u===a.u,c=this.path.Z(a.path),d=this.ja()===a.ja();return b&&c&&d};
	function Yf(a,b,c){var d={cancel:null,Ma:null};if(b&&c)d.cancel=b,A(a,3,d.cancel,!0),d.Ma=c,eb(a,4,d.Ma);else if(b)if("object"===typeof b&&null!==b)d.Ma=b;else if("function"===typeof b)d.cancel=b;else throw Error(y(a,3,!0)+" must either be a cancel callback or a context object.");return d}X.prototype.on=X.prototype.gc;X.prototype.off=X.prototype.Ic;X.prototype.once=X.prototype.$f;X.prototype.limitToFirst=X.prototype.le;X.prototype.limitToLast=X.prototype.me;X.prototype.orderByChild=X.prototype.ag;
	X.prototype.orderByKey=X.prototype.bg;X.prototype.orderByPriority=X.prototype.cg;X.prototype.orderByValue=X.prototype.dg;X.prototype.startAt=X.prototype.Nd;X.prototype.endAt=X.prototype.gd;X.prototype.equalTo=X.prototype.If;X.prototype.toString=X.prototype.toString;X.prototype.isEqual=X.prototype.isEqual;Lc(X.prototype,"ref",X.prototype.wb);function $f(a,b){this.value=a;this.children=b||ag}var ag=new vf(function(a,b){return a===b?0:a<b?-1:1});function bg(a){var b=Q;r(a,function(a,d){b=b.set(new L(d),a)});return b}g=$f.prototype;g.e=function(){return null===this.value&&this.children.e()};function cg(a,b,c){if(null!=a.value&&c(a.value))return{path:C,value:a.value};if(b.e())return null;var d=J(b);a=a.children.get(d);return null!==a?(b=cg(a,D(b),c),null!=b?{path:(new L(d)).n(b.path),value:b.value}:null):null}
	function dg(a,b){return cg(a,b,function(){return!0})}g.subtree=function(a){if(a.e())return this;var b=this.children.get(J(a));return null!==b?b.subtree(D(a)):Q};g.set=function(a,b){if(a.e())return new $f(b,this.children);var c=J(a),d=(this.children.get(c)||Q).set(D(a),b),c=this.children.Oa(c,d);return new $f(this.value,c)};
	g.remove=function(a){if(a.e())return this.children.e()?Q:new $f(null,this.children);var b=J(a),c=this.children.get(b);return c?(a=c.remove(D(a)),b=a.e()?this.children.remove(b):this.children.Oa(b,a),null===this.value&&b.e()?Q:new $f(this.value,b)):this};g.get=function(a){if(a.e())return this.value;var b=this.children.get(J(a));return b?b.get(D(a)):null};
	function Ed(a,b,c){if(b.e())return c;var d=J(b);b=Ed(a.children.get(d)||Q,D(b),c);d=b.e()?a.children.remove(d):a.children.Oa(d,b);return new $f(a.value,d)}function eg(a,b){return fg(a,C,b)}function fg(a,b,c){var d={};a.children.ha(function(a,f){d[a]=fg(f,b.n(a),c)});return c(b,a.value,d)}function gg(a,b,c){return hg(a,b,C,c)}function hg(a,b,c,d){var e=a.value?d(c,a.value):!1;if(e)return e;if(b.e())return null;e=J(b);return(a=a.children.get(e))?hg(a,D(b),c.n(e),d):null}
	function ig(a,b,c){jg(a,b,C,c)}function jg(a,b,c,d){if(b.e())return a;a.value&&d(c,a.value);var e=J(b);return(a=a.children.get(e))?jg(a,D(b),c.n(e),d):Q}function Cd(a,b){kg(a,C,b)}function kg(a,b,c){a.children.ha(function(a,e){kg(e,b.n(a),c)});a.value&&c(b,a.value)}function lg(a,b){a.children.ha(function(a,d){d.value&&b(a,d.value)})}var Q=new $f(null);$f.prototype.toString=function(){var a={};Cd(this,function(b,c){a[b.toString()]=c.toString()});return B(a)};function mg(a,b,c){this.type=ud;this.source=ng;this.path=a;this.Ob=b;this.Id=c}mg.prototype.Mc=function(a){if(this.path.e()){if(null!=this.Ob.value)return H(this.Ob.children.e(),"affectedTree should not have overlapping affected paths."),this;a=this.Ob.subtree(new L(a));return new mg(C,a,this.Id)}H(J(this.path)===a,"operationForChild called for unrelated child.");return new mg(D(this.path),this.Ob,this.Id)};
	mg.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Id+" affectedTree="+this.Ob+")"};var Bb=0,Wc=1,ud=2,Db=3;function og(a,b,c,d){this.ce=a;this.Se=b;this.Hb=c;this.Ce=d;H(!d||b,"Tagged queries must be from server.")}var ng=new og(!0,!1,null,!1),pg=new og(!1,!0,null,!1);og.prototype.toString=function(){return this.ce?"user":this.Ce?"server(queryID="+this.Hb+")":"server"};function qg(a){this.W=a}var rg=new qg(new $f(null));function sg(a,b,c){if(b.e())return new qg(new $f(c));var d=dg(a.W,b);if(null!=d){var e=d.path,d=d.value;b=T(e,b);d=d.F(b,c);return new qg(a.W.set(e,d))}a=Ed(a.W,b,new $f(c));return new qg(a)}function tg(a,b,c){var d=a;db(c,function(a,c){d=sg(d,b.n(a),c)});return d}qg.prototype.Ed=function(a){if(a.e())return rg;a=Ed(this.W,a,Q);return new qg(a)};function ug(a,b){var c=dg(a.W,b);return null!=c?a.W.get(c.path).P(T(c.path,b)):null}
	function vg(a){var b=[],c=a.W.value;null!=c?c.J()||c.O(N,function(a,c){b.push(new K(a,c))}):a.W.children.ha(function(a,c){null!=c.value&&b.push(new K(a,c.value))});return b}function wg(a,b){if(b.e())return a;var c=ug(a,b);return null!=c?new qg(new $f(c)):new qg(a.W.subtree(b))}qg.prototype.e=function(){return this.W.e()};qg.prototype.apply=function(a){return xg(C,this.W,a)};
	function xg(a,b,c){if(null!=b.value)return c.F(a,b.value);var d=null;b.children.ha(function(b,f){".priority"===b?(H(null!==f.value,"Priority writes must always be leaf nodes"),d=f.value):c=xg(a.n(b),f,c)});c.P(a).e()||null===d||(c=c.F(a.n(".priority"),d));return c};function yg(){this.za={}}g=yg.prototype;g.e=function(){return ya(this.za)};g.eb=function(a,b,c){var d=a.source.Hb;if(null!==d)return d=w(this.za,d),H(null!=d,"SyncTree gave us an op for an invalid query."),d.eb(a,b,c);var e=[];r(this.za,function(d){e=e.concat(d.eb(a,b,c))});return e};g.Nb=function(a,b,c,d,e){var f=a.ja(),h=w(this.za,f);if(!h){var h=c.Aa(e?d:null),k=!1;h?k=!0:(h=d instanceof P?c.rc(d):G,k=!1);h=new Pf(a,new yd(new $b(h,k,!1),new $b(d,e,!1)));this.za[f]=h}h.Nb(b);return Sf(h,b)};
	g.kb=function(a,b,c){var d=a.ja(),e=[],f=[],h=null!=zg(this);if("default"===d){var k=this;r(this.za,function(a,d){f=f.concat(a.kb(b,c));a.e()&&(delete k.za[d],S(a.V.m)||e.push(a.V))})}else{var l=w(this.za,d);l&&(f=f.concat(l.kb(b,c)),l.e()&&(delete this.za[d],S(l.V.m)||e.push(l.V)))}h&&null==zg(this)&&e.push(new U(a.u,a.path));return{hg:e,Kf:f}};function Ag(a){return Ka(ta(a.za),function(a){return!S(a.V.m)})}g.hb=function(a){var b=null;r(this.za,function(c){b=b||c.hb(a)});return b};
	function Bg(a,b){if(S(b.m))return zg(a);var c=b.ja();return w(a.za,c)}function zg(a){return xa(a.za,function(a){return S(a.V.m)})||null};function Cg(){this.S=rg;this.la=[];this.Bc=-1}function Dg(a,b){for(var c=0;c<a.la.length;c++){var d=a.la[c];if(d.Zc===b)return d}return null}g=Cg.prototype;
	g.Ed=function(a){var b=Pa(this.la,function(b){return b.Zc===a});H(0<=b,"removeWrite called with nonexistent writeId.");var c=this.la[b];this.la.splice(b,1);for(var d=c.visible,e=!1,f=this.la.length-1;d&&0<=f;){var h=this.la[f];h.visible&&(f>=b&&Eg(h,c.path)?d=!1:c.path.contains(h.path)&&(e=!0));f--}if(d){if(e)this.S=Fg(this.la,Gg,C),this.Bc=0<this.la.length?this.la[this.la.length-1].Zc:-1;else if(c.Ga)this.S=this.S.Ed(c.path);else{var k=this;r(c.children,function(a,b){k.S=k.S.Ed(c.path.n(b))})}return!0}return!1};
	g.Aa=function(a,b,c,d){if(c||d){var e=wg(this.S,a);return!d&&e.e()?b:d||null!=b||null!=ug(e,C)?(e=Fg(this.la,function(b){return(b.visible||d)&&(!c||!(0<=Ia(c,b.Zc)))&&(b.path.contains(a)||a.contains(b.path))},a),b=b||G,e.apply(b)):null}e=ug(this.S,a);if(null!=e)return e;e=wg(this.S,a);return e.e()?b:null!=b||null!=ug(e,C)?(b=b||G,e.apply(b)):null};
	g.rc=function(a,b){var c=G,d=ug(this.S,a);if(d)d.J()||d.O(N,function(a,b){c=c.T(a,b)});else if(b){var e=wg(this.S,a);b.O(N,function(a,b){var d=wg(e,new L(a)).apply(b);c=c.T(a,d)});Ja(vg(e),function(a){c=c.T(a.name,a.R)})}else e=wg(this.S,a),Ja(vg(e),function(a){c=c.T(a.name,a.R)});return c};g.ad=function(a,b,c,d){H(c||d,"Either existingEventSnap or existingServerSnap must exist");a=a.n(b);if(null!=ug(this.S,a))return null;a=wg(this.S,a);return a.e()?d.P(b):a.apply(d.P(b))};
	g.qc=function(a,b,c){a=a.n(b);var d=ug(this.S,a);return null!=d?d:Zb(c,b)?wg(this.S,a).apply(c.j().Q(b)):null};g.lc=function(a){return ug(this.S,a)};g.Wd=function(a,b,c,d,e,f){var h;a=wg(this.S,a);h=ug(a,C);if(null==h)if(null!=b)h=a.apply(b);else return[];h=h.nb(f);if(h.e()||h.J())return[];b=[];a=Pd(f);e=e?h.Zb(c,f):h.Xb(c,f);for(f=R(e);f&&b.length<d;)0!==a(f,c)&&b.push(f),f=R(e);return b};
	function Eg(a,b){return a.Ga?a.path.contains(b):!!wa(a.children,function(c,d){return a.path.n(d).contains(b)})}function Gg(a){return a.visible}
	function Fg(a,b,c){for(var d=rg,e=0;e<a.length;++e){var f=a[e];if(b(f)){var h=f.path;if(f.Ga)c.contains(h)?(h=T(c,h),d=sg(d,h,f.Ga)):h.contains(c)&&(h=T(h,c),d=sg(d,C,f.Ga.P(h)));else if(f.children)if(c.contains(h))h=T(c,h),d=tg(d,h,f.children);else{if(h.contains(c))if(h=T(h,c),h.e())d=tg(d,C,f.children);else if(f=w(f.children,J(h)))f=f.P(D(h)),d=sg(d,C,f)}else throw sc("WriteRecord should have .snap or .children");}}return d}function Hg(a,b){this.Lb=a;this.W=b}g=Hg.prototype;
	g.Aa=function(a,b,c){return this.W.Aa(this.Lb,a,b,c)};g.rc=function(a){return this.W.rc(this.Lb,a)};g.ad=function(a,b,c){return this.W.ad(this.Lb,a,b,c)};g.lc=function(a){return this.W.lc(this.Lb.n(a))};g.Wd=function(a,b,c,d,e){return this.W.Wd(this.Lb,a,b,c,d,e)};g.qc=function(a,b){return this.W.qc(this.Lb,a,b)};g.n=function(a){return new Hg(this.Lb.n(a),this.W)};function Ig(){this.children={};this.bd=0;this.value=null}function Jg(a,b,c){this.ud=a?a:"";this.Pc=b?b:null;this.A=c?c:new Ig}function Kg(a,b){for(var c=b instanceof L?b:new L(b),d=a,e;null!==(e=J(c));)d=new Jg(e,d,w(d.A.children,e)||new Ig),c=D(c);return d}g=Jg.prototype;g.Ca=function(){return this.A.value};function Lg(a,b){H("undefined"!==typeof b,"Cannot set value to undefined");a.A.value=b;Mg(a)}g.clear=function(){this.A.value=null;this.A.children={};this.A.bd=0;Mg(this)};
	g.kd=function(){return 0<this.A.bd};g.e=function(){return null===this.Ca()&&!this.kd()};g.O=function(a){var b=this;r(this.A.children,function(c,d){a(new Jg(d,b,c))})};function Ng(a,b,c,d){c&&!d&&b(a);a.O(function(a){Ng(a,b,!0,d)});c&&d&&b(a)}function Og(a,b){for(var c=a.parent();null!==c&&!b(c);)c=c.parent()}g.path=function(){return new L(null===this.Pc?this.ud:this.Pc.path()+"/"+this.ud)};g.name=function(){return this.ud};g.parent=function(){return this.Pc};
	function Mg(a){if(null!==a.Pc){var b=a.Pc,c=a.ud,d=a.e(),e=cb(b.A.children,c);d&&e?(delete b.A.children[c],b.A.bd--,Mg(b)):d||e||(b.A.children[c]=a.A,b.A.bd++,Mg(b))}};function Pg(a,b,c,d,e,f){this.id=Qg++;this.f=yc("p:"+this.id+":");this.qd={};this.$={};this.pa=[];this.Oc=0;this.Kc=[];this.ma=!1;this.Sa=1E3;this.td=3E5;this.Gb=b;this.Jc=c;this.se=d;this.L=a;this.ob=this.Fa=this.Cb=this.xe=null;this.$c=e;this.be=!1;this.ie=0;if(f)throw Error("Auth override specified in options, but not supported on non Node.js platforms");this.Ge=f||null;this.ub=null;this.Mb=!1;this.Gd={};this.ig=0;this.Re=!0;this.Ac=this.ke=null;Rg(this,0);tf.Vb().gc("visible",this.Zf,this);-1===
	a.host.indexOf("fblocal")&&sf.Vb().gc("online",this.Yf,this)}var Qg=0,Sg=0;g=Pg.prototype;g.ua=function(a,b,c){var d=++this.ig;a={r:d,a:a,b:b};this.f(B(a));H(this.ma,"sendRequest call when we're not connected not allowed.");this.Fa.ua(a);c&&(this.Gd[d]=c)};
	g.$e=function(a,b,c,d){var e=a.ja(),f=a.path.toString();this.f("Listen called for "+f+" "+e);this.$[f]=this.$[f]||{};H(Sc(a.m)||!S(a.m),"listen() called for non-default but complete query");H(!this.$[f][e],"listen() called twice for same path/queryId.");a={G:d,ld:b,eg:a,tag:c};this.$[f][e]=a;this.ma&&Tg(this,a)};
	function Tg(a,b){var c=b.eg,d=c.path.toString(),e=c.ja();a.f("Listen on "+d+" for "+e);var f={p:d};b.tag&&(f.q=ie(c.m),f.t=b.tag);f.h=b.ld();a.ua("q",f,function(f){var k=f.d,l=f.s;if(k&&"object"===typeof k&&cb(k,"w")){var m=w(k,"w");ea(m)&&0<=Ia(m,"no_index")&&O("Using an unspecified index. Consider adding "+('".indexOn": "'+c.m.g.toString()+'"')+" at "+c.path.toString()+" to your security rules for better performance")}(a.$[d]&&a.$[d][e])===b&&(a.f("listen response",f),"ok"!==l&&Ug(a,d,e),b.G&&b.G(l,
	k))})}g.kf=function(a){this.ob=a;this.f("Auth token refreshed");this.ob?Vg(this):this.ma&&this.ua("unauth",{},function(){});if(a&&40===a.length||Pc(a))this.f("Admin auth credential detected.  Reducing max reconnect time."),this.td=3E4};function Vg(a){if(a.ma&&a.ob){var b=a.ob,c=Oc(b)?"auth":"gauth",d={cred:b};a.Ge&&(d.authvar=a.Ge);a.ua(c,d,function(c){var d=c.s;c=c.d||"error";a.ob===b&&("ok"===d?a.ie=0:Wg(a,d,c))})}}
	g.uf=function(a,b){var c=a.path.toString(),d=a.ja();this.f("Unlisten called for "+c+" "+d);H(Sc(a.m)||!S(a.m),"unlisten() called for non-default but complete query");if(Ug(this,c,d)&&this.ma){var e=ie(a.m);this.f("Unlisten on "+c+" for "+d);c={p:c};b&&(c.q=e,c.t=b);this.ua("n",c)}};g.pe=function(a,b,c){this.ma?Xg(this,"o",a,b,c):this.Kc.push({ue:a,action:"o",data:b,G:c})};g.cf=function(a,b,c){this.ma?Xg(this,"om",a,b,c):this.Kc.push({ue:a,action:"om",data:b,G:c})};
	g.xd=function(a,b){this.ma?Xg(this,"oc",a,null,b):this.Kc.push({ue:a,action:"oc",data:null,G:b})};function Xg(a,b,c,d,e){c={p:c,d:d};a.f("onDisconnect "+b,c);a.ua(b,c,function(a){e&&setTimeout(function(){e(a.s,a.d)},Math.floor(0))})}g.put=function(a,b,c,d){Yg(this,"p",a,b,c,d)};g.af=function(a,b,c,d){Yg(this,"m",a,b,c,d)};function Yg(a,b,c,d,e,f){d={p:c,d:d};n(f)&&(d.h=f);a.pa.push({action:b,mf:d,G:e});a.Oc++;b=a.pa.length-1;a.ma?Zg(a,b):a.f("Buffering put: "+c)}
	function Zg(a,b){var c=a.pa[b].action,d=a.pa[b].mf,e=a.pa[b].G;a.pa[b].fg=a.ma;a.ua(c,d,function(d){a.f(c+" response",d);delete a.pa[b];a.Oc--;0===a.Oc&&(a.pa=[]);e&&e(d.s,d.d)})}g.we=function(a){this.ma&&(a={c:a},this.f("reportStats",a),this.ua("s",a,function(a){"ok"!==a.s&&this.f("reportStats","Error sending stats: "+a.d)}))};
	g.wd=function(a){if("r"in a){this.f("from server: "+B(a));var b=a.r,c=this.Gd[b];c&&(delete this.Gd[b],c(a.b))}else{if("error"in a)throw"A server-side error has occurred: "+a.error;"a"in a&&(b=a.a,a=a.b,this.f("handleServerMessage",b,a),"d"===b?this.Gb(a.p,a.d,!1,a.t):"m"===b?this.Gb(a.p,a.d,!0,a.t):"c"===b?$g(this,a.p,a.q):"ac"===b?Wg(this,a.s,a.d):"sd"===b?this.xe?this.xe(a):"msg"in a&&"undefined"!==typeof console&&console.log("FIREBASE: "+a.msg.replace("\n","\nFIREBASE: ")):zc("Unrecognized action received from server: "+
	B(b)+"\nAre you using the latest client?"))}};g.Lc=function(a,b){this.f("connection ready");this.ma=!0;this.Ac=(new Date).getTime();this.se({serverTimeOffset:a-(new Date).getTime()});this.Cb=b;if(this.Re){var c={};c["sdk.js."+firebase.SDK_VERSION.replace(/\./g,"-")]=1;qb()?c["framework.cordova"]=1:"object"===typeof navigator&&"ReactNative"===navigator.product&&(c["framework.reactnative"]=1);this.we(c)}ah(this);this.Re=!1;this.Jc(!0)};
	function Rg(a,b){H(!a.Fa,"Scheduling a connect when we're already connected/ing?");a.ub&&clearTimeout(a.ub);a.ub=setTimeout(function(){a.ub=null;bh(a)},Math.floor(b))}g.Zf=function(a){a&&!this.Mb&&this.Sa===this.td&&(this.f("Window became visible.  Reducing delay."),this.Sa=1E3,this.Fa||Rg(this,0));this.Mb=a};g.Yf=function(a){a?(this.f("Browser went online."),this.Sa=1E3,this.Fa||Rg(this,0)):(this.f("Browser went offline.  Killing connection."),this.Fa&&this.Fa.close())};
	g.df=function(){this.f("data client disconnected");this.ma=!1;this.Fa=null;for(var a=0;a<this.pa.length;a++){var b=this.pa[a];b&&"h"in b.mf&&b.fg&&(b.G&&b.G("disconnect"),delete this.pa[a],this.Oc--)}0===this.Oc&&(this.pa=[]);this.Gd={};ch(this)&&(this.Mb?this.Ac&&(3E4<(new Date).getTime()-this.Ac&&(this.Sa=1E3),this.Ac=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Sa=this.td,this.ke=(new Date).getTime()),a=Math.max(0,this.Sa-((new Date).getTime()-this.ke)),a*=Math.random(),this.f("Trying to reconnect in "+
	a+"ms"),Rg(this,a),this.Sa=Math.min(this.td,1.3*this.Sa));this.Jc(!1)};
	function bh(a){if(ch(a)){a.f("Making a connection attempt");a.ke=(new Date).getTime();a.Ac=null;var b=q(a.wd,a),c=q(a.Lc,a),d=q(a.df,a),e=a.id+":"+Sg++,f=a.Cb,h=!1,k=null,l=function(){k?k.close():(h=!0,d())};a.Fa={close:l,ua:function(a){H(k,"sendRequest call when we're not connected not allowed.");k.ua(a)}};var m=a.be;a.be=!1;a.$c.getToken(m).then(function(l){h?E("getToken() completed but was canceled"):(E("getToken() completed. Creating connection."),a.ob=l&&l.accessToken,k=new Ce(e,a.L,b,c,d,function(b){O(b+
	" ("+a.L.toString()+")");a.ab("server_kill")},f))}).then(null,function(b){a.f("Failed to get token: "+b);h||l()})}}g.ab=function(a){E("Interrupting connection for reason: "+a);this.qd[a]=!0;this.Fa?this.Fa.close():(this.ub&&(clearTimeout(this.ub),this.ub=null),this.ma&&this.df())};g.kc=function(a){E("Resuming connection for reason: "+a);delete this.qd[a];ya(this.qd)&&(this.Sa=1E3,this.Fa||Rg(this,0))};
	function $g(a,b,c){c=c?La(c,function(a){return Gc(a)}).join("$"):"default";(a=Ug(a,b,c))&&a.G&&a.G("permission_denied")}function Ug(a,b,c){b=(new L(b)).toString();var d;n(a.$[b])?(d=a.$[b][c],delete a.$[b][c],0===ra(a.$[b])&&delete a.$[b]):d=void 0;return d}
	function Wg(a,b,c){E("Auth token revoked: "+b+"/"+c);a.ob=null;a.be=!0;a.Fa.close();"invalid_token"===b&&(a.ie++,3<=a.ie&&(a.Sa=3E4,a=a.$c,b='Provided authentication credentials for the app named "'+a.oc.name+'" are invalid. This usually indicates your app was not initialized correctly. ',b="credential"in a.oc.options?b+'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in a.oc.options?
	b+'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':b+'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',O(b)))}
	function ah(a){Vg(a);r(a.$,function(b){r(b,function(b){Tg(a,b)})});for(var b=0;b<a.pa.length;b++)a.pa[b]&&Zg(a,b);for(;a.Kc.length;)b=a.Kc.shift(),Xg(a,b.action,b.ue,b.data,b.G)}function ch(a){var b;b=sf.Vb().hc;return ya(a.qd)&&b};var Y={Mf:function(){re=dd=!0}};Y.forceLongPolling=Y.Mf;Y.Nf=function(){se=!0};Y.forceWebSockets=Y.Nf;Y.Tf=function(){return cd.isAvailable()};Y.isWebSocketsAvailable=Y.Tf;Y.lg=function(a,b){a.u.Ra.xe=b};Y.setSecurityDebugCallback=Y.lg;Y.ze=function(a,b){a.u.ze(b)};Y.stats=Y.ze;Y.Ae=function(a,b){a.u.Ae(b)};Y.statsIncrementCounter=Y.Ae;Y.fd=function(a){return a.u.fd};Y.dataUpdateCount=Y.fd;Y.Sf=function(a,b){a.u.he=b};Y.interceptServerData=Y.Sf;function dh(a){this.wa=Q;this.jb=new Cg;this.Be={};this.ic={};this.Cc=a}function eh(a,b,c,d,e){var f=a.jb,h=e;H(d>f.Bc,"Stacking an older write on top of newer ones");n(h)||(h=!0);f.la.push({path:b,Ga:c,Zc:d,visible:h});h&&(f.S=sg(f.S,b,c));f.Bc=d;return e?fh(a,new Ab(ng,b,c)):[]}function gh(a,b,c,d){var e=a.jb;H(d>e.Bc,"Stacking an older merge on top of newer ones");e.la.push({path:b,children:c,Zc:d,visible:!0});e.S=tg(e.S,b,c);e.Bc=d;c=bg(c);return fh(a,new Vc(ng,b,c))}
	function hh(a,b,c){c=c||!1;var d=Dg(a.jb,b);if(a.jb.Ed(b)){var e=Q;null!=d.Ga?e=e.set(C,!0):db(d.children,function(a,b){e=e.set(new L(a),b)});return fh(a,new mg(d.path,e,c))}return[]}function ih(a,b,c){c=bg(c);return fh(a,new Vc(pg,b,c))}function jh(a,b,c,d){d=kh(a,d);if(null!=d){var e=lh(d);d=e.path;e=e.Hb;b=T(d,b);c=new Ab(new og(!1,!0,e,!0),b,c);return mh(a,d,c)}return[]}
	function nh(a,b,c,d){if(d=kh(a,d)){var e=lh(d);d=e.path;e=e.Hb;b=T(d,b);c=bg(c);c=new Vc(new og(!1,!0,e,!0),b,c);return mh(a,d,c)}return[]}
	dh.prototype.Nb=function(a,b){var c=a.path,d=null,e=!1;ig(this.wa,c,function(a,b){var f=T(a,c);d=d||b.hb(f);e=e||null!=zg(b)});var f=this.wa.get(c);f?(e=e||null!=zg(f),d=d||f.hb(C)):(f=new yg,this.wa=this.wa.set(c,f));var h;null!=d?h=!0:(h=!1,d=G,lg(this.wa.subtree(c),function(a,b){var c=b.hb(C);c&&(d=d.T(a,c))}));var k=null!=Bg(f,a);if(!k&&!S(a.m)){var l=oh(a);H(!(l in this.ic),"View does not exist, but we have a tag");var m=ph++;this.ic[l]=m;this.Be["_"+m]=l}h=f.Nb(a,b,new Hg(c,this.jb),d,h);k||
	e||(f=Bg(f,a),h=h.concat(qh(this,a,f)));return h};
	dh.prototype.kb=function(a,b,c){var d=a.path,e=this.wa.get(d),f=[];if(e&&("default"===a.ja()||null!=Bg(e,a))){f=e.kb(a,b,c);e.e()&&(this.wa=this.wa.remove(d));e=f.hg;f=f.Kf;b=-1!==Pa(e,function(a){return S(a.m)});var h=gg(this.wa,d,function(a,b){return null!=zg(b)});if(b&&!h&&(d=this.wa.subtree(d),!d.e()))for(var d=rh(d),k=0;k<d.length;++k){var l=d[k],m=l.V,l=sh(this,l);this.Cc.ye(th(m),uh(this,m),l.ld,l.G)}if(!h&&0<e.length&&!c)if(b)this.Cc.Od(th(a),null);else{var u=this;Ja(e,function(a){a.ja();
	var b=u.ic[oh(a)];u.Cc.Od(th(a),b)})}vh(this,e)}return f};dh.prototype.Aa=function(a,b){var c=this.jb,d=gg(this.wa,a,function(b,c){var d=T(b,a);if(d=c.hb(d))return d});return c.Aa(a,d,b,!0)};function rh(a){return eg(a,function(a,c,d){if(c&&null!=zg(c))return[zg(c)];var e=[];c&&(e=Ag(c));r(d,function(a){e=e.concat(a)});return e})}function vh(a,b){for(var c=0;c<b.length;++c){var d=b[c];if(!S(d.m)){var d=oh(d),e=a.ic[d];delete a.ic[d];delete a.Be["_"+e]}}}
	function th(a){return S(a.m)&&!Sc(a.m)?a.wb():a}function qh(a,b,c){var d=b.path,e=uh(a,b);c=sh(a,c);b=a.Cc.ye(th(b),e,c.ld,c.G);d=a.wa.subtree(d);if(e)H(null==zg(d.value),"If we're adding a query, it shouldn't be shadowed");else for(e=eg(d,function(a,b,c){if(!a.e()&&b&&null!=zg(b))return[Qf(zg(b))];var d=[];b&&(d=d.concat(La(Ag(b),function(a){return a.V})));r(c,function(a){d=d.concat(a)});return d}),d=0;d<e.length;++d)c=e[d],a.Cc.Od(th(c),uh(a,c));return b}
	function sh(a,b){var c=b.V,d=uh(a,c);return{ld:function(){return(b.w()||G).hash()},G:function(b){if("ok"===b){if(d){var f=c.path;if(b=kh(a,d)){var h=lh(b);b=h.path;h=h.Hb;f=T(b,f);f=new Cb(new og(!1,!0,h,!0),f);b=mh(a,b,f)}else b=[]}else b=fh(a,new Cb(pg,c.path));return b}f="Unknown Error";"too_big"===b?f="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==b?f="Client doesn't have permission to access the desired data.":"unavailable"==b&&
	(f="The service is unavailable");f=Error(b+" at "+c.path.toString()+": "+f);f.code=b.toUpperCase();return a.kb(c,null,f)}}}function oh(a){return a.path.toString()+"$"+a.ja()}function lh(a){var b=a.indexOf("$");H(-1!==b&&b<a.length-1,"Bad queryKey.");return{Hb:a.substr(b+1),path:new L(a.substr(0,b))}}function kh(a,b){var c=a.Be,d="_"+b;return d in c?c[d]:void 0}function uh(a,b){var c=oh(b);return w(a.ic,c)}var ph=1;
	function mh(a,b,c){var d=a.wa.get(b);H(d,"Missing sync point for query tag that we're tracking");return d.eb(c,new Hg(b,a.jb),null)}function fh(a,b){return wh(a,b,a.wa,null,new Hg(C,a.jb))}function wh(a,b,c,d,e){if(b.path.e())return xh(a,b,c,d,e);var f=c.get(C);null==d&&null!=f&&(d=f.hb(C));var h=[],k=J(b.path),l=b.Mc(k);if((c=c.children.get(k))&&l)var m=d?d.Q(k):null,k=e.n(k),h=h.concat(wh(a,l,c,m,k));f&&(h=h.concat(f.eb(b,e,d)));return h}
	function xh(a,b,c,d,e){var f=c.get(C);null==d&&null!=f&&(d=f.hb(C));var h=[];c.children.ha(function(c,f){var m=d?d.Q(c):null,u=e.n(c),z=b.Mc(c);z&&(h=h.concat(xh(a,z,f,m,u)))});f&&(h=h.concat(f.eb(b,e,d)));return h};function Te(a,b,c){this.app=c;var d=new Eb(c);this.L=a;this.Va=$c(a);this.Vc=null;this.ca=new Nb;this.vd=1;this.Ra=null;if(b||0<=("object"===typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i))this.va=new Qc(this.L,q(this.Gb,this),d),setTimeout(q(this.Jc,this,!0),0);else{b=c.options.databaseAuthVariableOverride||null;if(null!==b){if("object"!==da(b))throw Error("Only objects are supported for option databaseAuthVariableOverride");
	try{B(b)}catch(e){throw Error("Invalid authOverride provided: "+e);}}this.va=this.Ra=new Pg(this.L,q(this.Gb,this),q(this.Jc,this),q(this.se,this),d,b)}var f=this;Fb(d,function(a){f.va.kf(a)});this.og=ad(a,q(function(){return new Xc(this.Va,this.va)},this));this.mc=new Jg;this.ge=new Gb;this.pd=new dh({ye:function(a,b,c,d){b=[];c=f.ge.j(a.path);c.e()||(b=fh(f.pd,new Ab(pg,a.path,c)),setTimeout(function(){d("ok")},0));return b},Od:ba});yh(this,"connected",!1);this.ia=new mc;this.Ya=new Se(this);this.fd=
	0;this.he=null;this.K=new dh({ye:function(a,b,c,d){f.va.$e(a,c,b,function(b,c){var e=d(b,c);Sb(f.ca,a.path,e)});return[]},Od:function(a,b){f.va.uf(a,b)}})}g=Te.prototype;g.toString=function(){return(this.L.Sc?"https://":"http://")+this.L.host};g.name=function(){return this.L.ne};function zh(a){a=a.ge.j(new L(".info/serverTimeOffset")).H()||0;return(new Date).getTime()+a}function Ah(a){a=a={timestamp:zh(a)};a.timestamp=a.timestamp||(new Date).getTime();return a}
	g.Gb=function(a,b,c,d){this.fd++;var e=new L(a);b=this.he?this.he(a,b):b;a=[];d?c?(b=pa(b,function(a){return M(a)}),a=nh(this.K,e,b,d)):(b=M(b),a=jh(this.K,e,b,d)):c?(d=pa(b,function(a){return M(a)}),a=ih(this.K,e,d)):(d=M(b),a=fh(this.K,new Ab(pg,e,d)));d=e;0<a.length&&(d=Bh(this,e));Sb(this.ca,d,a)};g.Jc=function(a){yh(this,"connected",a);!1===a&&Ch(this)};g.se=function(a){var b=this;Ic(a,function(a,d){yh(b,d,a)})};
	function yh(a,b,c){b=new L("/.info/"+b);c=M(c);var d=a.ge;d.Jd=d.Jd.F(b,c);c=fh(a.pd,new Ab(pg,b,c));Sb(a.ca,b,c)}g.Jb=function(a,b,c,d){this.f("set",{path:a.toString(),value:b,ug:c});var e=Ah(this);b=M(b,c);var e=pc(b,e),f=this.vd++,e=eh(this.K,a,e,f,!0);Ob(this.ca,e);var h=this;this.va.put(a.toString(),b.H(!0),function(b,c){var e="ok"===b;e||O("set at "+a+" failed: "+b);e=hh(h.K,f,!e);Sb(h.ca,a,e);Dh(d,b,c)});e=Eh(this,a);Bh(this,e);Sb(this.ca,e,[])};
	g.update=function(a,b,c){this.f("update",{path:a.toString(),value:b});var d=!0,e=Ah(this),f={};r(b,function(a,b){d=!1;var c=M(a);f[b]=pc(c,e)});if(d)E("update() called with empty data.  Don't do anything."),Dh(c,"ok");else{var h=this.vd++,k=gh(this.K,a,f,h);Ob(this.ca,k);var l=this;this.va.af(a.toString(),b,function(b,d){var e="ok"===b;e||O("update at "+a+" failed: "+b);var e=hh(l.K,h,!e),f=a;0<e.length&&(f=Bh(l,a));Sb(l.ca,f,e);Dh(c,b,d)});r(b,function(b,c){var d=Eh(l,a.n(c));Bh(l,d)});Sb(this.ca,
	a,[])}};function Ch(a){a.f("onDisconnectEvents");var b=Ah(a),c=[];nc(lc(a.ia,b),C,function(b,e){c=c.concat(fh(a.K,new Ab(pg,b,e)));var f=Eh(a,b);Bh(a,f)});a.ia=new mc;Sb(a.ca,C,c)}g.xd=function(a,b){var c=this;this.va.xd(a.toString(),function(d,e){"ok"===d&&Ze(c.ia,a);Dh(b,d,e)})};function nf(a,b,c,d){var e=M(c);a.va.pe(b.toString(),e.H(!0),function(c,h){"ok"===c&&oc(a.ia,b,e);Dh(d,c,h)})}
	function of(a,b,c,d,e){var f=M(c,d);a.va.pe(b.toString(),f.H(!0),function(c,d){"ok"===c&&oc(a.ia,b,f);Dh(e,c,d)})}function pf(a,b,c,d){var e=!0,f;for(f in c)e=!1;e?(E("onDisconnect().update() called with empty data.  Don't do anything."),Dh(d,"ok")):a.va.cf(b.toString(),c,function(e,f){if("ok"===e)for(var l in c){var m=M(c[l]);oc(a.ia,b.n(l),m)}Dh(d,e,f)})}function Zf(a,b,c){c=".info"===J(b.path)?a.pd.Nb(b,c):a.K.Nb(b,c);Qb(a.ca,b.path,c)}g.ab=function(){this.Ra&&this.Ra.ab("repo_interrupt")};
	g.kc=function(){this.Ra&&this.Ra.kc("repo_interrupt")};g.ze=function(a){if("undefined"!==typeof console){a?(this.Vc||(this.Vc=new Mb(this.Va)),a=this.Vc.get()):a=this.Va.get();var b=Ma(ua(a),function(a,b){return Math.max(b.length,a)},0),c;for(c in a){for(var d=a[c],e=c.length;e<b+2;e++)c+=" ";console.log(c+d)}}};g.Ae=function(a){Lb(this.Va,a);this.og.rf[a]=!0};g.f=function(a){var b="";this.Ra&&(b=this.Ra.id+":");E(b,arguments)};
	function Dh(a,b,c){a&&ub(function(){if("ok"==b)a(null);else{var d=(b||"error").toUpperCase(),e=d;c&&(e+=": "+c);e=Error(e);e.code=d;a(e)}})};function Fh(a,b,c,d,e){function f(){}a.f("transaction on "+b);var h=new U(a,b);h.gc("value",f);c={path:b,update:c,G:d,status:null,ef:rc(),Fe:e,of:0,Rd:function(){h.Ic("value",f)},Td:null,Ba:null,cd:null,dd:null,ed:null};d=a.K.Aa(b,void 0)||G;c.cd=d;d=c.update(d.H());if(n(d)){ef("transaction failed: Data returned ",d,c.path);c.status=1;e=Kg(a.mc,b);var k=e.Ca()||[];k.push(c);Lg(e,k);"object"===typeof d&&null!==d&&cb(d,".priority")?(k=w(d,".priority"),H(cf(k),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):
	k=(a.K.Aa(b)||G).C().H();e=Ah(a);d=M(d,k);e=pc(d,e);c.dd=d;c.ed=e;c.Ba=a.vd++;c=eh(a.K,b,e,c.Ba,c.Fe);Sb(a.ca,b,c);Gh(a)}else c.Rd(),c.dd=null,c.ed=null,c.G&&(a=new W(c.cd,new U(a,c.path),N),c.G(null,!1,a))}function Gh(a,b){var c=b||a.mc;b||Hh(a,c);if(null!==c.Ca()){var d=Ih(a,c);H(0<d.length,"Sending zero length transaction queue");Na(d,function(a){return 1===a.status})&&Jh(a,c.path(),d)}else c.kd()&&c.O(function(b){Gh(a,b)})}
	function Jh(a,b,c){for(var d=La(c,function(a){return a.Ba}),e=a.K.Aa(b,d)||G,d=e,e=e.hash(),f=0;f<c.length;f++){var h=c[f];H(1===h.status,"tryToSendTransactionQueue_: items in queue should all be run.");h.status=2;h.of++;var k=T(b,h.path),d=d.F(k,h.dd)}d=d.H(!0);a.va.put(b.toString(),d,function(d){a.f("transaction put response",{path:b.toString(),status:d});var e=[];if("ok"===d){d=[];for(f=0;f<c.length;f++){c[f].status=3;e=e.concat(hh(a.K,c[f].Ba));if(c[f].G){var h=c[f].ed,k=new U(a,c[f].path);d.push(q(c[f].G,
	null,null,!0,new W(h,k,N)))}c[f].Rd()}Hh(a,Kg(a.mc,b));Gh(a);Sb(a.ca,b,e);for(f=0;f<d.length;f++)ub(d[f])}else{if("datastale"===d)for(f=0;f<c.length;f++)c[f].status=4===c[f].status?5:1;else for(O("transaction at "+b.toString()+" failed: "+d),f=0;f<c.length;f++)c[f].status=5,c[f].Td=d;Bh(a,b)}},e)}function Bh(a,b){var c=Kh(a,b),d=c.path(),c=Ih(a,c);Lh(a,c,d);return d}
	function Lh(a,b,c){if(0!==b.length){for(var d=[],e=[],f=Ka(b,function(a){return 1===a.status}),f=La(f,function(a){return a.Ba}),h=0;h<b.length;h++){var k=b[h],l=T(c,k.path),m=!1,u;H(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null.");if(5===k.status)m=!0,u=k.Td,e=e.concat(hh(a.K,k.Ba,!0));else if(1===k.status)if(25<=k.of)m=!0,u="maxretry",e=e.concat(hh(a.K,k.Ba,!0));else{var z=a.K.Aa(k.path,f)||G;k.cd=z;var F=b[h].update(z.H());n(F)?(ef("transaction failed: Data returned ",F,
	k.path),l=M(F),"object"===typeof F&&null!=F&&cb(F,".priority")||(l=l.fa(z.C())),z=k.Ba,F=Ah(a),F=pc(l,F),k.dd=l,k.ed=F,k.Ba=a.vd++,Qa(f,z),e=e.concat(eh(a.K,k.path,F,k.Ba,k.Fe)),e=e.concat(hh(a.K,z,!0))):(m=!0,u="nodata",e=e.concat(hh(a.K,k.Ba,!0)))}Sb(a.ca,c,e);e=[];m&&(b[h].status=3,setTimeout(b[h].Rd,Math.floor(0)),b[h].G&&("nodata"===u?(k=new U(a,b[h].path),d.push(q(b[h].G,null,null,!1,new W(b[h].cd,k,N)))):d.push(q(b[h].G,null,Error(u),!1,null))))}Hh(a,a.mc);for(h=0;h<d.length;h++)ub(d[h]);Gh(a)}}
	function Kh(a,b){for(var c,d=a.mc;null!==(c=J(b))&&null===d.Ca();)d=Kg(d,c),b=D(b);return d}function Ih(a,b){var c=[];Mh(a,b,c);c.sort(function(a,b){return a.ef-b.ef});return c}function Mh(a,b,c){var d=b.Ca();if(null!==d)for(var e=0;e<d.length;e++)c.push(d[e]);b.O(function(b){Mh(a,b,c)})}function Hh(a,b){var c=b.Ca();if(c){for(var d=0,e=0;e<c.length;e++)3!==c[e].status&&(c[d]=c[e],d++);c.length=d;Lg(b,0<c.length?c:null)}b.O(function(b){Hh(a,b)})}
	function Eh(a,b){var c=Kh(a,b).path(),d=Kg(a.mc,b);Og(d,function(b){Nh(a,b)});Nh(a,d);Ng(d,function(b){Nh(a,b)});return c}
	function Nh(a,b){var c=b.Ca();if(null!==c){for(var d=[],e=[],f=-1,h=0;h<c.length;h++)4!==c[h].status&&(2===c[h].status?(H(f===h-1,"All SENT items should be at beginning of queue."),f=h,c[h].status=4,c[h].Td="set"):(H(1===c[h].status,"Unexpected transaction status in abort"),c[h].Rd(),e=e.concat(hh(a.K,c[h].Ba,!0)),c[h].G&&d.push(q(c[h].G,null,Error("set"),!1,null))));-1===f?Lg(b,null):c.length=f+1;Sb(a.ca,b.path(),e);for(h=0;h<d.length;h++)ub(d[h])}};function Ye(){this.lb={};this.wf=!1}Ye.prototype.ab=function(){for(var a in this.lb)this.lb[a].ab()};Ye.prototype.kc=function(){for(var a in this.lb)this.lb[a].kc()};Ye.prototype.ae=function(a){this.wf=a};ca(Ye);Ye.prototype.interrupt=Ye.prototype.ab;Ye.prototype.resume=Ye.prototype.kc;var Z={};Z.nc=Pg;Z.DataConnection=Z.nc;Pg.prototype.ng=function(a,b){this.ua("q",{p:a},b)};Z.nc.prototype.simpleListen=Z.nc.prototype.ng;Pg.prototype.Hf=function(a,b){this.ua("echo",{d:a},b)};Z.nc.prototype.echo=Z.nc.prototype.Hf;Pg.prototype.interrupt=Pg.prototype.ab;Z.zf=Ce;Z.RealTimeConnection=Z.zf;Ce.prototype.sendRequest=Ce.prototype.ua;Ce.prototype.close=Ce.prototype.close;
	Z.Rf=function(a){var b=Pg.prototype.put;Pg.prototype.put=function(c,d,e,f){n(f)&&(f=a());b.call(this,c,d,e,f)};return function(){Pg.prototype.put=b}};Z.hijackHash=Z.Rf;Z.yf=Hb;Z.ConnectionTarget=Z.yf;Z.ja=function(a){return a.ja()};Z.queryIdentifier=Z.ja;Z.Uf=function(a){return a.u.Ra.$};Z.listens=Z.Uf;Z.ae=function(a){Ye.Vb().ae(a)};Z.forceRestClient=Z.ae;Z.Context=Ye;function U(a,b){if(!(a instanceof Te))throw Error("new Firebase() no longer supported - use app.database().");X.call(this,a,b,fe,!1);this.then=void 0;this["catch"]=void 0}la(U,X);g=U.prototype;g.getKey=function(){x("Firebase.key",0,0,arguments.length);return this.path.e()?null:Bd(this.path)};
	g.n=function(a){x("Firebase.child",1,1,arguments.length);if(ga(a))a=String(a);else if(!(a instanceof L))if(null===J(this.path)){var b=a;b&&(b=b.replace(/^\/*\.info(\/|$)/,"/"));lf("Firebase.child",b)}else lf("Firebase.child",a);return new U(this.u,this.path.n(a))};g.getParent=function(){x("Firebase.parent",0,0,arguments.length);var a=this.path.parent();return null===a?null:new U(this.u,a)};
	g.Of=function(){x("Firebase.ref",0,0,arguments.length);for(var a=this;null!==a.getParent();)a=a.getParent();return a};g.Gf=function(){return this.u.Ya};g.set=function(a,b){x("Firebase.set",1,2,arguments.length);mf("Firebase.set",this.path);df("Firebase.set",a,this.path,!1);A("Firebase.set",2,b,!0);var c=new hb;this.u.Jb(this.path,a,null,ib(c,b));return c.ra};
	g.update=function(a,b){x("Firebase.update",1,2,arguments.length);mf("Firebase.update",this.path);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}gf("Firebase.update",a,this.path);A("Firebase.update",2,b,!0);c=new hb;this.u.update(this.path,a,ib(c,b));return c.ra};
	g.Jb=function(a,b,c){x("Firebase.setWithPriority",2,3,arguments.length);mf("Firebase.setWithPriority",this.path);df("Firebase.setWithPriority",a,this.path,!1);hf("Firebase.setWithPriority",2,b);A("Firebase.setWithPriority",3,c,!0);if(".length"===this.getKey()||".keys"===this.getKey())throw"Firebase.setWithPriority failed: "+this.getKey()+" is a read-only object.";var d=new hb;this.u.Jb(this.path,a,b,ib(d,c));return d.ra};
	g.remove=function(a){x("Firebase.remove",0,1,arguments.length);mf("Firebase.remove",this.path);A("Firebase.remove",1,a,!0);return this.set(null,a)};
	g.transaction=function(a,b,c){x("Firebase.transaction",1,3,arguments.length);mf("Firebase.transaction",this.path);A("Firebase.transaction",1,a,!1);A("Firebase.transaction",2,b,!0);if(n(c)&&"boolean"!=typeof c)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.getKey()||".keys"===this.getKey())throw"Firebase.transaction failed: "+this.getKey()+" is a read-only object.";"undefined"===typeof c&&(c=!0);var d=new hb;ha(b)&&jb(d.ra);Fh(this.u,this.path,a,function(a,c,h){a?
	d.reject(a):d.resolve(new pb(c,h));ha(b)&&b(a,c,h)},c);return d.ra};g.kg=function(a,b){x("Firebase.setPriority",1,2,arguments.length);mf("Firebase.setPriority",this.path);hf("Firebase.setPriority",1,a);A("Firebase.setPriority",2,b,!0);var c=new hb;this.u.Jb(this.path.n(".priority"),a,null,ib(c,b));return c.ra};
	g.push=function(a,b){x("Firebase.push",0,2,arguments.length);mf("Firebase.push",this.path);df("Firebase.push",a,this.path,!0);A("Firebase.push",2,b,!0);var c=zh(this.u),d=uf(c),c=this.n(d);if(null!=a){var e=this,f=c.set(a,b).then(function(){return e.n(d)});c.then=q(f.then,f);c["catch"]=q(f.then,f,void 0);ha(b)&&jb(f)}return c};g.ib=function(){mf("Firebase.onDisconnect",this.path);return new V(this.u,this.path)};U.prototype.child=U.prototype.n;U.prototype.set=U.prototype.set;U.prototype.update=U.prototype.update;
	U.prototype.setWithPriority=U.prototype.Jb;U.prototype.remove=U.prototype.remove;U.prototype.transaction=U.prototype.transaction;U.prototype.setPriority=U.prototype.kg;U.prototype.push=U.prototype.push;U.prototype.onDisconnect=U.prototype.ib;Lc(U.prototype,"database",U.prototype.Gf);Lc(U.prototype,"key",U.prototype.getKey);Lc(U.prototype,"parent",U.prototype.getParent);Lc(U.prototype,"root",U.prototype.Of);if("undefined"===typeof firebase)throw Error("Cannot install Firebase Database - be sure to load firebase-app.js first.");
	try{firebase.INTERNAL.registerService("database",function(a){var b=Ye.Vb(),c=a.options.databaseURL;n(c)||Ac("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.intializeApp().");var d=Bc(c),c=d.jc;Xe("Invalid Firebase Database URL",d);d.path.e()||Ac("Database URL must point to the root of a Firebase Database (not including a child path).");(d=w(b.lb,a.name))&&Ac("FIREBASE INTERNAL ERROR: Database initialized multiple times.");d=new Te(c,b.wf,a);b.lb[a.name]=
	d;return d.Ya},{Reference:U,Query:X,Database:Se,enableLogging:xc,INTERNAL:Y,TEST_ACCESS:Z,ServerValue:Ve})}catch(Oh){Ac("Failed to register the Firebase Database Service ("+Oh+")")};})();

	}).call(global);
	module.exports = firebase.database;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var firebase = __webpack_require__(32);
	(function(){
	/*! @license Firebase v3.6.4
	    Build: 3.6.4-rc.2
	    Terms: https://firebase.google.com/terms/ */
	(function(){var k,l=this,m=function(a){return void 0!==a},aa=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&
	!a.propertyIsEnumerable("call"))return"function"}else return"null";else if("function"==b&&"undefined"==typeof a.call)return"object";return b};var p=function(a,b){return-1!==a.indexOf(b)};var ba=function(a,b,c){function d(){z||(z=!0,b.apply(null,arguments))}function e(b){n=setTimeout(function(){n=null;a(f,2===C)},b)}function f(a,b){if(!z)if(a)d.apply(null,arguments);else if(2===C||B)d.apply(null,arguments);else{64>h&&(h*=2);var c;1===C?(C=2,c=0):c=1E3*(h+Math.random());e(c)}}function g(a){Ha||(Ha=!0,z||(null!==n?(a||(C=2),clearTimeout(n),e(0)):a||(C=1)))}var h=1,n=null,B=!1,C=0,z=!1,Ha=!1;e(0);setTimeout(function(){B=!0;g(!0)},c);return g};var q="https://firebasestorage.googleapis.com";var r=function(a,b){this.code="storage/"+a;this.message="Firebase Storage: "+b;this.serverResponse=null;this.name="FirebaseError"};(function(){var a=Error;function b(){}b.prototype=a.prototype;r.b=a.prototype;r.prototype=new b;r.a=function(b,d,e){for(var c=Array(arguments.length-2),g=2;g<arguments.length;g++)c[g-2]=arguments[g];return a.prototype[d].apply(b,c)}})();
	var ca=function(){return new r("unknown","An unknown error occurred, please check the error payload for server response.")},da=function(){return new r("canceled","User canceled the upload/download.")},ea=function(){return new r("cannot-slice-blob","Cannot slice blob for upload. Please retry the upload.")},fa=function(a,b,c){return new r("invalid-argument","Invalid argument in `"+b+"` at index "+a+": "+c)},ga=function(){return new r("app-deleted","The Firebase app was deleted.")},t=function(a,b){return new r("invalid-format",
	"String does not match format '"+a+"': "+b)},u=function(a){throw new r("internal-error","Internal error: "+a);};var v=function(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])},ha=function(a){var b={};v(a,function(a,d){b[a]=d});return b};var ia=function(a,b){b=b.split("/").filter(function(a){return 0<a.length}).join("/");return 0===a.length?b:a+"/"+b},ja=function(a){var b=a.lastIndexOf("/",a.length-2);return-1===b?a:a.slice(b+1)};var ka=function(a){if("undefined"!==typeof firebase)return new firebase.Promise(a);throw Error("Error in Firebase Storage - be sure to load firebase-app.js first.");};var w=function(a,b,c,d){this.h=a;this.b={};this.method=b;this.headers={};this.body=null;this.j=c;this.l=this.a=null;this.c=[200];this.g=[];this.timeout=d;this.f=!0};var la={STATE_CHANGED:"state_changed"},x={RUNNING:"running",PAUSED:"paused",SUCCESS:"success",CANCELED:"canceled",ERROR:"error"},ma=function(a){switch(a){case "running":case "pausing":case "canceling":return"running";case "paused":return"paused";case "success":return"success";case "canceled":return"canceled";case "error":return"error";default:return"error"}};var y=function(a){return m(a)&&null!==a},na=function(a){return"string"===typeof a||a instanceof String},oa=function(){return"undefined"!==typeof Blob};var qa=function(a,b){var c=pa;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var ra=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},sa=function(a,b){return a<b?-1:a>b?1:0};var A=function(a){return function(){var b=[];Array.prototype.push.apply(b,arguments);firebase.Promise.resolve(!0).then(function(){a.apply(null,b)})}};var D=function(a,b){this.bucket=a;this.path=b},ta=function(a){var b=encodeURIComponent;return"/b/"+b(a.bucket)+"/o/"+b(a.path)},ua=function(a){for(var b=null,c=[{K:/^gs:\/\/([A-Za-z0-9.\-]+)(\/(.*))?$/i,G:{bucket:1,path:3},J:function(a){"/"===a.path.charAt(a.path.length-1)&&(a.path=a.path.slice(0,-1))}},{K:/^https?:\/\/firebasestorage\.googleapis\.com\/v[A-Za-z0-9_]+\/b\/([A-Za-z0-9.\-]+)\/o(\/([^?#]*).*)?$/i,G:{bucket:1,path:3},J:function(a){a.path=decodeURIComponent(a.path)}}],d=0;d<c.length;d++){var e=
	c[d],f=e.K.exec(a);if(f){b=f[e.G.bucket];(f=f[e.G.path])||(f="");b=new D(b,f);e.J(b);break}}if(null==b)throw new r("invalid-url","Invalid URL '"+a+"'.");return b};var va=function(a,b,c){"function"==aa(a)||y(b)||y(c)?(this.c=a,this.a=b||null,this.b=c||null):(this.c=a.next||null,this.a=a.error||null,this.b=a.complete||null)};var E={RAW:"raw",BASE64:"base64",BASE64URL:"base64url",DATA_URL:"data_url"},wa=function(a){switch(a){case "raw":case "base64":case "base64url":case "data_url":break;default:throw"Expected one of the event types: [raw, base64, base64url, data_url].";}},xa=function(a,b){this.b=a;this.a=b||null},Ba=function(a,b){switch(a){case "raw":return new xa(ya(b));case "base64":case "base64url":return new xa(za(a,b));case "data_url":a=new Aa(b);var c;if(a.a)c=za("base64",a.c);else{try{c=decodeURIComponent(a.c)}catch(d){throw t("data_url",
	"Malformed data URL.");}c=ya(c)}return new xa(c,(new Aa(b)).b)}throw ca();},ya=function(a){for(var b=[],c=0;c<a.length;c++){var d=a.charCodeAt(c);if(127>=d)b.push(d);else if(2047>=d)b.push(192|d>>6,128|d&63);else if(55296==(d&64512))if(c<a.length-1&&56320==(a.charCodeAt(c+1)&64512)){var e=a.charCodeAt(++c),d=65536|(d&1023)<<10|e&1023;b.push(240|d>>18,128|d>>12&63,128|d>>6&63,128|d&63)}else b.push(239,191,189);else 56320==(d&64512)?b.push(239,191,189):b.push(224|d>>12,128|d>>6&63,128|d&63)}return new Uint8Array(b)},
	za=function(a,b){switch(a){case "base64":var c=-1!==b.indexOf("-"),d=-1!==b.indexOf("_");if(c||d)throw t(a,"Invalid character '"+(c?"-":"_")+"' found: is it base64url encoded?");break;case "base64url":c=-1!==b.indexOf("+");d=-1!==b.indexOf("/");if(c||d)throw t(a,"Invalid character '"+(c?"+":"/")+"' found: is it base64 encoded?");b=b.replace(/-/g,"+").replace(/_/g,"/")}var e;try{e=atob(b)}catch(f){throw t(a,"Invalid character found");}a=new Uint8Array(e.length);for(b=0;b<e.length;b++)a[b]=e.charCodeAt(b);
	return a},Aa=function(a){var b=a.match(/^data:([^,]+)?,/);if(null===b)throw t("data_url","Must be formatted 'data:[<mediatype>][;base64],<data>");b=b[1]||null;this.a=!1;this.b=null;if(null!=b){var c=b.length-7;this.b=(this.a=0<=c&&b.indexOf(";base64",c)==c)?b.substring(0,b.length-7):b}this.c=a.substring(a.indexOf(",")+1)};var Ca=function(a){var b=encodeURIComponent,c="?";v(a,function(a,e){a=b(a)+"="+b(e);c=c+a+"&"});return c=c.slice(0,-1)};var Da=function(){var a=this;this.a=new XMLHttpRequest;this.c=0;this.f=ka(function(b){a.a.addEventListener("abort",function(){a.c=2;b(a)});a.a.addEventListener("error",function(){a.c=1;b(a)});a.a.addEventListener("load",function(){b(a)})});this.b=!1},Ea=function(a,b,c,d,e){if(a.b)throw u("cannot .send() more than once");a.b=!0;a.a.open(c,b,!0);y(e)&&v(e,function(b,c){a.a.setRequestHeader(b,c.toString())});y(d)?a.a.send(d):a.a.send();return a.f},Fa=function(a){if(!a.b)throw u("cannot .getErrorCode() before sending");
	return a.c},F=function(a){if(!a.b)throw u("cannot .getStatus() before sending");try{return a.a.status}catch(b){return-1}},Ga=function(a){if(!a.b)throw u("cannot .getResponseText() before sending");return a.a.responseText};Da.prototype.abort=function(){this.a.abort()};var G=function(a,b,c,d,e,f){this.b=a;this.h=b;this.f=c;this.a=d;this.g=e;this.c=f};k=G.prototype;k.V=function(){return this.b};k.qa=function(){return this.h};k.na=function(){return this.f};k.ia=function(){return this.a};k.W=function(){if(y(this.a)){var a=this.a.downloadURLs;return y(a)&&y(a[0])?a[0]:null}return null};k.pa=function(){return this.g};k.la=function(){return this.c};var H;a:{var Ia=l.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){H=Ja;break a}}H=""};var La=function(a,b,c,d,e,f,g,h,n,B,C){this.C=a;this.A=b;this.v=c;this.o=d;this.B=e.slice();this.m=f.slice();this.j=this.l=this.c=this.b=null;this.f=this.g=!1;this.s=g;this.h=h;this.D=C;this.w=n;var z=this;this.u=ka(function(a,b){z.l=a;z.j=b;Ka(z)})},Ma=function(a,b,c){this.b=a;this.c=b;this.a=!!c},Ka=function(a){function b(a,b){b?a(!1,new Ma(!1,null,!0)):(b=new Da,b.a.withCredentials=d.D,d.b=b,Ea(b,d.C,d.A,d.o,d.v).then(function(b){d.b=null;var c=0===Fa(b),e=F(b);if(!(c=!c))var c=p([408,429],e),
	f=p(d.m,e),c=500<=e&&600>e||c||f;c?(b=2===Fa(b),a(!1,new Ma(!1,null,b))):a(!0,new Ma(p(d.B,e),b))}))}function c(a,b){var c=d.l;a=d.j;var e=b.c;if(b.b)try{var f=d.s(e,Ga(e));m(f)?c(f):c()}catch(B){a(B)}else null!==e?(b=ca(),f=Ga(e),b.serverResponse=f,d.h?a(d.h(e,b)):a(b)):(b=b.a?d.f?ga():da():new r("retry-limit-exceeded","Max retry time for operation exceeded, please try again."),a(b))}var d=a;a.g?c(0,new Ma(!1,null,!0)):a.c=ba(b,c,a.w)};La.prototype.a=function(){return this.u};
	La.prototype.cancel=function(a){this.g=!0;this.f=a||!1;null!==this.c&&(0,this.c)(!1);null!==this.b&&this.b.abort()};var Na=function(a,b,c){var d=Ca(a.b),d=a.h+d,e=a.headers?ha(a.headers):{};null!==b&&0<b.length&&(e.Authorization="Firebase "+b);e["X-Firebase-Storage-Version"]="webjs/"+("undefined"!==typeof firebase?firebase.SDK_VERSION:"AppManager");return new La(d,a.method,e,a.body,a.c,a.g,a.j,a.a,a.timeout,0,c)};var Oa=function(){};var Pa=function(a){this.b=firebase.Promise.reject(a)};Pa.prototype.a=function(){return this.b};Pa.prototype.cancel=function(){};var Qa=function(){this.a={};this.b=Number.MIN_SAFE_INTEGER},Ra=function(a,b){function c(){delete e.a[d]}var d=a.b;a.b++;a.a[d]=b;var e=a;b.a().then(c,c)},Sa=function(a){v(a.a,function(a,c){c&&c.cancel(!0)});a.a={}};var Ta=function(a,b,c,d,e){this.a=a;this.g=null;if(null!==this.a&&(a=this.a.options,y(a))){a=a.storageBucket||null;if(null==a)a=null;else{var f=null;try{f=ua(a)}catch(g){}if(null!==f){if(""!==f.path)throw new r("invalid-default-bucket","Invalid default bucket '"+a+"'.");a=f.bucket}}this.g=a}this.o=b;this.m=c;this.j=e;this.l=d;this.c=12E4;this.b=6E4;this.h=new Qa;this.f=!1},Ua=function(a){return null!==a.a&&y(a.a.INTERNAL)&&y(a.a.INTERNAL.getToken)?a.a.INTERNAL.getToken().then(function(a){return y(a)?
	a.accessToken:null},function(){return null}):firebase.Promise.resolve(null)};Ta.prototype.bucket=function(){if(this.f)throw ga();return this.g};var I=function(a,b,c){if(a.f)return new Pa(ga());b=a.m(b,c,null===a.a,a.j);Ra(a.h,b);return b};var Va=-1!=H.indexOf("Opera"),Wa=-1!=H.indexOf("Trident")||-1!=H.indexOf("MSIE"),Xa=-1!=H.indexOf("Edge"),Ya=-1!=H.indexOf("Gecko")&&!(-1!=H.toLowerCase().indexOf("webkit")&&-1==H.indexOf("Edge"))&&!(-1!=H.indexOf("Trident")||-1!=H.indexOf("MSIE"))&&-1==H.indexOf("Edge"),Za=-1!=H.toLowerCase().indexOf("webkit")&&-1==H.indexOf("Edge"),$a;
	a:{var ab="",bb=function(){var a=H;if(Ya)return/rv\:([^\);]+)(\)|;)/.exec(a);if(Xa)return/Edge\/([\d\.]+)/.exec(a);if(Wa)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Za)return/WebKit\/(\S+)/.exec(a);if(Va)return/(?:Version)[ \/]?(\S+)/.exec(a)}();bb&&(ab=bb?bb[1]:"");if(Wa){var cb,db=l.document;cb=db?db.documentMode:void 0;if(null!=cb&&cb>parseFloat(ab)){$a=String(cb);break a}}$a=ab}
	var eb=$a,pa={},fb=function(a){return qa(a,function(){for(var b=0,c=ra(String(eb)).split("."),d=ra(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=sa(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||sa(0==g[2].length,0==h[2].length)||sa(g[2],h[2]);g=g[3];h=h[3]}while(0==b)}return 0<=b})};var gb=function(a){var b=l.BlobBuilder||l.WebKitBlobBuilder;if(m(b)){for(var b=new b,c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}b=Array.prototype.slice.call(arguments);c=l.BlobBuilder||l.WebKitBlobBuilder;if(m(c)){for(var c=new c,d=0;d<b.length;d++)c.append(b[d],void 0);b=c.getBlob(void 0)}else if(m(l.Blob))b=new Blob(b,{});else throw Error("This browser doesn't seem to support creating Blobs");return b},hb=function(a,b,c){m(c)||(c=a.size);return a.webkitSlice?a.webkitSlice(b,
	c):a.mozSlice?a.mozSlice(b,c):a.slice?Ya&&!fb("13.0")||Za&&!fb("537.1")?(0>b&&(b+=a.size),0>b&&(b=0),0>c&&(c+=a.size),c<b&&(c=b),a.slice(b,c-b)):a.slice(b,c):null};var ib=function(a,b){return b},J=function(a,b,c,d){this.c=a;this.b=b||a;this.writable=!!c;this.a=d||ib},jb=null,kb=function(){if(jb)return jb;var a=[];a.push(new J("bucket"));a.push(new J("generation"));a.push(new J("metageneration"));a.push(new J("name","fullPath",!0));var b=new J("name");b.a=function(a,b){return!na(b)||2>b.length?b:ja(b)};a.push(b);b=new J("size");b.a=function(a,b){return y(b)?+b:b};a.push(b);a.push(new J("timeCreated"));a.push(new J("updated"));a.push(new J("md5Hash",null,!0));
	a.push(new J("cacheControl",null,!0));a.push(new J("contentDisposition",null,!0));a.push(new J("contentEncoding",null,!0));a.push(new J("contentLanguage",null,!0));a.push(new J("contentType",null,!0));a.push(new J("metadata","customMetadata",!0));a.push(new J("downloadTokens","downloadURLs",!1,function(a,b){if(!(na(b)&&0<b.length))return[];var c=encodeURIComponent;return b.split(",").map(function(b){var d=a.fullPath,d="https://firebasestorage.googleapis.com/v0"+("/b/"+c(a.bucket)+"/o/"+c(d));b=Ca({alt:"media",
	token:b});return d+b})}));return jb=a},lb=function(a,b){Object.defineProperty(a,"ref",{get:function(){return b.o(b,new D(a.bucket,a.fullPath))}})},mb=function(a,b){for(var c={},d=b.length,e=0;e<d;e++){var f=b[e];f.writable&&(c[f.c]=a[f.b])}return JSON.stringify(c)},nb=function(a){if(!a||"object"!==typeof a)throw"Expected Metadata object.";for(var b in a){var c=a[b];if("customMetadata"===b&&"object"!==typeof c)throw"Expected object for 'customMetadata' mapping.";}};var K=function(a,b,c){for(var d=b.length,e=b.length,f=0;f<b.length;f++)if(b[f].b){d=f;break}if(!(d<=c.length&&c.length<=e))throw d===e?(b=d,d=1===d?"argument":"arguments"):(b="between "+d+" and "+e,d="arguments"),new r("invalid-argument-count","Invalid argument count in `"+a+"`: Expected "+b+" "+d+", received "+c.length+".");for(f=0;f<c.length;f++)try{b[f].a(c[f])}catch(g){if(g instanceof Error)throw fa(f,a,g.message);throw fa(f,a,g);}},L=function(a,b){var c=this;this.a=function(b){c.b&&!m(b)||a(b)};
	this.b=!!b},ob=function(a,b){return function(c){a(c);b(c)}},M=function(a,b){function c(a){if(!("string"===typeof a||a instanceof String))throw"Expected string.";}var d;a?d=ob(c,a):d=c;return new L(d,b)},pb=function(){return new L(function(a){if(!(a instanceof Uint8Array||a instanceof ArrayBuffer||oa()&&a instanceof Blob))throw"Expected Blob or File.";})},qb=function(){return new L(function(a){if(!(("number"===typeof a||a instanceof Number)&&0<=a))throw"Expected a number 0 or greater.";})},rb=function(a,
	b){return new L(function(b){if(!(null===b||y(b)&&b instanceof Object))throw"Expected an Object.";y(a)&&a(b)},b)},N=function(){return new L(function(a){if(null!==a&&"function"!=aa(a))throw"Expected a Function.";},!0)};var O=function(a,b){oa()&&a instanceof Blob?(this.i=a,b=a.size,a=a.type):(a instanceof ArrayBuffer?(b?this.i=new Uint8Array(a):(this.i=new Uint8Array(a.byteLength),this.i.set(new Uint8Array(a))),b=this.i.length):(b?this.i=a:(this.i=new Uint8Array(a.length),this.i.set(a)),b=a.length),a="");this.a=b;this.b=a};O.prototype.type=function(){return this.b};
	O.prototype.slice=function(a,b){if(oa()&&this.i instanceof Blob)return a=hb(this.i,a,b),null===a?null:new O(a);a=new Uint8Array(this.i.buffer,a,b-a);return new O(a,!0)};
	var sb=function(a){var b=[];Array.prototype.push.apply(b,arguments);if(oa())return b=b.map(function(a){return a instanceof O?a.i:a}),new O(gb.apply(null,b));var b=b.map(function(a){return na(a)?Ba("raw",a).b.buffer:a.i.buffer}),c=0;b.forEach(function(a){c+=a.byteLength});var d=new Uint8Array(c),e=0;b.forEach(function(a){a=new Uint8Array(a);for(var b=0;b<a.length;b++)d[e++]=a[b]});return new O(d,!0)};var P=function(a){if(!a)throw ca();},tb=function(a,b){return function(c,d){var e;a:{try{e=JSON.parse(d)}catch(h){e=null;break a}c=typeof e;e="object"==c&&null!=e||"function"==c?e:null}if(null===e)e=null;else{c={type:"file"};d=b.length;for(var f=0;f<d;f++){var g=b[f];c[g.b]=g.a(c,e[g.c])}lb(c,a);e=c}P(null!==e);return e}},Q=function(a){return function(b,c){b=401===F(b)?new r("unauthenticated","User is not authenticated, please authenticate using Firebase Authentication and try again."):402===F(b)?
	new r("quota-exceeded","Quota for bucket '"+a.bucket+"' exceeded, please view quota on https://firebase.google.com/pricing/."):403===F(b)?new r("unauthorized","User does not have permission to access '"+a.path+"'."):c;b.serverResponse=c.serverResponse;return b}},ub=function(a){var b=Q(a);return function(c,d){var e=b(c,d);404===F(c)&&(e=new r("object-not-found","Object '"+a.path+"' does not exist."));e.serverResponse=d.serverResponse;return e}},vb=function(a,b,c){var d=ta(b);a=new w(q+"/v0"+d,"GET",
	tb(a,c),a.c);a.a=ub(b);return a},wb=function(a,b){var c=ta(b);a=new w(q+"/v0"+c,"DELETE",function(){},a.c);a.c=[200,204];a.a=ub(b);return a},xb=function(a,b,c){c=c?ha(c):{};c.fullPath=a.path;c.size=b.a;c.contentType||(a=b&&b.type()||"application/octet-stream",c.contentType=a);return c},yb=function(a,b,c,d,e){var f="/b/"+encodeURIComponent(b.bucket)+"/o",g={"X-Goog-Upload-Protocol":"multipart"},h;h="";for(var n=0;2>n;n++)h+=Math.random().toString().slice(2);g["Content-Type"]="multipart/related; boundary="+
	h;e=xb(b,d,e);n=mb(e,c);d=sb("--"+h+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+n+"\r\n--"+h+"\r\nContent-Type: "+e.contentType+"\r\n\r\n",d,"\r\n--"+h+"--");if(null===d)throw ea();a=new w(q+"/v0"+f,"POST",tb(a,c),a.b);a.b={name:e.fullPath};a.headers=g;a.body=d.i;a.a=Q(b);return a},zb=function(a,b,c,d){this.a=a;this.b=b;this.c=!!c;this.f=d||null},Ab=function(a,b){var c;try{c=a.a.getResponseHeader("X-Goog-Upload-Status")}catch(d){P(!1)}P(p(b||["active"],c));return c},Bb=function(a,
	b,c,d,e){var f="/b/"+encodeURIComponent(b.bucket)+"/o",g=xb(b,d,e);e={name:g.fullPath};f=q+"/v0"+f;d={"X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":d.a,"X-Goog-Upload-Header-Content-Type":g.contentType,"Content-Type":"application/json; charset=utf-8"};c=mb(g,c);a=new w(f,"POST",function(a){Ab(a);var b;try{b=a.a.getResponseHeader("X-Goog-Upload-URL")}catch(B){P(!1)}P(na(b));return b},a.b);a.b=e;a.headers=d;a.body=c;a.a=Q(b);return a},Cb=
	function(a,b,c,d){a=new w(c,"POST",function(a){var b=Ab(a,["active","final"]),c;try{c=a.a.getResponseHeader("X-Goog-Upload-Size-Received")}catch(h){P(!1)}a=c;isFinite(a)&&(a=String(a));a="string"==typeof a?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN;P(!isNaN(a));return new zb(a,d.a,"final"===b)},a.b);a.headers={"X-Goog-Upload-Command":"query"};a.a=Q(b);a.f=!1;return a},Db=function(a,b,c,d,e,f,g){var h=new zb(0,0);g?(h.a=g.a,h.b=g.b):(h.a=0,h.b=d.a);if(d.a!==h.b)throw new r("server-file-wrong-size",
	"Server recorded incorrect upload file size, please retry the upload.");var n=g=h.b-h.a;0<e&&(n=Math.min(n,e));var B=h.a;e={"X-Goog-Upload-Command":n===g?"upload, finalize":"upload","X-Goog-Upload-Offset":h.a};g=d.slice(B,B+n);if(null===g)throw ea();c=new w(c,"POST",function(a,c){var e=Ab(a,["active","final"]),g=h.a+n,C=d.a,z;"final"===e?z=tb(b,f)(a,c):z=null;return new zb(g,C,"final"===e,z)},b.b);c.headers=e;c.body=g.i;c.l=null;c.a=Q(a);c.f=!1;return c};var T=function(a,b,c,d,e,f){this.L=a;this.c=b;this.l=c;this.f=e;this.h=f||null;this.s=d;this.m=0;this.D=this.u=!1;this.B=[];this.S=262144<this.f.a;this.b="running";this.a=this.v=this.g=null;this.j=1;var g=this;this.F=function(a){g.a=null;g.j=1;"storage/canceled"===a.code?(g.u=!0,R(g)):(g.g=a,S(g,"error"))};this.P=function(a){g.a=null;"storage/canceled"===a.code?R(g):(g.g=a,S(g,"error"))};this.A=this.o=null;this.C=ka(function(a,b){g.o=a;g.A=b;Eb(g)});this.C.then(null,function(){})},Eb=function(a){"running"===
	a.b&&null===a.a&&(a.S?null===a.v?Fb(a):a.u?Gb(a):a.D?Hb(a):Ib(a):Jb(a))},U=function(a,b){Ua(a.c).then(function(c){switch(a.b){case "running":b(c);break;case "canceling":S(a,"canceled");break;case "pausing":S(a,"paused")}})},Fb=function(a){U(a,function(b){var c=Bb(a.c,a.l,a.s,a.f,a.h);a.a=I(a.c,c,b);a.a.a().then(function(b){a.a=null;a.v=b;a.u=!1;R(a)},this.F)})},Gb=function(a){var b=a.v;U(a,function(c){var d=Cb(a.c,a.l,b,a.f);a.a=I(a.c,d,c);a.a.a().then(function(b){a.a=null;Kb(a,b.a);a.u=!1;b.c&&(a.D=
	!0);R(a)},a.F)})},Ib=function(a){var b=262144*a.j,c=new zb(a.m,a.f.a),d=a.v;U(a,function(e){var f;try{f=Db(a.l,a.c,d,a.f,b,a.s,c)}catch(g){a.g=g;S(a,"error");return}a.a=I(a.c,f,e);a.a.a().then(function(b){33554432>262144*a.j&&(a.j*=2);a.a=null;Kb(a,b.a);b.c?(a.h=b.f,S(a,"success")):R(a)},a.F)})},Hb=function(a){U(a,function(b){var c=vb(a.c,a.l,a.s);a.a=I(a.c,c,b);a.a.a().then(function(b){a.a=null;a.h=b;S(a,"success")},a.P)})},Jb=function(a){U(a,function(b){var c=yb(a.c,a.l,a.s,a.f,a.h);a.a=I(a.c,c,
	b);a.a.a().then(function(b){a.a=null;a.h=b;Kb(a,a.f.a);S(a,"success")},a.F)})},Kb=function(a,b){var c=a.m;a.m=b;a.m>c&&V(a)},S=function(a,b){if(a.b!==b)switch(b){case "canceling":a.b=b;null!==a.a&&a.a.cancel();break;case "pausing":a.b=b;null!==a.a&&a.a.cancel();break;case "running":var c="paused"===a.b;a.b=b;c&&(V(a),Eb(a));break;case "paused":a.b=b;V(a);break;case "canceled":a.g=da();a.b=b;V(a);break;case "error":a.b=b;V(a);break;case "success":a.b=b,V(a)}},R=function(a){switch(a.b){case "pausing":S(a,
	"paused");break;case "canceling":S(a,"canceled");break;case "running":Eb(a)}};T.prototype.w=function(){return new G(this.m,this.f.a,ma(this.b),this.h,this,this.L)};
	T.prototype.M=function(a,b,c,d){function e(a){try{g(a);return}catch(z){}try{if(h(a),!(m(a.next)||m(a.error)||m(a.complete)))throw"";}catch(z){throw"Expected a function or an Object with one of `next`, `error`, `complete` properties.";}}function f(a){return function(b,c,d){null!==a&&K("on",a,arguments);var e=new va(b,c,d);Lb(n,e);return function(){var a=n.B,b=a.indexOf(e);-1!==b&&a.splice(b,1)}}}var g=N().a,h=rb(null,!0).a;K("on",[M(function(){if("state_changed"!==a)throw"Expected one of the event types: [state_changed].";
	}),rb(e,!0),N(),N()],arguments);var n=this,B=[rb(function(a){if(null===a)throw"Expected a function or an Object with one of `next`, `error`, `complete` properties.";e(a)}),N(),N()];return m(b)||m(c)||m(d)?f(null)(b,c,d):f(B)};T.prototype.then=function(a,b){return this.C.then(a,b)};
	var Lb=function(a,b){a.B.push(b);Mb(a,b)},V=function(a){Nb(a);Array.prototype.slice.call(a.B).forEach(function(b){Mb(a,b)})},Nb=function(a){if(null!==a.o){var b=!0;switch(ma(a.b)){case "success":A(a.o.bind(null,a.w()))();break;case "canceled":case "error":A(a.A.bind(null,a.g))();break;default:b=!1}b&&(a.o=null,a.A=null)}},Mb=function(a,b){switch(ma(a.b)){case "running":case "paused":null!==b.c&&A(b.c.bind(b,a.w()))();break;case "success":null!==b.b&&A(b.b.bind(b))();break;case "canceled":case "error":null!==
	b.a&&A(b.a.bind(b,a.g))();break;default:null!==b.a&&A(b.a.bind(b,a.g))()}};T.prototype.O=function(){K("resume",[],arguments);var a="paused"===this.b||"pausing"===this.b;a&&S(this,"running");return a};T.prototype.N=function(){K("pause",[],arguments);var a="running"===this.b;a&&S(this,"pausing");return a};T.prototype.cancel=function(){K("cancel",[],arguments);var a="running"===this.b||"pausing"===this.b;a&&S(this,"canceling");return a};var W=function(a,b){this.b=a;if(b)this.a=b instanceof D?b:ua(b);else if(a=a.bucket(),null!==a)this.a=new D(a,"");else throw new r("no-default-bucket","No default bucket found. Did you set the 'storageBucket' property when initializing the app?");};W.prototype.toString=function(){K("toString",[],arguments);return"gs://"+this.a.bucket+"/"+this.a.path};var Ob=function(a,b){return new W(a,b)};k=W.prototype;
	k.H=function(a){K("child",[M()],arguments);var b=ia(this.a.path,a);return Ob(this.b,new D(this.a.bucket,b))};k.ka=function(){var a;a=this.a.path;if(0==a.length)a=null;else{var b=a.lastIndexOf("/");a=-1===b?"":a.slice(0,b)}return null===a?null:Ob(this.b,new D(this.a.bucket,a))};k.ma=function(){return Ob(this.b,new D(this.a.bucket,""))};k.U=function(){return this.a.bucket};k.fa=function(){return this.a.path};k.ja=function(){return ja(this.a.path)};k.oa=function(){return this.b.l};
	k.Z=function(a,b){K("put",[pb(),new L(nb,!0)],arguments);X(this,"put");return new T(this,this.b,this.a,kb(),new O(a),b)};k.$=function(a,b,c){K("putString",[M(),M(wa,!0),new L(nb,!0)],arguments);X(this,"putString");var d=Ba(y(b)?b:"raw",a),e=c?ha(c):{};!y(e.contentType)&&y(d.a)&&(e.contentType=d.a);return new T(this,this.b,this.a,kb(),new O(d.b,!0),e)};k.X=function(){K("delete",[],arguments);X(this,"delete");var a=this;return Ua(this.b).then(function(b){var c=wb(a.b,a.a);return I(a.b,c,b).a()})};
	k.I=function(){K("getMetadata",[],arguments);X(this,"getMetadata");var a=this;return Ua(this.b).then(function(b){var c=vb(a.b,a.a,kb());return I(a.b,c,b).a()})};k.aa=function(a){K("updateMetadata",[new L(nb,void 0)],arguments);X(this,"updateMetadata");var b=this;return Ua(this.b).then(function(c){var d=b.b,e=b.a,f=a,g=kb(),h=ta(e),h=q+"/v0"+h,f=mb(f,g),d=new w(h,"PATCH",tb(d,g),d.c);d.headers={"Content-Type":"application/json; charset=utf-8"};d.body=f;d.a=ub(e);return I(b.b,d,c).a()})};
	k.Y=function(){K("getDownloadURL",[],arguments);X(this,"getDownloadURL");return this.I().then(function(a){a=a.downloadURLs[0];if(y(a))return a;throw new r("no-download-url","The given file does not have any download URLs.");})};var X=function(a,b){if(""===a.a.path)throw new r("invalid-root-operation","The operation '"+b+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");};var Y=function(a,b){this.a=new Ta(a,function(a,b){return new W(a,b)},Na,this,y(b)?b:new Oa);this.b=a;this.c=new Pb(this)};k=Y.prototype;k.ba=function(a){K("ref",[M(function(a){if(/^[A-Za-z]+:\/\//.test(a))throw"Expected child path but got a URL, use refFromURL instead.";},!0)],arguments);var b=new W(this.a);return m(a)?b.H(a):b};
	k.ca=function(a){K("refFromURL",[M(function(a){if(!/^[A-Za-z]+:\/\//.test(a))throw"Expected full URL but got a child path, use ref instead.";try{ua(a)}catch(c){throw"Expected valid full URL but got an invalid one.";}},!1)],arguments);return new W(this.a,a)};k.ha=function(){return this.a.b};k.ea=function(a){K("setMaxUploadRetryTime",[qb()],arguments);this.a.b=a};k.ga=function(){return this.a.c};k.da=function(a){K("setMaxOperationRetryTime",[qb()],arguments);this.a.c=a};k.T=function(){return this.b};
	k.R=function(){return this.c};var Pb=function(a){this.a=a};Pb.prototype.b=function(){var a=this.a.a;a.f=!0;a.a=null;Sa(a.h)};var Z=function(a,b,c){Object.defineProperty(a,b,{get:c})};W.prototype.toString=W.prototype.toString;W.prototype.child=W.prototype.H;W.prototype.put=W.prototype.Z;W.prototype.putString=W.prototype.$;W.prototype["delete"]=W.prototype.X;W.prototype.getMetadata=W.prototype.I;W.prototype.updateMetadata=W.prototype.aa;W.prototype.getDownloadURL=W.prototype.Y;Z(W.prototype,"parent",W.prototype.ka);Z(W.prototype,"root",W.prototype.ma);Z(W.prototype,"bucket",W.prototype.U);Z(W.prototype,"fullPath",W.prototype.fa);
	Z(W.prototype,"name",W.prototype.ja);Z(W.prototype,"storage",W.prototype.oa);Y.prototype.ref=Y.prototype.ba;Y.prototype.refFromURL=Y.prototype.ca;Z(Y.prototype,"maxOperationRetryTime",Y.prototype.ga);Y.prototype.setMaxOperationRetryTime=Y.prototype.da;Z(Y.prototype,"maxUploadRetryTime",Y.prototype.ha);Y.prototype.setMaxUploadRetryTime=Y.prototype.ea;Z(Y.prototype,"app",Y.prototype.T);Z(Y.prototype,"INTERNAL",Y.prototype.R);Pb.prototype["delete"]=Pb.prototype.b;Y.prototype.capi_=function(a){q=a};
	T.prototype.on=T.prototype.M;T.prototype.resume=T.prototype.O;T.prototype.pause=T.prototype.N;T.prototype.cancel=T.prototype.cancel;Z(T.prototype,"snapshot",T.prototype.w);Z(G.prototype,"bytesTransferred",G.prototype.V);Z(G.prototype,"totalBytes",G.prototype.qa);Z(G.prototype,"state",G.prototype.na);Z(G.prototype,"metadata",G.prototype.ia);Z(G.prototype,"downloadURL",G.prototype.W);Z(G.prototype,"task",G.prototype.pa);Z(G.prototype,"ref",G.prototype.la);la.STATE_CHANGED="state_changed";
	x.RUNNING="running";x.PAUSED="paused";x.SUCCESS="success";x.CANCELED="canceled";x.ERROR="error";E.RAW="raw";E.BASE64="base64";E.BASE64URL="base64url";E.DATA_URL="data_url";(function(){function a(a){return new Y(a)}var b={TaskState:x,TaskEvent:la,StringFormat:E,Storage:Y,Reference:W};if("undefined"!==typeof firebase)firebase.INTERNAL.registerService("storage",a,b);else throw Error("Cannot install Firebase Storage - be sure to load firebase-app.js first.");})();}).call(this);
	}).call(global);
	module.exports = firebase.storage;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var firebase = __webpack_require__(32);
	(function(){
	/*! @license Firebase v3.6.4
	    Build: 3.6.4-rc.2
	    Terms: https://firebase.google.com/terms/ */
	(function(){var f=function(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;for(var d in b)if(Object.defineProperties){var e=Object.getOwnPropertyDescriptor(b,d);e&&Object.defineProperty(a,d,e)}else a[d]=b[d]},g=this,h=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=
	typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";else if("function"==b&&"undefined"==typeof a.call)return"object";return b},k=function(a,b){function c(){}c.prototype=b.prototype;a.B=b.prototype;a.prototype=new c;a.u=function(a,c,n){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];
	return b.prototype[c].apply(a,d)}};var m={},p=(m["only-available-in-window"]="This method is available in a Window context.",m["only-available-in-sw"]="This method is available in a service worker context.",m["should-be-overriden"]="This method should be overriden by extended classes.",m["bad-sender-id"]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",m["permission-default"]="The required permissions were not granted and dismissed instead.",m["permission-blocked"]="The required permissions were not granted and blocked instead.",
	m["unsupported-browser"]="This browser doesn't support the API's required to use the firebase SDK.",m["notifications-blocked"]="Notifications have been blocked.",m["failed-serviceworker-registration"]="We are unable to register the default service worker. {$browserErrorMessage}",m["sw-registration-expected"]="A service worker registration was the expected input.",m["get-subscription-failed"]="There was an error when trying to get any existing Push Subscriptions.",m["invalid-saved-token"]="Unable to access details of the saved token.",
	m["sw-reg-redundant"]="The service worker being used for push was made redundant.",m["token-subscribe-failed"]="A problem occured while subscribing the user to FCM: {$message}",m["token-subscribe-no-token"]="FCM returned no token when subscribing the user to push.",m["token-subscribe-no-push-set"]="FCM returned an invalid response when getting an FCM token.",m["use-sw-before-get-token"]="You must call useServiceWorker() before calling getToken() to ensure your service worker is used.",m["invalid-delete-token"]=
	"You must pass a valid token into deleteToken(), i.e. the token from getToken().",m["delete-token-not-found"]="The deletion attempt for token could not be performed as the token was not found.",m["bg-handler-function-expected"]="The input to setBackgroundMessageHandler() must be a function.",m["no-window-client-to-msg"]="An attempt was made to message a non-existant window client.",m["unable-to-resubscribe"]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}",
	m["no-fcm-token-for-resubscribe"]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",m["failed-to-delete-token"]="Unable to delete the currently saved token.",m["no-sw-in-reg"]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",m["incorrect-gcm-sender-id"]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",m);var q={userVisibleOnly:!0,applicationServerKey:new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110])};var r=function(a,b){var c={};return c["firebase-messaging-msg-type"]=a,c["firebase-messaging-msg-data"]=b,c};var u=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))};k(u,Error);var v=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};var w=function(a,b){b.unshift(a);u.call(this,v.apply(null,b));b.shift()};k(w,u);var x=function(a,b,c){if(!a){var d="Assertion failed";if(b)var d=d+(": "+b),e=Array.prototype.slice.call(arguments,2);throw new w(""+d,e||[]);}};var y=null;var A=function(a){a=new Uint8Array(a);var b=h(a);x("array"==b||"object"==b&&"number"==typeof a.length,"encodeByteArray takes an array as a parameter");if(!y)for(y={},b=0;65>b;b++)y[b]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(b);for(var b=y,c=[],d=0;d<a.length;d+=3){var e=a[d],n=d+1<a.length,l=n?a[d+1]:0,z=d+2<a.length,t=z?a[d+2]:0,M=e>>2,e=(e&3)<<4|l>>4,l=(l&15)<<2|t>>6,t=t&63;z||(t=64,n||(l=64));c.push(b[M],b[e],b[l],b[t])}return c.join("").replace(/\+/g,"-").replace(/\//g,
	"_").replace(/=+$/,"")};var B=new firebase.INTERNAL.ErrorFactory("messaging","Messaging",p),C=function(){this.a=null},D=function(a){if(a.a)return a.a;a.a=new Promise(function(a,c){var b=g.indexedDB.open("fcm_token_details_db",1);b.onerror=function(a){c(a.target.error)};b.onsuccess=function(b){a(b.target.result)};b.onupgradeneeded=function(a){a=a.target.result.createObjectStore("fcm_token_object_Store",{keyPath:"swScope"});a.createIndex("fcmSenderId","fcmSenderId",{unique:!1});a.createIndex("fcmToken","fcmToken",{unique:!0})}});
	return a.a},E=function(a){a.a?a.a.then(function(b){b.close();a.a=null}):Promise.resolve()},F=function(a,b){return D(a).then(function(a){return new Promise(function(c,e){var d=a.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").index("fcmToken").get(b);d.onerror=function(a){e(a.target.error)};d.onsuccess=function(a){c(a.target.result)}})})},G=function(a,b){return D(a).then(function(a){return new Promise(function(c,e){var d=[],l=a.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").openCursor();
	l.onerror=function(a){e(a.target.error)};l.onsuccess=function(a){(a=a.target.result)?(a.value.fcmSenderId===b&&d.push(a.value),a.continue()):c(d)}})})},H=function(a,b,c){var d=A(b.getKey("p256dh")),e=A(b.getKey("auth"));a="authorized_entity="+a+"&"+("endpoint="+b.endpoint+"&")+("encryption_key="+d+"&")+("encryption_auth="+e);c&&(a+="&pushSet="+c);c=new Headers;c.append("Content-Type","application/x-www-form-urlencoded");return fetch("https://fcm.googleapis.com/fcm/connect/subscribe",{method:"POST",
	headers:c,body:a}).then(function(a){return a.json()}).then(function(a){if(a.error)throw B.create("token-subscribe-failed",{message:a.error.message});if(!a.token)throw B.create("token-subscribe-no-token");if(!a.pushSet)throw B.create("token-subscribe-no-push-set");return{token:a.token,pushSet:a.pushSet}})},I=function(a,b,c,d,e,n){var l={swScope:c.scope,endpoint:d.endpoint,auth:A(d.getKey("auth")),p256dh:A(d.getKey("p256dh")),fcmToken:e,fcmPushSet:n,fcmSenderId:b};return D(a).then(function(a){return new Promise(function(b,
	c){var d=a.transaction(["fcm_token_object_Store"],"readwrite").objectStore("fcm_token_object_Store").put(l);d.onerror=function(a){c(a.target.error)};d.onsuccess=function(){b()}})})};
	C.prototype.i=function(a,b){return b instanceof ServiceWorkerRegistration?"string"!==typeof a||0===a.length?Promise.reject(B.create("bad-sender-id")):G(this,a).then(function(c){if(0!==c.length){var d=c.findIndex(function(c){return b.scope===c.swScope&&a===c.fcmSenderId});if(-1!==d)return c[d]}}).then(function(a){if(a)return b.pushManager.getSubscription().catch(function(){throw B.create("get-subscription-failed");}).then(function(b){var c;if(c=b)c=b.endpoint===a.endpoint&&A(b.getKey("auth"))===a.auth&&
	A(b.getKey("p256dh"))===a.p256dh;if(c)return a.fcmToken})}):Promise.reject(B.create("sw-registration-expected"))};C.prototype.getSavedToken=C.prototype.i;
	C.prototype.h=function(a,b){var c=this;return"string"!==typeof a||0===a.length?Promise.reject(B.create("bad-sender-id")):b instanceof ServiceWorkerRegistration?b.pushManager.getSubscription().then(function(a){return a?a:b.pushManager.subscribe(q)}).then(function(d){return H(a,d).then(function(e){return I(c,a,b,d,e.token,e.pushSet).then(function(){return e.token})})}):Promise.reject(B.create("sw-registration-expected"))};C.prototype.createToken=C.prototype.h;
	C.prototype.deleteToken=function(a){var b=this;return"string"!==typeof a||0===a.length?Promise.reject(B.create("invalid-delete-token")):F(this,a).then(function(a){if(!a)throw B.create("delete-token-not-found");return D(b).then(function(b){return new Promise(function(c,d){var e=b.transaction(["fcm_token_object_Store"],"readwrite").objectStore("fcm_token_object_Store").delete(a.swScope);e.onerror=function(a){d(a.target.error)};e.onsuccess=function(b){0===b.target.result?d(B.create("failed-to-delete-token")):
	c(a)}})})})};var J=function(a){var b=this;this.a=new firebase.INTERNAL.ErrorFactory("messaging","Messaging",p);if(!a.options.messagingSenderId||"string"!==typeof a.options.messagingSenderId)throw this.a.create("bad-sender-id");this.l=a.options.messagingSenderId;this.c=new C;this.app=a;this.INTERNAL={};this.INTERNAL.delete=function(){return b.delete}};
	J.prototype.getToken=function(){var a=this,b=Notification.permission;return"granted"!==b?"denied"===b?Promise.reject(this.a.create("notifications-blocked")):Promise.resolve(null):this.f().then(function(b){return a.c.i(a.l,b).then(function(c){return c?c:a.c.h(a.l,b)})})};J.prototype.getToken=J.prototype.getToken;J.prototype.deleteToken=function(a){var b=this;return this.c.deleteToken(a).then(function(){return b.f()}).then(function(a){return a?a.pushManager.getSubscription():null}).then(function(a){if(a)return a.unsubscribe()})};
	J.prototype.deleteToken=J.prototype.deleteToken;J.prototype.f=function(){throw this.a.create("should-be-overriden");};J.prototype.requestPermission=function(){throw this.a.create("only-available-in-window");};J.prototype.useServiceWorker=function(){throw this.a.create("only-available-in-window");};J.prototype.useServiceWorker=J.prototype.useServiceWorker;J.prototype.onMessage=function(){throw this.a.create("only-available-in-window");};J.prototype.onMessage=J.prototype.onMessage;
	J.prototype.onTokenRefresh=function(){throw this.a.create("only-available-in-window");};J.prototype.onTokenRefresh=J.prototype.onTokenRefresh;J.prototype.setBackgroundMessageHandler=function(){throw this.a.create("only-available-in-sw");};J.prototype.setBackgroundMessageHandler=J.prototype.setBackgroundMessageHandler;J.prototype.delete=function(){E(this.c)};var K=self,P=function(a){J.call(this,a);var b=this;this.a=new firebase.INTERNAL.ErrorFactory("messaging","Messaging",p);K.addEventListener("push",function(a){return L(b,a)},!1);K.addEventListener("pushsubscriptionchange",function(a){return N(b,a)},!1);K.addEventListener("notificationclick",function(a){return O(b,a)},!1);this.b=null};f(P,J);
	var L=function(a,b){var c;try{c=b.data.json()}catch(e){return}var d=Q().then(function(b){if(b){if(c.notification||a.b)return R(a,c)}else{if((b=c)&&"object"===typeof b.notification){var d=Object.assign({},b.notification),e={};d.data=(e.FCM_MSG=b,e);b=d}else b=void 0;if(b)return K.registration.showNotification(b.title||"",b);if(a.b)return a.b(c)}});b.waitUntil(d)},N=function(a,b){var c=a.getToken().then(function(b){if(!b)throw a.a.create("no-fcm-token-for-resubscribe");var c=a.c;return F(c,b).then(function(b){if(!b)throw a.a.create("invalid-saved-token");
	return K.registration.pushManager.subscribe(q).then(function(a){return H(b.w,a,b.v)}).catch(function(d){return c.deleteToken(b.A).then(function(){throw a.a.create("unable-to-resubscribe",{message:d});})})})});b.waitUntil(c)},O=function(a,b){if(b.notification&&b.notification.data&&b.notification.data.FCM_MSG){b.stopImmediatePropagation();b.notification.close();var c=b.notification.data.FCM_MSG,d=c.notification.click_action;if(d){var e=S(d).then(function(a){return a?a:K.clients.openWindow(d)}).then(function(b){if(b)return delete c.notification,
	T(a,b,r("notification-clicked",c))});b.waitUntil(e)}}};P.prototype.setBackgroundMessageHandler=function(a){if(a&&"function"!==typeof a)throw this.a.create("bg-handler-function-expected");this.b=a};P.prototype.setBackgroundMessageHandler=P.prototype.setBackgroundMessageHandler;
	var S=function(a){var b=(new URL(a)).href;return K.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(a){for(var c=null,e=0;e<a.length;e++)if((new URL(a[e].url)).href===b){c=a[e];break}if(c)return c.focus(),c})},T=function(a,b,c){return new Promise(function(d,e){if(!b)return e(a.a.create("no-window-client-to-msg"));b.postMessage(c);d()})},Q=function(){return K.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(a){return a.some(function(a){return"visible"===
	a.visibilityState})})},R=function(a,b){return K.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(c){var d=r("push-msg-received",b);return Promise.all(c.map(function(b){return T(a,b,d)}))})};P.prototype.f=function(){return Promise.resolve(K.registration)};var V=function(a){J.call(this,a);var b=this;this.j=null;this.m=firebase.INTERNAL.createSubscribe(function(a){b.j=a});this.s=null;this.o=firebase.INTERNAL.createSubscribe(function(a){b.s=a});U(this)};f(V,J);
	V.prototype.getToken=function(){var a=this;return"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")?W(this).then(function(){return J.prototype.getToken.call(a)}):Promise.reject(this.a.create("unsupported-browser"))};V.prototype.getToken=V.prototype.getToken;
	var W=function(a){if(a.g)return a.g;var b=document.querySelector('link[rel="manifest"]');b?a.g=fetch(b.href).then(function(a){return a.json()}).catch(function(){return Promise.resolve()}).then(function(b){if(b&&b.gcm_sender_id&&"103953800507"!==b.gcm_sender_id)throw a.a.create("incorrect-gcm-sender-id");}):a.g=Promise.resolve();return a.g};
	V.prototype.requestPermission=function(){var a=this;return"granted"===Notification.permission?Promise.resolve():new Promise(function(b,c){var d=function(d){return"granted"===d?b():"denied"===d?c(a.a.create("permission-blocked")):c(a.a.create("permission-default"))},e=Notification.requestPermission(function(a){e||d(a)});e&&e.then(d)})};V.prototype.requestPermission=V.prototype.requestPermission;
	V.prototype.useServiceWorker=function(a){if(!(a instanceof ServiceWorkerRegistration))throw this.a.create("sw-registration-expected");if("undefined"!==typeof this.b)throw this.a.create("use-sw-before-get-token");this.b=a};V.prototype.useServiceWorker=V.prototype.useServiceWorker;V.prototype.onMessage=function(a,b,c){return this.m(a,b,c)};V.prototype.onMessage=V.prototype.onMessage;V.prototype.onTokenRefresh=function(a,b,c){return this.o(a,b,c)};V.prototype.onTokenRefresh=V.prototype.onTokenRefresh;
	var X=function(a,b){var c=b.installing||b.waiting||b.active;return new Promise(function(d,e){if(c)if("activated"===c.state)d(b);else if("redundant"===c.state)e(a.a.create("sw-reg-redundant"));else{var n=function(){if("activated"===c.state)d(b);else if("redundant"===c.state)e(a.a.create("sw-reg-redundant"));else return;c.removeEventListener("statechange",n)};c.addEventListener("statechange",n)}else e(a.a.create("no-sw-in-reg"))})};
	V.prototype.f=function(){var a=this;if(this.b)return X(this,this.b);this.b=null;return navigator.serviceWorker.register("/firebase-messaging-sw.js",{scope:"/firebase-cloud-messaging-push-scope"}).catch(function(b){throw a.a.create("failed-serviceworker-registration",{browserErrorMessage:b.message});}).then(function(b){return X(a,b).then(function(){a.b=b;b.update();return b})})};
	var U=function(a){"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",function(b){if(b.data&&b.data["firebase-messaging-msg-type"])switch(b=b.data,b["firebase-messaging-msg-type"]){case "push-msg-received":case "notification-clicked":a.j.next(b["firebase-messaging-msg-data"])}},!1)};if(!(firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService))throw Error("Cannot install Firebase Messaging - be sure to load firebase-app.js first.");firebase.INTERNAL.registerService("messaging",function(a){return self&&"ServiceWorkerGlobalScope"in self?new P(a):new V(a)},{Messaging:V});}).call(this);
	}).call(global);
	module.exports = firebase.messaging;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(42)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(44)

	exports.createHmac = __webpack_require__(56)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(57)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(59)(exports, module.exports);

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(39)
	var ieee754 = __webpack_require__(40)
	var isArray = __webpack_require__(41)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 40 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(43)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(38).Buffer))

/***/ },
/* 43 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(45)

	var md5 = toConstructor(__webpack_require__(53))
	var rmd160 = toConstructor(__webpack_require__(55))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(38).Buffer
	var Hash   = __webpack_require__(46)(Buffer)

	exports.sha1 = __webpack_require__(47)(Buffer, Hash)
	exports.sha256 = __webpack_require__(51)(Buffer, Hash)
	exports.sha512 = __webpack_require__(52)(Buffer, Hash)


/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(48).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(49);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(50);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(28)))

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 50 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(48).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(48).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(54);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(44)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(58)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(60)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(95)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(86);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};



/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(61);
	var Transform = __webpack_require__(62);
	var inherits = __webpack_require__(65);
	var modes = __webpack_require__(86);
	var ebtk = __webpack_require__(87);
	var StreamCipher = __webpack_require__(88);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};


	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(89),
	  CBC: __webpack_require__(90),
	  CFB: __webpack_require__(92),
	  OFB: __webpack_require__(93),
	  CTR: __webpack_require__(94)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}

	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}

	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};

	var G = new Global();


	AES.blockSize = 4 * 4;

	AES.prototype.blockSize = AES.blockSize;

	AES.keySize = 256 / 8;

	AES.prototype.keySize = AES.keySize;

	AES.ivSize = AES.blockSize;

	AES.prototype.ivSize = AES.ivSize;

	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}

	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};

	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};

	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};

	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};

	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];

	};




	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(63).Transform;
	var inherits = __webpack_require__(65);

	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(64).EventEmitter;
	var inherits = __webpack_require__(65);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(66);
	Stream.Writable = __webpack_require__(82);
	Stream.Duplex = __webpack_require__(83);
	Stream.Transform = __webpack_require__(84);
	Stream.PassThrough = __webpack_require__(85);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 64 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 65 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(63); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(67);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(75);
	exports.Duplex = __webpack_require__(74);
	exports.Transform = __webpack_require__(80);
	exports.PassThrough = __webpack_require__(81);

	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(68);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(69);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(64).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(63);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(64).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(38).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(70);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(71);
	util.inherits = __webpack_require__(65);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(72);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(73);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(74);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(79).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(74);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(79).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(38);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(38).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(70);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(68);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(71);
	util.inherits = __webpack_require__(65);
	/*</replacement>*/

	var Readable = __webpack_require__(67);
	var Writable = __webpack_require__(75);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(68);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(71);
	util.inherits = __webpack_require__(65);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(78)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(63);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(64).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(38).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(70);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(74);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(74);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(76).setImmediate))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(77);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(28)))

/***/ },
/* 78 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(38).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(74);

	/*<replacement>*/
	var util = __webpack_require__(71);
	util.inherits = __webpack_require__(65);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(80);

	/*<replacement>*/
	var util = __webpack_require__(71);
	util.inherits = __webpack_require__(65);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(75)


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(74)


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(80)


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(81)


/***/ },
/* 86 */
/***/ function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(61);
	var Transform = __webpack_require__(62);
	var inherits = __webpack_require__(65);

	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 89 */
/***/ function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(91);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(91);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(91);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(91);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(61);
	var Transform = __webpack_require__(62);
	var inherits = __webpack_require__(65);
	var modes = __webpack_require__(86);
	var StreamCipher = __webpack_require__(88);
	var ebtk = __webpack_require__(87);

	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }

	  this.push(unpad(this._mode.decrypt(this, chunk)));

	  next();
	};

	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}

	var modelist = {
	  ECB: __webpack_require__(89),
	  CBC: __webpack_require__(90),
	  CFB: __webpack_require__(92),
	  OFB: __webpack_require__(93),
	  CTR: __webpack_require__(94)
	};

	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }

	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var punycode = __webpack_require__(97);
	var util = __webpack_require__(99);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(100);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(98)(module), (function() { return this; }())))

/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 99 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(101);
	exports.encode = exports.stringify = __webpack_require__(102);


/***/ },
/* 101 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 102 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	  * vue-router v2.1.1
	  * (c) 2016 Evan You
	  * @license MIT
	  */
	'use strict';

	var View = {
	  name: 'router-view',
	  functional: true,
	  props: {
	    name: {
	      type: String,
	      default: 'default'
	    }
	  },
	  render: function render (h, ref) {
	    var props = ref.props;
	    var children = ref.children;
	    var parent = ref.parent;
	    var data = ref.data;

	    data.routerView = true

	    var route = parent.$route
	    var cache = parent._routerViewCache || (parent._routerViewCache = {})
	    var depth = 0
	    var inactive = false

	    while (parent) {
	      if (parent.$vnode && parent.$vnode.data.routerView) {
	        depth++
	      }
	      if (parent._inactive) {
	        inactive = true
	      }
	      parent = parent.$parent
	    }

	    data.routerViewDepth = depth
	    var matched = route.matched[depth]
	    if (!matched) {
	      return h()
	    }

	    var name = props.name
	    var component = inactive
	      ? cache[name]
	      : (cache[name] = matched.components[name])

	    if (!inactive) {
	      var hooks = data.hook || (data.hook = {})
	      hooks.init = function (vnode) {
	        matched.instances[name] = vnode.child
	      }
	      hooks.prepatch = function (oldVnode, vnode) {
	        matched.instances[name] = vnode.child
	      }
	      hooks.destroy = function (vnode) {
	        if (matched.instances[name] === vnode.child) {
	          matched.instances[name] = undefined
	        }
	      }
	    }

	    return h(component, data, children)
	  }
	}

	/*  */

	function assert (condition, message) {
	  if (!condition) {
	    throw new Error(("[vue-router] " + message))
	  }
	}

	function warn (condition, message) {
	  if (!condition) {
	    typeof console !== 'undefined' && console.warn(("[vue-router] " + message))
	  }
	}

	/*  */

	var encode = encodeURIComponent
	var decode = decodeURIComponent

	function resolveQuery (
	  query,
	  extraQuery
	) {
	  if ( extraQuery === void 0 ) extraQuery = {};

	  if (query) {
	    var parsedQuery
	    try {
	      parsedQuery = parseQuery(query)
	    } catch (e) {
	      process.env.NODE_ENV !== 'production' && warn(false, e.message)
	      parsedQuery = {}
	    }
	    for (var key in extraQuery) {
	      parsedQuery[key] = extraQuery[key]
	    }
	    return parsedQuery
	  } else {
	    return extraQuery
	  }
	}

	function parseQuery (query) {
	  var res = {}

	  query = query.trim().replace(/^(\?|#|&)/, '')

	  if (!query) {
	    return res
	  }

	  query.split('&').forEach(function (param) {
	    var parts = param.replace(/\+/g, ' ').split('=')
	    var key = decode(parts.shift())
	    var val = parts.length > 0
	      ? decode(parts.join('='))
	      : null

	    if (res[key] === undefined) {
	      res[key] = val
	    } else if (Array.isArray(res[key])) {
	      res[key].push(val)
	    } else {
	      res[key] = [res[key], val]
	    }
	  })

	  return res
	}

	function stringifyQuery (obj) {
	  var res = obj ? Object.keys(obj).map(function (key) {
	    var val = obj[key]

	    if (val === undefined) {
	      return ''
	    }

	    if (val === null) {
	      return encode(key)
	    }

	    if (Array.isArray(val)) {
	      var result = []
	      val.slice().forEach(function (val2) {
	        if (val2 === undefined) {
	          return
	        }
	        if (val2 === null) {
	          result.push(encode(key))
	        } else {
	          result.push(encode(key) + '=' + encode(val2))
	        }
	      })
	      return result.join('&')
	    }

	    return encode(key) + '=' + encode(val)
	  }).filter(function (x) { return x.length > 0; }).join('&') : null
	  return res ? ("?" + res) : ''
	}

	/*  */

	function createRoute (
	  record,
	  location,
	  redirectedFrom
	) {
	  var route = {
	    name: location.name || (record && record.name),
	    meta: (record && record.meta) || {},
	    path: location.path || '/',
	    hash: location.hash || '',
	    query: location.query || {},
	    params: location.params || {},
	    fullPath: getFullPath(location),
	    matched: record ? formatMatch(record) : []
	  }
	  if (redirectedFrom) {
	    route.redirectedFrom = getFullPath(redirectedFrom)
	  }
	  return Object.freeze(route)
	}

	// the starting route that represents the initial state
	var START = createRoute(null, {
	  path: '/'
	})

	function formatMatch (record) {
	  var res = []
	  while (record) {
	    res.unshift(record)
	    record = record.parent
	  }
	  return res
	}

	function getFullPath (ref) {
	  var path = ref.path;
	  var query = ref.query; if ( query === void 0 ) query = {};
	  var hash = ref.hash; if ( hash === void 0 ) hash = '';

	  return (path || '/') + stringifyQuery(query) + hash
	}

	var trailingSlashRE = /\/$/
	function isSameRoute (a, b) {
	  if (b === START) {
	    return a === b
	  } else if (!b) {
	    return false
	  } else if (a.path && b.path) {
	    return (
	      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
	      a.hash === b.hash &&
	      isObjectEqual(a.query, b.query)
	    )
	  } else if (a.name && b.name) {
	    return (
	      a.name === b.name &&
	      a.hash === b.hash &&
	      isObjectEqual(a.query, b.query) &&
	      isObjectEqual(a.params, b.params)
	    )
	  } else {
	    return false
	  }
	}

	function isObjectEqual (a, b) {
	  if ( a === void 0 ) a = {};
	  if ( b === void 0 ) b = {};

	  var aKeys = Object.keys(a)
	  var bKeys = Object.keys(b)
	  if (aKeys.length !== bKeys.length) {
	    return false
	  }
	  return aKeys.every(function (key) { return String(a[key]) === String(b[key]); })
	}

	function isIncludedRoute (current, target) {
	  return (
	    current.path.indexOf(target.path.replace(/\/$/, '')) === 0 &&
	    (!target.hash || current.hash === target.hash) &&
	    queryIncludes(current.query, target.query)
	  )
	}

	function queryIncludes (current, target) {
	  for (var key in target) {
	    if (!(key in current)) {
	      return false
	    }
	  }
	  return true
	}

	/*  */

	// work around weird flow bug
	var toTypes = [String, Object]

	var Link = {
	  name: 'router-link',
	  props: {
	    to: {
	      type: toTypes,
	      required: true
	    },
	    tag: {
	      type: String,
	      default: 'a'
	    },
	    exact: Boolean,
	    append: Boolean,
	    replace: Boolean,
	    activeClass: String,
	    event: {
	      type: [String, Array],
	      default: 'click'
	    }
	  },
	  render: function render (h) {
	    var this$1 = this;

	    var router = this.$router
	    var current = this.$route
	    var ref = router.resolve(this.to, current, this.append);
	    var normalizedTo = ref.normalizedTo;
	    var resolved = ref.resolved;
	    var href = ref.href;
	    var classes = {}
	    var activeClass = this.activeClass || router.options.linkActiveClass || 'router-link-active'
	    var compareTarget = normalizedTo.path ? createRoute(null, normalizedTo) : resolved
	    classes[activeClass] = this.exact
	      ? isSameRoute(current, compareTarget)
	      : isIncludedRoute(current, compareTarget)

	    var handler = function (e) {
	      if (guardEvent(e)) {
	        if (this$1.replace) {
	          router.replace(normalizedTo)
	        } else {
	          router.push(normalizedTo)
	        }
	      }
	    }

	    var on = { click: guardEvent }
	    if (Array.isArray(this.event)) {
	      this.event.forEach(function (e) { on[e] = handler })
	    } else {
	      on[this.event] = handler
	    }

	    var data = {
	      class: classes
	    }

	    if (this.tag === 'a') {
	      data.on = on
	      data.attrs = { href: href }
	    } else {
	      // find the first <a> child and apply listener and href
	      var a = findAnchor(this.$slots.default)
	      if (a) {
	        // in case the <a> is a static node
	        a.isStatic = false
	        var extend = _Vue.util.extend
	        var aData = a.data = extend({}, a.data)
	        aData.on = on
	        var aAttrs = a.data.attrs = extend({}, a.data.attrs)
	        aAttrs.href = href
	      } else {
	        // doesn't have <a> child, apply listener to self
	        data.on = on
	      }
	    }

	    return h(this.tag, data, this.$slots.default)
	  }
	}

	function guardEvent (e) {
	  // don't redirect with control keys
	  /* istanbul ignore if */
	  if (e.metaKey || e.ctrlKey || e.shiftKey) { return }
	  // don't redirect when preventDefault called
	  /* istanbul ignore if */
	  if (e.defaultPrevented) { return }
	  // don't redirect on right click
	  /* istanbul ignore if */
	  if (e.button !== 0) { return }
	  // don't redirect if `target="_blank"`
	  /* istanbul ignore if */
	  var target = e.target.getAttribute('target')
	  if (/\b_blank\b/i.test(target)) { return }

	  e.preventDefault()
	  return true
	}

	function findAnchor (children) {
	  if (children) {
	    var child
	    for (var i = 0; i < children.length; i++) {
	      child = children[i]
	      if (child.tag === 'a') {
	        return child
	      }
	      if (child.children && (child = findAnchor(child.children))) {
	        return child
	      }
	    }
	  }
	}

	var _Vue

	function install (Vue) {
	  if (install.installed) { return }
	  install.installed = true

	  _Vue = Vue

	  Object.defineProperty(Vue.prototype, '$router', {
	    get: function get () { return this.$root._router }
	  })

	  Object.defineProperty(Vue.prototype, '$route', {
	    get: function get$1 () { return this.$root._route }
	  })

	  Vue.mixin({
	    beforeCreate: function beforeCreate () {
	      if (this.$options.router) {
	        this._router = this.$options.router
	        this._router.init(this)
	        Vue.util.defineReactive(this, '_route', this._router.history.current)
	      }
	    }
	  })

	  Vue.component('router-view', View)
	  Vue.component('router-link', Link)

	  var strats = Vue.config.optionMergeStrategies
	  // use the same hook merging strategy for route hooks
	  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.created
	}

	/*  */

	function resolvePath (
	  relative,
	  base,
	  append
	) {
	  if (relative.charAt(0) === '/') {
	    return relative
	  }

	  if (relative.charAt(0) === '?' || relative.charAt(0) === '#') {
	    return base + relative
	  }

	  var stack = base.split('/')

	  // remove trailing segment if:
	  // - not appending
	  // - appending to trailing slash (last segment is empty)
	  if (!append || !stack[stack.length - 1]) {
	    stack.pop()
	  }

	  // resolve relative path
	  var segments = relative.replace(/^\//, '').split('/')
	  for (var i = 0; i < segments.length; i++) {
	    var segment = segments[i]
	    if (segment === '.') {
	      continue
	    } else if (segment === '..') {
	      stack.pop()
	    } else {
	      stack.push(segment)
	    }
	  }

	  // ensure leading slash
	  if (stack[0] !== '') {
	    stack.unshift('')
	  }

	  return stack.join('/')
	}

	function parsePath (path) {
	  var hash = ''
	  var query = ''

	  var hashIndex = path.indexOf('#')
	  if (hashIndex >= 0) {
	    hash = path.slice(hashIndex)
	    path = path.slice(0, hashIndex)
	  }

	  var queryIndex = path.indexOf('?')
	  if (queryIndex >= 0) {
	    query = path.slice(queryIndex + 1)
	    path = path.slice(0, queryIndex)
	  }

	  return {
	    path: path,
	    query: query,
	    hash: hash
	  }
	}

	function cleanPath (path) {
	  return path.replace(/\/\//g, '/')
	}

	/*  */

	function createRouteMap (routes) {
	  var pathMap = Object.create(null)
	  var nameMap = Object.create(null)

	  routes.forEach(function (route) {
	    addRouteRecord(pathMap, nameMap, route)
	  })

	  return {
	    pathMap: pathMap,
	    nameMap: nameMap
	  }
	}

	function addRouteRecord (
	  pathMap,
	  nameMap,
	  route,
	  parent,
	  matchAs
	) {
	  var path = route.path;
	  var name = route.name;
	  if (process.env.NODE_ENV !== 'production') {
	    assert(path != null, "\"path\" is required in a route configuration.")
	    assert(
	      typeof route.component !== 'string',
	      "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
	      "string id. Use an actual component instead."
	    )
	  }

	  var record = {
	    path: normalizePath(path, parent),
	    components: route.components || { default: route.component },
	    instances: {},
	    name: name,
	    parent: parent,
	    matchAs: matchAs,
	    redirect: route.redirect,
	    beforeEnter: route.beforeEnter,
	    meta: route.meta || {}
	  }

	  if (route.children) {
	    // Warn if route is named and has a default child route.
	    // If users navigate to this route by name, the default child will
	    // not be rendered (GH Issue #629)
	    if (process.env.NODE_ENV !== 'production') {
	      if (route.name && route.children.some(function (child) { return /^\/?$/.test(child.path); })) {
	        warn(false, ("Named Route '" + (route.name) + "' has a default child route.\n          When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), the default child route will not be rendered.\n          Remove the name from this route and use the name of the default child route for named links instead.")
	        )
	      }
	    }
	    route.children.forEach(function (child) {
	      addRouteRecord(pathMap, nameMap, child, record)
	    })
	  }

	  if (route.alias !== undefined) {
	    if (Array.isArray(route.alias)) {
	      route.alias.forEach(function (alias) {
	        addRouteRecord(pathMap, nameMap, { path: alias }, parent, record.path)
	      })
	    } else {
	      addRouteRecord(pathMap, nameMap, { path: route.alias }, parent, record.path)
	    }
	  }

	  if (!pathMap[record.path]) {
	    pathMap[record.path] = record
	  }
	  if (name) {
	    if (!nameMap[name]) {
	      nameMap[name] = record
	    } else if (process.env.NODE_ENV !== 'production') {
	      warn(false, ("Duplicate named routes definition: { name: \"" + name + "\", path: \"" + (record.path) + "\" }"))
	    }
	  }
	}

	function normalizePath (path, parent) {
	  path = path.replace(/\/$/, '')
	  if (path[0] === '/') { return path }
	  if (parent == null) { return path }
	  return cleanPath(((parent.path) + "/" + path))
	}

	var __moduleExports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	var isarray = __moduleExports

	/**
	 * Expose `pathToRegexp`.
	 */
	var index = pathToRegexp
	var parse_1 = parse
	var compile_1 = compile
	var tokensToFunction_1 = tokensToFunction
	var tokensToRegExp_1 = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }

	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'

	      keys.push(token)

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}

	index.parse = parse_1;
	index.compile = compile_1;
	index.tokensToFunction = tokensToFunction_1;
	index.tokensToRegExp = tokensToRegExp_1;

	/*  */

	var regexpCache = Object.create(null)

	function getRouteRegex (path) {
	  var hit = regexpCache[path]
	  var keys, regexp

	  if (hit) {
	    keys = hit.keys
	    regexp = hit.regexp
	  } else {
	    keys = []
	    regexp = index(path, keys)
	    regexpCache[path] = { keys: keys, regexp: regexp }
	  }

	  return { keys: keys, regexp: regexp }
	}

	var regexpCompileCache = Object.create(null)

	function fillParams (
	  path,
	  params,
	  routeMsg
	) {
	  try {
	    var filler =
	      regexpCompileCache[path] ||
	      (regexpCompileCache[path] = index.compile(path))
	    return filler(params || {}, { pretty: true })
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      warn(false, ("missing param for " + routeMsg + ": " + (e.message)))
	    }
	    return ''
	  }
	}

	/*  */

	function normalizeLocation (
	  raw,
	  current,
	  append
	) {
	  var next = typeof raw === 'string' ? { path: raw } : raw
	  // named target
	  if (next.name || next._normalized) {
	    return next
	  }

	  // relative params
	  if (!next.path && next.params && current) {
	    next = assign({}, next)
	    next._normalized = true
	    var params = assign(assign({}, current.params), next.params)
	    if (current.name) {
	      next.name = current.name
	      next.params = params
	    } else if (current.matched) {
	      var rawPath = current.matched[current.matched.length - 1].path
	      next.path = fillParams(rawPath, params, ("path " + (current.path)))
	    } else if (process.env.NODE_ENV !== 'production') {
	      warn(false, "relative params navigation requires a current route.")
	    }
	    return next
	  }

	  var parsedPath = parsePath(next.path || '')
	  var basePath = (current && current.path) || '/'
	  var path = parsedPath.path
	    ? resolvePath(parsedPath.path, basePath, append || next.append)
	    : (current && current.path) || '/'
	  var query = resolveQuery(parsedPath.query, next.query)
	  var hash = next.hash || parsedPath.hash
	  if (hash && hash.charAt(0) !== '#') {
	    hash = "#" + hash
	  }

	  return {
	    _normalized: true,
	    path: path,
	    query: query,
	    hash: hash
	  }
	}

	function assign (a, b) {
	  for (var key in b) {
	    a[key] = b[key]
	  }
	  return a
	}

	/*  */

	function createMatcher (routes) {
	  var ref = createRouteMap(routes);
	  var pathMap = ref.pathMap;
	  var nameMap = ref.nameMap;

	  function match (
	    raw,
	    currentRoute,
	    redirectedFrom
	  ) {
	    var location = normalizeLocation(raw, currentRoute)
	    var name = location.name;

	    if (name) {
	      var record = nameMap[name]
	      var paramNames = getRouteRegex(record.path).keys
	        .filter(function (key) { return !key.optional; })
	        .map(function (key) { return key.name; })

	      if (typeof location.params !== 'object') {
	        location.params = {}
	      }

	      if (currentRoute && typeof currentRoute.params === 'object') {
	        for (var key in currentRoute.params) {
	          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
	            location.params[key] = currentRoute.params[key]
	          }
	        }
	      }

	      if (record) {
	        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""))
	        return _createRoute(record, location, redirectedFrom)
	      }
	    } else if (location.path) {
	      location.params = {}
	      for (var path in pathMap) {
	        if (matchRoute(path, location.params, location.path)) {
	          return _createRoute(pathMap[path], location, redirectedFrom)
	        }
	      }
	    }
	    // no match
	    return _createRoute(null, location)
	  }

	  function redirect (
	    record,
	    location
	  ) {
	    var originalRedirect = record.redirect
	    var redirect = typeof originalRedirect === 'function'
	        ? originalRedirect(createRoute(record, location))
	        : originalRedirect

	    if (typeof redirect === 'string') {
	      redirect = { path: redirect }
	    }

	    if (!redirect || typeof redirect !== 'object') {
	      process.env.NODE_ENV !== 'production' && warn(
	        false, ("invalid redirect option: " + (JSON.stringify(redirect)))
	      )
	      return _createRoute(null, location)
	    }

	    var re = redirect
	    var name = re.name;
	    var path = re.path;
	    var query = location.query;
	    var hash = location.hash;
	    var params = location.params;
	    query = re.hasOwnProperty('query') ? re.query : query
	    hash = re.hasOwnProperty('hash') ? re.hash : hash
	    params = re.hasOwnProperty('params') ? re.params : params

	    if (name) {
	      // resolved named direct
	      var targetRecord = nameMap[name]
	      if (process.env.NODE_ENV !== 'production') {
	        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."))
	      }
	      return match({
	        _normalized: true,
	        name: name,
	        query: query,
	        hash: hash,
	        params: params
	      }, undefined, location)
	    } else if (path) {
	      // 1. resolve relative redirect
	      var rawPath = resolveRecordPath(path, record)
	      // 2. resolve params
	      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""))
	      // 3. rematch with existing query and hash
	      return match({
	        _normalized: true,
	        path: resolvedPath,
	        query: query,
	        hash: hash
	      }, undefined, location)
	    } else {
	      warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))))
	      return _createRoute(null, location)
	    }
	  }

	  function alias (
	    record,
	    location,
	    matchAs
	  ) {
	    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""))
	    var aliasedMatch = match({
	      _normalized: true,
	      path: aliasedPath
	    })
	    if (aliasedMatch) {
	      var matched = aliasedMatch.matched
	      var aliasedRecord = matched[matched.length - 1]
	      location.params = aliasedMatch.params
	      return _createRoute(aliasedRecord, location)
	    }
	    return _createRoute(null, location)
	  }

	  function _createRoute (
	    record,
	    location,
	    redirectedFrom
	  ) {
	    if (record && record.redirect) {
	      return redirect(record, redirectedFrom || location)
	    }
	    if (record && record.matchAs) {
	      return alias(record, location, record.matchAs)
	    }
	    return createRoute(record, location, redirectedFrom)
	  }

	  return match
	}

	function matchRoute (
	  path,
	  params,
	  pathname
	) {
	  var ref = getRouteRegex(path);
	  var regexp = ref.regexp;
	  var keys = ref.keys;
	  var m = pathname.match(regexp)

	  if (!m) {
	    return false
	  } else if (!params) {
	    return true
	  }

	  for (var i = 1, len = m.length; i < len; ++i) {
	    var key = keys[i - 1]
	    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i]
	    if (key) { params[key.name] = val }
	  }

	  return true
	}

	function resolveRecordPath (path, record) {
	  return resolvePath(path, record.parent ? record.parent.path : '/', true)
	}

	/*  */

	var inBrowser = typeof window !== 'undefined'

	var supportsHistory = inBrowser && (function () {
	  var ua = window.navigator.userAgent

	  if (
	    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
	    ua.indexOf('Mobile Safari') !== -1 &&
	    ua.indexOf('Chrome') === -1 &&
	    ua.indexOf('Windows Phone') === -1
	  ) {
	    return false
	  }

	  return window.history && 'pushState' in window.history
	})()

	/*  */

	function runQueue (queue, fn, cb) {
	  var step = function (index) {
	    if (index >= queue.length) {
	      cb()
	    } else {
	      if (queue[index]) {
	        fn(queue[index], function () {
	          step(index + 1)
	        })
	      } else {
	        step(index + 1)
	      }
	    }
	  }
	  step(0)
	}

	/*  */


	var History = function History (router, base) {
	  this.router = router
	  this.base = normalizeBase(base)
	  // start with a route object that stands for "nowhere"
	  this.current = START
	  this.pending = null
	};

	History.prototype.listen = function listen (cb) {
	  this.cb = cb
	};

	History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
	    var this$1 = this;

	  var route = this.router.match(location, this.current)
	  this.confirmTransition(route, function () {
	    this$1.updateRoute(route)
	    onComplete && onComplete(route)
	    this$1.ensureURL()
	  }, onAbort)
	};

	History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
	    var this$1 = this;

	  var current = this.current
	  var abort = function () { onAbort && onAbort() }
	  if (isSameRoute(route, current)) {
	    this.ensureURL()
	    return abort()
	  }

	  var ref = resolveQueue(this.current.matched, route.matched);
	    var deactivated = ref.deactivated;
	    var activated = ref.activated;

	  var queue = [].concat(
	    // in-component leave guards
	    extractLeaveGuards(deactivated),
	    // global before hooks
	    this.router.beforeHooks,
	    // enter guards
	    activated.map(function (m) { return m.beforeEnter; }),
	    // async components
	    resolveAsyncComponents(activated)
	  )

	  this.pending = route
	  var iterator = function (hook, next) {
	    if (this$1.pending !== route) {
	      return abort()
	    }
	    hook(route, current, function (to) {
	      if (to === false) {
	        // next(false) -> abort navigation, ensure current URL
	        this$1.ensureURL(true)
	        abort()
	      } else if (typeof to === 'string' || typeof to === 'object') {
	        // next('/') or next({ path: '/' }) -> redirect
	        (typeof to === 'object' && to.replace) ? this$1.replace(to) : this$1.push(to)
	        abort()
	      } else {
	        // confirm transition and pass on the value
	        next(to)
	      }
	    })
	  }

	  runQueue(queue, iterator, function () {
	    var postEnterCbs = []
	    var enterGuards = extractEnterGuards(activated, postEnterCbs, function () {
	      return this$1.current === route
	    })
	    // wait until async components are resolved before
	    // extracting in-component enter guards
	    runQueue(enterGuards, iterator, function () {
	      if (this$1.pending !== route) {
	        return abort()
	      }
	      this$1.pending = null
	      onComplete(route)
	      if (this$1.router.app) {
	        this$1.router.app.$nextTick(function () {
	          postEnterCbs.forEach(function (cb) { return cb(); })
	        })
	      }
	    })
	  })
	};

	History.prototype.updateRoute = function updateRoute (route) {
	  var prev = this.current
	  this.current = route
	  this.cb && this.cb(route)
	  this.router.afterHooks.forEach(function (hook) {
	    hook && hook(route, prev)
	  })
	};

	function normalizeBase (base) {
	  if (!base) {
	    if (inBrowser) {
	      // respect <base> tag
	      var baseEl = document.querySelector('base')
	      base = baseEl ? baseEl.getAttribute('href') : '/'
	    } else {
	      base = '/'
	    }
	  }
	  // make sure there's the starting slash
	  if (base.charAt(0) !== '/') {
	    base = '/' + base
	  }
	  // remove trailing slash
	  return base.replace(/\/$/, '')
	}

	function resolveQueue (
	  current,
	  next
	) {
	  var i
	  var max = Math.max(current.length, next.length)
	  for (i = 0; i < max; i++) {
	    if (current[i] !== next[i]) {
	      break
	    }
	  }
	  return {
	    activated: next.slice(i),
	    deactivated: current.slice(i)
	  }
	}

	function extractGuard (
	  def,
	  key
	) {
	  if (typeof def !== 'function') {
	    // extend now so that global mixins are applied.
	    def = _Vue.extend(def)
	  }
	  return def.options[key]
	}

	function extractLeaveGuards (matched) {
	  return flatten(flatMapComponents(matched, function (def, instance) {
	    var guard = extractGuard(def, 'beforeRouteLeave')
	    if (guard) {
	      return Array.isArray(guard)
	        ? guard.map(function (guard) { return wrapLeaveGuard(guard, instance); })
	        : wrapLeaveGuard(guard, instance)
	    }
	  }).reverse())
	}

	function wrapLeaveGuard (
	  guard,
	  instance
	) {
	  return function routeLeaveGuard () {
	    return guard.apply(instance, arguments)
	  }
	}

	function extractEnterGuards (
	  matched,
	  cbs,
	  isValid
	) {
	  return flatten(flatMapComponents(matched, function (def, _, match, key) {
	    var guard = extractGuard(def, 'beforeRouteEnter')
	    if (guard) {
	      return Array.isArray(guard)
	        ? guard.map(function (guard) { return wrapEnterGuard(guard, cbs, match, key, isValid); })
	        : wrapEnterGuard(guard, cbs, match, key, isValid)
	    }
	  }))
	}

	function wrapEnterGuard (
	  guard,
	  cbs,
	  match,
	  key,
	  isValid
	) {
	  return function routeEnterGuard (to, from, next) {
	    return guard(to, from, function (cb) {
	      next(cb)
	      if (typeof cb === 'function') {
	        cbs.push(function () {
	          // #750
	          // if a router-view is wrapped with an out-in transition,
	          // the instance may not have been registered at this time.
	          // we will need to poll for registration until current route
	          // is no longer valid.
	          poll(cb, match.instances, key, isValid)
	        })
	      }
	    })
	  }
	}

	function poll (
	  cb, // somehow flow cannot infer this is a function
	  instances,
	  key,
	  isValid
	) {
	  if (instances[key]) {
	    cb(instances[key])
	  } else if (isValid()) {
	    setTimeout(function () {
	      poll(cb, instances, key, isValid)
	    }, 16)
	  }
	}

	function resolveAsyncComponents (matched) {
	  return flatMapComponents(matched, function (def, _, match, key) {
	    // if it's a function and doesn't have Vue options attached,
	    // assume it's an async component resolve function.
	    // we are not using Vue's default async resolving mechanism because
	    // we want to halt the navigation until the incoming component has been
	    // resolved.
	    if (typeof def === 'function' && !def.options) {
	      return function (to, from, next) {
	        var resolve = function (resolvedDef) {
	          match.components[key] = resolvedDef
	          next()
	        }

	        var reject = function (reason) {
	          warn(false, ("Failed to resolve async component " + key + ": " + reason))
	          next(false)
	        }

	        var res = def(resolve, reject)
	        if (res && typeof res.then === 'function') {
	          res.then(resolve, reject)
	        }
	      }
	    }
	  })
	}

	function flatMapComponents (
	  matched,
	  fn
	) {
	  return flatten(matched.map(function (m) {
	    return Object.keys(m.components).map(function (key) { return fn(
	      m.components[key],
	      m.instances[key],
	      m, key
	    ); })
	  }))
	}

	function flatten (arr) {
	  return Array.prototype.concat.apply([], arr)
	}

	/*  */

	var positionStore = Object.create(null)

	function saveScrollPosition (key) {
	  if (!key) { return }
	  positionStore[key] = {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  }
	}

	function getScrollPosition (key) {
	  if (!key) { return }
	  return positionStore[key]
	}

	function getElementPosition (el) {
	  var docRect = document.documentElement.getBoundingClientRect()
	  var elRect = el.getBoundingClientRect()
	  return {
	    x: elRect.left - docRect.left,
	    y: elRect.top - docRect.top
	  }
	}

	function isValidPosition (obj) {
	  return isNumber(obj.x) || isNumber(obj.y)
	}

	function normalizePosition (obj) {
	  return {
	    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
	    y: isNumber(obj.y) ? obj.y : window.pageYOffset
	  }
	}

	function isNumber (v) {
	  return typeof v === 'number'
	}

	/*  */


	var genKey = function () { return String(Date.now()); }
	var _key = genKey()

	var HTML5History = (function (History) {
	  function HTML5History (router, base) {
	    var this$1 = this;

	    History.call(this, router, base)

	    var expectScroll = router.options.scrollBehavior
	    window.addEventListener('popstate', function (e) {
	      _key = e.state && e.state.key
	      var current = this$1.current
	      this$1.transitionTo(getLocation(this$1.base), function (next) {
	        if (expectScroll) {
	          this$1.handleScroll(next, current, true)
	        }
	      })
	    })

	    if (expectScroll) {
	      window.addEventListener('scroll', function () {
	        saveScrollPosition(_key)
	      })
	    }
	  }

	  if ( History ) HTML5History.__proto__ = History;
	  HTML5History.prototype = Object.create( History && History.prototype );
	  HTML5History.prototype.constructor = HTML5History;

	  HTML5History.prototype.go = function go (n) {
	    window.history.go(n)
	  };

	  HTML5History.prototype.push = function push (location) {
	    var this$1 = this;

	    var current = this.current
	    this.transitionTo(location, function (route) {
	      pushState(cleanPath(this$1.base + route.fullPath))
	      this$1.handleScroll(route, current, false)
	    })
	  };

	  HTML5History.prototype.replace = function replace (location) {
	    var this$1 = this;

	    var current = this.current
	    this.transitionTo(location, function (route) {
	      replaceState(cleanPath(this$1.base + route.fullPath))
	      this$1.handleScroll(route, current, false)
	    })
	  };

	  HTML5History.prototype.ensureURL = function ensureURL (push) {
	    if (getLocation(this.base) !== this.current.fullPath) {
	      var current = cleanPath(this.base + this.current.fullPath)
	      push ? pushState(current) : replaceState(current)
	    }
	  };

	  HTML5History.prototype.handleScroll = function handleScroll (to, from, isPop) {
	    var router = this.router
	    if (!router.app) {
	      return
	    }

	    var behavior = router.options.scrollBehavior
	    if (!behavior) {
	      return
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      assert(typeof behavior === 'function', "scrollBehavior must be a function")
	    }

	    // wait until re-render finishes before scrolling
	    router.app.$nextTick(function () {
	      var position = getScrollPosition(_key)
	      var shouldScroll = behavior(to, from, isPop ? position : null)
	      if (!shouldScroll) {
	        return
	      }
	      var isObject = typeof shouldScroll === 'object'
	      if (isObject && typeof shouldScroll.selector === 'string') {
	        var el = document.querySelector(shouldScroll.selector)
	        if (el) {
	          position = getElementPosition(el)
	        } else if (isValidPosition(shouldScroll)) {
	          position = normalizePosition(shouldScroll)
	        }
	      } else if (isObject && isValidPosition(shouldScroll)) {
	        position = normalizePosition(shouldScroll)
	      }

	      if (position) {
	        window.scrollTo(position.x, position.y)
	      }
	    })
	  };

	  return HTML5History;
	}(History));

	function getLocation (base) {
	  var path = window.location.pathname
	  if (base && path.indexOf(base) === 0) {
	    path = path.slice(base.length)
	  }
	  return (path || '/') + window.location.search + window.location.hash
	}

	function pushState (url, replace) {
	  // try...catch the pushState call to get around Safari
	  // DOM Exception 18 where it limits to 100 pushState calls
	  var history = window.history
	  try {
	    if (replace) {
	      history.replaceState({ key: _key }, '', url)
	    } else {
	      _key = genKey()
	      history.pushState({ key: _key }, '', url)
	    }
	    saveScrollPosition(_key)
	  } catch (e) {
	    window.location[replace ? 'assign' : 'replace'](url)
	  }
	}

	function replaceState (url) {
	  pushState(url, true)
	}

	/*  */


	var HashHistory = (function (History) {
	  function HashHistory (router, base, fallback) {
	    History.call(this, router, base)
	    // check history fallback deeplinking
	    if (fallback && this.checkFallback()) {
	      return
	    }
	    ensureSlash()
	  }

	  if ( History ) HashHistory.__proto__ = History;
	  HashHistory.prototype = Object.create( History && History.prototype );
	  HashHistory.prototype.constructor = HashHistory;

	  HashHistory.prototype.checkFallback = function checkFallback () {
	    var location = getLocation(this.base)
	    if (!/^\/#/.test(location)) {
	      window.location.replace(
	        cleanPath(this.base + '/#' + location)
	      )
	      return true
	    }
	  };

	  HashHistory.prototype.onHashChange = function onHashChange () {
	    if (!ensureSlash()) {
	      return
	    }
	    this.transitionTo(getHash(), function (route) {
	      replaceHash(route.fullPath)
	    })
	  };

	  HashHistory.prototype.push = function push (location) {
	    this.transitionTo(location, function (route) {
	      pushHash(route.fullPath)
	    })
	  };

	  HashHistory.prototype.replace = function replace (location) {
	    this.transitionTo(location, function (route) {
	      replaceHash(route.fullPath)
	    })
	  };

	  HashHistory.prototype.go = function go (n) {
	    window.history.go(n)
	  };

	  HashHistory.prototype.ensureURL = function ensureURL (push) {
	    var current = this.current.fullPath
	    if (getHash() !== current) {
	      push ? pushHash(current) : replaceHash(current)
	    }
	  };

	  return HashHistory;
	}(History));

	function ensureSlash () {
	  var path = getHash()
	  if (path.charAt(0) === '/') {
	    return true
	  }
	  replaceHash('/' + path)
	  return false
	}

	function getHash () {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href
	  var index = href.indexOf('#')
	  return index === -1 ? '' : href.slice(index + 1)
	}

	function pushHash (path) {
	  window.location.hash = path
	}

	function replaceHash (path) {
	  var i = window.location.href.indexOf('#')
	  window.location.replace(
	    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path
	  )
	}

	/*  */


	var AbstractHistory = (function (History) {
	  function AbstractHistory (router) {
	    History.call(this, router)
	    this.stack = []
	    this.index = -1
	  }

	  if ( History ) AbstractHistory.__proto__ = History;
	  AbstractHistory.prototype = Object.create( History && History.prototype );
	  AbstractHistory.prototype.constructor = AbstractHistory;

	  AbstractHistory.prototype.push = function push (location) {
	    var this$1 = this;

	    this.transitionTo(location, function (route) {
	      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route)
	      this$1.index++
	    })
	  };

	  AbstractHistory.prototype.replace = function replace (location) {
	    var this$1 = this;

	    this.transitionTo(location, function (route) {
	      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route)
	    })
	  };

	  AbstractHistory.prototype.go = function go (n) {
	    var this$1 = this;

	    var targetIndex = this.index + n
	    if (targetIndex < 0 || targetIndex >= this.stack.length) {
	      return
	    }
	    var route = this.stack[targetIndex]
	    this.confirmTransition(route, function () {
	      this$1.index = targetIndex
	      this$1.updateRoute(route)
	    })
	  };

	  AbstractHistory.prototype.ensureURL = function ensureURL () {
	    // noop
	  };

	  return AbstractHistory;
	}(History));

	/*  */

	var VueRouter = function VueRouter (options) {
	  if ( options === void 0 ) options = {};

	  this.app = null
	  this.options = options
	  this.beforeHooks = []
	  this.afterHooks = []
	  this.match = createMatcher(options.routes || [])

	  var mode = options.mode || 'hash'
	  this.fallback = mode === 'history' && !supportsHistory
	  if (this.fallback) {
	    mode = 'hash'
	  }
	  if (!inBrowser) {
	    mode = 'abstract'
	  }
	  this.mode = mode

	  switch (mode) {
	    case 'history':
	      this.history = new HTML5History(this, options.base)
	      break
	    case 'hash':
	      this.history = new HashHistory(this, options.base, this.fallback)
	      break
	    case 'abstract':
	      this.history = new AbstractHistory(this)
	      break
	    default:
	      process.env.NODE_ENV !== 'production' && assert(false, ("invalid mode: " + mode))
	  }
	};

	var prototypeAccessors = { currentRoute: {} };

	prototypeAccessors.currentRoute.get = function () {
	  return this.history && this.history.current
	};

	VueRouter.prototype.init = function init (app /* Vue component instance */) {
	    var this$1 = this;

	  process.env.NODE_ENV !== 'production' && assert(
	    install.installed,
	    "not installed. Make sure to call `Vue.use(VueRouter)` " +
	    "before creating root instance."
	  )

	  this.app = app

	  var history = this.history

	  if (history instanceof HTML5History) {
	    history.transitionTo(getLocation(history.base))
	  } else if (history instanceof HashHistory) {
	    var setupHashListener = function () {
	      window.addEventListener('hashchange', function () {
	        history.onHashChange()
	      })
	    }
	    history.transitionTo(getHash(), setupHashListener, setupHashListener)
	  }

	  history.listen(function (route) {
	    this$1.app._route = route
	  })
	};

	VueRouter.prototype.beforeEach = function beforeEach (fn) {
	  this.beforeHooks.push(fn)
	};

	VueRouter.prototype.afterEach = function afterEach (fn) {
	  this.afterHooks.push(fn)
	};

	VueRouter.prototype.push = function push (location) {
	  this.history.push(location)
	};

	VueRouter.prototype.replace = function replace (location) {
	  this.history.replace(location)
	};

	VueRouter.prototype.go = function go (n) {
	  this.history.go(n)
	};

	VueRouter.prototype.back = function back () {
	  this.go(-1)
	};

	VueRouter.prototype.forward = function forward () {
	  this.go(1)
	};

	VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
	  var route = to
	    ? this.resolve(to).resolved
	    : this.currentRoute
	  if (!route) {
	    return []
	  }
	  return [].concat.apply([], route.matched.map(function (m) {
	    return Object.keys(m.components).map(function (key) {
	      return m.components[key]
	    })
	  }))
	};

	VueRouter.prototype.resolve = function resolve (
	  to,
	  current,
	  append
	) {
	  var normalizedTo = normalizeLocation(to, current || this.history.current, append)
	  var resolved = this.match(normalizedTo, current)
	  var fullPath = resolved.redirectedFrom || resolved.fullPath
	  var base = this.history.base
	  var href = createHref(base, fullPath, this.mode)
	  return {
	    normalizedTo: normalizedTo,
	    resolved: resolved,
	    href: href
	  }
	};

	Object.defineProperties( VueRouter.prototype, prototypeAccessors );

	function createHref (base, fullPath, mode) {
	  var path = mode === 'hash' ? '#' + fullPath : fullPath
	  return base ? cleanPath(base + '/' + path) : path
	}

	VueRouter.install = install

	if (inBrowser && window.Vue) {
	  window.Vue.use(VueRouter)
	}

	module.exports = VueRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* styles */
	__webpack_require__(106)

	/* script */
	__vue_exports__ = __webpack_require__(109)

	/* template */
	var __vue_template__ = __webpack_require__(110)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/afidoss/MyProject/pap-elevation/src/appMindle/components/default/login.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-2f71f101", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-2f71f101", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] login.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(107);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(108)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-2f71f101!./../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./login.vue", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-2f71f101!./../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./login.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	exports.push([module.id, "@import url(/static/css/Login-Form-Clean.css);", ""]);

	// module
	exports.push([module.id, "\n", ""]);

	// exports


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if (media) {
			styleElement.setAttribute("media", media);
		}

		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _auth = __webpack_require__(29);

	var _auth2 = _interopRequireDefault(_auth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	    data: function data() {
	        return {
	            username: '',
	            password: '',
	            msg: 'indentifiant incorrect',
	            error: false
	        };
	    },

	    methods: {
	        verifCheck: function verifCheck() {
	            var _this = this;

	            _auth2.default.login(this.username, this.password, function (verification) {
	                if (verification) {
	                    _this.$router.replace(_this.$route.query.redirect || '/dashboard');
	                } else {
	                    _this.error = true;
	                }
	            });
	            this.password = '';
	        }
	    }
	}; //
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._c;
	  return _c('div', {
	    staticClass: "login-clean"
	  }, [_c('form', {
	    attrs: {
	      "method": "post",
	      "action": "#"
	    },
	    on: {
	      "submit": function($event) {
	        $event.preventDefault();
	        _vm.verifCheck()
	      }
	    }
	  }, [_c('h2', {
	    staticClass: "sr-only"
	  }, [_vm._v("P.A.P")]), _vm._v(" "), _vm._m(0), _vm._v(" "), (_vm.error) ? _c('div', {
	    staticClass: "error text-red"
	  }, [_vm._v(_vm._s(_vm.msg))]) : _vm._e(), _vm._v(" "), _c('div', {
	    staticClass: "input-field"
	  }, [_c('input', {
	    directives: [{
	      name: "model",
	      rawName: "v-model",
	      value: (_vm.username),
	      expression: "username"
	    }],
	    attrs: {
	      "type": "text",
	      "id": "username",
	      "required": "",
	      "placeholder": "Utilisateur"
	    },
	    domProps: {
	      "value": _vm._s(_vm.username)
	    },
	    on: {
	      "input": function($event) {
	        if ($event.target.composing) { return; }
	        _vm.username = $event.target.value
	      }
	    }
	  })]), _vm._v(" "), _c('div', {
	    staticClass: "input-field"
	  }, [_c('input', {
	    directives: [{
	      name: "model",
	      rawName: "v-model",
	      value: (_vm.password),
	      expression: "password"
	    }],
	    attrs: {
	      "type": "password",
	      "required": "",
	      "placeholder": "Mot de passe"
	    },
	    domProps: {
	      "value": _vm._s(_vm.password)
	    },
	    on: {
	      "input": function($event) {
	        if ($event.target.composing) { return; }
	        _vm.password = $event.target.value
	      }
	    }
	  })]), _vm._v(" "), _vm._m(1)])])
	},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._c;
	  return _c('div', {
	    staticClass: "illustration"
	  }, [_c('i', {
	    staticClass: "fa fa-apple"
	  })])
	},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._c;
	  return _c('div', {
	    staticClass: "input-field"
	  }, [_c('button', {
	    staticClass: "btn",
	    attrs: {
	      "type": "submit"
	    }
	  }, [_vm._v("Se connecter")])])
	}]}
	module.exports.render._withStripped = true
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-hot-reload-api").rerender("data-v-2f71f101", module.exports)
	  }
	}

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(112)

	/* template */
	var __vue_template__ = __webpack_require__(113)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/afidoss/MyProject/pap-elevation/src/appMindle/components/default/dashboard.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-ea84c2a8", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-ea84c2a8", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] dashboard.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ },
/* 112 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//
	//

	exports.default = {
	    data: function data() {
	        return {
	            msg: 'hello vue'
	        };
	    }
	};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._c;
	  return _c('div', [_c('header-component'), _vm._v(" "), _c('div', [_vm._v("this is template body")]), _vm._v(" "), _c('other-component')], 1)
	},staticRenderFns: []}
	module.exports.render._withStripped = true
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-hot-reload-api").rerender("data-v-ea84c2a8", module.exports)
	  }
	}

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	  The entry point.
	  @module Sequelize
	**/
	module.exports = __webpack_require__(115);


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var url = __webpack_require__(96)
	  , Path = __webpack_require__(116)
	  , retry = __webpack_require__(117)
	  , Utils = __webpack_require__(122)
	  , Model = __webpack_require__(337)
	  , DataTypes = __webpack_require__(123)
	  , Deferrable = __webpack_require__(353)
	  , ModelManager = __webpack_require__(354)
	  , QueryInterface = __webpack_require__(357)
	  , Transaction = __webpack_require__(341)
	  , QueryTypes = __webpack_require__(349)
	  , sequelizeErrors = __webpack_require__(130)
	  , Promise = __webpack_require__(335)
	  , Hooks = __webpack_require__(351)
	  , Instance = __webpack_require__(338)
	  , Association = __webpack_require__(361)
	  , _ = __webpack_require__(127);

	/**
	 * This is the main class, the entry point to sequelize. To use it, you just need to import sequelize:
	 *
	 * ```js
	 * var Sequelize = require('sequelize');
	 * ```
	 *
	 * In addition to sequelize, the connection library for the dialect you want to use should also be installed in your project. You don't need to import it however, as sequelize will take care of that.
	 *
	 * @class Sequelize
	 */

	 /**
	 * Instantiate sequelize with name of database, username and password
	 *
	 * #### Example usage
	 *
	 * ```javascript
	 * // without password and options
	 * var sequelize = new Sequelize('database', 'username')
	 *
	 * // without options
	 * var sequelize = new Sequelize('database', 'username', 'password')
	 *
	 * // without password / with blank password
	 * var sequelize = new Sequelize('database', 'username', null, {})
	 *
	 * // with password and options
	 * var sequelize = new Sequelize('my_database', 'john', 'doe', {})
	 *
	 * // with uri (see below)
	 * var sequelize = new Sequelize('mysql://localhost:3306/database', {})
	 * ```
	 *
	 * @name Sequelize
	 * @constructor
	 *
	 * @param {String}   database The name of the database
	 * @param {String}   [username=null] The username which is used to authenticate against the database.
	 * @param {String}   [password=null] The password which is used to authenticate against the database.
	 * @param {Object}   [options={}] An object with options.
	 * @param {String}   [options.host='localhost'] The host of the relational database.
	 * @param {Integer}  [options.port=] The port of the relational database.
	 * @param {String}   [options.username=null] The username which is used to authenticate against the database.
	 * @param {String}   [options.password=null] The password which is used to authenticate against the database.
	 * @param {String}   [options.database=null] The name of the database
	 * @param {String}   [options.dialect='mysql'] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, mariadb and mssql.
	 * @param {String}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'pg.js' here
	 * @param {Object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library
	 * @param {String}   [options.storage] Only used by sqlite. Defaults to ':memory:'
	 * @param {String}   [options.protocol='tcp'] The protocol of the relational database.
	 * @param {Object}   [options.define={}] Default options for model definitions. See sequelize.define for options
	 * @param {Object}   [options.query={}] Default options for sequelize.query
	 * @param {Object}   [options.set={}] Default options for sequelize.set
	 * @param {Object}   [options.sync={}] Default options for sequelize.sync
	 * @param {String}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.
	 * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something.
	 * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param {Boolean}  [options.omitNull=false] A flag that defines if null values should be passed to SQL queries or not.
	 * @param {Boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres
	 * @param {Boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`
	 * @param {Object}   [options.pool={}] Should sequelize use a connection pool. Default is true
	 * @param {Integer}  [options.pool.maxConnections]
	 * @param {Integer}  [options.pool.minConnections]
	 * @param {Integer}  [options.pool.maxIdleTime] The maximum time, in milliseconds, that a connection can be idle before being released
	 * @param {Function} [options.pool.validateConnection] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected
	 * @param {Boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.
	 * @param {String}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.
	 * @param {String}   [options.isolationLevel='REPEATABLE_READ'] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.
	 * @param {Object}   [options.retry] Set of flags that control when a query is automatically retried.
	 * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.
	 * @param {Integer}  [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.
	 * @param {Boolean}  [options.typeValidation=false] Run built in type validators on insert and update, e.g. validate that arguments passed to integer fields are integer-like.
	*/

	/**
	 * Instantiate sequelize with an URI
	 * @name Sequelize
	 * @constructor
	 *
	 * @param {String} uri A full database URI
	 * @param {object} [options={}] See above for possible options
	*/

	/**
	 * Instantiate sequelize with an options object
	 * @name Sequelize
	 * @constructor
	 *
	 * @param {object} [options={}] See above for possible options
	*/
	var Sequelize = function(database, username, password, options) {
	  var config;

	  if (arguments.length === 1 && typeof database === 'object') {
	    // new Sequelize({ ... options })
	    options = database;
	    config = _.pick(options, 'host', 'port', 'database', 'username', 'password');
	  } else if ((arguments.length === 1 && typeof database === 'string') || (arguments.length === 2 && typeof username === 'object')) {
	    // new Sequelize(URI, { ... options })

	    config = {};
	    options = username || {};

	    var urlParts = url.parse(arguments[0]);

	    // SQLite don't have DB in connection url
	    if (urlParts.pathname) {
	      config.database = urlParts.pathname.replace(/^\//, '');
	    }

	    options.dialect = urlParts.protocol.replace(/:$/, '');
	    options.host = urlParts.hostname;

	    if (urlParts.port) {
	      options.port = urlParts.port;
	    }

	    if (urlParts.auth) {
	      config.username = urlParts.auth.split(':')[0];
	      config.password = urlParts.auth.split(':')[1];
	    }
	  } else {
	    // new Sequelize(database, username, password, { ... options })
	    options = options || {};
	    config = {database: database, username: username, password: password};
	  }

	  Sequelize.runHooks('beforeInit', config, options);

	  this.options = Utils._.extend({
	    dialect: 'mysql',
	    dialectModulePath: null,
	    host: 'localhost',
	    protocol: 'tcp',
	    define: {},
	    query: {},
	    sync: {},
	    timezone:'+00:00',
	    logging: console.log,
	    omitNull: false,
	    native: false,
	    replication: false,
	    ssl: undefined,
	    pool: {},
	    quoteIdentifiers: true,
	    hooks: {},
	    retry: {max: 5, match: ['SQLITE_BUSY: database is locked']},
	    transactionType: Transaction.TYPES.DEFERRED,
	    isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ,
	    databaseVersion: 0,
	    typeValidation: false,
	    benchmark: false
	  }, options || {});

	  if (this.options.dialect === 'postgresql') {
	    this.options.dialect = 'postgres';
	  }

	  if (this.options.dialect === 'sqlite' && this.options.timezone !== '+00:00') {
	    throw new Error('Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.');
	  }

	  if (this.options.logging === true) {
	    console.log('DEPRECATION WARNING: The logging-option should be either a function or false. Default: console.log');
	    this.options.logging = console.log;
	  }

	  this.options.hooks = this.replaceHookAliases(this.options.hooks);

	  if ((['', null, false].indexOf(config.password) > -1) || (typeof config.password === 'undefined')) {
	    config.password = null;
	  }

	  this.config = {
	    database: config.database,
	    username: config.username,
	    password: config.password,
	    host: config.host || this.options.host,
	    port: config.port || this.options.port,
	    pool: this.options.pool,
	    protocol: this.options.protocol,
	    native: this.options.native,
	    ssl: this.options.ssl,
	    replication: this.options.replication,
	    dialectModulePath: this.options.dialectModulePath,
	    keepDefaultTimezone: this.options.keepDefaultTimezone,
	    dialectOptions: this.options.dialectOptions
	  };

	  var Dialect;
	  // Requiring the dialect in a switch-case to keep the
	  // require calls static. (Browserify fix)
	  switch (this.getDialect()){
	    case 'mariadb':
	      Dialect = __webpack_require__(362);
	      break;
	    case 'mssql':
	      Dialect = __webpack_require__(437);
	      break;
	    case 'mysql':
	      Dialect = __webpack_require__(363);
	      break;
	    case 'postgres':
	      Dialect = __webpack_require__(444);
	      break;
	    case 'sqlite':
	      Dialect = __webpack_require__(483);
	      break;
	    default:
	      throw new Error('The dialect ' + this.getDialect() + ' is not supported. Supported dialects: mariadb, mssql, mysql, postgres, and sqlite.');
	  }
	  this.dialect = new Dialect(this);

	  this.dialect.QueryGenerator.typeValidation = options.typeValidation;

	  /**
	   * Models are stored here under the name given to `sequelize.define`
	   * @property models
	   */
	  this.models = {};
	  this.modelManager = new ModelManager(this);
	  this.connectionManager = this.dialect.connectionManager;

	  this.importCache = {};

	  this.test = {
	    $trackRunningQueries: false,
	    $runningQueries: 0,
	    trackRunningQueries: function() {
	      this.$trackRunningQueries = true;
	    },
	    verifyNoRunningQueries: function() {
	      if (this.$runningQueries > 0) throw new Error('Expected 0 running queries. '+this.$runningQueries+' queries still running');
	    }
	  };

	  Sequelize.runHooks('afterInit', this);
	};

	/**
	 * Sequelize version number.
	 * @property version
	 */
	Sequelize.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;

	Sequelize.options = {hooks: {}};

	/**
	 * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.
	 * @property Sequelize
	 * @see {Sequelize}
	 */
	Sequelize.prototype.Sequelize = Sequelize;

	/**
	 * A reference to sequelize utilities. Most users will not need to use these utils directly. However, you might want to use `Sequelize.Utils._`, which is a reference to the lodash library, if you don't already have it imported in your project.
	 * @property Utils
	 */
	Sequelize.prototype.Utils = Sequelize.Utils = Utils;

	/**
	 * A handy reference to the bluebird Promise class
	 * @property Promise
	 */
	Sequelize.prototype.Promise = Sequelize.Promise = Promise;

	/**
	 * Available query types for use with `sequelize.query`
	 * @property QueryTypes
	 */
	Sequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;

	/**
	 * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.
	 * @property Validator
	 * @see https://github.com/chriso/validator.js
	 */
	Sequelize.prototype.Validator = Sequelize.Validator = __webpack_require__(131);

	Sequelize.prototype.Model = Sequelize.Model = Model;

	/**
	 * A reference to the sequelize class holding commonly used data types. The datatypes are used when defining a new model using `sequelize.define`
	 * @property DataTypes
	 */
	Sequelize.DataTypes = DataTypes;

	for (var dataType in DataTypes) {
	  Sequelize[dataType] = DataTypes[dataType];
	}

	Object.defineProperty(Sequelize.prototype, 'connectorManager', {
	  get: function() {
	    return this.transactionManager.getConnectorManager();
	  }
	});

	/**
	 * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction
	 * @property Transaction
	 * @see {Transaction}
	 * @see {Sequelize#transaction}
	 */
	Sequelize.prototype.Transaction = Sequelize.Transaction = Transaction;

	/**
	 * A reference to the deferrable collection. Use this to access the different deferrable options.
	 * @property Deferrable
	 * @see {Deferrable}
	 * @see {Sequelize#transaction}
	 */
	Sequelize.prototype.Deferrable = Sequelize.Deferrable = Deferrable;

	/**
	 * A reference to the sequelize instance class.
	 * @property Instance
	 * @see {Instance}
	 */
	Sequelize.prototype.Instance = Sequelize.Instance = Instance;

	/**
	 * A reference to the sequelize association class.
	 * @property Association
	 * @see {Association}
	 */
	Sequelize.prototype.Association = Sequelize.Association = Association;

	/**
	 * Allow hooks to be defined on Sequelize + on sequelize instance as universal hooks to run on all models
	 * and on Sequelize/sequelize methods e.g. Sequelize(), Sequelize#define()
	 */
	Hooks.applyTo(Sequelize);

	/**
	 * A general error class
	 * @property Error
	 * @see {Errors#BaseError}
	 */
	Sequelize.prototype.Error = Sequelize.Error =
	  sequelizeErrors.BaseError;

	/**
	 * Emitted when a validation fails
	 * @property ValidationError
	 * @see {Errors#ValidationError}
	 */
	Sequelize.prototype.ValidationError = Sequelize.ValidationError =
	  sequelizeErrors.ValidationError;

	/**
	 * Describes a validation error on an instance path
	 * @property ValidationErrorItem
	 * @see {Errors#ValidationErrorItem}
	 */
	Sequelize.prototype.ValidationErrorItem = Sequelize.ValidationErrorItem =
	  sequelizeErrors.ValidationErrorItem;

	/**
	 * A base class for all database related errors.
	 * @see {Errors#DatabaseError}
	 */
	Sequelize.prototype.DatabaseError = Sequelize.DatabaseError =
	  sequelizeErrors.DatabaseError;

	/**
	 * Thrown when a database query times out because of a deadlock
	 * @see {Errors#TimeoutError}
	 */
	Sequelize.prototype.TimeoutError = Sequelize.TimeoutError =
	  sequelizeErrors.TimeoutError;

	/**
	 * Thrown when a unique constraint is violated in the database
	 * @see {Errors#UniqueConstraintError}
	 */
	Sequelize.prototype.UniqueConstraintError = Sequelize.UniqueConstraintError =
	  sequelizeErrors.UniqueConstraintError;

	/**
	 * Thrown when an exclusion constraint is violated in the database
	 * @see {Errors#ExclusionConstraintError}
	 */
	Sequelize.prototype.ExclusionConstraintError = Sequelize.ExclusionConstraintError =
	  sequelizeErrors.ExclusionConstraintError;

	/**
	 * Thrown when a foreign key constraint is violated in the database
	 * @see {Errors#ForeignKeyConstraintError}
	 */
	Sequelize.prototype.ForeignKeyConstraintError = Sequelize.ForeignKeyConstraintError =
	  sequelizeErrors.ForeignKeyConstraintError;

	/**
	 * A base class for all connection related errors.
	 * @see {Errors#ConnectionError}
	 */
	Sequelize.prototype.ConnectionError = Sequelize.ConnectionError =
	  sequelizeErrors.ConnectionError;

	/**
	 * Thrown when a connection to a database is refused
	 * @see {Errors#ConnectionRefusedError}
	 */
	Sequelize.prototype.ConnectionRefusedError = Sequelize.ConnectionRefusedError =
	  sequelizeErrors.ConnectionRefusedError;

	/**
	 * Thrown when a connection to a database is refused due to insufficient access
	 * @see {Errors#AccessDeniedError}
	 */
	Sequelize.prototype.AccessDeniedError = Sequelize.AccessDeniedError =
	  sequelizeErrors.AccessDeniedError;

	/**
	 * Thrown when a connection to a database has a hostname that was not found
	 * @see {Errors#HostNotFoundError}
	 */
	Sequelize.prototype.HostNotFoundError = Sequelize.HostNotFoundError =
	  sequelizeErrors.HostNotFoundError;

	/**
	 * Thrown when a connection to a database has a hostname that was not reachable
	 * @see {Errors#HostNotReachableError}
	 */
	Sequelize.prototype.HostNotReachableError = Sequelize.HostNotReachableError =
	  sequelizeErrors.HostNotReachableError;

	/**
	 * Thrown when a connection to a database has invalid values for any of the connection parameters
	 * @see {Errors#InvalidConnectionError}
	 */
	Sequelize.prototype.InvalidConnectionError = Sequelize.InvalidConnectionError =
	  sequelizeErrors.InvalidConnectionError;

	/**
	 * Thrown when a connection to a database times out
	 * @see {Errors#ConnectionTimedOutError}
	 */
	Sequelize.prototype.ConnectionTimedOutError = Sequelize.ConnectionTimedOutError =
	  sequelizeErrors.ConnectionTimedOutError;

	/**
	 * Thrown when a some problem occurred with Instance methods (see message for details)
	 * @see {Errors#InstanceError}
	 */
	Sequelize.prototype.InstanceError = Sequelize.InstanceError =
	  sequelizeErrors.InstanceError;

	/**
	  * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)
	  * @see {Errors#RecordNotFoundError}
	  */
	Sequelize.prototype.EmptyResultError = Sequelize.EmptyResultError =
	  sequelizeErrors.EmptyResultError;


	Sequelize.prototype.refreshTypes = function () {
	  this.connectionManager.refreshTypeParser(DataTypes);
	};

	/**
	 * Returns the specified dialect.
	 *
	 * @return {String} The specified dialect.
	 */
	Sequelize.prototype.getDialect = function() {
	  return this.options.dialect;
	};

	/**
	 * Returns an instance of QueryInterface.

	 * @method getQueryInterface
	 * @return {QueryInterface} An instance (singleton) of QueryInterface.
	 *
	 * @see {QueryInterface}
	 */
	Sequelize.prototype.getQueryInterface = function() {
	  this.queryInterface = this.queryInterface || new QueryInterface(this);
	  return this.queryInterface;
	};

	/**
	 * Define a new model, representing a table in the DB.
	 *
	 * The table columns are define by the hash that is given as the second argument. Each attribute of the hash represents a column. A short table definition might look like this:
	 *
	 * ```js
	 * sequelize.define('modelName', {
	 *     columnA: {
	 *         type: Sequelize.BOOLEAN,
	 *         validate: {
	 *           is: ["[a-z]",'i'],        // will only allow letters
	 *           max: 23,                  // only allow values <= 23
	 *           isIn: {
	 *             args: [['en', 'zh']],
	 *             msg: "Must be English or Chinese"
	 *           }
	 *         },
	 *         field: 'column_a'
	 *         // Other attributes here
	 *     },
	 *     columnB: Sequelize.STRING,
	 *     columnC: 'MY VERY OWN COLUMN TYPE'
	 * })
	 *
	 * sequelize.models.modelName // The model will now be available in models under the name given to define
	 * ```
	 *
	 *
	 * As shown above, column definitions can be either strings, a reference to one of the datatypes that are predefined on the Sequelize constructor, or an object that allows you to specify both the type of the column, and other attributes such as default values, foreign key constraints and custom setters and getters.
	 *
	 * For a list of possible data types, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types
	 *
	 * For more about getters and setters, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters
	 *
	 * For more about instance and class methods, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models
	 *
	 * For more about validation, see http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations
	 *
	 * @see {DataTypes}
	 * @see {Hooks}
	 * @param {String}                  modelName The name of the model. The model will be stored in `sequelize.models` under this name
	 * @param {Object}                  attributes An object, where each attribute is a column of the table. Each column can be either a DataType, a string or a type-description object, with the properties described below:
	 * @param {String|DataType|Object}  attributes.column The description of a database column
	 * @param {String|DataType}         attributes.column.type A string or a data type
	 * @param {Boolean}                 [attributes.column.allowNull=true] If false, the column will have a NOT NULL constraint, and a not null validation will be run before an instance is saved.
	 * @param {Any}                     [attributes.column.defaultValue=null] A literal default value, a JavaScript function, or an SQL function (see `sequelize.fn`)
	 * @param {String|Boolean}          [attributes.column.unique=false] If true, the column will get a unique constraint. If a string is provided, the column will be part of a composite unique index. If multiple columns have the same string, they will be part of the same unique index
	 * @param {Boolean}                 [attributes.column.primaryKey=false]
	 * @param {String}                  [attributes.column.field=null] If set, sequelize will map the attribute name to a different name in the database
	 * @param {Boolean}                 [attributes.column.autoIncrement=false]
	 * @param {String}                  [attributes.column.comment=null]
	 * @param {String|Model}            [attributes.column.references=null] An object with reference configurations
	 * @param {String|Model}            [attributes.column.references.model] If this column references another table, provide it here as a Model, or a string
	 * @param {String}                  [attributes.column.references.key='id'] The column of the foreign table that this column references
	 * @param {String}                  [attributes.column.onUpdate] What should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION
	 * @param {String}                  [attributes.column.onDelete] What should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or NO ACTION
	 * @param {Function}                [attributes.column.get] Provide a custom getter for this column. Use `this.getDataValue(String)` to manipulate the underlying values.
	 * @param {Function}                [attributes.column.set] Provide a custom setter for this column. Use `this.setDataValue(String, Value)` to manipulate the underlying values.
	 * @param {Object}                  [attributes.validate] An object of validations to execute for this column every time the model is saved. Can be either the name of a validation provided by validator.js, a validation function provided by extending validator.js (see the `DAOValidator` property for more details), or a custom validation function. Custom validation functions are called with the value of the field, and can possibly take a second callback argument, to signal that they are asynchronous. If the validator is sync, it should throw in the case of a failed validation, it it is async, the callback should be called with the error text.

	 * @param {Object}                  [options] These options are merged with the default define options provided to the Sequelize constructor
	 * @param {Object}                  [options.defaultScope={}] Define the default search scope to use for this model. Scopes have the same form as the options passed to find / findAll
	 * @param {Object}                  [options.scopes] More scopes, defined in the same way as defaultScope above. See `Model.scope` for more information about how scopes are defined, and what you can do with them
	 * @param {Boolean}                 [options.omitNull] Don't persist null values. This means that all columns with null values will not be saved
	 * @param {Boolean}                 [options.timestamps=true] Adds createdAt and updatedAt timestamps to the model.
	 * @param {Boolean}                 [options.paranoid=false] Calling `destroy` will not delete the model, but instead set a `deletedAt` timestamp if this is true. Needs `timestamps=true` to work
	 * @param {Boolean}                 [options.underscored=false] Converts all camelCased columns to underscored if true
	 * @param {Boolean}                 [options.underscoredAll=false] Converts camelCased model names to underscored table names if true
	 * @param {Boolean}                 [options.freezeTableName=false] If freezeTableName is true, sequelize will not try to alter the DAO name to get the table name. Otherwise, the model name will be pluralized
	 * @param {Object}                  [options.name] An object with two attributes, `singular` and `plural`, which are used when this model is associated to others.
	 * @param {String}                  [options.name.singular=inflection.singularize(modelName)]
	 * @param {String}                  [options.name.plural=inflection.pluralize(modelName)]
	 * @param {Array<Object>}           [options.indexes]
	 * @param {String}                  [options.indexes[].name] The name of the index. Defaults to model name + _ + fields concatenated
	 * @param {String}                  [options.indexes[].type] Index type. Only used by mysql. One of `UNIQUE`, `FULLTEXT` and `SPATIAL`
	 * @param {String}                  [options.indexes[].method] The method to create the index by (`USING` statement in SQL). BTREE and HASH are supported by mysql and postgres, and postgres additionally supports GIST and GIN.
	 * @param {Boolean}                 [options.indexes[].unique=false] Should the index by unique? Can also be triggered by setting type to `UNIQUE`
	 * @param {Boolean}                 [options.indexes[].concurrently=false] PostgreSQL will build the index without taking any write locks. Postgres only
	 * @param {Array<String|Object>}    [options.indexes[].fields] An array of the fields to index. Each field can either be a string containing the name of the field, a sequelize object (e.g `sequelize.fn`), or an object with the following attributes: `attribute` (field name), `length` (create a prefix index of length chars), `order` (the direction the column should be sorted in), `collate` (the collation (sort order) for the column)
	 * @param {String|Boolean}          [options.createdAt] Override the name of the createdAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.
	 * @param {String|Boolean}          [options.updatedAt] Override the name of the updatedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.
	 * @param {String|Boolean}          [options.deletedAt] Override the name of the deletedAt column if a string is provided, or disable it if false. Timestamps must be true. Not affected by underscored setting.
	 * @param {String}                  [options.tableName] Defaults to pluralized model name, unless freezeTableName is true, in which case it uses model name verbatim
	 * @param {Object}                  [options.getterMethods] Provide getter functions that work like those defined per column. If you provide a getter method with the same name as a column, it will be used to access the value of that column. If you provide a name that does not match a column, this function will act as a virtual getter, that can fetch multiple other values
	 * @param {Object}                  [options.setterMethods] Provide setter functions that work like those defined per column. If you provide a setter method with the same name as a column, it will be used to update the value of that column. If you provide a name that does not match a column, this function will act as a virtual setter, that can act on and set other values, but will not be persisted
	 * @param {Object}                  [options.instanceMethods] Provide functions that are added to each instance (DAO). If you override methods provided by sequelize, you can access the original method using `this.constructor.super_.prototype`, e.g. `this.constructor.super_.prototype.toJSON.apply(this, arguments)`
	 * @param {Object}                  [options.classMethods] Provide functions that are added to the model (Model). If you override methods provided by sequelize, you can access the original method using `this.constructor.prototype`, e.g. `this.constructor.prototype.find.apply(this, arguments)`
	 * @param {String}                  [options.schema='public']
	 * @param {String}                  [options.engine]
	 * @param {String}                  [options.charset]
	 * @param {String}                  [options.comment]
	 * @param {String}                  [options.collate]
	 * @param {String}                  [options.initialAutoIncrement] Set the initial AUTO_INCREMENT value for the table in MySQL.
	 * @param {Object}                  [options.hooks] An object of hook function that are called before and after certain lifecycle events. The possible hooks are: beforeValidate, afterValidate, validationFailed, beforeBulkCreate, beforeBulkDestroy, beforeBulkUpdate, beforeCreate, beforeDestroy, beforeUpdate, afterCreate, afterDestroy, afterUpdate, afterBulkCreate, afterBulkDestory and afterBulkUpdate. See Hooks for more information about hook functions and their signatures. Each property can either be a function, or an array of functions.
	 * @param {Object}                  [options.validate] An object of model wide validations. Validations have access to all model values via `this`. If the validator function takes an argument, it is assumed to be async, and is called with a callback that accepts an optional error.
	 *
	 * @return {Model}
	 */
	Sequelize.prototype.define = function(modelName, attributes, options) { // testhint options:none
	  options = options || {};
	  var globalOptions = this.options;

	  if (globalOptions.define) {
	    options = Utils.merge(globalOptions.define, options);
	  }

	  options = Utils.merge({
	    name: {
	      plural: Utils.inflection.pluralize(modelName),
	      singular: Utils.inflection.singularize(modelName)
	    },
	    indexes: [],
	    omitNul: globalOptions.omitNull
	  }, options);

	  // if you call "define" multiple times for the same modelName, do not clutter the factory
	  if (this.isDefined(modelName)) {
	    this.modelManager.removeModel(this.modelManager.getModel(modelName));
	  }

	  options.sequelize = this;

	  options.modelName = modelName;
	  this.runHooks('beforeDefine', attributes, options);
	  modelName = options.modelName;
	  delete options.modelName;

	  var model = new Model(modelName, attributes, options);
	  model = model.init(this.modelManager);
	  this.modelManager.addModel(model);

	  this.runHooks('afterDefine', model);

	  return model;
	};

	/**
	 * Fetch a Model which is already defined
	 *
	 * @param {String} modelName The name of a model defined with Sequelize.define
	 * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)
	 * @return {Model}
	 */
	Sequelize.prototype.model = function(modelName) {
	  if (!this.isDefined(modelName)) {
	    throw new Error(modelName + ' has not been defined');
	  }

	  return this.modelManager.getModel(modelName);
	};

	/**
	 * Checks whether a model with the given name is defined
	 *
	 * @param {String} modelName The name of a model defined with Sequelize.define
	 * @return {Boolean}
	 */
	Sequelize.prototype.isDefined = function(modelName) {
	  var models = this.modelManager.models;
	  return (models.filter(function(model) { return model.name === modelName; }).length !== 0);
	};

	/**
	 * Imports a model defined in another file
	 *
	 * Imported models are cached, so multiple calls to import with the same path will not load the file multiple times
	 *
	 * See https://github.com/sequelize/express-example for a short example of how to define your models in separate files so that they can be imported by sequelize.import
	 * @param {String} path The path to the file that holds the model you want to import. If the part is relative, it will be resolved relatively to the calling file
	 * @return {Model}
	 */
	Sequelize.prototype.import = function(path) {
	  // is it a relative path?
	  if(Path.normalize(path) !== Path.resolve(path)){
	    // make path relative to the caller
	    var callerFilename = Utils.stack()[1].getFileName()
	      , callerPath = Path.dirname(callerFilename);

	    path = Path.resolve(callerPath, path);
	  }

	  if (!this.importCache[path]) {
	    var defineCall = (arguments.length > 1 ? arguments[1] : __webpack_require__(489)(path));
	    if (typeof defineCall === 'object') {
	      // Babel/ES6 module compatability
	      defineCall = defineCall.default;
	    }
	    this.importCache[path] = defineCall(this, DataTypes);
	  }

	  return this.importCache[path];
	};

	/**
	 * Execute a query on the DB, with the possibility to bypass all the sequelize goodness.
	 *
	 * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc. Use `.spread` to access the results.
	 *
	 * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:
	 *
	 * ```js
	 * sequelize.query('SELECT...').spread(function (results, metadata) {
	 *   // Raw query - use spread
	 * });
	 *
	 * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(function (results) {
	 *   // SELECT query - use then
	 * })
	 * ```
	 *
	 * @method query
	 * @param {String}          sql
	 * @param {Object}          [options={}] Query options.
	 * @param {Boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result
	 * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under
	 * @param {String}          [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.
	 * @param {Boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified
	 * @param {Boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row
	 * @param {Object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.
	 * @param {Object|Array}    [options.bind] Either an object of named bind parameter in the format `$param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.
	 * @param {Boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.
	 * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Instance}        [options.instance] A sequelize instance used to build the return instance
	 * @param {Model}           [options.model] A sequelize model used to build the returned model instances (used to be called callee)
	 * @param {Object}          [options.retry] Set of flags that control when a query is automatically retried.
	 * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.
	 * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.
	 * @param {String}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 * @param {Boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)
	 * @param {Object}          [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.
	 * @param {Object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.
	 *
	 * @return {Promise}
	 *
	 * @see {Model#build} for more information about instance option.
	 */
	Sequelize.prototype.query = function(sql, options) {
	  if (arguments.length > 2) {
	    // TODO: Remove this note in the next major version (4.0)
	    throw new Error('Sequelize.query was refactored to only use the parameters `sql` and `options`. Please read the changelog about BC.');
	  }

	  var self = this;

	  options = _.assign({}, this.options.query, options);

	  if (options.instance && !options.model) {
	    options.model = options.instance.Model;
	  }

	  // Map raw fields to model field names using the `fieldAttributeMap`
	  if (options.model && options.mapToModel && !Utils._.isEmpty(options.model.fieldAttributeMap)) {
	    options.fieldMap =  options.model.fieldAttributeMap;
	  }

	  if (typeof sql === 'object') {
	    if (sql.values !== undefined) {
	      if (options.replacements !== undefined) {
	        throw new Error('Both `sql.values` and `options.replacements` cannot be set at the same time');
	      }

	      options.replacements = sql.values;
	    }

	    if (sql.bind !== undefined) {
	      if (options.bind !== undefined) {
	        throw new Error('Both `sql.bind` and `options.bind` cannot be set at the same time');
	      }

	      options.bind = sql.bind;
	    }

	    if (sql.query !== undefined) {
	      sql = sql.query;
	    }
	  }

	  sql = sql.trim();

	  if (!options.instance && !options.model) {
	    options.raw = true;
	  }

	  if (options.replacements && options.bind) {
	    throw new Error('Both `replacements` and `bind` cannot be set at the same time');
	  }
	  if (options.replacements) {
	    if (Array.isArray(options.replacements)) {
	      sql = Utils.format([sql].concat(options.replacements), this.options.dialect);
	    }
	    else {
	      sql = Utils.formatNamedParameters(sql, options.replacements, this.options.dialect);
	    }
	  }
	  var bindParameters;
	  if (options.bind) {
	    var bindSql = self.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);
	    sql = bindSql[0];
	    bindParameters = bindSql[1];
	  }

	  options = _.defaults(options, {
	    logging: this.options.hasOwnProperty('logging') ? this.options.logging : console.log,
	    searchPath: this.options.hasOwnProperty('searchPath') ? this.options.searchPath : 'DEFAULT',
	  });

	  if (options.transaction === undefined && Sequelize.cls) {
	    options.transaction = Sequelize.cls.get('transaction');
	  }

	  if (!options.type) {
	    if (options.model || options.nest || options.plain) {
	      options.type = QueryTypes.SELECT;
	    } else {
	      options.type = QueryTypes.RAW;
	    }
	  }

	  if (options.transaction && options.transaction.finished) {
	    var error = new Error(options.transaction.finished+' has been called on this transaction('+options.transaction.id+'), you can no longer use it. (The rejected query is attached as the \'sql\' property of this error)');
	    error.sql = sql;
	    return Promise.reject(error);
	  }

	  if (this.test.$trackRunningQueries) {
	    this.test.$runningQueries++;
	  }

	  //if dialect doesn't support search_path or dialect option
	  //to prepend searchPath is not true delete the searchPath option
	  if (!self.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath ||
	    options.supportsSearchPath === false) {
	    delete options.searchPath;
	  } else if (!options.searchPath) {
	    //if user wants to always prepend searchPath (dialectOptions.preprendSearchPath = true)
	    //then set to DEFAULT if none is provided
	    options.searchPath = 'DEFAULT';
	  }

	  return Promise.resolve(
	    options.transaction ? options.transaction.connection : self.connectionManager.getConnection(options)
	  ).then(function (connection) {

	    var query = new self.dialect.Query(connection, self, options);
	    return retry(function() {
	      return query.run(sql, bindParameters).finally(function() {
	        if (options.transaction) return;
	        return self.connectionManager.releaseConnection(connection);
	      });
	    }, Utils._.extend(self.options.retry, options.retry || {}));
	  }).finally(function () {
	    if (self.test.$trackRunningQueries) {
	      self.test.$runningQueries--;
	    }
	  });
	};

	/**
	 * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.
	 * Only works for MySQL.
	 *
	 * @method set
	 * @param {Object}        variables Object with multiple variables.
	 * @param {Object}        options Query options.
	 * @param {Transaction}   options.transaction The transaction that the query should be executed under
	 *
	 * @return {Promise}
	 */
	Sequelize.prototype.set = function( variables, options ) {
	  var query;

	  // Prepare options
	  options = Utils._.extend({}, this.options.set, typeof options === 'object' && options || {});

	  if (['mysql', 'mariadb'].indexOf(this.options.dialect) === -1) {
	    throw new Error('sequelize.set is only supported for mysql');
	  }
	  if (!options.transaction || !(options.transaction instanceof Transaction) ) {
	    throw new TypeError('options.transaction is required');
	  }

	  // Override some options, since this isn't a SELECT
	  options.raw = true;
	  options.plain = true;
	  options.type = 'SET';

	  // Generate SQL Query
	  query =
	    'SET '+
	    Utils._.map( variables, function ( v, k ) {
	      return '@'+k +' := '+ ( typeof v === 'string' ? '"'+v+'"' : v );
	    }).join(', ');

	  return this.query(query, options);
	};

	/**
	 * Escape value.
	 *
	 * @param {String} value
	 * @return {String}
	 */
	Sequelize.prototype.escape = function(value) {
	  return this.getQueryInterface().escape(value);
	};

	/**
	 * Create a new database schema.
	 *
	 * Note,that this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
	 * not a database table. In mysql and sqlite, this command will do nothing.
	 *
	 * @see {Model#schema}
	 * @param {String} schema Name of the schema
	 * @param {Object} options={}
	 * @param {Boolean|function} options.logging A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 */
	Sequelize.prototype.createSchema = function(schema, options) {
	  return this.getQueryInterface().createSchema(schema, options);
	};

	/**
	 * Show all defined schemas
	 *
	 * Note,that this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
	 * not a database table. In mysql and sqlite, this will show all tables.
	 * @param {Object} options={}
	 * @param {Boolean|function} options.logging A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 */
	Sequelize.prototype.showAllSchemas = function(options) {
	  return this.getQueryInterface().showAllSchemas(options);
	};

	/**
	 * Drop a single schema
	 *
	 * Note,that this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
	 * not a database table. In mysql and sqlite, this drop a table matching the schema name
	 * @param {String} schema Name of the schema
	 * @param {Object} options={}
	 * @param {Boolean|function} options.logging A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 */
	Sequelize.prototype.dropSchema = function(schema, options) {
	  return this.getQueryInterface().dropSchema(schema, options);
	};

	/**
	 * Drop all schemas
	 *
	 * Note,that this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
	 * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.
	 * @param {Object} options={}
	 * @param {Boolean|function} options.logging A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 */
	Sequelize.prototype.dropAllSchemas = function(options) {
	  return this.getQueryInterface().dropAllSchemas(options);
	};

	/**
	 * Sync all defined models to the DB.
	 *
	 * @param {Object} [options={}]
	 * @param {Boolean} [options.force=false] If force is true, each DAO will do DROP TABLE IF EXISTS ..., before it tries to create its own table
	 * @param {RegEx} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code
	 * @param {Boolean|function} [options.logging=console.log] A function that logs sql queries, or false for no logging
	 * @param {String} [options.schema='public'] The schema that the tables should be created in. This can be overriden for each table in sequelize.define
	 * @param  {String} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 * @param {Boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforBulkSync, afterBulkSync hooks will be called
	 * @return {Promise}
	 */
	Sequelize.prototype.sync = function(options) {
	  var self = this;

	  options = _.clone(options) || {};
	  options.hooks = options.hooks === undefined ? true : !!options.hooks;
	  options.logging = options.logging === undefined ? false : options.logging;
	  options = Utils._.defaults(options, this.options.sync, this.options);

	  if (options.match) {
	    if (!options.match.test(this.config.database)) {
	      return Promise.reject(new Error('Database does not match sync match parameter'));
	    }
	  }

	  return Promise.try(function () {
	    if (options.hooks) {
	      return self.runHooks('beforeBulkSync', options);
	    }
	  }).then(function () {
	    if (options.force) {
	      return self.drop(options);
	    }
	  }).then(function() {
	    var models = [];

	    // Topologically sort by foreign key constraints to give us an appropriate
	    // creation order
	    self.modelManager.forEachModel(function(model) {
	      if (model) {
	        models.push(model);
	      } else {
	        // DB should throw an SQL error if referencing inexistant table
	      }
	    });

	    return Promise.each(models, function(model) {
	      return model.sync(options);
	    });
	  }).then(function () {
	    if (options.hooks) {
	      return self.runHooks('afterBulkSync', options);
	    }
	  }).return(self);
	};

	/**
	 * Truncate all tables defined through the sequelize models. This is done
	 * by calling Model.truncate() on each model.
	 *
	 * @param {object} [options] The options passed to Model.destroy in addition to truncate
	 * @param {Boolean|function} [options.transaction]
	 * @param {Boolean|function} [options.logging] A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 *
	 * @see {Model#truncate} for more information
	 */
	Sequelize.prototype.truncate = function(options) {
	  var models = [];

	  this.modelManager.forEachModel(function(model) {
	    if (model) {
	      models.push(model);
	    }
	  }, { reverse: false });

	  var truncateModel = function(model) {
	    return model.truncate(options);
	  };

	  if (options && options.cascade) {
	    return Promise.each(models, truncateModel);
	  } else {
	    return Promise.map(models, truncateModel);
	  }
	};

	/**
	 * Drop all tables defined through this sequelize instance. This is done by calling Model.drop on each model
	 * @see {Model#drop} for options
	 *
	 * @param {object} options  The options passed to each call to Model.drop
	 * @param {Boolean|function} options.logging A function that logs sql queries, or false for no logging
	 * @return {Promise}
	 */
	Sequelize.prototype.drop = function(options) {
	  var models = [];

	  this.modelManager.forEachModel(function(model) {
	    if (model) {
	      models.push(model);
	    }
	  }, { reverse: false });

	  return Promise.each(models, function(model) {
	    return model.drop(options);
	  });
	};

	/**
	 * Test the connection by trying to authenticate
	 *
	 * @fires success If authentication was successful
	 * @error 'Invalid credentials' if the authentication failed (even if the database did not respond at all...)
	 * @alias validate
	 * @return {Promise}
	 */
	Sequelize.prototype.authenticate = function(options) {
	  return this.query('SELECT 1+1 AS result', Utils._.assign({ raw: true, plain: true }, options)).return();
	};

	Sequelize.prototype.databaseVersion = function(options) {
	  return this.getQueryInterface().databaseVersion(options);
	};

	Sequelize.prototype.validate = Sequelize.prototype.authenticate;

	/**
	 * Creates a object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.
	 * If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.
	 *
	 * Convert a user's username to upper case
	 * ```js
	 * instance.updateAttributes({
	 *   username: self.sequelize.fn('upper', self.sequelize.col('username'))
	 * })
	 * ```
	 *
	 * @see {Model#find}
	 * @see {Model#findAll}
	 * @see {Model#define}
	 * @see {Sequelize#col}
	 * @method fn
	 *
	 * @param {String} fn The function you want to call
	 * @param {any} args All further arguments will be passed as arguments to the function
	 *
	 * @since v2.0.0-dev3
	 * @return {Sequelize.fn}
	 */
	Sequelize.fn = Sequelize.prototype.fn = function(fn) {
	  return new Utils.fn(fn, Utils.sliceArgs(arguments, 1));
	};

	/**
	 * Creates a object representing a column in the DB. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.
	 * @see {Sequelize#fn}
	 *
	 * @method col
	 * @param {String} col The name of the column
	 * @since v2.0.0-dev3
	 * @return {Sequelize.col}
	 */
	Sequelize.col = Sequelize.prototype.col = function(col) {
	  return new Utils.col(col);
	};


	/**
	 * Creates a object representing a call to the cast function.
	 *
	 * @method cast
	 * @param {any} val The value to cast
	 * @param {String} type The type to cast it to
	 * @since v2.0.0-dev3
	 * @return {Sequelize.cast}
	 */
	Sequelize.cast = Sequelize.prototype.cast = function(val, type) {
	  return new Utils.cast(val, type);
	};

	/**
	 * Creates a object representing a literal, i.e. something that will not be escaped.
	 *
	 * @method literal
	 * @param {any} val
	 * @alias asIs
	 * @since v2.0.0-dev3
	 * @return {Sequelize.literal}
	 */
	Sequelize.literal = Sequelize.asIs = Sequelize.prototype.asIs = Sequelize.prototype.literal = function(val) {
	  return new Utils.literal(val);
	};

	/**
	 * An AND query
	 * @see {Model#find}
	 *
	 * @method and
	 * @param {String|Object} args Each argument will be joined by AND
	 * @since v2.0.0-dev3
	 * @return {Sequelize.and}
	 */
	Sequelize.and = Sequelize.prototype.and = function() {
	  return { $and: Utils.sliceArgs(arguments) };
	};

	/**
	 * An OR query
	 * @see {Model#find}
	 *
	 * @method or
	 * @param {String|Object} args Each argument will be joined by OR
	 * @since v2.0.0-dev3
	 * @return {Sequelize.or}
	 */
	Sequelize.or = Sequelize.prototype.or = function() {
	  return { $or: Utils.sliceArgs(arguments) };
	};

	/**
	 * Creates an object representing nested where conditions for postgres's json data-type.
	 * @see {Model#find}
	 *
	 * @method json
	 * @param {String|Object} conditions A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres json syntax.
	 * @param {String|Number|Boolean} [value] An optional value to compare against. Produces a string of the form "<json path> = '<value>'".
	 * @return {Sequelize.json}
	 */
	Sequelize.json = Sequelize.prototype.json = function (conditionsOrPath, value) {
	  return new Utils.json(conditionsOrPath, value);
	};

	/*
	 * A way of specifying attr = condition.
	 *
	 * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The
	 * attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)
	 *
	 * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.
	 *
	 * @see {Model#find}
	 *
	 * @param {Object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the POJO syntax
	 * @param {string} [comparator='=']
	 * @param {String|Object} logic The condition. Can be both a simply type, or a further condition (`$or`, `$and`, `.literal` etc.)
	 * @method where
	 * @alias condition
	 * @since v2.0.0-dev3
	 * @return {Sequelize.where}
	 */
	Sequelize.where = Sequelize.condition = Sequelize.prototype.condition = Sequelize.prototype.where = function(attr, comparator, logic) {
	  return new Utils.where(attr, comparator, logic);
	};

	/**
	 * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction
	 *
	 * ```js
	 * sequelize.transaction().then(function (t) {
	 *   return User.find(..., { transaction: t}).then(function (user) {
	 *     return user.updateAttributes(..., { transaction: t});
	 *   })
	 *   .then(t.commit.bind(t))
	 *   .catch(t.rollback.bind(t));
	 * })
	 * ```
	 *
	 * A syntax for automatically committing or rolling back based on the promise chain resolution is also supported:
	 *
	 * ```js
	 * sequelize.transaction(function (t) { // Note that we use a callback rather than a promise.then()
	 *   return User.find(..., { transaction: t}).then(function (user) {
	 *     return user.updateAttributes(..., { transaction: t});
	 *   });
	 * }).then(function () {
	 *   // Committed
	 * }).catch(function (err) {
	 *   // Rolled back
	 *   console.error(err);
	 * });
	 * ```
	 *
	 * If you have [CLS](https://github.com/othiym23/node-continuation-local-storage) enabled, the transaction will automatically be passed to any query that runs within the callback.
	 * To enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:
	 *
	 * ```js
	 * var cls = require('continuation-local-storage'),
	 *     ns = cls.createNamespace('....');
	 * var Sequelize = require('sequelize');
	 * Sequelize.cls = ns;
	 * ```
	 * Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace
	 *
	 * @see {Transaction}

	 * @param {Object}   [options={}]
	 * @param {Boolean}  [options.autocommit=true]
	 * @param {String}   [options.type='DEFERRED'] See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.
	 * @param {String}   [options.isolationLevel='REPEATABLE_READ'] See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @return {Promise}
	 * @fires error If there is an uncaught error during the transaction
	 * @fires success When the transaction has ended (either committed or rolled back)
	 */
	Sequelize.prototype.transaction = function(options, autoCallback) {
	  if (typeof options === 'function') {
	    autoCallback = options;
	    options = undefined;
	  }
	  // testhint argsConform.end

	  var transaction = new Transaction(this, options)
	    , ns = Sequelize.cls;

	  if (autoCallback) {
	    var transactionResolver = function (resolve, reject) {
	      transaction.prepareEnvironment().then(function () {
	        if (ns) {
	          autoCallback = ns.bind(autoCallback);
	        }

	        var result = autoCallback(transaction);
	        if (!result || !result.then) throw new Error('You need to return a promise chain/thenable to the sequelize.transaction() callback');

	        return result.then(function (result) {
	          return transaction.commit().then(function () {
	            resolve(result);
	          });
	        });
	      }).catch(function(err) {
	        // If the transaction has already finished (commit, rollback, etc), reject with the original error
	        if (transaction.finished) {
	          reject(err);
	        } else {
	          return transaction.rollback().finally(function () {
	            reject(err);
	          });
	        }
	      });
	    };

	    if (ns) {
	      transactionResolver = ns.bind(transactionResolver, ns.createContext());
	    }

	    return new Promise(transactionResolver);
	  } else {
	    return transaction.prepareEnvironment().return(transaction);
	  }
	};

	Sequelize.prototype.log = function() {
	  var args = Utils.sliceArgs(arguments)
	    , last = Utils._.last(args)
	    , options;

	  if (last && Utils._.isPlainObject(last) && last.hasOwnProperty('logging')) {
	    options = last;

	    // remove options from set of logged arguments
	    args.splice(args.length-1, 1);
	  } else {
	    options = this.options;
	  }

	  if (options.logging) {
	    if (options.logging === true) {
	      console.log('DEPRECATION WARNING: The logging-option should be either a function or false. Default: console.log');
	      options.logging = console.log;
	    }

	    // second argument is sql-timings, when benchmarking option enabled
	    if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {
	      args = [args[0] + ' Elapsed time: ' + args[1] + 'ms'];
	    }

	    options.logging.apply(null, args);
	  }
	};

	/**
	 * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.
	 *
	 * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want
	 * to garbage collect some of them.
	 */
	Sequelize.prototype.close = function () {
	  this.connectionManager.close();
	};

	Sequelize.prototype.normalizeDataType = function(Type) {
	  var type = typeof Type === 'function' ? new Type() : Type
	    , dialectTypes = this.dialect.DataTypes || {};

	  if (dialectTypes[type.key]) {
	    type = dialectTypes[type.key].extend(type);
	  }

	  if (type instanceof DataTypes.ARRAY && dialectTypes[type.type.key]) {
	    type.type = dialectTypes[type.type.key].extend(type.type);
	  }
	  return type;
	};
	Sequelize.prototype.normalizeAttribute = function(attribute) {
	   if (!Utils._.isPlainObject(attribute)) {
	    attribute = { type: attribute };
	  }

	  if (!attribute.type) return attribute;

	  attribute.type = this.normalizeDataType(attribute.type);

	  if (attribute.hasOwnProperty('defaultValue')) {
	    if (typeof attribute.defaultValue === 'function' && (
	        attribute.defaultValue === DataTypes.NOW ||
	        attribute.defaultValue === DataTypes.UUIDV1 ||
	        attribute.defaultValue === DataTypes.UUIDV4
	    )) {
	      attribute.defaultValue = new attribute.defaultValue();
	    }
	  }

	  if (attribute.type instanceof DataTypes.ENUM) {
	    // The ENUM is a special case where the type is an object containing the values
	    if (attribute.values) {
	      attribute.type.values = attribute.type.options.values = attribute.values;
	    } else {
	      attribute.values = attribute.type.values;
	    }

	    if (!attribute.values.length) {
	      throw new Error('Values for ENUM have not been defined.');
	    }
	  }

	  return attribute;
	};

	// Allows the promise to access cls namespaces
	module.exports = Promise.Sequelize = Sequelize;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var debug = __webpack_require__(118)('retry-as-promised')
	  , error = __webpack_require__(118)('retry-as-promised:error')
	  , Promise = __webpack_require__(121);

	module.exports = function retryAsPromised(callback, options) {
	  if (!callback || !options) throw new Error('retry-as-promised must be passed a callback and a options set or a number');

	  if (typeof options === 'number') {
	    options = {max: options};
	  }

	  // Super cheap clone
	  options = {
	    $current:         options.$current || 1,
	    max:              options.max,
	    timeout:          options.timeout || undefined,
	    match:            options.match || [],
	    backoffBase:      options.backoffBase === undefined ? 100 : options.backoffBase,
	    backoffExponent:  options.backoffExponent || 1.1,
	    report:           options.report || null,
	    name:             options.name || callback.name || 'unknown'
	  };

	  // Massage match option into array so we can blindly treat it as such later
	  if (!Array.isArray(options.match)) options.match = [options.match];

	  debug('Trying '+ options.name + ' (%s)', options.$current);
	  if(options.report) options.report('Trying ' + options.name + ' #' + options.$current + ' at ' + new Date().toLocaleTimeString(), options);

	  return new Promise(function (resolve, reject) {
	    var timeout, backoffTimeout;

	    if (options.timeout) {
	      timeout = setTimeout(function () {
	        if (backoffTimeout) clearTimeout(backoffTimeout);
	        reject(Promise.TimeoutError( options.name + ' timed out'));
	      }, options.timeout);
	    }

	    Promise.resolve(callback()).then(resolve).tap(function () {
	      if (timeout) clearTimeout(timeout);
	      if (backoffTimeout) clearTimeout(backoffTimeout);
	    }).catch(function (err) {
	      if (timeout) clearTimeout(timeout);
	      if (backoffTimeout) clearTimeout(backoffTimeout);

	      error(err && err.toString() || err);
	      if (options.report) options.report('Try ' + options.name + ' #' + options.$current + ' failed: ' + err.toString(), options, err);

	      // Should not retry if max has been reached
	      var shouldRetry = options.$current < options.max;

	      if (shouldRetry && options.match.length && err) {
	        // If match is defined we should fail if it is not met
	        shouldRetry = options.match.reduce(function (shouldRetry, match) {
	          if (shouldRetry) return shouldRetry;

	          if (match === err.toString() ||
	              match === err.message ||
	              (typeof match === "function" && err instanceof match) ||
	              (match instanceof RegExp && (match.test(err.message) || match.test(err.toString()) ))
	          ) {
	            shouldRetry = true;
	          }
	          return shouldRetry;
	        }, false);
	      }

	      if (!shouldRetry) return reject(err);

	      // Do some accounting
	      options.$current++;

	      if (options.backoffBase) {
	        // Use backoff function to ease retry rate
	        options.backoffBase = Math.pow(options.backoffBase, options.backoffExponent);
	        debug('Delaying retry of '+ options.name+' by %s', options.backoffBase);
	        if(options.report) options.report('Delaying retry of ' + options.name + ' by ' + options.backoffBase, options);
	        backoffTimeout = setTimeout(function() {
	          retryAsPromised(callback, options).then(resolve).catch(reject);
	        }, options.backoffBase);
	      } else {
	        retryAsPromised(callback, options).then(resolve).catch(reject);
	      }

	    });
	  });
	};


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(119);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(120);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/* @preserve
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2013-2015 Petka Antonov
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 * 
	 */
	/**
	 * bluebird build version 3.4.7
	 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
	*/
	!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var SomePromiseArray = Promise._SomePromiseArray;
	function any(promises) {
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(1);
	    ret.setUnwrap();
	    ret.init();
	    return promise;
	}

	Promise.any = function (promises) {
	    return any(promises);
	};

	Promise.prototype.any = function () {
	    return any(this);
	};

	};

	},{}],2:[function(_dereq_,module,exports){
	"use strict";
	var firstLineError;
	try {throw new Error(); } catch (e) {firstLineError = e;}
	var schedule = _dereq_("./schedule");
	var Queue = _dereq_("./queue");
	var util = _dereq_("./util");

	function Async() {
	    this._customScheduler = false;
	    this._isTickUsed = false;
	    this._lateQueue = new Queue(16);
	    this._normalQueue = new Queue(16);
	    this._haveDrainedQueues = false;
	    this._trampolineEnabled = true;
	    var self = this;
	    this.drainQueues = function () {
	        self._drainQueues();
	    };
	    this._schedule = schedule;
	}

	Async.prototype.setScheduler = function(fn) {
	    var prev = this._schedule;
	    this._schedule = fn;
	    this._customScheduler = true;
	    return prev;
	};

	Async.prototype.hasCustomScheduler = function() {
	    return this._customScheduler;
	};

	Async.prototype.enableTrampoline = function() {
	    this._trampolineEnabled = true;
	};

	Async.prototype.disableTrampolineIfNecessary = function() {
	    if (util.hasDevTools) {
	        this._trampolineEnabled = false;
	    }
	};

	Async.prototype.haveItemsQueued = function () {
	    return this._isTickUsed || this._haveDrainedQueues;
	};


	Async.prototype.fatalError = function(e, isNode) {
	    if (isNode) {
	        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
	            "\n");
	        process.exit(2);
	    } else {
	        this.throwLater(e);
	    }
	};

	Async.prototype.throwLater = function(fn, arg) {
	    if (arguments.length === 1) {
	        arg = fn;
	        fn = function () { throw arg; };
	    }
	    if (typeof setTimeout !== "undefined") {
	        setTimeout(function() {
	            fn(arg);
	        }, 0);
	    } else try {
	        this._schedule(function() {
	            fn(arg);
	        });
	    } catch (e) {
	        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	};

	function AsyncInvokeLater(fn, receiver, arg) {
	    this._lateQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncInvoke(fn, receiver, arg) {
	    this._normalQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncSettlePromises(promise) {
	    this._normalQueue._pushOne(promise);
	    this._queueTick();
	}

	if (!util.hasDevTools) {
	    Async.prototype.invokeLater = AsyncInvokeLater;
	    Async.prototype.invoke = AsyncInvoke;
	    Async.prototype.settlePromises = AsyncSettlePromises;
	} else {
	    Async.prototype.invokeLater = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvokeLater.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                setTimeout(function() {
	                    fn.call(receiver, arg);
	                }, 100);
	            });
	        }
	    };

	    Async.prototype.invoke = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvoke.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                fn.call(receiver, arg);
	            });
	        }
	    };

	    Async.prototype.settlePromises = function(promise) {
	        if (this._trampolineEnabled) {
	            AsyncSettlePromises.call(this, promise);
	        } else {
	            this._schedule(function() {
	                promise._settlePromises();
	            });
	        }
	    };
	}

	Async.prototype._drainQueue = function(queue) {
	    while (queue.length() > 0) {
	        var fn = queue.shift();
	        if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	        }
	        var receiver = queue.shift();
	        var arg = queue.shift();
	        fn.call(receiver, arg);
	    }
	};

	Async.prototype._drainQueues = function () {
	    this._drainQueue(this._normalQueue);
	    this._reset();
	    this._haveDrainedQueues = true;
	    this._drainQueue(this._lateQueue);
	};

	Async.prototype._queueTick = function () {
	    if (!this._isTickUsed) {
	        this._isTickUsed = true;
	        this._schedule(this.drainQueues);
	    }
	};

	Async.prototype._reset = function () {
	    this._isTickUsed = false;
	};

	module.exports = Async;
	module.exports.firstLineError = firstLineError;

	},{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
	var calledBind = false;
	var rejectThis = function(_, e) {
	    this._reject(e);
	};

	var targetRejected = function(e, context) {
	    context.promiseRejectionQueued = true;
	    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	};

	var bindingResolved = function(thisArg, context) {
	    if (((this._bitField & 50397184) === 0)) {
	        this._resolveCallback(context.target);
	    }
	};

	var bindingRejected = function(e, context) {
	    if (!context.promiseRejectionQueued) this._reject(e);
	};

	Promise.prototype.bind = function (thisArg) {
	    if (!calledBind) {
	        calledBind = true;
	        Promise.prototype._propagateFrom = debug.propagateFromFunction();
	        Promise.prototype._boundValue = debug.boundValueFunction();
	    }
	    var maybePromise = tryConvertToPromise(thisArg);
	    var ret = new Promise(INTERNAL);
	    ret._propagateFrom(this, 1);
	    var target = this._target();
	    ret._setBoundTo(maybePromise);
	    if (maybePromise instanceof Promise) {
	        var context = {
	            promiseRejectionQueued: false,
	            promise: ret,
	            target: target,
	            bindingPromise: maybePromise
	        };
	        target._then(INTERNAL, targetRejected, undefined, ret, context);
	        maybePromise._then(
	            bindingResolved, bindingRejected, undefined, ret, context);
	        ret._setOnCancel(maybePromise);
	    } else {
	        ret._resolveCallback(target);
	    }
	    return ret;
	};

	Promise.prototype._setBoundTo = function (obj) {
	    if (obj !== undefined) {
	        this._bitField = this._bitField | 2097152;
	        this._boundTo = obj;
	    } else {
	        this._bitField = this._bitField & (~2097152);
	    }
	};

	Promise.prototype._isBound = function () {
	    return (this._bitField & 2097152) === 2097152;
	};

	Promise.bind = function (thisArg, value) {
	    return Promise.resolve(value).bind(thisArg);
	};
	};

	},{}],4:[function(_dereq_,module,exports){
	"use strict";
	var old;
	if (typeof Promise !== "undefined") old = Promise;
	function noConflict() {
	    try { if (Promise === bluebird) Promise = old; }
	    catch (e) {}
	    return bluebird;
	}
	var bluebird = _dereq_("./promise")();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;

	},{"./promise":22}],5:[function(_dereq_,module,exports){
	"use strict";
	var cr = Object.create;
	if (cr) {
	    var callerCache = cr(null);
	    var getterCache = cr(null);
	    callerCache[" size"] = getterCache[" size"] = 0;
	}

	module.exports = function(Promise) {
	var util = _dereq_("./util");
	var canEvaluate = util.canEvaluate;
	var isIdentifier = util.isIdentifier;

	var getMethodCaller;
	var getGetter;
	if (false) {
	var makeMethodCaller = function (methodName) {
	    return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	};

	var makeGetter = function (propertyName) {
	    return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	};

	var getCompiled = function(name, compiler, cache) {
	    var ret = cache[name];
	    if (typeof ret !== "function") {
	        if (!isIdentifier(name)) {
	            return null;
	        }
	        ret = compiler(name);
	        cache[name] = ret;
	        cache[" size"]++;
	        if (cache[" size"] > 512) {
	            var keys = Object.keys(cache);
	            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
	            cache[" size"] = keys.length - 256;
	        }
	    }
	    return ret;
	};

	getMethodCaller = function(name) {
	    return getCompiled(name, makeMethodCaller, callerCache);
	};

	getGetter = function(name) {
	    return getCompiled(name, makeGetter, getterCache);
	};
	}

	function ensureMethod(obj, methodName) {
	    var fn;
	    if (obj != null) fn = obj[methodName];
	    if (typeof fn !== "function") {
	        var message = "Object " + util.classString(obj) + " has no method '" +
	            util.toString(methodName) + "'";
	        throw new Promise.TypeError(message);
	    }
	    return fn;
	}

	function caller(obj) {
	    var methodName = this.pop();
	    var fn = ensureMethod(obj, methodName);
	    return fn.apply(obj, this);
	}
	Promise.prototype.call = function (methodName) {
	    var args = [].slice.call(arguments, 1);;
	    if (false) {
	        if (canEvaluate) {
	            var maybeCaller = getMethodCaller(methodName);
	            if (maybeCaller !== null) {
	                return this._then(
	                    maybeCaller, undefined, undefined, args, undefined);
	            }
	        }
	    }
	    args.push(methodName);
	    return this._then(caller, undefined, undefined, args, undefined);
	};

	function namedGetter(obj) {
	    return obj[this];
	}
	function indexedGetter(obj) {
	    var index = +this;
	    if (index < 0) index = Math.max(0, index + obj.length);
	    return obj[index];
	}
	Promise.prototype.get = function (propertyName) {
	    var isIndex = (typeof propertyName === "number");
	    var getter;
	    if (!isIndex) {
	        if (canEvaluate) {
	            var maybeGetter = getGetter(propertyName);
	            getter = maybeGetter !== null ? maybeGetter : namedGetter;
	        } else {
	            getter = namedGetter;
	        }
	    } else {
	        getter = indexedGetter;
	    }
	    return this._then(getter, undefined, undefined, propertyName, undefined);
	};
	};

	},{"./util":36}],6:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, PromiseArray, apiRejection, debug) {
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var async = Promise._async;

	Promise.prototype["break"] = Promise.prototype.cancel = function() {
	    if (!debug.cancellation()) return this._warn("cancellation is disabled");

	    var promise = this;
	    var child = promise;
	    while (promise._isCancellable()) {
	        if (!promise._cancelBy(child)) {
	            if (child._isFollowing()) {
	                child._followee().cancel();
	            } else {
	                child._cancelBranched();
	            }
	            break;
	        }

	        var parent = promise._cancellationParent;
	        if (parent == null || !parent._isCancellable()) {
	            if (promise._isFollowing()) {
	                promise._followee().cancel();
	            } else {
	                promise._cancelBranched();
	            }
	            break;
	        } else {
	            if (promise._isFollowing()) promise._followee().cancel();
	            promise._setWillBeCancelled();
	            child = promise;
	            promise = parent;
	        }
	    }
	};

	Promise.prototype._branchHasCancelled = function() {
	    this._branchesRemainingToCancel--;
	};

	Promise.prototype._enoughBranchesHaveCancelled = function() {
	    return this._branchesRemainingToCancel === undefined ||
	           this._branchesRemainingToCancel <= 0;
	};

	Promise.prototype._cancelBy = function(canceller) {
	    if (canceller === this) {
	        this._branchesRemainingToCancel = 0;
	        this._invokeOnCancel();
	        return true;
	    } else {
	        this._branchHasCancelled();
	        if (this._enoughBranchesHaveCancelled()) {
	            this._invokeOnCancel();
	            return true;
	        }
	    }
	    return false;
	};

	Promise.prototype._cancelBranched = function() {
	    if (this._enoughBranchesHaveCancelled()) {
	        this._cancel();
	    }
	};

	Promise.prototype._cancel = function() {
	    if (!this._isCancellable()) return;
	    this._setCancelled();
	    async.invoke(this._cancelPromises, this, undefined);
	};

	Promise.prototype._cancelPromises = function() {
	    if (this._length() > 0) this._settlePromises();
	};

	Promise.prototype._unsetOnCancel = function() {
	    this._onCancelField = undefined;
	};

	Promise.prototype._isCancellable = function() {
	    return this.isPending() && !this._isCancelled();
	};

	Promise.prototype.isCancellable = function() {
	    return this.isPending() && !this.isCancelled();
	};

	Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
	    if (util.isArray(onCancelCallback)) {
	        for (var i = 0; i < onCancelCallback.length; ++i) {
	            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
	        }
	    } else if (onCancelCallback !== undefined) {
	        if (typeof onCancelCallback === "function") {
	            if (!internalOnly) {
	                var e = tryCatch(onCancelCallback).call(this._boundValue());
	                if (e === errorObj) {
	                    this._attachExtraTrace(e.e);
	                    async.throwLater(e.e);
	                }
	            }
	        } else {
	            onCancelCallback._resultCancelled(this);
	        }
	    }
	};

	Promise.prototype._invokeOnCancel = function() {
	    var onCancelCallback = this._onCancel();
	    this._unsetOnCancel();
	    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
	};

	Promise.prototype._invokeInternalOnCancel = function() {
	    if (this._isCancellable()) {
	        this._doInvokeOnCancel(this._onCancel(), true);
	        this._unsetOnCancel();
	    }
	};

	Promise.prototype._resultCancelled = function() {
	    this.cancel();
	};

	};

	},{"./util":36}],7:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(NEXT_FILTER) {
	var util = _dereq_("./util");
	var getKeys = _dereq_("./es5").keys;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	function catchFilter(instances, cb, promise) {
	    return function(e) {
	        var boundTo = promise._boundValue();
	        predicateLoop: for (var i = 0; i < instances.length; ++i) {
	            var item = instances[i];

	            if (item === Error ||
	                (item != null && item.prototype instanceof Error)) {
	                if (e instanceof item) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (typeof item === "function") {
	                var matchesPredicate = tryCatch(item).call(boundTo, e);
	                if (matchesPredicate === errorObj) {
	                    return matchesPredicate;
	                } else if (matchesPredicate) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (util.isObject(e)) {
	                var keys = getKeys(item);
	                for (var j = 0; j < keys.length; ++j) {
	                    var key = keys[j];
	                    if (item[key] != e[key]) {
	                        continue predicateLoop;
	                    }
	                }
	                return tryCatch(cb).call(boundTo, e);
	            }
	        }
	        return NEXT_FILTER;
	    };
	}

	return catchFilter;
	};

	},{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var longStackTraces = false;
	var contextStack = [];

	Promise.prototype._promiseCreated = function() {};
	Promise.prototype._pushContext = function() {};
	Promise.prototype._popContext = function() {return null;};
	Promise._peekContext = Promise.prototype._peekContext = function() {};

	function Context() {
	    this._trace = new Context.CapturedTrace(peekContext());
	}
	Context.prototype._pushContext = function () {
	    if (this._trace !== undefined) {
	        this._trace._promiseCreated = null;
	        contextStack.push(this._trace);
	    }
	};

	Context.prototype._popContext = function () {
	    if (this._trace !== undefined) {
	        var trace = contextStack.pop();
	        var ret = trace._promiseCreated;
	        trace._promiseCreated = null;
	        return ret;
	    }
	    return null;
	};

	function createContext() {
	    if (longStackTraces) return new Context();
	}

	function peekContext() {
	    var lastIndex = contextStack.length - 1;
	    if (lastIndex >= 0) {
	        return contextStack[lastIndex];
	    }
	    return undefined;
	}
	Context.CapturedTrace = null;
	Context.create = createContext;
	Context.deactivateLongStackTraces = function() {};
	Context.activateLongStackTraces = function() {
	    var Promise_pushContext = Promise.prototype._pushContext;
	    var Promise_popContext = Promise.prototype._popContext;
	    var Promise_PeekContext = Promise._peekContext;
	    var Promise_peekContext = Promise.prototype._peekContext;
	    var Promise_promiseCreated = Promise.prototype._promiseCreated;
	    Context.deactivateLongStackTraces = function() {
	        Promise.prototype._pushContext = Promise_pushContext;
	        Promise.prototype._popContext = Promise_popContext;
	        Promise._peekContext = Promise_PeekContext;
	        Promise.prototype._peekContext = Promise_peekContext;
	        Promise.prototype._promiseCreated = Promise_promiseCreated;
	        longStackTraces = false;
	    };
	    longStackTraces = true;
	    Promise.prototype._pushContext = Context.prototype._pushContext;
	    Promise.prototype._popContext = Context.prototype._popContext;
	    Promise._peekContext = Promise.prototype._peekContext = peekContext;
	    Promise.prototype._promiseCreated = function() {
	        var ctx = this._peekContext();
	        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
	    };
	};
	return Context;
	};

	},{}],9:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, Context) {
	var getDomain = Promise._getDomain;
	var async = Promise._async;
	var Warning = _dereq_("./errors").Warning;
	var util = _dereq_("./util");
	var canAttachTrace = util.canAttachTrace;
	var unhandledRejectionHandled;
	var possiblyUnhandledRejection;
	var bluebirdFramePattern =
	    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
	var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
	var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
	var stackFramePattern = null;
	var formatStack = null;
	var indentStackFrames = false;
	var printWarning;
	var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
	                        (true ||
	                         util.env("BLUEBIRD_DEBUG") ||
	                         util.env("NODE_ENV") === "development"));

	var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
	    (debugging || util.env("BLUEBIRD_WARNINGS")));

	var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
	    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

	var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
	    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

	Promise.prototype.suppressUnhandledRejections = function() {
	    var target = this._target();
	    target._bitField = ((target._bitField & (~1048576)) |
	                      524288);
	};

	Promise.prototype._ensurePossibleRejectionHandled = function () {
	    if ((this._bitField & 524288) !== 0) return;
	    this._setRejectionIsUnhandled();
	    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	};

	Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	    fireRejectionEvent("rejectionHandled",
	                                  unhandledRejectionHandled, undefined, this);
	};

	Promise.prototype._setReturnedNonUndefined = function() {
	    this._bitField = this._bitField | 268435456;
	};

	Promise.prototype._returnedNonUndefined = function() {
	    return (this._bitField & 268435456) !== 0;
	};

	Promise.prototype._notifyUnhandledRejection = function () {
	    if (this._isRejectionUnhandled()) {
	        var reason = this._settledValue();
	        this._setUnhandledRejectionIsNotified();
	        fireRejectionEvent("unhandledRejection",
	                                      possiblyUnhandledRejection, reason, this);
	    }
	};

	Promise.prototype._setUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField | 262144;
	};

	Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField & (~262144);
	};

	Promise.prototype._isUnhandledRejectionNotified = function () {
	    return (this._bitField & 262144) > 0;
	};

	Promise.prototype._setRejectionIsUnhandled = function () {
	    this._bitField = this._bitField | 1048576;
	};

	Promise.prototype._unsetRejectionIsUnhandled = function () {
	    this._bitField = this._bitField & (~1048576);
	    if (this._isUnhandledRejectionNotified()) {
	        this._unsetUnhandledRejectionIsNotified();
	        this._notifyUnhandledRejectionIsHandled();
	    }
	};

	Promise.prototype._isRejectionUnhandled = function () {
	    return (this._bitField & 1048576) > 0;
	};

	Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
	    return warn(message, shouldUseOwnTrace, promise || this);
	};

	Promise.onPossiblyUnhandledRejection = function (fn) {
	    var domain = getDomain();
	    possiblyUnhandledRejection =
	        typeof fn === "function" ? (domain === null ?
	                                            fn : util.domainBind(domain, fn))
	                                 : undefined;
	};

	Promise.onUnhandledRejectionHandled = function (fn) {
	    var domain = getDomain();
	    unhandledRejectionHandled =
	        typeof fn === "function" ? (domain === null ?
	                                            fn : util.domainBind(domain, fn))
	                                 : undefined;
	};

	var disableLongStackTraces = function() {};
	Promise.longStackTraces = function () {
	    if (async.haveItemsQueued() && !config.longStackTraces) {
	        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    if (!config.longStackTraces && longStackTracesIsSupported()) {
	        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
	        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
	        config.longStackTraces = true;
	        disableLongStackTraces = function() {
	            if (async.haveItemsQueued() && !config.longStackTraces) {
	                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	            }
	            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
	            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
	            Context.deactivateLongStackTraces();
	            async.enableTrampoline();
	            config.longStackTraces = false;
	        };
	        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
	        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
	        Context.activateLongStackTraces();
	        async.disableTrampolineIfNecessary();
	    }
	};

	Promise.hasLongStackTraces = function () {
	    return config.longStackTraces && longStackTracesIsSupported();
	};

	var fireDomEvent = (function() {
	    try {
	        if (typeof CustomEvent === "function") {
	            var event = new CustomEvent("CustomEvent");
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = new CustomEvent(name.toLowerCase(), {
	                    detail: event,
	                    cancelable: true
	                });
	                return !util.global.dispatchEvent(domEvent);
	            };
	        } else if (typeof Event === "function") {
	            var event = new Event("CustomEvent");
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = new Event(name.toLowerCase(), {
	                    cancelable: true
	                });
	                domEvent.detail = event;
	                return !util.global.dispatchEvent(domEvent);
	            };
	        } else {
	            var event = document.createEvent("CustomEvent");
	            event.initCustomEvent("testingtheevent", false, true, {});
	            util.global.dispatchEvent(event);
	            return function(name, event) {
	                var domEvent = document.createEvent("CustomEvent");
	                domEvent.initCustomEvent(name.toLowerCase(), false, true,
	                    event);
	                return !util.global.dispatchEvent(domEvent);
	            };
	        }
	    } catch (e) {}
	    return function() {
	        return false;
	    };
	})();

	var fireGlobalEvent = (function() {
	    if (util.isNode) {
	        return function() {
	            return process.emit.apply(process, arguments);
	        };
	    } else {
	        if (!util.global) {
	            return function() {
	                return false;
	            };
	        }
	        return function(name) {
	            var methodName = "on" + name.toLowerCase();
	            var method = util.global[methodName];
	            if (!method) return false;
	            method.apply(util.global, [].slice.call(arguments, 1));
	            return true;
	        };
	    }
	})();

	function generatePromiseLifecycleEventObject(name, promise) {
	    return {promise: promise};
	}

	var eventToObjectGenerator = {
	    promiseCreated: generatePromiseLifecycleEventObject,
	    promiseFulfilled: generatePromiseLifecycleEventObject,
	    promiseRejected: generatePromiseLifecycleEventObject,
	    promiseResolved: generatePromiseLifecycleEventObject,
	    promiseCancelled: generatePromiseLifecycleEventObject,
	    promiseChained: function(name, promise, child) {
	        return {promise: promise, child: child};
	    },
	    warning: function(name, warning) {
	        return {warning: warning};
	    },
	    unhandledRejection: function (name, reason, promise) {
	        return {reason: reason, promise: promise};
	    },
	    rejectionHandled: generatePromiseLifecycleEventObject
	};

	var activeFireEvent = function (name) {
	    var globalEventFired = false;
	    try {
	        globalEventFired = fireGlobalEvent.apply(null, arguments);
	    } catch (e) {
	        async.throwLater(e);
	        globalEventFired = true;
	    }

	    var domEventFired = false;
	    try {
	        domEventFired = fireDomEvent(name,
	                    eventToObjectGenerator[name].apply(null, arguments));
	    } catch (e) {
	        async.throwLater(e);
	        domEventFired = true;
	    }

	    return domEventFired || globalEventFired;
	};

	Promise.config = function(opts) {
	    opts = Object(opts);
	    if ("longStackTraces" in opts) {
	        if (opts.longStackTraces) {
	            Promise.longStackTraces();
	        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
	            disableLongStackTraces();
	        }
	    }
	    if ("warnings" in opts) {
	        var warningsOption = opts.warnings;
	        config.warnings = !!warningsOption;
	        wForgottenReturn = config.warnings;

	        if (util.isObject(warningsOption)) {
	            if ("wForgottenReturn" in warningsOption) {
	                wForgottenReturn = !!warningsOption.wForgottenReturn;
	            }
	        }
	    }
	    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
	        if (async.haveItemsQueued()) {
	            throw new Error(
	                "cannot enable cancellation after promises are in use");
	        }
	        Promise.prototype._clearCancellationData =
	            cancellationClearCancellationData;
	        Promise.prototype._propagateFrom = cancellationPropagateFrom;
	        Promise.prototype._onCancel = cancellationOnCancel;
	        Promise.prototype._setOnCancel = cancellationSetOnCancel;
	        Promise.prototype._attachCancellationCallback =
	            cancellationAttachCancellationCallback;
	        Promise.prototype._execute = cancellationExecute;
	        propagateFromFunction = cancellationPropagateFrom;
	        config.cancellation = true;
	    }
	    if ("monitoring" in opts) {
	        if (opts.monitoring && !config.monitoring) {
	            config.monitoring = true;
	            Promise.prototype._fireEvent = activeFireEvent;
	        } else if (!opts.monitoring && config.monitoring) {
	            config.monitoring = false;
	            Promise.prototype._fireEvent = defaultFireEvent;
	        }
	    }
	    return Promise;
	};

	function defaultFireEvent() { return false; }

	Promise.prototype._fireEvent = defaultFireEvent;
	Promise.prototype._execute = function(executor, resolve, reject) {
	    try {
	        executor(resolve, reject);
	    } catch (e) {
	        return e;
	    }
	};
	Promise.prototype._onCancel = function () {};
	Promise.prototype._setOnCancel = function (handler) { ; };
	Promise.prototype._attachCancellationCallback = function(onCancel) {
	    ;
	};
	Promise.prototype._captureStackTrace = function () {};
	Promise.prototype._attachExtraTrace = function () {};
	Promise.prototype._clearCancellationData = function() {};
	Promise.prototype._propagateFrom = function (parent, flags) {
	    ;
	    ;
	};

	function cancellationExecute(executor, resolve, reject) {
	    var promise = this;
	    try {
	        executor(resolve, reject, function(onCancel) {
	            if (typeof onCancel !== "function") {
	                throw new TypeError("onCancel must be a function, got: " +
	                                    util.toString(onCancel));
	            }
	            promise._attachCancellationCallback(onCancel);
	        });
	    } catch (e) {
	        return e;
	    }
	}

	function cancellationAttachCancellationCallback(onCancel) {
	    if (!this._isCancellable()) return this;

	    var previousOnCancel = this._onCancel();
	    if (previousOnCancel !== undefined) {
	        if (util.isArray(previousOnCancel)) {
	            previousOnCancel.push(onCancel);
	        } else {
	            this._setOnCancel([previousOnCancel, onCancel]);
	        }
	    } else {
	        this._setOnCancel(onCancel);
	    }
	}

	function cancellationOnCancel() {
	    return this._onCancelField;
	}

	function cancellationSetOnCancel(onCancel) {
	    this._onCancelField = onCancel;
	}

	function cancellationClearCancellationData() {
	    this._cancellationParent = undefined;
	    this._onCancelField = undefined;
	}

	function cancellationPropagateFrom(parent, flags) {
	    if ((flags & 1) !== 0) {
	        this._cancellationParent = parent;
	        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
	        if (branchesRemainingToCancel === undefined) {
	            branchesRemainingToCancel = 0;
	        }
	        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
	    }
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}

	function bindingPropagateFrom(parent, flags) {
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}
	var propagateFromFunction = bindingPropagateFrom;

	function boundValueFunction() {
	    var ret = this._boundTo;
	    if (ret !== undefined) {
	        if (ret instanceof Promise) {
	            if (ret.isFulfilled()) {
	                return ret.value();
	            } else {
	                return undefined;
	            }
	        }
	    }
	    return ret;
	}

	function longStackTracesCaptureStackTrace() {
	    this._trace = new CapturedTrace(this._peekContext());
	}

	function longStackTracesAttachExtraTrace(error, ignoreSelf) {
	    if (canAttachTrace(error)) {
	        var trace = this._trace;
	        if (trace !== undefined) {
	            if (ignoreSelf) trace = trace._parent;
	        }
	        if (trace !== undefined) {
	            trace.attachExtraTrace(error);
	        } else if (!error.__stackCleaned__) {
	            var parsed = parseStackAndMessage(error);
	            util.notEnumerableProp(error, "stack",
	                parsed.message + "\n" + parsed.stack.join("\n"));
	            util.notEnumerableProp(error, "__stackCleaned__", true);
	        }
	    }
	}

	function checkForgottenReturns(returnValue, promiseCreated, name, promise,
	                               parent) {
	    if (returnValue === undefined && promiseCreated !== null &&
	        wForgottenReturn) {
	        if (parent !== undefined && parent._returnedNonUndefined()) return;
	        if ((promise._bitField & 65535) === 0) return;

	        if (name) name = name + " ";
	        var handlerLine = "";
	        var creatorLine = "";
	        if (promiseCreated._trace) {
	            var traceLines = promiseCreated._trace.stack.split("\n");
	            var stack = cleanStack(traceLines);
	            for (var i = stack.length - 1; i >= 0; --i) {
	                var line = stack[i];
	                if (!nodeFramePattern.test(line)) {
	                    var lineMatches = line.match(parseLinePattern);
	                    if (lineMatches) {
	                        handlerLine  = "at " + lineMatches[1] +
	                            ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
	                    }
	                    break;
	                }
	            }

	            if (stack.length > 0) {
	                var firstUserLine = stack[0];
	                for (var i = 0; i < traceLines.length; ++i) {

	                    if (traceLines[i] === firstUserLine) {
	                        if (i > 0) {
	                            creatorLine = "\n" + traceLines[i - 1];
	                        }
	                        break;
	                    }
	                }

	            }
	        }
	        var msg = "a promise was created in a " + name +
	            "handler " + handlerLine + "but was not returned from it, " +
	            "see http://goo.gl/rRqMUw" +
	            creatorLine;
	        promise._warn(msg, true, promiseCreated);
	    }
	}

	function deprecated(name, replacement) {
	    var message = name +
	        " is deprecated and will be removed in a future version.";
	    if (replacement) message += " Use " + replacement + " instead.";
	    return warn(message);
	}

	function warn(message, shouldUseOwnTrace, promise) {
	    if (!config.warnings) return;
	    var warning = new Warning(message);
	    var ctx;
	    if (shouldUseOwnTrace) {
	        promise._attachExtraTrace(warning);
	    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
	        ctx.attachExtraTrace(warning);
	    } else {
	        var parsed = parseStackAndMessage(warning);
	        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	    }

	    if (!activeFireEvent("warning", warning)) {
	        formatAndLogError(warning, "", true);
	    }
	}

	function reconstructStack(message, stacks) {
	    for (var i = 0; i < stacks.length - 1; ++i) {
	        stacks[i].push("From previous event:");
	        stacks[i] = stacks[i].join("\n");
	    }
	    if (i < stacks.length) {
	        stacks[i] = stacks[i].join("\n");
	    }
	    return message + "\n" + stacks.join("\n");
	}

	function removeDuplicateOrEmptyJumps(stacks) {
	    for (var i = 0; i < stacks.length; ++i) {
	        if (stacks[i].length === 0 ||
	            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
	            stacks.splice(i, 1);
	            i--;
	        }
	    }
	}

	function removeCommonRoots(stacks) {
	    var current = stacks[0];
	    for (var i = 1; i < stacks.length; ++i) {
	        var prev = stacks[i];
	        var currentLastIndex = current.length - 1;
	        var currentLastLine = current[currentLastIndex];
	        var commonRootMeetPoint = -1;

	        for (var j = prev.length - 1; j >= 0; --j) {
	            if (prev[j] === currentLastLine) {
	                commonRootMeetPoint = j;
	                break;
	            }
	        }

	        for (var j = commonRootMeetPoint; j >= 0; --j) {
	            var line = prev[j];
	            if (current[currentLastIndex] === line) {
	                current.pop();
	                currentLastIndex--;
	            } else {
	                break;
	            }
	        }
	        current = prev;
	    }
	}

	function cleanStack(stack) {
	    var ret = [];
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        var isTraceLine = "    (No stack trace)" === line ||
	            stackFramePattern.test(line);
	        var isInternalFrame = isTraceLine && shouldIgnore(line);
	        if (isTraceLine && !isInternalFrame) {
	            if (indentStackFrames && line.charAt(0) !== " ") {
	                line = "    " + line;
	            }
	            ret.push(line);
	        }
	    }
	    return ret;
	}

	function stackFramesAsArray(error) {
	    var stack = error.stack.replace(/\s+$/g, "").split("\n");
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	            break;
	        }
	    }
	    if (i > 0 && error.name != "SyntaxError") {
	        stack = stack.slice(i);
	    }
	    return stack;
	}

	function parseStackAndMessage(error) {
	    var stack = error.stack;
	    var message = error.toString();
	    stack = typeof stack === "string" && stack.length > 0
	                ? stackFramesAsArray(error) : ["    (No stack trace)"];
	    return {
	        message: message,
	        stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
	    };
	}

	function formatAndLogError(error, title, isSoft) {
	    if (typeof console !== "undefined") {
	        var message;
	        if (util.isObject(error)) {
	            var stack = error.stack;
	            message = title + formatStack(stack, error);
	        } else {
	            message = title + String(error);
	        }
	        if (typeof printWarning === "function") {
	            printWarning(message, isSoft);
	        } else if (typeof console.log === "function" ||
	            typeof console.log === "object") {
	            console.log(message);
	        }
	    }
	}

	function fireRejectionEvent(name, localHandler, reason, promise) {
	    var localEventFired = false;
	    try {
	        if (typeof localHandler === "function") {
	            localEventFired = true;
	            if (name === "rejectionHandled") {
	                localHandler(promise);
	            } else {
	                localHandler(reason, promise);
	            }
	        }
	    } catch (e) {
	        async.throwLater(e);
	    }

	    if (name === "unhandledRejection") {
	        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
	            formatAndLogError(reason, "Unhandled rejection ");
	        }
	    } else {
	        activeFireEvent(name, promise);
	    }
	}

	function formatNonError(obj) {
	    var str;
	    if (typeof obj === "function") {
	        str = "[function " +
	            (obj.name || "anonymous") +
	            "]";
	    } else {
	        str = obj && typeof obj.toString === "function"
	            ? obj.toString() : util.toString(obj);
	        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	        if (ruselessToString.test(str)) {
	            try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	            }
	            catch(e) {

	            }
	        }
	        if (str.length === 0) {
	            str = "(empty array)";
	        }
	    }
	    return ("(<" + snip(str) + ">, no stack trace)");
	}

	function snip(str) {
	    var maxChars = 41;
	    if (str.length < maxChars) {
	        return str;
	    }
	    return str.substr(0, maxChars - 3) + "...";
	}

	function longStackTracesIsSupported() {
	    return typeof captureStackTrace === "function";
	}

	var shouldIgnore = function() { return false; };
	var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	function parseLineInfo(line) {
	    var matches = line.match(parseLineInfoRegex);
	    if (matches) {
	        return {
	            fileName: matches[1],
	            line: parseInt(matches[2], 10)
	        };
	    }
	}

	function setBounds(firstLineError, lastLineError) {
	    if (!longStackTracesIsSupported()) return;
	    var firstStackLines = firstLineError.stack.split("\n");
	    var lastStackLines = lastLineError.stack.split("\n");
	    var firstIndex = -1;
	    var lastIndex = -1;
	    var firstFileName;
	    var lastFileName;
	    for (var i = 0; i < firstStackLines.length; ++i) {
	        var result = parseLineInfo(firstStackLines[i]);
	        if (result) {
	            firstFileName = result.fileName;
	            firstIndex = result.line;
	            break;
	        }
	    }
	    for (var i = 0; i < lastStackLines.length; ++i) {
	        var result = parseLineInfo(lastStackLines[i]);
	        if (result) {
	            lastFileName = result.fileName;
	            lastIndex = result.line;
	            break;
	        }
	    }
	    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
	        firstFileName !== lastFileName || firstIndex >= lastIndex) {
	        return;
	    }

	    shouldIgnore = function(line) {
	        if (bluebirdFramePattern.test(line)) return true;
	        var info = parseLineInfo(line);
	        if (info) {
	            if (info.fileName === firstFileName &&
	                (firstIndex <= info.line && info.line <= lastIndex)) {
	                return true;
	            }
	        }
	        return false;
	    };
	}

	function CapturedTrace(parent) {
	    this._parent = parent;
	    this._promisesCreated = 0;
	    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	    captureStackTrace(this, CapturedTrace);
	    if (length > 32) this.uncycle();
	}
	util.inherits(CapturedTrace, Error);
	Context.CapturedTrace = CapturedTrace;

	CapturedTrace.prototype.uncycle = function() {
	    var length = this._length;
	    if (length < 2) return;
	    var nodes = [];
	    var stackToIndex = {};

	    for (var i = 0, node = this; node !== undefined; ++i) {
	        nodes.push(node);
	        node = node._parent;
	    }
	    length = this._length = i;
	    for (var i = length - 1; i >= 0; --i) {
	        var stack = nodes[i].stack;
	        if (stackToIndex[stack] === undefined) {
	            stackToIndex[stack] = i;
	        }
	    }
	    for (var i = 0; i < length; ++i) {
	        var currentStack = nodes[i].stack;
	        var index = stackToIndex[currentStack];
	        if (index !== undefined && index !== i) {
	            if (index > 0) {
	                nodes[index - 1]._parent = undefined;
	                nodes[index - 1]._length = 1;
	            }
	            nodes[i]._parent = undefined;
	            nodes[i]._length = 1;
	            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

	            if (index < length - 1) {
	                cycleEdgeNode._parent = nodes[index + 1];
	                cycleEdgeNode._parent.uncycle();
	                cycleEdgeNode._length =
	                    cycleEdgeNode._parent._length + 1;
	            } else {
	                cycleEdgeNode._parent = undefined;
	                cycleEdgeNode._length = 1;
	            }
	            var currentChildLength = cycleEdgeNode._length + 1;
	            for (var j = i - 2; j >= 0; --j) {
	                nodes[j]._length = currentChildLength;
	                currentChildLength++;
	            }
	            return;
	        }
	    }
	};

	CapturedTrace.prototype.attachExtraTrace = function(error) {
	    if (error.__stackCleaned__) return;
	    this.uncycle();
	    var parsed = parseStackAndMessage(error);
	    var message = parsed.message;
	    var stacks = [parsed.stack];

	    var trace = this;
	    while (trace !== undefined) {
	        stacks.push(cleanStack(trace.stack.split("\n")));
	        trace = trace._parent;
	    }
	    removeCommonRoots(stacks);
	    removeDuplicateOrEmptyJumps(stacks);
	    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
	    util.notEnumerableProp(error, "__stackCleaned__", true);
	};

	var captureStackTrace = (function stackDetection() {
	    var v8stackFramePattern = /^\s*at\s*/;
	    var v8stackFormatter = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if (error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    if (typeof Error.stackTraceLimit === "number" &&
	        typeof Error.captureStackTrace === "function") {
	        Error.stackTraceLimit += 6;
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        var captureStackTrace = Error.captureStackTrace;

	        shouldIgnore = function(line) {
	            return bluebirdFramePattern.test(line);
	        };
	        return function(receiver, ignoreUntil) {
	            Error.stackTraceLimit += 6;
	            captureStackTrace(receiver, ignoreUntil);
	            Error.stackTraceLimit -= 6;
	        };
	    }
	    var err = new Error();

	    if (typeof err.stack === "string" &&
	        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	        stackFramePattern = /@/;
	        formatStack = v8stackFormatter;
	        indentStackFrames = true;
	        return function captureStackTrace(o) {
	            o.stack = new Error().stack;
	        };
	    }

	    var hasStackAfterThrow;
	    try { throw new Error(); }
	    catch(e) {
	        hasStackAfterThrow = ("stack" in e);
	    }
	    if (!("stack" in err) && hasStackAfterThrow &&
	        typeof Error.stackTraceLimit === "number") {
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        return function captureStackTrace(o) {
	            Error.stackTraceLimit += 6;
	            try { throw new Error(); }
	            catch(e) { o.stack = e.stack; }
	            Error.stackTraceLimit -= 6;
	        };
	    }

	    formatStack = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if ((typeof error === "object" ||
	            typeof error === "function") &&
	            error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    return null;

	})([]);

	if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	    printWarning = function (message) {
	        console.warn(message);
	    };
	    if (util.isNode && process.stderr.isTTY) {
	        printWarning = function(message, isSoft) {
	            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
	            console.warn(color + message + "\u001b[0m\n");
	        };
	    } else if (!util.isNode && typeof (new Error().stack) === "string") {
	        printWarning = function(message, isSoft) {
	            console.warn("%c" + message,
	                        isSoft ? "color: darkorange" : "color: red");
	        };
	    }
	}

	var config = {
	    warnings: warnings,
	    longStackTraces: false,
	    cancellation: false,
	    monitoring: false
	};

	if (longStackTraces) Promise.longStackTraces();

	return {
	    longStackTraces: function() {
	        return config.longStackTraces;
	    },
	    warnings: function() {
	        return config.warnings;
	    },
	    cancellation: function() {
	        return config.cancellation;
	    },
	    monitoring: function() {
	        return config.monitoring;
	    },
	    propagateFromFunction: function() {
	        return propagateFromFunction;
	    },
	    boundValueFunction: function() {
	        return boundValueFunction;
	    },
	    checkForgottenReturns: checkForgottenReturns,
	    setBounds: setBounds,
	    warn: warn,
	    deprecated: deprecated,
	    CapturedTrace: CapturedTrace,
	    fireDomEvent: fireDomEvent,
	    fireGlobalEvent: fireGlobalEvent
	};
	};

	},{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	function returner() {
	    return this.value;
	}
	function thrower() {
	    throw this.reason;
	}

	Promise.prototype["return"] =
	Promise.prototype.thenReturn = function (value) {
	    if (value instanceof Promise) value.suppressUnhandledRejections();
	    return this._then(
	        returner, undefined, undefined, {value: value}, undefined);
	};

	Promise.prototype["throw"] =
	Promise.prototype.thenThrow = function (reason) {
	    return this._then(
	        thrower, undefined, undefined, {reason: reason}, undefined);
	};

	Promise.prototype.catchThrow = function (reason) {
	    if (arguments.length <= 1) {
	        return this._then(
	            undefined, thrower, undefined, {reason: reason}, undefined);
	    } else {
	        var _reason = arguments[1];
	        var handler = function() {throw _reason;};
	        return this.caught(reason, handler);
	    }
	};

	Promise.prototype.catchReturn = function (value) {
	    if (arguments.length <= 1) {
	        if (value instanceof Promise) value.suppressUnhandledRejections();
	        return this._then(
	            undefined, returner, undefined, {value: value}, undefined);
	    } else {
	        var _value = arguments[1];
	        if (_value instanceof Promise) _value.suppressUnhandledRejections();
	        var handler = function() {return _value;};
	        return this.caught(value, handler);
	    }
	};
	};

	},{}],11:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseReduce = Promise.reduce;
	var PromiseAll = Promise.all;

	function promiseAllThis() {
	    return PromiseAll(this);
	}

	function PromiseMapSeries(promises, fn) {
	    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
	}

	Promise.prototype.each = function (fn) {
	    return PromiseReduce(this, fn, INTERNAL, 0)
	              ._then(promiseAllThis, undefined, undefined, this, undefined);
	};

	Promise.prototype.mapSeries = function (fn) {
	    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
	};

	Promise.each = function (promises, fn) {
	    return PromiseReduce(promises, fn, INTERNAL, 0)
	              ._then(promiseAllThis, undefined, undefined, promises, undefined);
	};

	Promise.mapSeries = PromiseMapSeries;
	};


	},{}],12:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5");
	var Objectfreeze = es5.freeze;
	var util = _dereq_("./util");
	var inherits = util.inherits;
	var notEnumerableProp = util.notEnumerableProp;

	function subError(nameProperty, defaultMessage) {
	    function SubError(message) {
	        if (!(this instanceof SubError)) return new SubError(message);
	        notEnumerableProp(this, "message",
	            typeof message === "string" ? message : defaultMessage);
	        notEnumerableProp(this, "name", nameProperty);
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            Error.call(this);
	        }
	    }
	    inherits(SubError, Error);
	    return SubError;
	}

	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
	    _TypeError = TypeError;
	    _RangeError = RangeError;
	} catch(e) {
	    _TypeError = subError("TypeError", "type error");
	    _RangeError = subError("RangeError", "range error");
	}

	var methods = ("join pop push shift unshift slice filter forEach some " +
	    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

	for (var i = 0; i < methods.length; ++i) {
	    if (typeof Array.prototype[methods[i]] === "function") {
	        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	    }
	}

	es5.defineProperty(AggregateError.prototype, "length", {
	    value: 0,
	    configurable: false,
	    writable: true,
	    enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function() {
	    var indent = Array(level * 4 + 1).join(" ");
	    var ret = "\n" + indent + "AggregateError of:" + "\n";
	    level++;
	    indent = Array(level * 4 + 1).join(" ");
	    for (var i = 0; i < this.length; ++i) {
	        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	        var lines = str.split("\n");
	        for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	        }
	        str = lines.join("\n");
	        ret += str + "\n";
	    }
	    level--;
	    return ret;
	};

	function OperationalError(message) {
	    if (!(this instanceof OperationalError))
	        return new OperationalError(message);
	    notEnumerableProp(this, "name", "OperationalError");
	    notEnumerableProp(this, "message", message);
	    this.cause = message;
	    this["isOperational"] = true;

	    if (message instanceof Error) {
	        notEnumerableProp(this, "message", message.message);
	        notEnumerableProp(this, "stack", message.stack);
	    } else if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, this.constructor);
	    }

	}
	inherits(OperationalError, Error);

	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
	    errorTypes = Objectfreeze({
	        CancellationError: CancellationError,
	        TimeoutError: TimeoutError,
	        OperationalError: OperationalError,
	        RejectionError: OperationalError,
	        AggregateError: AggregateError
	    });
	    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
	        value: errorTypes,
	        writable: false,
	        enumerable: false,
	        configurable: false
	    });
	}

	module.exports = {
	    Error: Error,
	    TypeError: _TypeError,
	    RangeError: _RangeError,
	    CancellationError: errorTypes.CancellationError,
	    OperationalError: errorTypes.OperationalError,
	    TimeoutError: errorTypes.TimeoutError,
	    AggregateError: errorTypes.AggregateError,
	    Warning: Warning
	};

	},{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
	var isES5 = (function(){
	    "use strict";
	    return this === undefined;
	})();

	if (isES5) {
	    module.exports = {
	        freeze: Object.freeze,
	        defineProperty: Object.defineProperty,
	        getDescriptor: Object.getOwnPropertyDescriptor,
	        keys: Object.keys,
	        names: Object.getOwnPropertyNames,
	        getPrototypeOf: Object.getPrototypeOf,
	        isArray: Array.isArray,
	        isES5: isES5,
	        propertyIsWritable: function(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	        }
	    };
	} else {
	    var has = {}.hasOwnProperty;
	    var str = {}.toString;
	    var proto = {}.constructor.prototype;

	    var ObjectKeys = function (o) {
	        var ret = [];
	        for (var key in o) {
	            if (has.call(o, key)) {
	                ret.push(key);
	            }
	        }
	        return ret;
	    };

	    var ObjectGetDescriptor = function(o, key) {
	        return {value: o[key]};
	    };

	    var ObjectDefineProperty = function (o, key, desc) {
	        o[key] = desc.value;
	        return o;
	    };

	    var ObjectFreeze = function (obj) {
	        return obj;
	    };

	    var ObjectGetPrototypeOf = function (obj) {
	        try {
	            return Object(obj).constructor.prototype;
	        }
	        catch (e) {
	            return proto;
	        }
	    };

	    var ArrayIsArray = function (obj) {
	        try {
	            return str.call(obj) === "[object Array]";
	        }
	        catch(e) {
	            return false;
	        }
	    };

	    module.exports = {
	        isArray: ArrayIsArray,
	        keys: ObjectKeys,
	        names: ObjectKeys,
	        defineProperty: ObjectDefineProperty,
	        getDescriptor: ObjectGetDescriptor,
	        freeze: ObjectFreeze,
	        getPrototypeOf: ObjectGetPrototypeOf,
	        isES5: isES5,
	        propertyIsWritable: function() {
	            return true;
	        }
	    };
	}

	},{}],14:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseMap = Promise.map;

	Promise.prototype.filter = function (fn, options) {
	    return PromiseMap(this, fn, options, INTERNAL);
	};

	Promise.filter = function (promises, fn, options) {
	    return PromiseMap(promises, fn, options, INTERNAL);
	};
	};

	},{}],15:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, tryConvertToPromise) {
	var util = _dereq_("./util");
	var CancellationError = Promise.CancellationError;
	var errorObj = util.errorObj;

	function PassThroughHandlerContext(promise, type, handler) {
	    this.promise = promise;
	    this.type = type;
	    this.handler = handler;
	    this.called = false;
	    this.cancelPromise = null;
	}

	PassThroughHandlerContext.prototype.isFinallyHandler = function() {
	    return this.type === 0;
	};

	function FinallyHandlerCancelReaction(finallyHandler) {
	    this.finallyHandler = finallyHandler;
	}

	FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
	    checkCancel(this.finallyHandler);
	};

	function checkCancel(ctx, reason) {
	    if (ctx.cancelPromise != null) {
	        if (arguments.length > 1) {
	            ctx.cancelPromise._reject(reason);
	        } else {
	            ctx.cancelPromise._cancel();
	        }
	        ctx.cancelPromise = null;
	        return true;
	    }
	    return false;
	}

	function succeed() {
	    return finallyHandler.call(this, this.promise._target()._settledValue());
	}
	function fail(reason) {
	    if (checkCancel(this, reason)) return;
	    errorObj.e = reason;
	    return errorObj;
	}
	function finallyHandler(reasonOrValue) {
	    var promise = this.promise;
	    var handler = this.handler;

	    if (!this.called) {
	        this.called = true;
	        var ret = this.isFinallyHandler()
	            ? handler.call(promise._boundValue())
	            : handler.call(promise._boundValue(), reasonOrValue);
	        if (ret !== undefined) {
	            promise._setReturnedNonUndefined();
	            var maybePromise = tryConvertToPromise(ret, promise);
	            if (maybePromise instanceof Promise) {
	                if (this.cancelPromise != null) {
	                    if (maybePromise._isCancelled()) {
	                        var reason =
	                            new CancellationError("late cancellation observer");
	                        promise._attachExtraTrace(reason);
	                        errorObj.e = reason;
	                        return errorObj;
	                    } else if (maybePromise.isPending()) {
	                        maybePromise._attachCancellationCallback(
	                            new FinallyHandlerCancelReaction(this));
	                    }
	                }
	                return maybePromise._then(
	                    succeed, fail, undefined, this, undefined);
	            }
	        }
	    }

	    if (promise.isRejected()) {
	        checkCancel(this);
	        errorObj.e = reasonOrValue;
	        return errorObj;
	    } else {
	        checkCancel(this);
	        return reasonOrValue;
	    }
	}

	Promise.prototype._passThrough = function(handler, type, success, fail) {
	    if (typeof handler !== "function") return this.then();
	    return this._then(success,
	                      fail,
	                      undefined,
	                      new PassThroughHandlerContext(this, type, handler),
	                      undefined);
	};

	Promise.prototype.lastly =
	Promise.prototype["finally"] = function (handler) {
	    return this._passThrough(handler,
	                             0,
	                             finallyHandler,
	                             finallyHandler);
	};

	Promise.prototype.tap = function (handler) {
	    return this._passThrough(handler, 1, finallyHandler);
	};

	return PassThroughHandlerContext;
	};

	},{"./util":36}],16:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          apiRejection,
	                          INTERNAL,
	                          tryConvertToPromise,
	                          Proxyable,
	                          debug) {
	var errors = _dereq_("./errors");
	var TypeError = errors.TypeError;
	var util = _dereq_("./util");
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	var yieldHandlers = [];

	function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	    for (var i = 0; i < yieldHandlers.length; ++i) {
	        traceParent._pushContext();
	        var result = tryCatch(yieldHandlers[i])(value);
	        traceParent._popContext();
	        if (result === errorObj) {
	            traceParent._pushContext();
	            var ret = Promise.reject(errorObj.e);
	            traceParent._popContext();
	            return ret;
	        }
	        var maybePromise = tryConvertToPromise(result, traceParent);
	        if (maybePromise instanceof Promise) return maybePromise;
	    }
	    return null;
	}

	function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	    if (debug.cancellation()) {
	        var internal = new Promise(INTERNAL);
	        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
	        this._promise = internal.lastly(function() {
	            return _finallyPromise;
	        });
	        internal._captureStackTrace();
	        internal._setOnCancel(this);
	    } else {
	        var promise = this._promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	    }
	    this._stack = stack;
	    this._generatorFunction = generatorFunction;
	    this._receiver = receiver;
	    this._generator = undefined;
	    this._yieldHandlers = typeof yieldHandler === "function"
	        ? [yieldHandler].concat(yieldHandlers)
	        : yieldHandlers;
	    this._yieldedPromise = null;
	    this._cancellationPhase = false;
	}
	util.inherits(PromiseSpawn, Proxyable);

	PromiseSpawn.prototype._isResolved = function() {
	    return this._promise === null;
	};

	PromiseSpawn.prototype._cleanup = function() {
	    this._promise = this._generator = null;
	    if (debug.cancellation() && this._finallyPromise !== null) {
	        this._finallyPromise._fulfill();
	        this._finallyPromise = null;
	    }
	};

	PromiseSpawn.prototype._promiseCancelled = function() {
	    if (this._isResolved()) return;
	    var implementsReturn = typeof this._generator["return"] !== "undefined";

	    var result;
	    if (!implementsReturn) {
	        var reason = new Promise.CancellationError(
	            "generator .return() sentinel");
	        Promise.coroutine.returnSentinel = reason;
	        this._promise._attachExtraTrace(reason);
	        this._promise._pushContext();
	        result = tryCatch(this._generator["throw"]).call(this._generator,
	                                                         reason);
	        this._promise._popContext();
	    } else {
	        this._promise._pushContext();
	        result = tryCatch(this._generator["return"]).call(this._generator,
	                                                          undefined);
	        this._promise._popContext();
	    }
	    this._cancellationPhase = true;
	    this._yieldedPromise = null;
	    this._continue(result);
	};

	PromiseSpawn.prototype._promiseFulfilled = function(value) {
	    this._yieldedPromise = null;
	    this._promise._pushContext();
	    var result = tryCatch(this._generator.next).call(this._generator, value);
	    this._promise._popContext();
	    this._continue(result);
	};

	PromiseSpawn.prototype._promiseRejected = function(reason) {
	    this._yieldedPromise = null;
	    this._promise._attachExtraTrace(reason);
	    this._promise._pushContext();
	    var result = tryCatch(this._generator["throw"])
	        .call(this._generator, reason);
	    this._promise._popContext();
	    this._continue(result);
	};

	PromiseSpawn.prototype._resultCancelled = function() {
	    if (this._yieldedPromise instanceof Promise) {
	        var promise = this._yieldedPromise;
	        this._yieldedPromise = null;
	        promise.cancel();
	    }
	};

	PromiseSpawn.prototype.promise = function () {
	    return this._promise;
	};

	PromiseSpawn.prototype._run = function () {
	    this._generator = this._generatorFunction.call(this._receiver);
	    this._receiver =
	        this._generatorFunction = undefined;
	    this._promiseFulfilled(undefined);
	};

	PromiseSpawn.prototype._continue = function (result) {
	    var promise = this._promise;
	    if (result === errorObj) {
	        this._cleanup();
	        if (this._cancellationPhase) {
	            return promise.cancel();
	        } else {
	            return promise._rejectCallback(result.e, false);
	        }
	    }

	    var value = result.value;
	    if (result.done === true) {
	        this._cleanup();
	        if (this._cancellationPhase) {
	            return promise.cancel();
	        } else {
	            return promise._resolveCallback(value);
	        }
	    } else {
	        var maybePromise = tryConvertToPromise(value, this._promise);
	        if (!(maybePromise instanceof Promise)) {
	            maybePromise =
	                promiseFromYieldHandler(maybePromise,
	                                        this._yieldHandlers,
	                                        this._promise);
	            if (maybePromise === null) {
	                this._promiseRejected(
	                    new TypeError(
	                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
	                        "From coroutine:\u000a" +
	                        this._stack.split("\n").slice(1, -7).join("\n")
	                    )
	                );
	                return;
	            }
	        }
	        maybePromise = maybePromise._target();
	        var bitField = maybePromise._bitField;
	        ;
	        if (((bitField & 50397184) === 0)) {
	            this._yieldedPromise = maybePromise;
	            maybePromise._proxy(this, null);
	        } else if (((bitField & 33554432) !== 0)) {
	            Promise._async.invoke(
	                this._promiseFulfilled, this, maybePromise._value()
	            );
	        } else if (((bitField & 16777216) !== 0)) {
	            Promise._async.invoke(
	                this._promiseRejected, this, maybePromise._reason()
	            );
	        } else {
	            this._promiseCancelled();
	        }
	    }
	};

	Promise.coroutine = function (generatorFunction, options) {
	    if (typeof generatorFunction !== "function") {
	        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var yieldHandler = Object(options).yieldHandler;
	    var PromiseSpawn$ = PromiseSpawn;
	    var stack = new Error().stack;
	    return function () {
	        var generator = generatorFunction.apply(this, arguments);
	        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
	                                      stack);
	        var ret = spawn.promise();
	        spawn._generator = generator;
	        spawn._promiseFulfilled(undefined);
	        return ret;
	    };
	};

	Promise.coroutine.addYieldHandler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    yieldHandlers.push(fn);
	};

	Promise.spawn = function (generatorFunction) {
	    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
	    if (typeof generatorFunction !== "function") {
	        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var spawn = new PromiseSpawn(generatorFunction, this);
	    var ret = spawn.promise();
	    spawn._run(Promise.spawn);
	    return ret;
	};
	};

	},{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
	         getDomain) {
	var util = _dereq_("./util");
	var canEvaluate = util.canEvaluate;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var reject;

	if (false) {
	if (canEvaluate) {
	    var thenCallback = function(i) {
	        return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	    };

	    var promiseSetter = function(i) {
	        return new Function("promise", "holder", "                           \n\
	            'use strict';                                                    \n\
	            holder.pIndex = promise;                                         \n\
	            ".replace(/Index/g, i));
	    };

	    var generateHolderClass = function(total) {
	        var props = new Array(total);
	        for (var i = 0; i < props.length; ++i) {
	            props[i] = "this.p" + (i+1);
	        }
	        var assignment = props.join(" = ") + " = null;";
	        var cancellationCode= "var promise;\n" + props.map(function(prop) {
	            return "                                                         \n\
	                promise = " + prop + ";                                      \n\
	                if (promise instanceof Promise) {                            \n\
	                    promise.cancel();                                        \n\
	                }                                                            \n\
	            ";
	        }).join("\n");
	        var passedArguments = props.join(", ");
	        var name = "Holder$" + total;


	        var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
	            'use strict';                                                    \n\
	            function [TheName](fn) {                                         \n\
	                [TheProperties]                                              \n\
	                this.fn = fn;                                                \n\
	                this.asyncNeeded = true;                                     \n\
	                this.now = 0;                                                \n\
	            }                                                                \n\
	                                                                             \n\
	            [TheName].prototype._callFunction = function(promise) {          \n\
	                promise._pushContext();                                      \n\
	                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
	                promise._popContext();                                       \n\
	                if (ret === errorObj) {                                      \n\
	                    promise._rejectCallback(ret.e, false);                   \n\
	                } else {                                                     \n\
	                    promise._resolveCallback(ret);                           \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype.checkFulfillment = function(promise) {       \n\
	                var now = ++this.now;                                        \n\
	                if (now === [TheTotal]) {                                    \n\
	                    if (this.asyncNeeded) {                                  \n\
	                        async.invoke(this._callFunction, this, promise);     \n\
	                    } else {                                                 \n\
	                        this._callFunction(promise);                         \n\
	                    }                                                        \n\
	                                                                             \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype._resultCancelled = function() {              \n\
	                [CancellationCode]                                           \n\
	            };                                                               \n\
	                                                                             \n\
	            return [TheName];                                                \n\
	        }(tryCatch, errorObj, Promise, async);                               \n\
	        ";

	        code = code.replace(/\[TheName\]/g, name)
	            .replace(/\[TheTotal\]/g, total)
	            .replace(/\[ThePassedArguments\]/g, passedArguments)
	            .replace(/\[TheProperties\]/g, assignment)
	            .replace(/\[CancellationCode\]/g, cancellationCode);

	        return new Function("tryCatch", "errorObj", "Promise", "async", code)
	                           (tryCatch, errorObj, Promise, async);
	    };

	    var holderClasses = [];
	    var thenCallbacks = [];
	    var promiseSetters = [];

	    for (var i = 0; i < 8; ++i) {
	        holderClasses.push(generateHolderClass(i + 1));
	        thenCallbacks.push(thenCallback(i + 1));
	        promiseSetters.push(promiseSetter(i + 1));
	    }

	    reject = function (reason) {
	        this._reject(reason);
	    };
	}}

	Promise.join = function () {
	    var last = arguments.length - 1;
	    var fn;
	    if (last > 0 && typeof arguments[last] === "function") {
	        fn = arguments[last];
	        if (false) {
	            if (last <= 8 && canEvaluate) {
	                var ret = new Promise(INTERNAL);
	                ret._captureStackTrace();
	                var HolderClass = holderClasses[last - 1];
	                var holder = new HolderClass(fn);
	                var callbacks = thenCallbacks;

	                for (var i = 0; i < last; ++i) {
	                    var maybePromise = tryConvertToPromise(arguments[i], ret);
	                    if (maybePromise instanceof Promise) {
	                        maybePromise = maybePromise._target();
	                        var bitField = maybePromise._bitField;
	                        ;
	                        if (((bitField & 50397184) === 0)) {
	                            maybePromise._then(callbacks[i], reject,
	                                               undefined, ret, holder);
	                            promiseSetters[i](maybePromise, holder);
	                            holder.asyncNeeded = false;
	                        } else if (((bitField & 33554432) !== 0)) {
	                            callbacks[i].call(ret,
	                                              maybePromise._value(), holder);
	                        } else if (((bitField & 16777216) !== 0)) {
	                            ret._reject(maybePromise._reason());
	                        } else {
	                            ret._cancel();
	                        }
	                    } else {
	                        callbacks[i].call(ret, maybePromise, holder);
	                    }
	                }

	                if (!ret._isFateSealed()) {
	                    if (holder.asyncNeeded) {
	                        var domain = getDomain();
	                        if (domain !== null) {
	                            holder.fn = util.domainBind(domain, holder.fn);
	                        }
	                    }
	                    ret._setAsyncGuaranteed();
	                    ret._setOnCancel(holder);
	                }
	                return ret;
	            }
	        }
	    }
	    var args = [].slice.call(arguments);;
	    if (fn) args.pop();
	    var ret = new PromiseArray(args).promise();
	    return fn !== undefined ? ret.spread(fn) : ret;
	};

	};

	},{"./util":36}],18:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var async = Promise._async;

	function MappingPromiseArray(promises, fn, limit, _filter) {
	    this.constructor$(promises);
	    this._promise._captureStackTrace();
	    var domain = getDomain();
	    this._callback = domain === null ? fn : util.domainBind(domain, fn);
	    this._preservedValues = _filter === INTERNAL
	        ? new Array(this.length())
	        : null;
	    this._limit = limit;
	    this._inFlight = 0;
	    this._queue = [];
	    async.invoke(this._asyncInit, this, undefined);
	}
	util.inherits(MappingPromiseArray, PromiseArray);

	MappingPromiseArray.prototype._asyncInit = function() {
	    this._init$(undefined, -2);
	};

	MappingPromiseArray.prototype._init = function () {};

	MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var values = this._values;
	    var length = this.length();
	    var preservedValues = this._preservedValues;
	    var limit = this._limit;

	    if (index < 0) {
	        index = (index * -1) - 1;
	        values[index] = value;
	        if (limit >= 1) {
	            this._inFlight--;
	            this._drainQueue();
	            if (this._isResolved()) return true;
	        }
	    } else {
	        if (limit >= 1 && this._inFlight >= limit) {
	            values[index] = value;
	            this._queue.push(index);
	            return false;
	        }
	        if (preservedValues !== null) preservedValues[index] = value;

	        var promise = this._promise;
	        var callback = this._callback;
	        var receiver = promise._boundValue();
	        promise._pushContext();
	        var ret = tryCatch(callback).call(receiver, value, index, length);
	        var promiseCreated = promise._popContext();
	        debug.checkForgottenReturns(
	            ret,
	            promiseCreated,
	            preservedValues !== null ? "Promise.filter" : "Promise.map",
	            promise
	        );
	        if (ret === errorObj) {
	            this._reject(ret.e);
	            return true;
	        }

	        var maybePromise = tryConvertToPromise(ret, this._promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            var bitField = maybePromise._bitField;
	            ;
	            if (((bitField & 50397184) === 0)) {
	                if (limit >= 1) this._inFlight++;
	                values[index] = maybePromise;
	                maybePromise._proxy(this, (index + 1) * -1);
	                return false;
	            } else if (((bitField & 33554432) !== 0)) {
	                ret = maybePromise._value();
	            } else if (((bitField & 16777216) !== 0)) {
	                this._reject(maybePromise._reason());
	                return true;
	            } else {
	                this._cancel();
	                return true;
	            }
	        }
	        values[index] = ret;
	    }
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= length) {
	        if (preservedValues !== null) {
	            this._filter(values, preservedValues);
	        } else {
	            this._resolve(values);
	        }
	        return true;
	    }
	    return false;
	};

	MappingPromiseArray.prototype._drainQueue = function () {
	    var queue = this._queue;
	    var limit = this._limit;
	    var values = this._values;
	    while (queue.length > 0 && this._inFlight < limit) {
	        if (this._isResolved()) return;
	        var index = queue.pop();
	        this._promiseFulfilled(values[index], index);
	    }
	};

	MappingPromiseArray.prototype._filter = function (booleans, values) {
	    var len = values.length;
	    var ret = new Array(len);
	    var j = 0;
	    for (var i = 0; i < len; ++i) {
	        if (booleans[i]) ret[j++] = values[i];
	    }
	    ret.length = j;
	    this._resolve(ret);
	};

	MappingPromiseArray.prototype.preservedValues = function () {
	    return this._preservedValues;
	};

	function map(promises, fn, options, _filter) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }

	    var limit = 0;
	    if (options !== undefined) {
	        if (typeof options === "object" && options !== null) {
	            if (typeof options.concurrency !== "number") {
	                return Promise.reject(
	                    new TypeError("'concurrency' must be a number but it is " +
	                                    util.classString(options.concurrency)));
	            }
	            limit = options.concurrency;
	        } else {
	            return Promise.reject(new TypeError(
	                            "options argument must be an object but it is " +
	                             util.classString(options)));
	        }
	    }
	    limit = typeof limit === "number" &&
	        isFinite(limit) && limit >= 1 ? limit : 0;
	    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
	}

	Promise.prototype.map = function (fn, options) {
	    return map(this, fn, options, null);
	};

	Promise.map = function (promises, fn, options, _filter) {
	    return map(promises, fn, options, _filter);
	};


	};

	},{"./util":36}],19:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;

	Promise.method = function (fn) {
	    if (typeof fn !== "function") {
	        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
	    }
	    return function () {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._pushContext();
	        var value = tryCatch(fn).apply(this, arguments);
	        var promiseCreated = ret._popContext();
	        debug.checkForgottenReturns(
	            value, promiseCreated, "Promise.method", ret);
	        ret._resolveFromSyncValue(value);
	        return ret;
	    };
	};

	Promise.attempt = Promise["try"] = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._pushContext();
	    var value;
	    if (arguments.length > 1) {
	        debug.deprecated("calling Promise.try with more than 1 argument");
	        var arg = arguments[1];
	        var ctx = arguments[2];
	        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
	                                  : tryCatch(fn).call(ctx, arg);
	    } else {
	        value = tryCatch(fn)();
	    }
	    var promiseCreated = ret._popContext();
	    debug.checkForgottenReturns(
	        value, promiseCreated, "Promise.try", ret);
	    ret._resolveFromSyncValue(value);
	    return ret;
	};

	Promise.prototype._resolveFromSyncValue = function (value) {
	    if (value === util.errorObj) {
	        this._rejectCallback(value.e, false);
	    } else {
	        this._resolveCallback(value, true);
	    }
	};
	};

	},{"./util":36}],20:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util");
	var maybeWrapAsError = util.maybeWrapAsError;
	var errors = _dereq_("./errors");
	var OperationalError = errors.OperationalError;
	var es5 = _dereq_("./es5");

	function isUntypedError(obj) {
	    return obj instanceof Error &&
	        es5.getPrototypeOf(obj) === Error.prototype;
	}

	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
	    var ret;
	    if (isUntypedError(obj)) {
	        ret = new OperationalError(obj);
	        ret.name = obj.name;
	        ret.message = obj.message;
	        ret.stack = obj.stack;
	        var keys = es5.keys(obj);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    util.markAsOriginatingFromRejection(obj);
	    return obj;
	}

	function nodebackForPromise(promise, multiArgs) {
	    return function(err, value) {
	        if (promise === null) return;
	        if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	        } else if (!multiArgs) {
	            promise._fulfill(value);
	        } else {
	            var args = [].slice.call(arguments, 1);;
	            promise._fulfill(args);
	        }
	        promise = null;
	    };
	}

	module.exports = nodebackForPromise;

	},{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var util = _dereq_("./util");
	var async = Promise._async;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	function spreadAdapter(val, nodeback) {
	    var promise = this;
	    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
	    var ret =
	        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	function successAdapter(val, nodeback) {
	    var promise = this;
	    var receiver = promise._boundValue();
	    var ret = val === undefined
	        ? tryCatch(nodeback).call(receiver, null)
	        : tryCatch(nodeback).call(receiver, null, val);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	function errorAdapter(reason, nodeback) {
	    var promise = this;
	    if (!reason) {
	        var newReason = new Error(reason + "");
	        newReason.cause = reason;
	        reason = newReason;
	    }
	    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
	                                                                     options) {
	    if (typeof nodeback == "function") {
	        var adapter = successAdapter;
	        if (options !== undefined && Object(options).spread) {
	            adapter = spreadAdapter;
	        }
	        this._then(
	            adapter,
	            errorAdapter,
	            undefined,
	            this,
	            nodeback
	        );
	    }
	    return this;
	};
	};

	},{"./util":36}],22:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function() {
	var makeSelfResolutionError = function () {
	    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	var reflectHandler = function() {
	    return new Promise.PromiseInspection(this._target());
	};
	var apiRejection = function(msg) {
	    return Promise.reject(new TypeError(msg));
	};
	function Proxyable() {}
	var UNDEFINED_BINDING = {};
	var util = _dereq_("./util");

	var getDomain;
	if (util.isNode) {
	    getDomain = function() {
	        var ret = process.domain;
	        if (ret === undefined) ret = null;
	        return ret;
	    };
	} else {
	    getDomain = function() {
	        return null;
	    };
	}
	util.notEnumerableProp(Promise, "_getDomain", getDomain);

	var es5 = _dereq_("./es5");
	var Async = _dereq_("./async");
	var async = new Async();
	es5.defineProperty(Promise, "_async", {value: async});
	var errors = _dereq_("./errors");
	var TypeError = Promise.TypeError = errors.TypeError;
	Promise.RangeError = errors.RangeError;
	var CancellationError = Promise.CancellationError = errors.CancellationError;
	Promise.TimeoutError = errors.TimeoutError;
	Promise.OperationalError = errors.OperationalError;
	Promise.RejectionError = errors.OperationalError;
	Promise.AggregateError = errors.AggregateError;
	var INTERNAL = function(){};
	var APPLY = {};
	var NEXT_FILTER = {};
	var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
	var PromiseArray =
	    _dereq_("./promise_array")(Promise, INTERNAL,
	                               tryConvertToPromise, apiRejection, Proxyable);
	var Context = _dereq_("./context")(Promise);
	 /*jshint unused:false*/
	var createContext = Context.create;
	var debug = _dereq_("./debuggability")(Promise, Context);
	var CapturedTrace = debug.CapturedTrace;
	var PassThroughHandlerContext =
	    _dereq_("./finally")(Promise, tryConvertToPromise);
	var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
	var nodebackForPromise = _dereq_("./nodeback");
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	function check(self, executor) {
	    if (typeof executor !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(executor));
	    }
	    if (self.constructor !== Promise) {
	        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	}

	function Promise(executor) {
	    this._bitField = 0;
	    this._fulfillmentHandler0 = undefined;
	    this._rejectionHandler0 = undefined;
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    if (executor !== INTERNAL) {
	        check(this, executor);
	        this._resolveFromExecutor(executor);
	    }
	    this._promiseCreated();
	    this._fireEvent("promiseCreated", this);
	}

	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};

	Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	    var len = arguments.length;
	    if (len > 1) {
	        var catchInstances = new Array(len - 1),
	            j = 0, i;
	        for (i = 0; i < len - 1; ++i) {
	            var item = arguments[i];
	            if (util.isObject(item)) {
	                catchInstances[j++] = item;
	            } else {
	                return apiRejection("expecting an object but got " +
	                    "A catch statement predicate " + util.classString(item));
	            }
	        }
	        catchInstances.length = j;
	        fn = arguments[i];
	        return this.then(undefined, catchFilter(catchInstances, fn, this));
	    }
	    return this.then(undefined, fn);
	};

	Promise.prototype.reflect = function () {
	    return this._then(reflectHandler,
	        reflectHandler, undefined, this, undefined);
	};

	Promise.prototype.then = function (didFulfill, didReject) {
	    if (debug.warnings() && arguments.length > 0 &&
	        typeof didFulfill !== "function" &&
	        typeof didReject !== "function") {
	        var msg = ".then() only accepts functions but was passed: " +
	                util.classString(didFulfill);
	        if (arguments.length > 1) {
	            msg += ", " + util.classString(didReject);
	        }
	        this._warn(msg);
	    }
	    return this._then(didFulfill, didReject, undefined, undefined, undefined);
	};

	Promise.prototype.done = function (didFulfill, didReject) {
	    var promise =
	        this._then(didFulfill, didReject, undefined, undefined, undefined);
	    promise._setIsFinal();
	};

	Promise.prototype.spread = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
	};

	Promise.prototype.toJSON = function () {
	    var ret = {
	        isFulfilled: false,
	        isRejected: false,
	        fulfillmentValue: undefined,
	        rejectionReason: undefined
	    };
	    if (this.isFulfilled()) {
	        ret.fulfillmentValue = this.value();
	        ret.isFulfilled = true;
	    } else if (this.isRejected()) {
	        ret.rejectionReason = this.reason();
	        ret.isRejected = true;
	    }
	    return ret;
	};

	Promise.prototype.all = function () {
	    if (arguments.length > 0) {
	        this._warn(".all() was passed arguments but it does not take any");
	    }
	    return new PromiseArray(this).promise();
	};

	Promise.prototype.error = function (fn) {
	    return this.caught(util.originatesFromRejection, fn);
	};

	Promise.getNewLibraryCopy = module.exports;

	Promise.is = function (val) {
	    return val instanceof Promise;
	};

	Promise.fromNode = Promise.fromCallback = function(fn) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
	                                         : false;
	    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
	    if (result === errorObj) {
	        ret._rejectCallback(result.e, true);
	    }
	    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
	    return ret;
	};

	Promise.all = function (promises) {
	    return new PromiseArray(promises).promise();
	};

	Promise.cast = function (obj) {
	    var ret = tryConvertToPromise(obj);
	    if (!(ret instanceof Promise)) {
	        ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._setFulfilled();
	        ret._rejectionHandler0 = obj;
	    }
	    return ret;
	};

	Promise.resolve = Promise.fulfilled = Promise.cast;

	Promise.reject = Promise.rejected = function (reason) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._rejectCallback(reason, true);
	    return ret;
	};

	Promise.setScheduler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    return async.setScheduler(fn);
	};

	Promise.prototype._then = function (
	    didFulfill,
	    didReject,
	    _,    receiver,
	    internalData
	) {
	    var haveInternalData = internalData !== undefined;
	    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
	    var target = this._target();
	    var bitField = target._bitField;

	    if (!haveInternalData) {
	        promise._propagateFrom(this, 3);
	        promise._captureStackTrace();
	        if (receiver === undefined &&
	            ((this._bitField & 2097152) !== 0)) {
	            if (!((bitField & 50397184) === 0)) {
	                receiver = this._boundValue();
	            } else {
	                receiver = target === this ? undefined : this._boundTo;
	            }
	        }
	        this._fireEvent("promiseChained", this, promise);
	    }

	    var domain = getDomain();
	    if (!((bitField & 50397184) === 0)) {
	        var handler, value, settler = target._settlePromiseCtx;
	        if (((bitField & 33554432) !== 0)) {
	            value = target._rejectionHandler0;
	            handler = didFulfill;
	        } else if (((bitField & 16777216) !== 0)) {
	            value = target._fulfillmentHandler0;
	            handler = didReject;
	            target._unsetRejectionIsUnhandled();
	        } else {
	            settler = target._settlePromiseLateCancellationObserver;
	            value = new CancellationError("late cancellation observer");
	            target._attachExtraTrace(value);
	            handler = didReject;
	        }

	        async.invoke(settler, target, {
	            handler: domain === null ? handler
	                : (typeof handler === "function" &&
	                    util.domainBind(domain, handler)),
	            promise: promise,
	            receiver: receiver,
	            value: value
	        });
	    } else {
	        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
	    }

	    return promise;
	};

	Promise.prototype._length = function () {
	    return this._bitField & 65535;
	};

	Promise.prototype._isFateSealed = function () {
	    return (this._bitField & 117506048) !== 0;
	};

	Promise.prototype._isFollowing = function () {
	    return (this._bitField & 67108864) === 67108864;
	};

	Promise.prototype._setLength = function (len) {
	    this._bitField = (this._bitField & -65536) |
	        (len & 65535);
	};

	Promise.prototype._setFulfilled = function () {
	    this._bitField = this._bitField | 33554432;
	    this._fireEvent("promiseFulfilled", this);
	};

	Promise.prototype._setRejected = function () {
	    this._bitField = this._bitField | 16777216;
	    this._fireEvent("promiseRejected", this);
	};

	Promise.prototype._setFollowing = function () {
	    this._bitField = this._bitField | 67108864;
	    this._fireEvent("promiseResolved", this);
	};

	Promise.prototype._setIsFinal = function () {
	    this._bitField = this._bitField | 4194304;
	};

	Promise.prototype._isFinal = function () {
	    return (this._bitField & 4194304) > 0;
	};

	Promise.prototype._unsetCancelled = function() {
	    this._bitField = this._bitField & (~65536);
	};

	Promise.prototype._setCancelled = function() {
	    this._bitField = this._bitField | 65536;
	    this._fireEvent("promiseCancelled", this);
	};

	Promise.prototype._setWillBeCancelled = function() {
	    this._bitField = this._bitField | 8388608;
	};

	Promise.prototype._setAsyncGuaranteed = function() {
	    if (async.hasCustomScheduler()) return;
	    this._bitField = this._bitField | 134217728;
	};

	Promise.prototype._receiverAt = function (index) {
	    var ret = index === 0 ? this._receiver0 : this[
	            index * 4 - 4 + 3];
	    if (ret === UNDEFINED_BINDING) {
	        return undefined;
	    } else if (ret === undefined && this._isBound()) {
	        return this._boundValue();
	    }
	    return ret;
	};

	Promise.prototype._promiseAt = function (index) {
	    return this[
	            index * 4 - 4 + 2];
	};

	Promise.prototype._fulfillmentHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 0];
	};

	Promise.prototype._rejectionHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 1];
	};

	Promise.prototype._boundValue = function() {};

	Promise.prototype._migrateCallback0 = function (follower) {
	    var bitField = follower._bitField;
	    var fulfill = follower._fulfillmentHandler0;
	    var reject = follower._rejectionHandler0;
	    var promise = follower._promise0;
	    var receiver = follower._receiverAt(0);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};

	Promise.prototype._migrateCallbackAt = function (follower, index) {
	    var fulfill = follower._fulfillmentHandlerAt(index);
	    var reject = follower._rejectionHandlerAt(index);
	    var promise = follower._promiseAt(index);
	    var receiver = follower._receiverAt(index);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};

	Promise.prototype._addCallbacks = function (
	    fulfill,
	    reject,
	    promise,
	    receiver,
	    domain
	) {
	    var index = this._length();

	    if (index >= 65535 - 4) {
	        index = 0;
	        this._setLength(0);
	    }

	    if (index === 0) {
	        this._promise0 = promise;
	        this._receiver0 = receiver;
	        if (typeof fulfill === "function") {
	            this._fulfillmentHandler0 =
	                domain === null ? fulfill : util.domainBind(domain, fulfill);
	        }
	        if (typeof reject === "function") {
	            this._rejectionHandler0 =
	                domain === null ? reject : util.domainBind(domain, reject);
	        }
	    } else {
	        var base = index * 4 - 4;
	        this[base + 2] = promise;
	        this[base + 3] = receiver;
	        if (typeof fulfill === "function") {
	            this[base + 0] =
	                domain === null ? fulfill : util.domainBind(domain, fulfill);
	        }
	        if (typeof reject === "function") {
	            this[base + 1] =
	                domain === null ? reject : util.domainBind(domain, reject);
	        }
	    }
	    this._setLength(index + 1);
	    return index;
	};

	Promise.prototype._proxy = function (proxyable, arg) {
	    this._addCallbacks(undefined, undefined, arg, proxyable, null);
	};

	Promise.prototype._resolveCallback = function(value, shouldBind) {
	    if (((this._bitField & 117506048) !== 0)) return;
	    if (value === this)
	        return this._rejectCallback(makeSelfResolutionError(), false);
	    var maybePromise = tryConvertToPromise(value, this);
	    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

	    if (shouldBind) this._propagateFrom(maybePromise, 2);

	    var promise = maybePromise._target();

	    if (promise === this) {
	        this._reject(makeSelfResolutionError());
	        return;
	    }

	    var bitField = promise._bitField;
	    if (((bitField & 50397184) === 0)) {
	        var len = this._length();
	        if (len > 0) promise._migrateCallback0(this);
	        for (var i = 1; i < len; ++i) {
	            promise._migrateCallbackAt(this, i);
	        }
	        this._setFollowing();
	        this._setLength(0);
	        this._setFollowee(promise);
	    } else if (((bitField & 33554432) !== 0)) {
	        this._fulfill(promise._value());
	    } else if (((bitField & 16777216) !== 0)) {
	        this._reject(promise._reason());
	    } else {
	        var reason = new CancellationError("late cancellation observer");
	        promise._attachExtraTrace(reason);
	        this._reject(reason);
	    }
	};

	Promise.prototype._rejectCallback =
	function(reason, synchronous, ignoreNonErrorWarnings) {
	    var trace = util.ensureErrorObject(reason);
	    var hasStack = trace === reason;
	    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
	        var message = "a promise was rejected with a non-error: " +
	            util.classString(reason);
	        this._warn(message, true);
	    }
	    this._attachExtraTrace(trace, synchronous ? hasStack : false);
	    this._reject(reason);
	};

	Promise.prototype._resolveFromExecutor = function (executor) {
	    var promise = this;
	    this._captureStackTrace();
	    this._pushContext();
	    var synchronous = true;
	    var r = this._execute(executor, function(value) {
	        promise._resolveCallback(value);
	    }, function (reason) {
	        promise._rejectCallback(reason, synchronous);
	    });
	    synchronous = false;
	    this._popContext();

	    if (r !== undefined) {
	        promise._rejectCallback(r, true);
	    }
	};

	Promise.prototype._settlePromiseFromHandler = function (
	    handler, receiver, value, promise
	) {
	    var bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;
	    promise._pushContext();
	    var x;
	    if (receiver === APPLY) {
	        if (!value || typeof value.length !== "number") {
	            x = errorObj;
	            x.e = new TypeError("cannot .spread() a non-array: " +
	                                    util.classString(value));
	        } else {
	            x = tryCatch(handler).apply(this._boundValue(), value);
	        }
	    } else {
	        x = tryCatch(handler).call(receiver, value);
	    }
	    var promiseCreated = promise._popContext();
	    bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;

	    if (x === NEXT_FILTER) {
	        promise._reject(value);
	    } else if (x === errorObj) {
	        promise._rejectCallback(x.e, false);
	    } else {
	        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
	        promise._resolveCallback(x);
	    }
	};

	Promise.prototype._target = function() {
	    var ret = this;
	    while (ret._isFollowing()) ret = ret._followee();
	    return ret;
	};

	Promise.prototype._followee = function() {
	    return this._rejectionHandler0;
	};

	Promise.prototype._setFollowee = function(promise) {
	    this._rejectionHandler0 = promise;
	};

	Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
	    var isPromise = promise instanceof Promise;
	    var bitField = this._bitField;
	    var asyncGuaranteed = ((bitField & 134217728) !== 0);
	    if (((bitField & 65536) !== 0)) {
	        if (isPromise) promise._invokeInternalOnCancel();

	        if (receiver instanceof PassThroughHandlerContext &&
	            receiver.isFinallyHandler()) {
	            receiver.cancelPromise = promise;
	            if (tryCatch(handler).call(receiver, value) === errorObj) {
	                promise._reject(errorObj.e);
	            }
	        } else if (handler === reflectHandler) {
	            promise._fulfill(reflectHandler.call(receiver));
	        } else if (receiver instanceof Proxyable) {
	            receiver._promiseCancelled(promise);
	        } else if (isPromise || promise instanceof PromiseArray) {
	            promise._cancel();
	        } else {
	            receiver.cancel();
	        }
	    } else if (typeof handler === "function") {
	        if (!isPromise) {
	            handler.call(receiver, value, promise);
	        } else {
	            if (asyncGuaranteed) promise._setAsyncGuaranteed();
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (receiver instanceof Proxyable) {
	        if (!receiver._isResolved()) {
	            if (((bitField & 33554432) !== 0)) {
	                receiver._promiseFulfilled(value, promise);
	            } else {
	                receiver._promiseRejected(value, promise);
	            }
	        }
	    } else if (isPromise) {
	        if (asyncGuaranteed) promise._setAsyncGuaranteed();
	        if (((bitField & 33554432) !== 0)) {
	            promise._fulfill(value);
	        } else {
	            promise._reject(value);
	        }
	    }
	};

	Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
	    var handler = ctx.handler;
	    var promise = ctx.promise;
	    var receiver = ctx.receiver;
	    var value = ctx.value;
	    if (typeof handler === "function") {
	        if (!(promise instanceof Promise)) {
	            handler.call(receiver, value, promise);
	        } else {
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (promise instanceof Promise) {
	        promise._reject(value);
	    }
	};

	Promise.prototype._settlePromiseCtx = function(ctx) {
	    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
	};

	Promise.prototype._settlePromise0 = function(handler, value, bitField) {
	    var promise = this._promise0;
	    var receiver = this._receiverAt(0);
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    this._settlePromise(promise, handler, receiver, value);
	};

	Promise.prototype._clearCallbackDataAtIndex = function(index) {
	    var base = index * 4 - 4;
	    this[base + 2] =
	    this[base + 3] =
	    this[base + 0] =
	    this[base + 1] = undefined;
	};

	Promise.prototype._fulfill = function (value) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    if (value === this) {
	        var err = makeSelfResolutionError();
	        this._attachExtraTrace(err);
	        return this._reject(err);
	    }
	    this._setFulfilled();
	    this._rejectionHandler0 = value;

	    if ((bitField & 65535) > 0) {
	        if (((bitField & 134217728) !== 0)) {
	            this._settlePromises();
	        } else {
	            async.settlePromises(this);
	        }
	    }
	};

	Promise.prototype._reject = function (reason) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    this._setRejected();
	    this._fulfillmentHandler0 = reason;

	    if (this._isFinal()) {
	        return async.fatalError(reason, util.isNode);
	    }

	    if ((bitField & 65535) > 0) {
	        async.settlePromises(this);
	    } else {
	        this._ensurePossibleRejectionHandled();
	    }
	};

	Promise.prototype._fulfillPromises = function (len, value) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._fulfillmentHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, value);
	    }
	};

	Promise.prototype._rejectPromises = function (len, reason) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._rejectionHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, reason);
	    }
	};

	Promise.prototype._settlePromises = function () {
	    var bitField = this._bitField;
	    var len = (bitField & 65535);

	    if (len > 0) {
	        if (((bitField & 16842752) !== 0)) {
	            var reason = this._fulfillmentHandler0;
	            this._settlePromise0(this._rejectionHandler0, reason, bitField);
	            this._rejectPromises(len, reason);
	        } else {
	            var value = this._rejectionHandler0;
	            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
	            this._fulfillPromises(len, value);
	        }
	        this._setLength(0);
	    }
	    this._clearCancellationData();
	};

	Promise.prototype._settledValue = function() {
	    var bitField = this._bitField;
	    if (((bitField & 33554432) !== 0)) {
	        return this._rejectionHandler0;
	    } else if (((bitField & 16777216) !== 0)) {
	        return this._fulfillmentHandler0;
	    }
	};

	function deferResolve(v) {this.promise._resolveCallback(v);}
	function deferReject(v) {this.promise._rejectCallback(v, false);}

	Promise.defer = Promise.pending = function() {
	    debug.deprecated("Promise.defer", "new Promise");
	    var promise = new Promise(INTERNAL);
	    return {
	        promise: promise,
	        resolve: deferResolve,
	        reject: deferReject
	    };
	};

	util.notEnumerableProp(Promise,
	                       "_makeSelfResolutionError",
	                       makeSelfResolutionError);

	_dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
	    debug);
	_dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
	_dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
	_dereq_("./direct_resolve")(Promise);
	_dereq_("./synchronous_inspection")(Promise);
	_dereq_("./join")(
	    Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
	Promise.Promise = Promise;
	Promise.version = "3.4.7";
	_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	_dereq_('./call_get.js')(Promise);
	_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
	_dereq_('./timers.js')(Promise, INTERNAL, debug);
	_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
	_dereq_('./nodeify.js')(Promise);
	_dereq_('./promisify.js')(Promise, INTERNAL);
	_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	_dereq_('./settle.js')(Promise, PromiseArray, debug);
	_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
	_dereq_('./filter.js')(Promise, INTERNAL);
	_dereq_('./each.js')(Promise, INTERNAL);
	_dereq_('./any.js')(Promise);
	                                                         
	    util.toFastProperties(Promise);                                          
	    util.toFastProperties(Promise.prototype);                                
	    function fillTypes(value) {                                              
	        var p = new Promise(INTERNAL);                                       
	        p._fulfillmentHandler0 = value;                                      
	        p._rejectionHandler0 = value;                                        
	        p._promise0 = value;                                                 
	        p._receiver0 = value;                                                
	    }                                                                        
	    // Complete slack tracking, opt out of field-type tracking and           
	    // stabilize map                                                         
	    fillTypes({a: 1});                                                       
	    fillTypes({b: 2});                                                       
	    fillTypes({c: 3});                                                       
	    fillTypes(1);                                                            
	    fillTypes(function(){});                                                 
	    fillTypes(undefined);                                                    
	    fillTypes(false);                                                        
	    fillTypes(new Promise(INTERNAL));                                        
	    debug.setBounds(Async.firstLineError, util.lastLineError);               
	    return Promise;                                                          

	};

	},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise,
	    apiRejection, Proxyable) {
	var util = _dereq_("./util");
	var isArray = util.isArray;

	function toResolutionValue(val) {
	    switch(val) {
	    case -2: return [];
	    case -3: return {};
	    }
	}

	function PromiseArray(values) {
	    var promise = this._promise = new Promise(INTERNAL);
	    if (values instanceof Promise) {
	        promise._propagateFrom(values, 3);
	    }
	    promise._setOnCancel(this);
	    this._values = values;
	    this._length = 0;
	    this._totalResolved = 0;
	    this._init(undefined, -2);
	}
	util.inherits(PromiseArray, Proxyable);

	PromiseArray.prototype.length = function () {
	    return this._length;
	};

	PromiseArray.prototype.promise = function () {
	    return this._promise;
	};

	PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	    var values = tryConvertToPromise(this._values, this._promise);
	    if (values instanceof Promise) {
	        values = values._target();
	        var bitField = values._bitField;
	        ;
	        this._values = values;

	        if (((bitField & 50397184) === 0)) {
	            this._promise._setAsyncGuaranteed();
	            return values._then(
	                init,
	                this._reject,
	                undefined,
	                this,
	                resolveValueIfEmpty
	           );
	        } else if (((bitField & 33554432) !== 0)) {
	            values = values._value();
	        } else if (((bitField & 16777216) !== 0)) {
	            return this._reject(values._reason());
	        } else {
	            return this._cancel();
	        }
	    }
	    values = util.asArray(values);
	    if (values === null) {
	        var err = apiRejection(
	            "expecting an array or an iterable object but got " + util.classString(values)).reason();
	        this._promise._rejectCallback(err, false);
	        return;
	    }

	    if (values.length === 0) {
	        if (resolveValueIfEmpty === -5) {
	            this._resolveEmptyArray();
	        }
	        else {
	            this._resolve(toResolutionValue(resolveValueIfEmpty));
	        }
	        return;
	    }
	    this._iterate(values);
	};

	PromiseArray.prototype._iterate = function(values) {
	    var len = this.getActualLength(values.length);
	    this._length = len;
	    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	    var result = this._promise;
	    var isResolved = false;
	    var bitField = null;
	    for (var i = 0; i < len; ++i) {
	        var maybePromise = tryConvertToPromise(values[i], result);

	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            bitField = maybePromise._bitField;
	        } else {
	            bitField = null;
	        }

	        if (isResolved) {
	            if (bitField !== null) {
	                maybePromise.suppressUnhandledRejections();
	            }
	        } else if (bitField !== null) {
	            if (((bitField & 50397184) === 0)) {
	                maybePromise._proxy(this, i);
	                this._values[i] = maybePromise;
	            } else if (((bitField & 33554432) !== 0)) {
	                isResolved = this._promiseFulfilled(maybePromise._value(), i);
	            } else if (((bitField & 16777216) !== 0)) {
	                isResolved = this._promiseRejected(maybePromise._reason(), i);
	            } else {
	                isResolved = this._promiseCancelled(i);
	            }
	        } else {
	            isResolved = this._promiseFulfilled(maybePromise, i);
	        }
	    }
	    if (!isResolved) result._setAsyncGuaranteed();
	};

	PromiseArray.prototype._isResolved = function () {
	    return this._values === null;
	};

	PromiseArray.prototype._resolve = function (value) {
	    this._values = null;
	    this._promise._fulfill(value);
	};

	PromiseArray.prototype._cancel = function() {
	    if (this._isResolved() || !this._promise._isCancellable()) return;
	    this._values = null;
	    this._promise._cancel();
	};

	PromiseArray.prototype._reject = function (reason) {
	    this._values = null;
	    this._promise._rejectCallback(reason, false);
	};

	PromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};

	PromiseArray.prototype._promiseCancelled = function() {
	    this._cancel();
	    return true;
	};

	PromiseArray.prototype._promiseRejected = function (reason) {
	    this._totalResolved++;
	    this._reject(reason);
	    return true;
	};

	PromiseArray.prototype._resultCancelled = function() {
	    if (this._isResolved()) return;
	    var values = this._values;
	    this._cancel();
	    if (values instanceof Promise) {
	        values.cancel();
	    } else {
	        for (var i = 0; i < values.length; ++i) {
	            if (values[i] instanceof Promise) {
	                values[i].cancel();
	            }
	        }
	    }
	};

	PromiseArray.prototype.shouldCopyValues = function () {
	    return true;
	};

	PromiseArray.prototype.getActualLength = function (len) {
	    return len;
	};

	return PromiseArray;
	};

	},{"./util":36}],24:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var THIS = {};
	var util = _dereq_("./util");
	var nodebackForPromise = _dereq_("./nodeback");
	var withAppended = util.withAppended;
	var maybeWrapAsError = util.maybeWrapAsError;
	var canEvaluate = util.canEvaluate;
	var TypeError = _dereq_("./errors").TypeError;
	var defaultSuffix = "Async";
	var defaultPromisified = {__isPromisified__: true};
	var noCopyProps = [
	    "arity",    "length",
	    "name",
	    "arguments",
	    "caller",
	    "callee",
	    "prototype",
	    "__isPromisified__"
	];
	var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

	var defaultFilter = function(name) {
	    return util.isIdentifier(name) &&
	        name.charAt(0) !== "_" &&
	        name !== "constructor";
	};

	function propsFilter(key) {
	    return !noCopyPropsPattern.test(key);
	}

	function isPromisified(fn) {
	    try {
	        return fn.__isPromisified__ === true;
	    }
	    catch (e) {
	        return false;
	    }
	}

	function hasPromisified(obj, key, suffix) {
	    var val = util.getDataPropertyOrDefault(obj, key + suffix,
	                                            defaultPromisified);
	    return val ? isPromisified(val) : false;
	}
	function checkValid(ret, suffix, suffixRegexp) {
	    for (var i = 0; i < ret.length; i += 2) {
	        var key = ret[i];
	        if (suffixRegexp.test(key)) {
	            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	            for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
	                        .replace("%s", suffix));
	                }
	            }
	        }
	    }
	}

	function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	    var keys = util.inheritedDataKeys(obj);
	    var ret = [];
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var value = obj[key];
	        var passesDefaultFilter = filter === defaultFilter
	            ? true : defaultFilter(key, value, obj);
	        if (typeof value === "function" &&
	            !isPromisified(value) &&
	            !hasPromisified(obj, key, suffix) &&
	            filter(key, value, obj, passesDefaultFilter)) {
	            ret.push(key, value);
	        }
	    }
	    checkValid(ret, suffix, suffixRegexp);
	    return ret;
	}

	var escapeIdentRegex = function(str) {
	    return str.replace(/([$])/, "\\$");
	};

	var makeNodePromisifiedEval;
	if (false) {
	var switchCaseArgumentOrder = function(likelyArgumentCount) {
	    var ret = [likelyArgumentCount];
	    var min = Math.max(0, likelyArgumentCount - 1 - 3);
	    for(var i = likelyArgumentCount - 1; i >= min; --i) {
	        ret.push(i);
	    }
	    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
	        ret.push(i);
	    }
	    return ret;
	};

	var argumentSequence = function(argumentCount) {
	    return util.filledRange(argumentCount, "_arg", "");
	};

	var parameterDeclaration = function(parameterCount) {
	    return util.filledRange(
	        Math.max(parameterCount, 3), "_arg", "");
	};

	var parameterCount = function(fn) {
	    if (typeof fn.length === "number") {
	        return Math.max(Math.min(fn.length, 1023 + 1), 0);
	    }
	    return 0;
	};

	makeNodePromisifiedEval =
	function(callback, receiver, originalName, fn, _, multiArgs) {
	    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

	    function generateCallForArgumentCount(count) {
	        var args = argumentSequence(count).join(", ");
	        var comma = count > 0 ? ", " : "";
	        var ret;
	        if (shouldProxyThis) {
	            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	        } else {
	            ret = receiver === undefined
	                ? "ret = callback({{args}}, nodeback); break;\n"
	                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	        }
	        return ret.replace("{{args}}", args).replace(", ", comma);
	    }

	    function generateArgumentSwitchCase() {
	        var ret = "";
	        for (var i = 0; i < argumentOrder.length; ++i) {
	            ret += "case " + argumentOrder[i] +":" +
	                generateCallForArgumentCount(argumentOrder[i]);
	        }

	        ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", (shouldProxyThis
	                                ? "ret = callback.apply(this, args);\n"
	                                : "ret = callback.apply(receiver, args);\n"));
	        return ret;
	    }

	    var getFunctionCode = typeof callback === "string"
	                                ? ("this != null ? this['"+callback+"'] : fn")
	                                : "fn";
	    var body = "'use strict';                                                \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
	        return ret;                                                          \n\
	    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
	        .replace("[GetFunctionCode]", getFunctionCode);
	    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
	    return new Function("Promise",
	                        "fn",
	                        "receiver",
	                        "withAppended",
	                        "maybeWrapAsError",
	                        "nodebackForPromise",
	                        "tryCatch",
	                        "errorObj",
	                        "notEnumerableProp",
	                        "INTERNAL",
	                        body)(
	                    Promise,
	                    fn,
	                    receiver,
	                    withAppended,
	                    maybeWrapAsError,
	                    nodebackForPromise,
	                    util.tryCatch,
	                    util.errorObj,
	                    util.notEnumerableProp,
	                    INTERNAL);
	};
	}

	function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
	    var defaultThis = (function() {return this;})();
	    var method = callback;
	    if (typeof method === "string") {
	        callback = fn;
	    }
	    function promisified() {
	        var _receiver = receiver;
	        if (receiver === THIS) _receiver = this;
	        var promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	        var cb = typeof method === "string" && this !== defaultThis
	            ? this[method] : callback;
	        var fn = nodebackForPromise(promise, multiArgs);
	        try {
	            cb.apply(_receiver, withAppended(arguments, fn));
	        } catch(e) {
	            promise._rejectCallback(maybeWrapAsError(e), true, true);
	        }
	        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
	        return promise;
	    }
	    util.notEnumerableProp(promisified, "__isPromisified__", true);
	    return promisified;
	}

	var makeNodePromisified = canEvaluate
	    ? makeNodePromisifiedEval
	    : makeNodePromisifiedClosure;

	function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
	    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	    var methods =
	        promisifiableMethods(obj, suffix, suffixRegexp, filter);

	    for (var i = 0, len = methods.length; i < len; i+= 2) {
	        var key = methods[i];
	        var fn = methods[i+1];
	        var promisifiedKey = key + suffix;
	        if (promisifier === makeNodePromisified) {
	            obj[promisifiedKey] =
	                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
	        } else {
	            var promisified = promisifier(fn, function() {
	                return makeNodePromisified(key, THIS, key,
	                                           fn, suffix, multiArgs);
	            });
	            util.notEnumerableProp(promisified, "__isPromisified__", true);
	            obj[promisifiedKey] = promisified;
	        }
	    }
	    util.toFastProperties(obj);
	    return obj;
	}

	function promisify(callback, receiver, multiArgs) {
	    return makeNodePromisified(callback, receiver, undefined,
	                                callback, null, multiArgs);
	}

	Promise.promisify = function (fn, options) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    if (isPromisified(fn)) {
	        return fn;
	    }
	    options = Object(options);
	    var receiver = options.context === undefined ? THIS : options.context;
	    var multiArgs = !!options.multiArgs;
	    var ret = promisify(fn, receiver, multiArgs);
	    util.copyDescriptors(fn, ret, propsFilter);
	    return ret;
	};

	Promise.promisifyAll = function (target, options) {
	    if (typeof target !== "function" && typeof target !== "object") {
	        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    options = Object(options);
	    var multiArgs = !!options.multiArgs;
	    var suffix = options.suffix;
	    if (typeof suffix !== "string") suffix = defaultSuffix;
	    var filter = options.filter;
	    if (typeof filter !== "function") filter = defaultFilter;
	    var promisifier = options.promisifier;
	    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

	    if (!util.isIdentifier(suffix)) {
	        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }

	    var keys = util.inheritedDataKeys(target);
	    for (var i = 0; i < keys.length; ++i) {
	        var value = target[keys[i]];
	        if (keys[i] !== "constructor" &&
	            util.isClass(value)) {
	            promisifyAll(value.prototype, suffix, filter, promisifier,
	                multiArgs);
	            promisifyAll(value, suffix, filter, promisifier, multiArgs);
	        }
	    }

	    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
	};
	};


	},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util");
	var isObject = util.isObject;
	var es5 = _dereq_("./es5");
	var Es6Map;
	if (typeof Map === "function") Es6Map = Map;

	var mapToEntries = (function() {
	    var index = 0;
	    var size = 0;

	    function extractEntry(value, key) {
	        this[index] = value;
	        this[index + size] = key;
	        index++;
	    }

	    return function mapToEntries(map) {
	        size = map.size;
	        index = 0;
	        var ret = new Array(map.size * 2);
	        map.forEach(extractEntry, ret);
	        return ret;
	    };
	})();

	var entriesToMap = function(entries) {
	    var ret = new Es6Map();
	    var length = entries.length / 2 | 0;
	    for (var i = 0; i < length; ++i) {
	        var key = entries[length + i];
	        var value = entries[i];
	        ret.set(key, value);
	    }
	    return ret;
	};

	function PropertiesPromiseArray(obj) {
	    var isMap = false;
	    var entries;
	    if (Es6Map !== undefined && obj instanceof Es6Map) {
	        entries = mapToEntries(obj);
	        isMap = true;
	    } else {
	        var keys = es5.keys(obj);
	        var len = keys.length;
	        entries = new Array(len * 2);
	        for (var i = 0; i < len; ++i) {
	            var key = keys[i];
	            entries[i] = obj[key];
	            entries[i + len] = key;
	        }
	    }
	    this.constructor$(entries);
	    this._isMap = isMap;
	    this._init$(undefined, -3);
	}
	util.inherits(PropertiesPromiseArray, PromiseArray);

	PropertiesPromiseArray.prototype._init = function () {};

	PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        var val;
	        if (this._isMap) {
	            val = entriesToMap(this._values);
	        } else {
	            val = {};
	            var keyOffset = this.length();
	            for (var i = 0, len = this.length(); i < len; ++i) {
	                val[this._values[i + keyOffset]] = this._values[i];
	            }
	        }
	        this._resolve(val);
	        return true;
	    }
	    return false;
	};

	PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};

	PropertiesPromiseArray.prototype.getActualLength = function (len) {
	    return len >> 1;
	};

	function props(promises) {
	    var ret;
	    var castValue = tryConvertToPromise(promises);

	    if (!isObject(castValue)) {
	        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    } else if (castValue instanceof Promise) {
	        ret = castValue._then(
	            Promise.props, undefined, undefined, undefined, undefined);
	    } else {
	        ret = new PropertiesPromiseArray(castValue).promise();
	    }

	    if (castValue instanceof Promise) {
	        ret._propagateFrom(castValue, 2);
	    }
	    return ret;
	}

	Promise.prototype.props = function () {
	    return props(this);
	};

	Promise.props = function (promises) {
	    return props(promises);
	};
	};

	},{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
	"use strict";
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
	    for (var j = 0; j < len; ++j) {
	        dst[j + dstIndex] = src[j + srcIndex];
	        src[j + srcIndex] = void 0;
	    }
	}

	function Queue(capacity) {
	    this._capacity = capacity;
	    this._length = 0;
	    this._front = 0;
	}

	Queue.prototype._willBeOverCapacity = function (size) {
	    return this._capacity < size;
	};

	Queue.prototype._pushOne = function (arg) {
	    var length = this.length();
	    this._checkCapacity(length + 1);
	    var i = (this._front + length) & (this._capacity - 1);
	    this[i] = arg;
	    this._length = length + 1;
	};

	Queue.prototype.push = function (fn, receiver, arg) {
	    var length = this.length() + 3;
	    if (this._willBeOverCapacity(length)) {
	        this._pushOne(fn);
	        this._pushOne(receiver);
	        this._pushOne(arg);
	        return;
	    }
	    var j = this._front + length - 3;
	    this._checkCapacity(length);
	    var wrapMask = this._capacity - 1;
	    this[(j + 0) & wrapMask] = fn;
	    this[(j + 1) & wrapMask] = receiver;
	    this[(j + 2) & wrapMask] = arg;
	    this._length = length;
	};

	Queue.prototype.shift = function () {
	    var front = this._front,
	        ret = this[front];

	    this[front] = undefined;
	    this._front = (front + 1) & (this._capacity - 1);
	    this._length--;
	    return ret;
	};

	Queue.prototype.length = function () {
	    return this._length;
	};

	Queue.prototype._checkCapacity = function (size) {
	    if (this._capacity < size) {
	        this._resizeTo(this._capacity << 1);
	    }
	};

	Queue.prototype._resizeTo = function (capacity) {
	    var oldCapacity = this._capacity;
	    this._capacity = capacity;
	    var front = this._front;
	    var length = this._length;
	    var moveItemsCount = (front + length) & (oldCapacity - 1);
	    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};

	module.exports = Queue;

	},{}],27:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util");

	var raceLater = function (promise) {
	    return promise.then(function(array) {
	        return race(array, promise);
	    });
	};

	function race(promises, parent) {
	    var maybePromise = tryConvertToPromise(promises);

	    if (maybePromise instanceof Promise) {
	        return raceLater(maybePromise);
	    } else {
	        promises = util.asArray(promises);
	        if (promises === null)
	            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
	    }

	    var ret = new Promise(INTERNAL);
	    if (parent !== undefined) {
	        ret._propagateFrom(parent, 3);
	    }
	    var fulfill = ret._fulfill;
	    var reject = ret._reject;
	    for (var i = 0, len = promises.length; i < len; ++i) {
	        var val = promises[i];

	        if (val === undefined && !(i in promises)) {
	            continue;
	        }

	        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	    }
	    return ret;
	}

	Promise.race = function (promises) {
	    return race(promises, undefined);
	};

	Promise.prototype.race = function () {
	    return race(this, undefined);
	};

	};

	},{"./util":36}],28:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = _dereq_("./util");
	var tryCatch = util.tryCatch;

	function ReductionPromiseArray(promises, fn, initialValue, _each) {
	    this.constructor$(promises);
	    var domain = getDomain();
	    this._fn = domain === null ? fn : util.domainBind(domain, fn);
	    if (initialValue !== undefined) {
	        initialValue = Promise.resolve(initialValue);
	        initialValue._attachCancellationCallback(this);
	    }
	    this._initialValue = initialValue;
	    this._currentCancellable = null;
	    if(_each === INTERNAL) {
	        this._eachValues = Array(this._length);
	    } else if (_each === 0) {
	        this._eachValues = null;
	    } else {
	        this._eachValues = undefined;
	    }
	    this._promise._captureStackTrace();
	    this._init$(undefined, -5);
	}
	util.inherits(ReductionPromiseArray, PromiseArray);

	ReductionPromiseArray.prototype._gotAccum = function(accum) {
	    if (this._eachValues !== undefined && 
	        this._eachValues !== null && 
	        accum !== INTERNAL) {
	        this._eachValues.push(accum);
	    }
	};

	ReductionPromiseArray.prototype._eachComplete = function(value) {
	    if (this._eachValues !== null) {
	        this._eachValues.push(value);
	    }
	    return this._eachValues;
	};

	ReductionPromiseArray.prototype._init = function() {};

	ReductionPromiseArray.prototype._resolveEmptyArray = function() {
	    this._resolve(this._eachValues !== undefined ? this._eachValues
	                                                 : this._initialValue);
	};

	ReductionPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};

	ReductionPromiseArray.prototype._resolve = function(value) {
	    this._promise._resolveCallback(value);
	    this._values = null;
	};

	ReductionPromiseArray.prototype._resultCancelled = function(sender) {
	    if (sender === this._initialValue) return this._cancel();
	    if (this._isResolved()) return;
	    this._resultCancelled$();
	    if (this._currentCancellable instanceof Promise) {
	        this._currentCancellable.cancel();
	    }
	    if (this._initialValue instanceof Promise) {
	        this._initialValue.cancel();
	    }
	};

	ReductionPromiseArray.prototype._iterate = function (values) {
	    this._values = values;
	    var value;
	    var i;
	    var length = values.length;
	    if (this._initialValue !== undefined) {
	        value = this._initialValue;
	        i = 0;
	    } else {
	        value = Promise.resolve(values[0]);
	        i = 1;
	    }

	    this._currentCancellable = value;

	    if (!value.isRejected()) {
	        for (; i < length; ++i) {
	            var ctx = {
	                accum: null,
	                value: values[i],
	                index: i,
	                length: length,
	                array: this
	            };
	            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
	        }
	    }

	    if (this._eachValues !== undefined) {
	        value = value
	            ._then(this._eachComplete, undefined, undefined, this, undefined);
	    }
	    value._then(completed, completed, undefined, value, this);
	};

	Promise.prototype.reduce = function (fn, initialValue) {
	    return reduce(this, fn, initialValue, null);
	};

	Promise.reduce = function (promises, fn, initialValue, _each) {
	    return reduce(promises, fn, initialValue, _each);
	};

	function completed(valueOrReason, array) {
	    if (this.isFulfilled()) {
	        array._resolve(valueOrReason);
	    } else {
	        array._reject(valueOrReason);
	    }
	}

	function reduce(promises, fn, initialValue, _each) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	    return array.promise();
	}

	function gotAccum(accum) {
	    this.accum = accum;
	    this.array._gotAccum(accum);
	    var value = tryConvertToPromise(this.value, this.array._promise);
	    if (value instanceof Promise) {
	        this.array._currentCancellable = value;
	        return value._then(gotValue, undefined, undefined, this, undefined);
	    } else {
	        return gotValue.call(this, value);
	    }
	}

	function gotValue(value) {
	    var array = this.array;
	    var promise = array._promise;
	    var fn = tryCatch(array._fn);
	    promise._pushContext();
	    var ret;
	    if (array._eachValues !== undefined) {
	        ret = fn.call(promise._boundValue(), value, this.index, this.length);
	    } else {
	        ret = fn.call(promise._boundValue(),
	                              this.accum, value, this.index, this.length);
	    }
	    if (ret instanceof Promise) {
	        array._currentCancellable = ret;
	    }
	    var promiseCreated = promise._popContext();
	    debug.checkForgottenReturns(
	        ret,
	        promiseCreated,
	        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
	        promise
	    );
	    return ret;
	}
	};

	},{"./util":36}],29:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util");
	var schedule;
	var noAsyncScheduler = function() {
	    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	var NativePromise = util.getNativePromise();
	if (util.isNode && typeof MutationObserver === "undefined") {
	    var GlobalSetImmediate = global.setImmediate;
	    var ProcessNextTick = process.nextTick;
	    schedule = util.isRecentNode
	                ? function(fn) { GlobalSetImmediate.call(global, fn); }
	                : function(fn) { ProcessNextTick.call(process, fn); };
	} else if (typeof NativePromise === "function" &&
	           typeof NativePromise.resolve === "function") {
	    var nativePromise = NativePromise.resolve();
	    schedule = function(fn) {
	        nativePromise.then(fn);
	    };
	} else if ((typeof MutationObserver !== "undefined") &&
	          !(typeof window !== "undefined" &&
	            window.navigator &&
	            (window.navigator.standalone || window.cordova))) {
	    schedule = (function() {
	        var div = document.createElement("div");
	        var opts = {attributes: true};
	        var toggleScheduled = false;
	        var div2 = document.createElement("div");
	        var o2 = new MutationObserver(function() {
	            div.classList.toggle("foo");
	            toggleScheduled = false;
	        });
	        o2.observe(div2, opts);

	        var scheduleToggle = function() {
	            if (toggleScheduled) return;
	                toggleScheduled = true;
	                div2.classList.toggle("foo");
	            };

	            return function schedule(fn) {
	            var o = new MutationObserver(function() {
	                o.disconnect();
	                fn();
	            });
	            o.observe(div, opts);
	            scheduleToggle();
	        };
	    })();
	} else if (typeof setImmediate !== "undefined") {
	    schedule = function (fn) {
	        setImmediate(fn);
	    };
	} else if (typeof setTimeout !== "undefined") {
	    schedule = function (fn) {
	        setTimeout(fn, 0);
	    };
	} else {
	    schedule = noAsyncScheduler;
	}
	module.exports = schedule;

	},{"./util":36}],30:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	    function(Promise, PromiseArray, debug) {
	var PromiseInspection = Promise.PromiseInspection;
	var util = _dereq_("./util");

	function SettledPromiseArray(values) {
	    this.constructor$(values);
	}
	util.inherits(SettledPromiseArray, PromiseArray);

	SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	    this._values[index] = inspection;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};

	SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 33554432;
	    ret._settledValueField = value;
	    return this._promiseResolved(index, ret);
	};
	SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 16777216;
	    ret._settledValueField = reason;
	    return this._promiseResolved(index, ret);
	};

	Promise.settle = function (promises) {
	    debug.deprecated(".settle()", ".reflect()");
	    return new SettledPromiseArray(promises).promise();
	};

	Promise.prototype.settle = function () {
	    return Promise.settle(this);
	};
	};

	},{"./util":36}],31:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, apiRejection) {
	var util = _dereq_("./util");
	var RangeError = _dereq_("./errors").RangeError;
	var AggregateError = _dereq_("./errors").AggregateError;
	var isArray = util.isArray;
	var CANCELLATION = {};


	function SomePromiseArray(values) {
	    this.constructor$(values);
	    this._howMany = 0;
	    this._unwrap = false;
	    this._initialized = false;
	}
	util.inherits(SomePromiseArray, PromiseArray);

	SomePromiseArray.prototype._init = function () {
	    if (!this._initialized) {
	        return;
	    }
	    if (this._howMany === 0) {
	        this._resolve([]);
	        return;
	    }
	    this._init$(undefined, -5);
	    var isArrayResolved = isArray(this._values);
	    if (!this._isResolved() &&
	        isArrayResolved &&
	        this._howMany > this._canPossiblyFulfill()) {
	        this._reject(this._getRangeError(this.length()));
	    }
	};

	SomePromiseArray.prototype.init = function () {
	    this._initialized = true;
	    this._init();
	};

	SomePromiseArray.prototype.setUnwrap = function () {
	    this._unwrap = true;
	};

	SomePromiseArray.prototype.howMany = function () {
	    return this._howMany;
	};

	SomePromiseArray.prototype.setHowMany = function (count) {
	    this._howMany = count;
	};

	SomePromiseArray.prototype._promiseFulfilled = function (value) {
	    this._addFulfilled(value);
	    if (this._fulfilled() === this.howMany()) {
	        this._values.length = this.howMany();
	        if (this.howMany() === 1 && this._unwrap) {
	            this._resolve(this._values[0]);
	        } else {
	            this._resolve(this._values);
	        }
	        return true;
	    }
	    return false;

	};
	SomePromiseArray.prototype._promiseRejected = function (reason) {
	    this._addRejected(reason);
	    return this._checkOutcome();
	};

	SomePromiseArray.prototype._promiseCancelled = function () {
	    if (this._values instanceof Promise || this._values == null) {
	        return this._cancel();
	    }
	    this._addRejected(CANCELLATION);
	    return this._checkOutcome();
	};

	SomePromiseArray.prototype._checkOutcome = function() {
	    if (this.howMany() > this._canPossiblyFulfill()) {
	        var e = new AggregateError();
	        for (var i = this.length(); i < this._values.length; ++i) {
	            if (this._values[i] !== CANCELLATION) {
	                e.push(this._values[i]);
	            }
	        }
	        if (e.length > 0) {
	            this._reject(e);
	        } else {
	            this._cancel();
	        }
	        return true;
	    }
	    return false;
	};

	SomePromiseArray.prototype._fulfilled = function () {
	    return this._totalResolved;
	};

	SomePromiseArray.prototype._rejected = function () {
	    return this._values.length - this.length();
	};

	SomePromiseArray.prototype._addRejected = function (reason) {
	    this._values.push(reason);
	};

	SomePromiseArray.prototype._addFulfilled = function (value) {
	    this._values[this._totalResolved++] = value;
	};

	SomePromiseArray.prototype._canPossiblyFulfill = function () {
	    return this.length() - this._rejected();
	};

	SomePromiseArray.prototype._getRangeError = function (count) {
	    var message = "Input array must contain at least " +
	            this._howMany + " items but contains only " + count + " items";
	    return new RangeError(message);
	};

	SomePromiseArray.prototype._resolveEmptyArray = function () {
	    this._reject(this._getRangeError(0));
	};

	function some(promises, howMany) {
	    if ((howMany | 0) !== howMany || howMany < 0) {
	        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(howMany);
	    ret.init();
	    return promise;
	}

	Promise.some = function (promises, howMany) {
	    return some(promises, howMany);
	};

	Promise.prototype.some = function (howMany) {
	    return some(this, howMany);
	};

	Promise._SomePromiseArray = SomePromiseArray;
	};

	},{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	function PromiseInspection(promise) {
	    if (promise !== undefined) {
	        promise = promise._target();
	        this._bitField = promise._bitField;
	        this._settledValueField = promise._isFateSealed()
	            ? promise._settledValue() : undefined;
	    }
	    else {
	        this._bitField = 0;
	        this._settledValueField = undefined;
	    }
	}

	PromiseInspection.prototype._settledValue = function() {
	    return this._settledValueField;
	};

	var value = PromiseInspection.prototype.value = function () {
	    if (!this.isFulfilled()) {
	        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};

	var reason = PromiseInspection.prototype.error =
	PromiseInspection.prototype.reason = function () {
	    if (!this.isRejected()) {
	        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};

	var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
	    return (this._bitField & 33554432) !== 0;
	};

	var isRejected = PromiseInspection.prototype.isRejected = function () {
	    return (this._bitField & 16777216) !== 0;
	};

	var isPending = PromiseInspection.prototype.isPending = function () {
	    return (this._bitField & 50397184) === 0;
	};

	var isResolved = PromiseInspection.prototype.isResolved = function () {
	    return (this._bitField & 50331648) !== 0;
	};

	PromiseInspection.prototype.isCancelled = function() {
	    return (this._bitField & 8454144) !== 0;
	};

	Promise.prototype.__isCancelled = function() {
	    return (this._bitField & 65536) === 65536;
	};

	Promise.prototype._isCancelled = function() {
	    return this._target().__isCancelled();
	};

	Promise.prototype.isCancelled = function() {
	    return (this._target()._bitField & 8454144) !== 0;
	};

	Promise.prototype.isPending = function() {
	    return isPending.call(this._target());
	};

	Promise.prototype.isRejected = function() {
	    return isRejected.call(this._target());
	};

	Promise.prototype.isFulfilled = function() {
	    return isFulfilled.call(this._target());
	};

	Promise.prototype.isResolved = function() {
	    return isResolved.call(this._target());
	};

	Promise.prototype.value = function() {
	    return value.call(this._target());
	};

	Promise.prototype.reason = function() {
	    var target = this._target();
	    target._unsetRejectionIsUnhandled();
	    return reason.call(target);
	};

	Promise.prototype._value = function() {
	    return this._settledValue();
	};

	Promise.prototype._reason = function() {
	    this._unsetRejectionIsUnhandled();
	    return this._settledValue();
	};

	Promise.PromiseInspection = PromiseInspection;
	};

	},{}],33:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var util = _dereq_("./util");
	var errorObj = util.errorObj;
	var isObject = util.isObject;

	function tryConvertToPromise(obj, context) {
	    if (isObject(obj)) {
	        if (obj instanceof Promise) return obj;
	        var then = getThen(obj);
	        if (then === errorObj) {
	            if (context) context._pushContext();
	            var ret = Promise.reject(then.e);
	            if (context) context._popContext();
	            return ret;
	        } else if (typeof then === "function") {
	            if (isAnyBluebirdPromise(obj)) {
	                var ret = new Promise(INTERNAL);
	                obj._then(
	                    ret._fulfill,
	                    ret._reject,
	                    undefined,
	                    ret,
	                    null
	                );
	                return ret;
	            }
	            return doThenable(obj, then, context);
	        }
	    }
	    return obj;
	}

	function doGetThen(obj) {
	    return obj.then;
	}

	function getThen(obj) {
	    try {
	        return doGetThen(obj);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}

	var hasProp = {}.hasOwnProperty;
	function isAnyBluebirdPromise(obj) {
	    try {
	        return hasProp.call(obj, "_promise0");
	    } catch (e) {
	        return false;
	    }
	}

	function doThenable(x, then, context) {
	    var promise = new Promise(INTERNAL);
	    var ret = promise;
	    if (context) context._pushContext();
	    promise._captureStackTrace();
	    if (context) context._popContext();
	    var synchronous = true;
	    var result = util.tryCatch(then).call(x, resolve, reject);
	    synchronous = false;

	    if (promise && result === errorObj) {
	        promise._rejectCallback(result.e, true, true);
	        promise = null;
	    }

	    function resolve(value) {
	        if (!promise) return;
	        promise._resolveCallback(value);
	        promise = null;
	    }

	    function reject(reason) {
	        if (!promise) return;
	        promise._rejectCallback(reason, synchronous, true);
	        promise = null;
	    }
	    return ret;
	}

	return tryConvertToPromise;
	};

	},{"./util":36}],34:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, debug) {
	var util = _dereq_("./util");
	var TimeoutError = Promise.TimeoutError;

	function HandleWrapper(handle)  {
	    this.handle = handle;
	}

	HandleWrapper.prototype._resultCancelled = function() {
	    clearTimeout(this.handle);
	};

	var afterValue = function(value) { return delay(+this).thenReturn(value); };
	var delay = Promise.delay = function (ms, value) {
	    var ret;
	    var handle;
	    if (value !== undefined) {
	        ret = Promise.resolve(value)
	                ._then(afterValue, null, null, ms, undefined);
	        if (debug.cancellation() && value instanceof Promise) {
	            ret._setOnCancel(value);
	        }
	    } else {
	        ret = new Promise(INTERNAL);
	        handle = setTimeout(function() { ret._fulfill(); }, +ms);
	        if (debug.cancellation()) {
	            ret._setOnCancel(new HandleWrapper(handle));
	        }
	        ret._captureStackTrace();
	    }
	    ret._setAsyncGuaranteed();
	    return ret;
	};

	Promise.prototype.delay = function (ms) {
	    return delay(ms, this);
	};

	var afterTimeout = function (promise, message, parent) {
	    var err;
	    if (typeof message !== "string") {
	        if (message instanceof Error) {
	            err = message;
	        } else {
	            err = new TimeoutError("operation timed out");
	        }
	    } else {
	        err = new TimeoutError(message);
	    }
	    util.markAsOriginatingFromRejection(err);
	    promise._attachExtraTrace(err);
	    promise._reject(err);

	    if (parent != null) {
	        parent.cancel();
	    }
	};

	function successClear(value) {
	    clearTimeout(this.handle);
	    return value;
	}

	function failureClear(reason) {
	    clearTimeout(this.handle);
	    throw reason;
	}

	Promise.prototype.timeout = function (ms, message) {
	    ms = +ms;
	    var ret, parent;

	    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
	        if (ret.isPending()) {
	            afterTimeout(ret, message, parent);
	        }
	    }, ms));

	    if (debug.cancellation()) {
	        parent = this.then();
	        ret = parent._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	        ret._setOnCancel(handleWrapper);
	    } else {
	        ret = this._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	    }

	    return ret;
	};

	};

	},{"./util":36}],35:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function (Promise, apiRejection, tryConvertToPromise,
	    createContext, INTERNAL, debug) {
	    var util = _dereq_("./util");
	    var TypeError = _dereq_("./errors").TypeError;
	    var inherits = _dereq_("./util").inherits;
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;
	    var NULL = {};

	    function thrower(e) {
	        setTimeout(function(){throw e;}, 0);
	    }

	    function castPreservingDisposable(thenable) {
	        var maybePromise = tryConvertToPromise(thenable);
	        if (maybePromise !== thenable &&
	            typeof thenable._isDisposable === "function" &&
	            typeof thenable._getDisposer === "function" &&
	            thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	        }
	        return maybePromise;
	    }
	    function dispose(resources, inspection) {
	        var i = 0;
	        var len = resources.length;
	        var ret = new Promise(INTERNAL);
	        function iterator() {
	            if (i >= len) return ret._fulfill();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise &&
	                maybePromise._isDisposable()) {
	                try {
	                    maybePromise = tryConvertToPromise(
	                        maybePromise._getDisposer().tryDispose(inspection),
	                        resources.promise);
	                } catch (e) {
	                    return thrower(e);
	                }
	                if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower,
	                                              null, null, null);
	                }
	            }
	            iterator();
	        }
	        iterator();
	        return ret;
	    }

	    function Disposer(data, promise, context) {
	        this._data = data;
	        this._promise = promise;
	        this._context = context;
	    }

	    Disposer.prototype.data = function () {
	        return this._data;
	    };

	    Disposer.prototype.promise = function () {
	        return this._promise;
	    };

	    Disposer.prototype.resource = function () {
	        if (this.promise().isFulfilled()) {
	            return this.promise().value();
	        }
	        return NULL;
	    };

	    Disposer.prototype.tryDispose = function(inspection) {
	        var resource = this.resource();
	        var context = this._context;
	        if (context !== undefined) context._pushContext();
	        var ret = resource !== NULL
	            ? this.doDispose(resource, inspection) : null;
	        if (context !== undefined) context._popContext();
	        this._promise._unsetDisposable();
	        this._data = null;
	        return ret;
	    };

	    Disposer.isDisposer = function (d) {
	        return (d != null &&
	                typeof d.resource === "function" &&
	                typeof d.tryDispose === "function");
	    };

	    function FunctionDisposer(fn, promise, context) {
	        this.constructor$(fn, promise, context);
	    }
	    inherits(FunctionDisposer, Disposer);

	    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	        var fn = this.data();
	        return fn.call(resource, resource, inspection);
	    };

	    function maybeUnwrapDisposer(value) {
	        if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	        }
	        return value;
	    }

	    function ResourceList(length) {
	        this.length = length;
	        this.promise = null;
	        this[length-1] = null;
	    }

	    ResourceList.prototype._resultCancelled = function() {
	        var len = this.length;
	        for (var i = 0; i < len; ++i) {
	            var item = this[i];
	            if (item instanceof Promise) {
	                item.cancel();
	            }
	        }
	    };

	    Promise.using = function () {
	        var len = arguments.length;
	        if (len < 2) return apiRejection(
	                        "you must pass at least 2 arguments to Promise.using");
	        var fn = arguments[len - 1];
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var input;
	        var spreadArgs = true;
	        if (len === 2 && Array.isArray(arguments[0])) {
	            input = arguments[0];
	            len = input.length;
	            spreadArgs = false;
	        } else {
	            input = arguments;
	            len--;
	        }
	        var resources = new ResourceList(len);
	        for (var i = 0; i < len; ++i) {
	            var resource = input[i];
	            if (Disposer.isDisposer(resource)) {
	                var disposer = resource;
	                resource = resource.promise();
	                resource._setDisposable(disposer);
	            } else {
	                var maybePromise = tryConvertToPromise(resource);
	                if (maybePromise instanceof Promise) {
	                    resource =
	                        maybePromise._then(maybeUnwrapDisposer, null, null, {
	                            resources: resources,
	                            index: i
	                    }, undefined);
	                }
	            }
	            resources[i] = resource;
	        }

	        var reflectedResources = new Array(resources.length);
	        for (var i = 0; i < reflectedResources.length; ++i) {
	            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
	        }

	        var resultPromise = Promise.all(reflectedResources)
	            .then(function(inspections) {
	                for (var i = 0; i < inspections.length; ++i) {
	                    var inspection = inspections[i];
	                    if (inspection.isRejected()) {
	                        errorObj.e = inspection.error();
	                        return errorObj;
	                    } else if (!inspection.isFulfilled()) {
	                        resultPromise.cancel();
	                        return;
	                    }
	                    inspections[i] = inspection.value();
	                }
	                promise._pushContext();

	                fn = tryCatch(fn);
	                var ret = spreadArgs
	                    ? fn.apply(undefined, inspections) : fn(inspections);
	                var promiseCreated = promise._popContext();
	                debug.checkForgottenReturns(
	                    ret, promiseCreated, "Promise.using", promise);
	                return ret;
	            });

	        var promise = resultPromise.lastly(function() {
	            var inspection = new Promise.PromiseInspection(resultPromise);
	            return dispose(resources, inspection);
	        });
	        resources.promise = promise;
	        promise._setOnCancel(resources);
	        return promise;
	    };

	    Promise.prototype._setDisposable = function (disposer) {
	        this._bitField = this._bitField | 131072;
	        this._disposer = disposer;
	    };

	    Promise.prototype._isDisposable = function () {
	        return (this._bitField & 131072) > 0;
	    };

	    Promise.prototype._getDisposer = function () {
	        return this._disposer;
	    };

	    Promise.prototype._unsetDisposable = function () {
	        this._bitField = this._bitField & (~131072);
	        this._disposer = undefined;
	    };

	    Promise.prototype.disposer = function (fn) {
	        if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	        }
	        throw new TypeError();
	    };

	};

	},{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5");
	var canEvaluate = typeof navigator == "undefined";

	var errorObj = {e: {}};
	var tryCatchTarget;
	var globalObject = typeof self !== "undefined" ? self :
	    typeof window !== "undefined" ? window :
	    typeof global !== "undefined" ? global :
	    this !== undefined ? this : null;

	function tryCatcher() {
	    try {
	        var target = tryCatchTarget;
	        tryCatchTarget = null;
	        return target.apply(this, arguments);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}

	var inherits = function(Child, Parent) {
	    var hasProp = {}.hasOwnProperty;

	    function T() {
	        this.constructor = Child;
	        this.constructor$ = Parent;
	        for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) &&
	                propertyName.charAt(propertyName.length-1) !== "$"
	           ) {
	                this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	        }
	    }
	    T.prototype = Parent.prototype;
	    Child.prototype = new T();
	    return Child.prototype;
	};


	function isPrimitive(val) {
	    return val == null || val === true || val === false ||
	        typeof val === "string" || typeof val === "number";

	}

	function isObject(value) {
	    return typeof value === "function" ||
	           typeof value === "object" && value !== null;
	}

	function maybeWrapAsError(maybeError) {
	    if (!isPrimitive(maybeError)) return maybeError;

	    return new Error(safeToString(maybeError));
	}

	function withAppended(target, appendee) {
	    var len = target.length;
	    var ret = new Array(len + 1);
	    var i;
	    for (i = 0; i < len; ++i) {
	        ret[i] = target[i];
	    }
	    ret[i] = appendee;
	    return ret;
	}

	function getDataPropertyOrDefault(obj, key, defaultValue) {
	    if (es5.isES5) {
	        var desc = Object.getOwnPropertyDescriptor(obj, key);

	        if (desc != null) {
	            return desc.get == null && desc.set == null
	                    ? desc.value
	                    : defaultValue;
	        }
	    } else {
	        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	    }
	}

	function notEnumerableProp(obj, name, value) {
	    if (isPrimitive(obj)) return obj;
	    var descriptor = {
	        value: value,
	        configurable: true,
	        enumerable: false,
	        writable: true
	    };
	    es5.defineProperty(obj, name, descriptor);
	    return obj;
	}

	function thrower(r) {
	    throw r;
	}

	var inheritedDataKeys = (function() {
	    var excludedPrototypes = [
	        Array.prototype,
	        Object.prototype,
	        Function.prototype
	    ];

	    var isExcludedProto = function(val) {
	        for (var i = 0; i < excludedPrototypes.length; ++i) {
	            if (excludedPrototypes[i] === val) {
	                return true;
	            }
	        }
	        return false;
	    };

	    if (es5.isES5) {
	        var getKeys = Object.getOwnPropertyNames;
	        return function(obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && !isExcludedProto(obj)) {
	                var keys;
	                try {
	                    keys = getKeys(obj);
	                } catch (e) {
	                    return ret;
	                }
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                        ret.push(key);
	                    }
	                }
	                obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	        };
	    } else {
	        var hasProp = {}.hasOwnProperty;
	        return function(obj) {
	            if (isExcludedProto(obj)) return [];
	            var ret = [];

	            /*jshint forin:false */
	            enumeration: for (var key in obj) {
	                if (hasProp.call(obj, key)) {
	                    ret.push(key);
	                } else {
	                    for (var i = 0; i < excludedPrototypes.length; ++i) {
	                        if (hasProp.call(excludedPrototypes[i], key)) {
	                            continue enumeration;
	                        }
	                    }
	                    ret.push(key);
	                }
	            }
	            return ret;
	        };
	    }

	})();

	var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
	function isClass(fn) {
	    try {
	        if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);

	            var hasMethods = es5.isES5 && keys.length > 1;
	            var hasMethodsOtherThanConstructor = keys.length > 0 &&
	                !(keys.length === 1 && keys[0] === "constructor");
	            var hasThisAssignmentAndStaticMethods =
	                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

	            if (hasMethods || hasMethodsOtherThanConstructor ||
	                hasThisAssignmentAndStaticMethods) {
	                return true;
	            }
	        }
	        return false;
	    } catch (e) {
	        return false;
	    }
	}

	function toFastProperties(obj) {
	    /*jshint -W027,-W055,-W031*/
	    function FakeConstructor() {}
	    FakeConstructor.prototype = obj;
	    var l = 8;
	    while (l--) new FakeConstructor();
	    return obj;
	    eval(obj);
	}

	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier(str) {
	    return rident.test(str);
	}

	function filledRange(count, prefix, suffix) {
	    var ret = new Array(count);
	    for(var i = 0; i < count; ++i) {
	        ret[i] = prefix + i + suffix;
	    }
	    return ret;
	}

	function safeToString(obj) {
	    try {
	        return obj + "";
	    } catch (e) {
	        return "[no string representation]";
	    }
	}

	function isError(obj) {
	    return obj !== null &&
	           typeof obj === "object" &&
	           typeof obj.message === "string" &&
	           typeof obj.name === "string";
	}

	function markAsOriginatingFromRejection(e) {
	    try {
	        notEnumerableProp(e, "isOperational", true);
	    }
	    catch(ignore) {}
	}

	function originatesFromRejection(e) {
	    if (e == null) return false;
	    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
	        e["isOperational"] === true);
	}

	function canAttachTrace(obj) {
	    return isError(obj) && es5.propertyIsWritable(obj, "stack");
	}

	var ensureErrorObject = (function() {
	    if (!("stack" in new Error())) {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            try {throw new Error(safeToString(value));}
	            catch(err) {return err;}
	        };
	    } else {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            return new Error(safeToString(value));
	        };
	    }
	})();

	function classString(obj) {
	    return {}.toString.call(obj);
	}

	function copyDescriptors(from, to, filter) {
	    var keys = es5.names(from);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        if (filter(key)) {
	            try {
	                es5.defineProperty(to, key, es5.getDescriptor(from, key));
	            } catch (ignore) {}
	        }
	    }
	}

	var asArray = function(v) {
	    if (es5.isArray(v)) {
	        return v;
	    }
	    return null;
	};

	if (typeof Symbol !== "undefined" && Symbol.iterator) {
	    var ArrayFrom = typeof Array.from === "function" ? function(v) {
	        return Array.from(v);
	    } : function(v) {
	        var ret = [];
	        var it = v[Symbol.iterator]();
	        var itResult;
	        while (!((itResult = it.next()).done)) {
	            ret.push(itResult.value);
	        }
	        return ret;
	    };

	    asArray = function(v) {
	        if (es5.isArray(v)) {
	            return v;
	        } else if (v != null && typeof v[Symbol.iterator] === "function") {
	            return ArrayFrom(v);
	        }
	        return null;
	    };
	}

	var isNode = typeof process !== "undefined" &&
	        classString(process).toLowerCase() === "[object process]";

	var hasEnvVariables = typeof process !== "undefined" &&
	    typeof process.env !== "undefined";

	function env(key) {
	    return hasEnvVariables ? process.env[key] : undefined;
	}

	function getNativePromise() {
	    if (typeof Promise === "function") {
	        try {
	            var promise = new Promise(function(){});
	            if ({}.toString.call(promise) === "[object Promise]") {
	                return Promise;
	            }
	        } catch (e) {}
	    }
	}

	function domainBind(self, cb) {
	    return self.bind(cb);
	}

	var ret = {
	    isClass: isClass,
	    isIdentifier: isIdentifier,
	    inheritedDataKeys: inheritedDataKeys,
	    getDataPropertyOrDefault: getDataPropertyOrDefault,
	    thrower: thrower,
	    isArray: es5.isArray,
	    asArray: asArray,
	    notEnumerableProp: notEnumerableProp,
	    isPrimitive: isPrimitive,
	    isObject: isObject,
	    isError: isError,
	    canEvaluate: canEvaluate,
	    errorObj: errorObj,
	    tryCatch: tryCatch,
	    inherits: inherits,
	    withAppended: withAppended,
	    maybeWrapAsError: maybeWrapAsError,
	    toFastProperties: toFastProperties,
	    filledRange: filledRange,
	    toString: safeToString,
	    canAttachTrace: canAttachTrace,
	    ensureErrorObject: ensureErrorObject,
	    originatesFromRejection: originatesFromRejection,
	    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	    classString: classString,
	    copyDescriptors: copyDescriptors,
	    hasDevTools: typeof chrome !== "undefined" && chrome &&
	                 typeof chrome.loadTimes === "function",
	    isNode: isNode,
	    hasEnvVariables: hasEnvVariables,
	    env: env,
	    global: globalObject,
	    getNativePromise: getNativePromise,
	    domainBind: domainBind
	};
	ret.isRecentNode = ret.isNode && (function() {
	    var version = process.versions.node.split(".").map(Number);
	    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
	})();

	if (ret.isNode) ret.toFastProperties(process);

	try {throw new Error(); } catch (e) {ret.lastLineError = e;}
	module.exports = ret;

	},{"./es5":13}]},{},[4])(4)
	});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), (function() { return this; }()), __webpack_require__(76).setImmediate))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {'use strict';

	var DataTypes = __webpack_require__(123)
	  , SqlString = __webpack_require__(330)
	  , _ = __webpack_require__(127).runInContext() // Prevent anyone messing with template settings by creating a fresh copy
	  , parameterValidator = __webpack_require__(331)
	  , inflection = __webpack_require__(332)
	  , uuid = __webpack_require__(333)
	  , deprecate = __webpack_require__(334)('Utils')
	  , primitives = ['string', 'number', 'boolean'];

	var Utils = module.exports = {
	  inflection: inflection,
	  _: _,
	  camelizeIf: function(string, condition) {
	    var result = string;

	    if (condition) {
	      result = Utils.camelize(string);
	    }

	    return result;
	  },
	  underscoredIf: function(string, condition) {
	    var result = string;

	    if (condition) {
	      result = inflection.underscore(string);
	    }

	    return result;
	  },
	  isPrimitive: function (val) {
	    return primitives.indexOf(typeof val) !== -1;
	  },
	  // Same concept as _.merge, but don't overwrite properties that have already been assigned
	  mergeDefaults: function (a, b) {
	    return _.mergeWith(a, b, function (objectValue, sourceValue) {
	      // If it's an object, let _ handle it this time, we will be called again for each property
	      if (!this._.isPlainObject(objectValue) && objectValue !== undefined) {
	        return objectValue;
	      }
	    }.bind(this));
	  },
	  // An alternative to _.merge, which doesn't clone its arguments
	  // Cloning is a bad idea because options arguments may contain references to sequelize
	  // models - which again reference database libs which don't like to be cloned (in particular pg-native)
	  merge: function () {
	    var result = {};

	    Array.prototype.slice.apply(arguments).forEach(function (obj) {
	      _.forOwn(obj, function (value, key) {
	        if (typeof value !== 'undefined') {
	          if (!result[key]) {
	            result[key] = value;
	          } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {
	            result[key] = Utils.merge(result[key], value);
	          } else if (Array.isArray(value) && Array.isArray(result[key])) {
	            result[key] = value.concat(result[key]);
	          } else {
	            result[key] = value;
	          }
	        }
	      });
	    });

	    return result;
	  },
	  lowercaseFirst: function (s) {
	    return s[0].toLowerCase() + s.slice(1);
	  },
	  uppercaseFirst: function (s) {
	    return s[0].toUpperCase() + s.slice(1);
	  },
	  spliceStr: function (str, index, count, add) {
	    return str.slice(0, index) + add + str.slice(index + count);
	  },
	  camelize: function(str){
	    return str.trim().replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
	  },
	  format: function(arr, dialect) {
	    var timeZone = null;
	    // Make a clone of the array beacuse format modifies the passed args
	    return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);
	  },
	  formatNamedParameters: function(sql, parameters, dialect) {
	    var timeZone = null;
	    return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);
	  },
	  cloneDeep: function(obj) {
	    obj = obj || {};
	    return _.cloneDeepWith(obj, function (elem) {
	      // Do not try to customize cloning of arrays or POJOs
	      if (Array.isArray(elem) || _.isPlainObject(elem)) {
	        return undefined;
	      }

	      // Don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances
	      if (typeof elem === 'object') {
	        return elem;
	      }

	      // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain
	      if (elem && typeof elem.clone === 'function') {
	        return elem.clone();
	      }
	    });
	  },

	  /* Expand and normalize finder options */
	  mapFinderOptions: function(options, Model) {
	    if (Model._hasVirtualAttributes && Array.isArray(options.attributes)) {
	      options.attributes.forEach(function (attribute) {
	        if (Model._isVirtualAttribute(attribute) && Model.rawAttributes[attribute].type.fields) {
	          options.attributes = options.attributes.concat(Model.rawAttributes[attribute].type.fields);
	        }
	      }.bind(Model));
	      options.attributes = _.without.apply(_, [options.attributes].concat(Model._virtualAttributes));
	      options.attributes = _.uniq(options.attributes);
	    }

	    Utils.mapOptionFieldNames(options, Model);

	    return options;
	  },

	  /* Used to map field names in attributes and where conditions */
	  mapOptionFieldNames: function(options, Model) {
	    if (Array.isArray(options.attributes)) {
	      options.attributes = options.attributes.map(function(attr) {
	        // Object lookups will force any variable to strings, we don't want that for special objects etc
	        if (typeof attr !== 'string') return attr;
	        // Map attributes to aliased syntax attributes
	        if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {
	          return [Model.rawAttributes[attr].field, attr];
	        }
	        return attr;
	      });
	    }

	    if (options.where && _.isPlainObject(options.where)) {
	      options.where = Utils.mapWhereFieldNames(options.where, Model);
	    }

	    if (Array.isArray(options.order)) {
	      options.order.forEach(function(oGroup) {
	        var OrderModel, attr, attrOffset;

	        if (Array.isArray(oGroup)) {
	          OrderModel = Model;

	          // Check if we have ['attr', 'DESC'] or [Model, 'attr', 'DESC']
	          if (typeof oGroup[oGroup.length - 2] === 'string') {
	            attrOffset = 2;

	          // Assume ['attr'], [Model, 'attr'] or [seq.fn('somefn', 1), 'DESC']
	          } else {
	            attrOffset = 1;
	          }

	          attr = oGroup[oGroup.length - attrOffset];
	          if (oGroup.length > attrOffset) {
	            OrderModel = oGroup[oGroup.length - (attrOffset + 1)];
	            if (OrderModel.model) {
	              OrderModel = OrderModel.model;
	            }
	          }

	          if (OrderModel.rawAttributes && OrderModel.rawAttributes[attr] && attr !== OrderModel.rawAttributes[attr].field) {
	            oGroup[oGroup.length - attrOffset] = OrderModel.rawAttributes[attr].field;
	          }
	        }
	      });
	    }

	    return options;
	  },

	  mapWhereFieldNames: function (attributes, Model) {
	    var attribute
	      , rawAttribute;

	    if (attributes) {
	      for (attribute in attributes) {
	        rawAttribute = Model.rawAttributes[attribute];

	        if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {
	          attributes[rawAttribute.field] = attributes[attribute];
	          delete attributes[attribute];
	        }

	        if (_.isPlainObject(attributes[attribute])) {
	          attributes[attribute] = Utils.mapOptionFieldNames({
	            where: attributes[attribute]
	          }, Model).where;
	        }

	        if (Array.isArray(attributes[attribute])) {
	          attributes[attribute] = attributes[attribute].map(function (where) {
	            if (_.isPlainObject(where)) {
	              return Utils.mapWhereFieldNames(where, Model);
	            }

	            return where;
	          });
	        }
	      }
	    }

	    return attributes;
	  },

	  /* Used to map field names in values */
	  mapValueFieldNames: function (dataValues, fields, Model) {
	    var values = {};

	    fields.forEach(function(attr) {
	      if (dataValues[attr] !== undefined && !Model._isVirtualAttribute(attr)) {
	        // Field name mapping
	        if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {
	          values[Model.rawAttributes[attr].field] = dataValues[attr];
	        } else {
	          values[attr] = dataValues[attr];
	        }
	      }
	    });

	    return values;
	  },

	  isColString: function(value) {
	    return typeof value === 'string' && value.substr(0, 1) === '$' && value.substr(value.length - 1, 1) === '$';
	  },

	  argsArePrimaryKeys: function(args, primaryKeys) {
	    var result = (args.length === Object.keys(primaryKeys).length);
	    if (result) {
	      Utils._.each(args, function(arg) {
	        if (result) {
	          if (['number', 'string'].indexOf(typeof arg) !== -1) {
	            result = true;
	          } else {
	            result = (arg instanceof Date) || Buffer.isBuffer(arg);
	          }
	        }
	      });
	    }
	    return result;
	  },
	  canTreatArrayAsAnd: function(arr) {
	    return arr.reduce(function(treatAsAnd, arg) {
	      if (treatAsAnd) {
	        return treatAsAnd;
	      } else {
	        return Utils._.isPlainObject(arg);
	      }
	    }, false);
	  },

	  combineTableNames: function(tableName1, tableName2) {
	    return (tableName1.toLowerCase() < tableName2.toLowerCase()) ? (tableName1 + tableName2) : (tableName2 + tableName1);
	  },

	  singularize: function(s) {
	    return inflection.singularize(s);
	  },

	  pluralize: function(s) {
	    return inflection.pluralize(s);
	  },

	  removeCommentsFromFunctionString: function(s) {
	    s = s.replace(/\s*(\/\/.*)/g, '');
	    s = s.replace(/(\/\*[\n\r\s\S]*?\*\/)/mg, '');

	    return s;
	  },

	  toDefaultValue: function(value) {
	    if (typeof value === 'function') {
	      var tmp = value();
	      if (tmp instanceof DataTypes.ABSTRACT) {
	        return tmp.toSql();
	      } else {
	        return tmp;
	      }
	    } else if (value instanceof DataTypes.UUIDV1) {
	      return uuid.v1();
	    } else if (value instanceof DataTypes.UUIDV4) {
	      return uuid.v4();
	    } else if (value instanceof DataTypes.NOW) {
	      return Utils.now();
	    } else if(_.isPlainObject(value) || _.isArray(value)) {
	      return _.clone(value);
	    } else {
	      return value;
	    }
	  },

	  /**
	   * Determine if the default value provided exists and can be described
	   * in a db schema using the DEFAULT directive.
	   *
	   * @param  {*} value Any default value.
	   * @return {boolean} yes / no.
	   */
	  defaultValueSchemable: function(value) {
	    if (typeof value === 'undefined') { return false; }

	    // TODO this will be schemable when all supported db
	    // have been normalized for this case
	    if (value instanceof DataTypes.NOW) { return false; }

	    if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) { return false; }

	    if (_.isFunction(value)) {
	      return false;
	    }

	    return true;
	  },

	  removeNullValuesFromHash: function(hash, omitNull, options) {
	    var result = hash;

	    options = options || {};
	    options.allowNull = options.allowNull || [];

	    if (omitNull) {
	      var _hash = {};

	      Utils._.forIn(hash, function(val, key) {
	        if (options.allowNull.indexOf(key) > -1 || key.match(/Id$/) || ((val !== null) && (val !== undefined))) {
	          _hash[key] = val;
	        }
	      });

	      result = _hash;
	    }

	    return result;
	  },

	  inherit: function(SubClass, SuperClass) {
	    if (SuperClass.constructor === Function) {
	      // Normal Inheritance
	      SubClass.prototype = new SuperClass();
	      SubClass.prototype.constructor = SubClass;
	      SubClass.prototype.parent = SuperClass.prototype;
	    } else {
	      // Pure Virtual Inheritance
	      SubClass.prototype = SuperClass;
	      SubClass.prototype.constructor = SubClass;
	      SubClass.prototype.parent = SuperClass;
	    }

	    return SubClass;
	  },


	  stack: function _stackGrabber() {
	    var orig = Error.prepareStackTrace;
	    Error.prepareStackTrace = function(_, stack) { return stack; };
	    var err = new Error();
	    Error.captureStackTrace(err, _stackGrabber);
	    var errStack = err.stack;
	    Error.prepareStackTrace = orig;
	    return errStack;
	  },

	  sliceArgs: function (args, begin) {
	    begin = begin || 0;
	    var tmp = new Array(args.length - begin);
	    for (var i = begin; i < args.length; ++i) {
	        tmp[i - begin] = args[i];
	    }
	    return tmp;
	  },

	  now: function(dialect) {
	    var now = new Date();
	    if (['postgres', 'sqlite'].indexOf(dialect) === -1) {
	      now.setMilliseconds(0);
	    }
	    return now;
	  },

	  tick: function(func) {
	    var tick = (global.hasOwnProperty('setImmediate') ? global.setImmediate : process.nextTick);
	    tick(func);
	  },

	  // Note: Use the `quoteIdentifier()` and `escape()` methods on the
	  // `QueryInterface` instead for more portable code.

	  TICK_CHAR: '`',
	  addTicks: function(s, tickChar) {
	    tickChar = tickChar || Utils.TICK_CHAR;
	    return tickChar + Utils.removeTicks(s, tickChar) + tickChar;
	  },
	  removeTicks: function(s, tickChar) {
	    tickChar = tickChar || Utils.TICK_CHAR;
	    return s.replace(new RegExp(tickChar, 'g'), '');
	  },

	  /*
	   * Utility functions for representing SQL functions, and columns that should be escaped.
	   * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.
	   */
	  fn: function(fn, args) {
	    this.fn = fn;
	    this.args = args;
	  },

	  col: function(col) {
	    if (arguments.length > 1) {
	      col = this.sliceArgs(arguments);
	    }
	    this.col = col;
	  },

	  cast: function(val, type) {
	    this.val = val;
	    this.type = (type || '').trim();
	  },

	  literal: function(val) {
	    this.val = val;
	  },

	  json: function(conditionsOrPath, value) {
	    if (Utils._.isObject(conditionsOrPath)) {
	      this.conditions = conditionsOrPath;
	    } else {
	      this.path = conditionsOrPath;
	      if (value) {
	        this.value = value;
	      }
	    }
	  },

	  where: function(attribute, comparator, logic) {
	    if (logic === undefined) {
	      logic = comparator;
	      comparator = '=';
	    }

	    this.attribute = attribute;
	    this.comparator = comparator;
	    this.logic = logic;
	  },

	  validateParameter: parameterValidator,

	  formatReferences: function (obj) {
	    if (!_.isPlainObject(obj.references)) {
	      deprecate('Non-object references property found. Support for that will be removed in version 4. Expected { references: { model: "value", key: "key" } } instead of { references: "value", referencesKey: "key" }.');
	      obj.references = { model: obj.references, key: obj.referencesKey, deferrable: obj.referencesDeferrable };
	      obj.referencesKey = undefined;
	      obj.referencesDeferrable = undefined;
	    }

	    return obj;
	  }
	};

	Utils.where.prototype._isSequelizeMethod =
	Utils.literal.prototype._isSequelizeMethod =
	Utils.cast.prototype._isSequelizeMethod =
	Utils.fn.prototype._isSequelizeMethod =
	Utils.col.prototype._isSequelizeMethod =
	Utils.json.prototype._isSequelizeMethod = true;

	Utils.fn.prototype.clone = function() {
	  return new Utils.fn(this.fn, this.args);
	};

	Utils.Promise = __webpack_require__(335);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer, (function() { return this; }()), __webpack_require__(28)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	/*jshint -W110 */

	var util = __webpack_require__(124)
	  , _ = __webpack_require__(127)
	  , Wkt = __webpack_require__(128)
	  , sequelizeErrors = __webpack_require__(130)
	  , warnings = {}
	  , Validator = __webpack_require__(131)
	  , momentTz = __webpack_require__(195)
	  , moment = __webpack_require__(197);

	/**
	 * A convenience class holding commonly used data types. The datatypes are used when defining a new model using `Sequelize.define`, like this:
	 * ```js
	 * sequelize.define('model', {
	 *   column: DataTypes.INTEGER
	 * })
	 * ```
	 * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean
	 * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.
	 *
	 * Some data types have special properties that can be accessed in order to change the data type.
	 * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.
	 * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well. The available properties are listed under each data type.
	 *
	 * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`
	 *
	 * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for
	 * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:
	 * ```js
	 * sequelize.define('model', {
	 *   uuid: {
	 *     type: DataTypes.UUID,
	 *     defaultValue: DataTypes.UUIDV1,
	 *     primaryKey: true
	 *   }
	 * })
	 * ```
	 * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplised
	 * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value
	 * from a function.
	 * ```js
	 * sequelize.define('model', {
	 *   uuid: {
	 *     type: DataTypes.UUID,
	 *     defaultValue: function() {
	 *       return generateMyId()
	 *     },
	 *     primaryKey: true
	 *   }
	 * })
	 * ```
	 *
	 * @class DataTypes
	 */

	var ABSTRACT = function(options) {
	};

	ABSTRACT.prototype.dialectTypes = '';

	ABSTRACT.prototype.toString = function(options) {
	  return this.toSql(options);
	};
	ABSTRACT.prototype.toSql = function() {
	  return this.key;
	};
	ABSTRACT.warn = function(link, text) {
	  if (!warnings[text]) {
	    warnings[text] = true;
	    console.warn('>> WARNING:', text, '\n>> Check:', link);
	  }
	};
	ABSTRACT.prototype.stringify = function (value, options) {
	  if (this.$stringify) {
	    return this.$stringify(value, options);
	  }
	  return value;
	};

	ABSTRACT.inherits = function (Constructor) {
	  var baseType = this;

	  if (!Constructor) {
	    Constructor = function () {
	      if (!(this instanceof Constructor)) {
	        var args = [null].concat(arguments);
	        var FactoryFunction = Constructor.bind.apply(Constructor, args);
	        return new FactoryFunction();
	      }
	      baseType.apply(this, arguments);
	    };
	  }

	  util.inherits(Constructor, baseType); // Instance (prototype) methods
	  _.extend(Constructor, this); // Static methods

	  return Constructor;
	};


	/**
	 * A variable length string. Default length 255
	 *
	 * Available properties: `BINARY`
	 *
	 * @property STRING
	 */
	var STRING = ABSTRACT.inherits(function(length, binary) {
	  var options = typeof length === 'object' && length || {
	    length: length,
	    binary: binary
	  };

	  if (!(this instanceof STRING)) return new STRING(options);

	  this.options = options;
	  this._binary = options.binary;
	  this._length = options.length || 255;
	});

	STRING.prototype.key = STRING.key = 'STRING';
	STRING.prototype.toSql = function() {
	  return 'VARCHAR(' + this._length + ')' + ((this._binary) ? ' BINARY' : '');
	};
	STRING.prototype.validate = function(value) {
	  if (Object.prototype.toString.call(value) !== '[object String]') {
	    if ((this.options.binary && Buffer.isBuffer(value)) || _.isNumber(value)) {
	      return true;
	    }
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));
	  }

	  return true;
	};
	Object.defineProperty(STRING.prototype, 'BINARY', {
	  get: function() {
	    this._binary = true;
	    this.options.binary = true;
	    return this;
	  }
	});

	/**
	 * A fixed length string. Default length 255
	 *
	 * Available properties: `BINARY`
	 *
	 * @property CHAR
	 */
	var CHAR = STRING.inherits(function(length, binary) {
	  var options = typeof length === 'object' && length || {
	    length: length,
	    binary: binary
	  };

	  if (!(this instanceof CHAR)) return new CHAR(options);
	  STRING.apply(this, arguments);
	});

	CHAR.prototype.key = CHAR.key = 'CHAR';
	CHAR.prototype.toSql = function() {
	  return 'CHAR(' + this._length + ')' + ((this._binary) ? ' BINARY' : '');
	};

	/**
	 * An (un)limited length text column. Available lengths: `tiny`, `medium`, `long`
	 * @property TEXT
	 */
	var TEXT = ABSTRACT.inherits(function(length) {
	  var options = typeof length === 'object' && length || {
	    length: length
	  };
	  if (!(this instanceof TEXT)) return new TEXT(options);
	  this.options = options;
	  this._length = options.length || '';
	});

	TEXT.prototype.key = TEXT.key = 'TEXT';
	TEXT.prototype.toSql = function() {
	  switch (this._length.toLowerCase()) {
	  case 'tiny':
	    return 'TINYTEXT';
	  case 'medium':
	    return 'MEDIUMTEXT';
	  case 'long':
	    return 'LONGTEXT';
	  default:
	    return this.key;
	  }
	};
	TEXT.prototype.validate = function(value) {
	  if (!_.isString(value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));
	   }

	  return true;
	};

	var NUMBER = ABSTRACT.inherits(function(options) {
	  this.options = options;
	  this._length = options.length;
	  this._zerofill = options.zerofill;
	  this._decimals = options.decimals;
	  this._precision = options.precision;
	  this._scale = options.scale;
	  this._unsigned = options.unsigned;
	});

	NUMBER.prototype.key = NUMBER.key = 'NUMBER';
	NUMBER.prototype.toSql = function() {
	  var result = this.key;
	  if (this._length) {
	    result += '(' + this._length;
	    if (typeof this._decimals === 'number') {
	      result += ',' + this._decimals;
	    }
	    result += ')';
	  }
	  if (this._unsigned) {
	    result += ' UNSIGNED';
	  }
	  if (this._zerofill) {
	    result += ' ZEROFILL';
	  }
	  return result;
	};

	NUMBER.prototype.validate = function(value) {
	  if (!Validator.isFloat(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid number', value));
	  }

	  return true;
	};

	Object.defineProperty(NUMBER.prototype, 'UNSIGNED', {
	  get: function() {
	    this._unsigned = true;
	    this.options.unsigned = true;
	    return this;
	  }
	});
	Object.defineProperty(NUMBER.prototype, 'ZEROFILL', {
	  get: function() {
	    this._zerofill = true;
	    this.options.zerofill = true;
	    return this;
	  }
	});

	/**
	 * A 32 bit integer.
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property INTEGER
	 */
	var INTEGER = NUMBER.inherits(function(length) {
	  var options = typeof length === 'object' && length || {
	    length: length
	  };
	  if (!(this instanceof INTEGER)) return new INTEGER(options);
	  NUMBER.call(this, options);
	});

	INTEGER.prototype.key = INTEGER.key = 'INTEGER';
	INTEGER.prototype.validate = function(value) {
	  if (!Validator.isInt(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid integer', value));
	  }

	  return true;
	};

	/**
	 * A 64 bit integer.
	 *
	 * Note: an attribute defined as `BIGINT` will be treated like a `string` due this [feature from node-postgres](https://github.com/brianc/node-postgres/pull/353) to prevent precision loss. To have this attribute as a `number`, this is a possible [workaround](https://github.com/sequelize/sequelize/issues/2383#issuecomment-58006083).
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property BIGINT
	 */

	var BIGINT = NUMBER.inherits(function(length) {
	  var options = typeof length === 'object' && length || {
	    length: length
	  };
	  if (!(this instanceof BIGINT)) return new BIGINT(options);
	  NUMBER.call(this, options);
	});

	BIGINT.prototype.key = BIGINT.key = 'BIGINT';
	BIGINT.prototype.validate = function(value) {
	  if (!Validator.isInt(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid bigint', value));
	  }

	  return true;
	};

	/**
	 * Floating point number (4-byte precision). Accepts one or two arguments for precision
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property FLOAT
	 */
	var FLOAT = NUMBER.inherits(function(length, decimals) {
	  var options = typeof length === 'object' && length || {
	    length: length,
	    decimals: decimals
	  };
	  if (!(this instanceof FLOAT)) return new FLOAT(options);
	  NUMBER.call(this, options);
	});

	FLOAT.prototype.key = FLOAT.key = 'FLOAT';
	FLOAT.prototype.validate = function(value) {
	  if (!Validator.isFloat(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));
	  }

	  return true;
	};

	/**
	 * Floating point number (4-byte precision). Accepts one or two arguments for precision
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property REAL
	 */
	var REAL = NUMBER.inherits(function(length, decimals) {
	  var options = typeof length === 'object' && length || {
	    length: length,
	    decimals: decimals
	  };
	  if (!(this instanceof REAL)) return new REAL(options);
	  NUMBER.call(this, options);
	});

	REAL.prototype.key = REAL.key = 'REAL';

	/**
	 * Floating point number (8-byte precision). Accepts one or two arguments for precision
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property DOUBLE
	 */
	var DOUBLE = NUMBER.inherits(function(length, decimals) {
	  var options = typeof length === 'object' && length || {
	    length: length,
	    decimals: decimals
	  };
	  if (!(this instanceof DOUBLE)) return new DOUBLE(options);
	  NUMBER.call(this, options);
	});

	DOUBLE.prototype.key = DOUBLE.key = 'DOUBLE PRECISION';

	/**
	 * Decimal number. Accepts one or two arguments for precision
	 *
	 * Available properties: `UNSIGNED`, `ZEROFILL`
	 *
	 * @property DECIMAL
	 */
	var DECIMAL = NUMBER.inherits(function(precision, scale) {
	  var options = typeof precision === 'object' && precision || {
	    precision: precision,
	    scale: scale
	  };
	  if (!(this instanceof DECIMAL)) return new DECIMAL(options);
	  NUMBER.call(this, options);
	});

	DECIMAL.prototype.key = DECIMAL.key = 'DECIMAL';
	DECIMAL.prototype.toSql = function() {
	  if (this._precision || this._scale) {
	    return 'DECIMAL(' + [this._precision, this._scale].filter(_.identity).join(',') + ')';
	  }

	  return 'DECIMAL';
	};
	DECIMAL.prototype.validate = function(value) {
	  if (!Validator.isDecimal(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));
	  }

	  return true;
	};

	[FLOAT, DOUBLE, REAL].forEach(function (floating) {
	  floating.prototype.escape = false;
	  floating.prototype.$stringify = function (value) {
	    if (isNaN(value)) {
	      return "'NaN'";
	    } else if (!isFinite(value)) {
	      var sign = value < 0 ? '-' : '';
	      return "'" + sign + "Infinity'";
	    }

	    return value;
	  };
	});

	/**
	 * A boolean / tinyint column, depending on dialect
	 * @property BOOLEAN
	 */
	var BOOLEAN = ABSTRACT.inherits();

	BOOLEAN.prototype.key = BOOLEAN.key = 'BOOLEAN';
	BOOLEAN.prototype.toSql = function() {
	  return 'TINYINT(1)';
	};
	BOOLEAN.prototype.validate = function(value) {
	  if (!Validator.isBoolean(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));
	  }

	  return true;
	};

	/**
	 * A time column
	 * @property TIME
	 */

	var TIME = ABSTRACT.inherits();

	TIME.prototype.key = TIME.key = 'TIME';
	TIME.prototype.toSql = function() {
	  return 'TIME';
	};

	/**
	 * A datetime column
	 * @property DATE
	 */
	var DATE = ABSTRACT.inherits(function (length) {
	  var options = typeof length === 'object' && length || {
	      length: length
	    };

	  if (!(this instanceof DATE)) return new DATE(options);

	  this.options = options;
	  this._length = options.length || '';
	});

	DATE.prototype.key = DATE.key = 'DATE';
	DATE.prototype.toSql = function() {
	  return 'DATETIME';
	};
	DATE.prototype.validate = function(value) {
	  if (!Validator.isDate(String(value))) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));
	  }

	  return true;
	};

	DATE.prototype.$applyTimezone = function (date, options) {
	  if (options.timezone) {
	    if (momentTz.tz.zone(options.timezone)) {
	      date = momentTz(date).tz(options.timezone);
	    } else {
	      date = moment(date).utcOffset(options.timezone);
	    }
	  } else {
	    date = momentTz(date);
	  }

	  return date;
	};

	DATE.prototype.$stringify = function (date, options) {
	  date = this.$applyTimezone(date, options);

	  // Z here means current timezone, _not_ UTC
	  return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');
	};

	/**
	 * A date only column
	 * @property DATEONLY
	 */

	var DATEONLY = function() {
	  if (!(this instanceof DATEONLY)) return new DATEONLY();
	  ABSTRACT.apply(this, arguments);
	};
	util.inherits(DATEONLY, ABSTRACT);

	DATEONLY.prototype.key = DATEONLY.key = 'DATEONLY';
	DATEONLY.prototype.toSql = function() {
	  return 'DATE';
	};

	/**
	 * A key / value column. Only available in postgres.
	 * @property HSTORE
	 */

	var HSTORE = ABSTRACT.inherits();

	HSTORE.prototype.key = HSTORE.key = 'HSTORE';
	HSTORE.prototype.validate = function(value) {
	  if (!_.isPlainObject(value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));
	  }

	  return true;
	};

	/**
	 * A JSON string column. Only available in postgres.
	 * @property JSON
	 */
	var JSONTYPE = function() {
	  if (!(this instanceof JSONTYPE)) return new JSONTYPE();
	  ABSTRACT.apply(this, arguments);
	};
	util.inherits(JSONTYPE, ABSTRACT);

	JSONTYPE.prototype.key = JSONTYPE.key = 'JSON';
	JSONTYPE.prototype.validate = function(value) {
	  return true;
	};

	JSONTYPE.prototype.$stringify = function (value, options) {
	  return JSON.stringify(value);
	};

	/**
	 * A pre-processed JSON data column. Only available in postgres.
	 * @property JSONB
	 */
	var JSONB = function() {
	  if (!(this instanceof JSONB)) return new JSONB();
	  JSONTYPE.apply(this, arguments);
	};
	util.inherits(JSONB, JSONTYPE);

	JSONB.prototype.key = JSONB.key = 'JSONB';

	/**
	 * A default value of the current timestamp
	 * @property NOW
	 */
	var NOW = ABSTRACT.inherits();

	NOW.prototype.key = NOW.key = 'NOW';

	/**
	 * Binary storage. Available lengths: `tiny`, `medium`, `long`
	 *
	 * @property BLOB
	 */

	var BLOB = ABSTRACT.inherits(function(length) {
	  var options = typeof length === 'object' && length || {
	    length: length
	  };
	  if (!(this instanceof BLOB)) return new BLOB(options);
	  this.options = options;
	  this._length = options.length || '';
	});

	BLOB.prototype.key = BLOB.key = 'BLOB';
	BLOB.prototype.toSql = function() {
	  switch (this._length.toLowerCase()) {
	  case 'tiny':
	    return 'TINYBLOB';
	  case 'medium':
	    return 'MEDIUMBLOB';
	  case 'long':
	    return 'LONGBLOB';
	  default:
	    return this.key;
	  }
	};
	BLOB.prototype.validate = function(value) {
	  if (!_.isString(value) && !Buffer.isBuffer(value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));
	  }

	  return true;
	};

	BLOB.prototype.escape = false;
	BLOB.prototype.$stringify = function (value) {
	  if (!Buffer.isBuffer(value)) {
	    if (Array.isArray(value)) {
	      value = new Buffer(value);
	    } else {
	      value = new Buffer(value.toString());
	    }
	  }
	  var hex = value.toString('hex');

	  return this.$hexify(hex);
	};

	BLOB.prototype.$hexify = function (hex) {
	  return "X'" + hex + "'";
	};

	/**
	 * Range types are data types representing a range of values of some element type (called the range's subtype).
	 * Only available in postgres.
	 * See {@link http://www.postgresql.org/docs/9.4/static/rangetypes.html|Postgres documentation} for more details
	 * @property RANGE
	 */

	var RANGE = ABSTRACT.inherits(function (subtype) {
	  var options = _.isPlainObject(subtype) ? subtype : { subtype: subtype };

	  if (!options.subtype) options.subtype = new INTEGER();

	  if (_.isFunction(options.subtype)) {
	    options.subtype = new options.subtype();
	  }

	  if (!(this instanceof RANGE)) return new RANGE(options);
	  ABSTRACT.apply(this, arguments);

	  this._subtype = options.subtype.key;
	  this.options = options;
	});

	var pgRangeSubtypes = {
	  integer: 'int4range',
	  bigint: 'int8range',
	  decimal: 'numrange',
	  dateonly: 'daterange',
	  date: 'tstzrange',
	  datenotz: 'tsrange'
	};

	RANGE.prototype.key = RANGE.key = 'RANGE';
	RANGE.prototype.toSql = function() {
	  return pgRangeSubtypes[this._subtype.toLowerCase()];
	};
	RANGE.prototype.validate = function(value) {
	  if (_.isPlainObject(value) && value.inclusive) {
	    value = value.inclusive;
	  }

	  if (!_.isArray(value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));
	  }

	  if (value.length !== 2) {
	    throw new sequelizeErrors.ValidationError('A range must be an array with two elements');
	  }

	  return true;
	};


	/**
	 * A column storing a unique universal identifier. Use with `UUIDV1` or `UUIDV4` for default values.
	 * @property UUID
	 */
	var UUID = ABSTRACT.inherits();

	UUID.prototype.key = UUID.key = 'UUID';
	UUID.prototype.validate = function(value, options) {
	  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));
	  }

	  return true;
	};

	/**
	 * A default unique universal identifier generated following the UUID v1 standard
	 * @property UUIDV1
	 */

	var UUIDV1 = function() {
	  if (!(this instanceof UUIDV1)) return new UUIDV1();
	  ABSTRACT.apply(this, arguments);
	};
	util.inherits(UUIDV1, ABSTRACT);

	UUIDV1.prototype.key = UUIDV1.key = 'UUIDV1';
	UUIDV1.prototype.validate = function(value, options) {
	  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));
	  }

	  return true;
	};

	/**
	 * A default unique universal identifier generated following the UUID v4 standard
	 * @property UUIDV4
	 */

	var UUIDV4 = function() {
	  if (!(this instanceof UUIDV4)) return new UUIDV4();
	  ABSTRACT.apply(this, arguments);
	};
	util.inherits(UUIDV4, ABSTRACT);

	UUIDV4.prototype.key = UUIDV4.key = 'UUIDV4';
	UUIDV4.prototype.validate = function(value, options) {
	  if (!_.isString(value) || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));
	  }

	  return true;
	};

	/**
	 * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.
	 *
	 * You could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:
	 * ```js
	 * sequelize.define('user', {
	 *   password_hash: DataTypes.STRING,
	 *   password: {
	 *     type: DataTypes.VIRTUAL,
	 *     set: function (val) {
	 *        this.setDataValue('password', val); // Remember to set the data value, otherwise it won't be validated
	 *        this.setDataValue('password_hash', this.salt + val);
	 *      },
	 *      validate: {
	 *         isLongEnough: function (val) {
	 *           if (val.length < 7) {
	 *             throw new Error("Please choose a longer password")
	 *          }
	 *       }
	 *     }
	 *   }
	 * })
	 * ```
	 * In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.
	 *
	 * VIRTUAL also takes a return type and dependency fields as arguments
	 * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.
	 * Return type is mostly useful for setups that rely on types like GraphQL.
	 * ```js
	 * {
	 *   active: {
	 *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),
	 *     get: function() {
	 *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * @property VIRTUAL
	 * @alias NONE
	 */
	var VIRTUAL = function(ReturnType, fields) {
	  if (!(this instanceof VIRTUAL)) return new VIRTUAL(ReturnType, fields);
	  if (typeof ReturnType === 'function') ReturnType = new ReturnType();

	  this.returnType = ReturnType;
	  this.fields = fields;
	};
	util.inherits(VIRTUAL, ABSTRACT);

	VIRTUAL.prototype.key = VIRTUAL.key = 'VIRTUAL';

	/**
	 * An enumeration. `DataTypes.ENUM('value', 'another value')`.
	 *
	 * @property ENUM
	 */
	var ENUM = ABSTRACT.inherits(function(value) {
	  var options = typeof value === 'object' && !Array.isArray(value) && value || {
	    values: Array.prototype.slice.call(arguments).reduce(function(result, element) {
	      return result.concat(Array.isArray(element) ? element : [element]);
	    }, [])
	  };
	  if (!(this instanceof ENUM)) return new ENUM(options);
	  this.values = options.values;
	  this.options = options;
	});

	ENUM.prototype.key = ENUM.key = 'ENUM';
	ENUM.prototype.validate = function(value) {
	  if (!_.includes(this.values, value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));
	  }

	  return true;
	};

	/**
	 * An array of `type`, e.g. `DataTypes.ARRAY(DataTypes.DECIMAL)`. Only available in postgres.
	 * @property ARRAY
	 */
	var ARRAY = function(type) {
	  var options = _.isPlainObject(type) ? type : {
	    type: type
	  };
	  if (!(this instanceof ARRAY)) return new ARRAY(options);
	  this.type = typeof options.type === 'function' ? new options.type() : options.type;
	};
	util.inherits(ARRAY, ABSTRACT);

	ARRAY.prototype.key = ARRAY.key = 'ARRAY';
	ARRAY.prototype.toSql = function() {
	  return this.type.toSql() + '[]';
	};
	ARRAY.prototype.validate = function(value) {
	  if (!_.isArray(value)) {
	    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));
	  }

	  return true;
	};
	ARRAY.is = function(obj, type) {
	  return obj instanceof ARRAY && obj.type instanceof type;
	};

	var helpers = {
	  BINARY: [STRING, CHAR],
	  UNSIGNED: [NUMBER, INTEGER, BIGINT, FLOAT, DOUBLE, REAL],
	  ZEROFILL: [NUMBER, INTEGER, BIGINT, FLOAT, DOUBLE, REAL],
	  PRECISION: [DECIMAL],
	  SCALE: [DECIMAL]
	};

	/**
	 * A column storing Geometry information.
	 *
	 * Only available in PostgreSQL (with PostGIS) or MySQL.
	 * In MySQL, allowable Geometry types are 'POINT', 'LINESTRING', 'POLYGON'.
	 *
	 * When using, GeoJSON is accepted as input and returned as output.
	 * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.
	 * In MySQL it is parsed using the function `GeomFromText`.
	 * Therefore, one can just follow the [GeoJSON spec](http://geojson.org/geojson-spec.html) for handling geometry objects.  See the following examples:
	 *
	 * ```js
	 * // Create a new point:
	 * var point = { type: 'Point', coordinates: [39.807222,-76.984722]};
	 *
	 * User.create({username: 'username', geometry: point }).then(function(newUser) {
	 * ...
	 * });
	 *
	 * // Create a new linestring:
	 * var line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };
	 *
	 * User.create({username: 'username', geometry: line }).then(function(newUser) {
	 * ...
	 * });
	 *
	 * // Create a new polygon:
	 * var polygon = { type: 'Polygon', coordinates: [
	 *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],
	 *                   [100.0, 1.0], [100.0, 0.0] ]
	 *                 ]};
	 *
	 * User.create({username: 'username', geometry: polygon }).then(function(newUser) {
	 * ...
	 * });

	 * // Create a new point with a custom SRID:
	 * var point = {
	 *   type: 'Point',
	 *   coordinates: [39.807222,-76.984722],
	 *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }
	 * };
	 *
	 * User.create({username: 'username', geometry: point }).then(function(newUser) {
	 * ...
	 * });
	 * ```
	 *
	 * @property GEOMETRY
	 */

	var GEOMETRY = ABSTRACT.inherits(function(type, srid) {
	  var options = _.isPlainObject(type) ? type : {
	    type: type,
	    srid: srid
	  };

	  if (!(this instanceof GEOMETRY)) return new GEOMETRY(options);

	  this.options = options;
	  this.type = options.type;
	  this.srid = options.srid;
	});

	GEOMETRY.prototype.key = GEOMETRY.key = 'GEOMETRY';

	GEOMETRY.prototype.escape = false;
	GEOMETRY.prototype.$stringify = function (value, options) {
	  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';
	};

	/**
	 * A geography datatype represents two dimensional spacial objects in an elliptic coord system.
	 * @property GEOGRAPHY
	 */

	var GEOGRAPHY = ABSTRACT.inherits(function(type, srid) {
	  var options = _.isPlainObject(type) ? type : {
	    type: type,
	    srid: srid
	  };

	  if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(options);

	  this.options = options;
	  this.type = options.type;
	  this.srid = options.srid;
	});

	GEOGRAPHY.prototype.key = GEOGRAPHY.key = 'GEOGRAPHY';

	GEOGRAPHY.prototype.escape = false;
	GEOGRAPHY.prototype.$stringify = function (value, options) {
	  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';
	};

	Object.keys(helpers).forEach(function (helper) {
	  helpers[helper].forEach(function (DataType) {
	    if (!DataType[helper]) {
	      Object.defineProperty(DataType, helper, {
	        get: function() {
	          var dataType = new DataType();
	          if (typeof dataType[helper] === 'object') {
	            return dataType;
	          }
	          return dataType[helper].apply(dataType, arguments);
	        }
	      });
	    }
	  });
	});

	var dataTypes = {
	  ABSTRACT: ABSTRACT,
	  STRING: STRING,
	  CHAR: CHAR,
	  TEXT: TEXT,
	  NUMBER: NUMBER,
	  INTEGER: INTEGER,
	  BIGINT: BIGINT,
	  FLOAT: FLOAT,
	  TIME: TIME,
	  DATE: DATE,
	  DATEONLY: DATEONLY,
	  BOOLEAN: BOOLEAN,
	  NOW: NOW,
	  BLOB: BLOB,
	  DECIMAL: DECIMAL,
	  NUMERIC: DECIMAL,
	  UUID: UUID,
	  UUIDV1: UUIDV1,
	  UUIDV4: UUIDV4,
	  HSTORE: HSTORE,
	  JSON: JSONTYPE,
	  JSONB: JSONB,
	  VIRTUAL: VIRTUAL,
	  ARRAY: ARRAY,
	  NONE: VIRTUAL,
	  ENUM: ENUM,
	  RANGE: RANGE,
	  REAL: REAL,
	  DOUBLE: DOUBLE,
	  'DOUBLE PRECISION': DOUBLE,
	  GEOMETRY: GEOMETRY,
	  GEOGRAPHY: GEOGRAPHY
	};

	_.each(dataTypes, function (dataType) {
	  dataType.types = {};
	});

	dataTypes.postgres = __webpack_require__(308)(dataTypes);
	dataTypes.mysql = __webpack_require__(327)(dataTypes);
	dataTypes.mariadb = dataTypes.mysql;
	dataTypes.sqlite = __webpack_require__(328)(dataTypes);
	dataTypes.mssql = __webpack_require__(329)(dataTypes);

	module.exports = dataTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(125);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(126);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(28)))

/***/ },
/* 125 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 126 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash <https://lodash.com/>
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.12.0';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;

	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	    rsUpper + '+' + rsOptUpperContr,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `exports`. */
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	    ? exports
	    : undefined;

	  /** Detect free variable `module`. */
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	    ? module
	    : undefined;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = (freeModule && freeModule.exports === freeExports)
	    ? freeExports
	    : undefined;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	  /** Detect free variable `window`. */
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal ||
	    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	      freeSelf || thisGlobal || Function('return this')();

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    return !!array.length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element
	   *  instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFind(collection, predicate, eachFunc, retKey) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = retKey ? key : value;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array ? array.length : 0;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a cache value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

	    /** Built-in constructor references. */
	    var Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype,
	        stringProto = context.String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        clearTimeout = context.clearTimeout,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetPrototype = Object.getPrototypeOf,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReplace = stringProto.replace,
	        nativeReverse = arrayProto.reverse,
	        nativeSplit = stringProto.split;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
	     * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,
	     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,
	     * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
	     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
	     * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,
	     * `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,
	     * `noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`,
	     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
	     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
	     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
	     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toFinite`,
	     * `toInteger`, `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`,
	     * `toString`, `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,
	     * `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      return getMapData(this, key)['delete'](key);
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      getMapData(this, key).set(key, value);
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      this.__data__ = new ListCache(entries);
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      return this.__data__['delete'](key);
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var cache = this.__data__;
	      if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
	        cache = this.__data__ = new MapCache(cache.__data__);
	      }
	      cache.set(key, value);
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (!isArr) {
	        var props = isFull ? getAllKeys(value) : keys(value);
	      }
	      // Recursively populate clone (susceptible to call stack limits).
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source),
	          length = props.length;

	      return function(object) {
	        if (object == null) {
	          return !length;
	        }
	        var index = length;
	        while (index--) {
	          var key = props[index],
	              predicate = source[key],
	              value = object[key];

	          if ((value === undefined &&
	              !(key in Object(object))) || !predicate(value)) {
	            return false;
	          }
	        }
	        return true;
	      };
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototype(object) === null);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[toKey(path)];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      return nativeKeys(Object(object));
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);

	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }

	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      if (!(isArray(source) || isTypedArray(source))) {
	        var props = keysIn(source);
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      stack.set(srcValue, newValue);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	      }
	      stack['delete'](srcValue);
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return arrayReduce(props, function(result, key) {
	        if (key in object) {
	          result[key] = object[key];
	        }
	        return result;
	      }, {});
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, predicate) {
	      var index = -1,
	          props = getAllKeysIn(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[toKey(last(path))];
	            }
	          }
	          else {
	            delete array[toKey(index)];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]);
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);

	      var key = toKey(last(path));
	      return !(object != null && baseHas(object, key)) || delete object[key];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;

	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : source[key];

	        assignValue(object, key, newValue);
	      }
	      return object;
	    }

	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return rest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBaseWrapper(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurryWrapper(func, bitmask, arity) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return rest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);

	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return 0;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return rest(function(iteratees) {
	        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
	          : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	        return rest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return result;
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = toInteger(precision);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     *   512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBaseWrapper(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurryWrapper(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartialWrapper(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

	      stack.set(array, other);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!seen.has(othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	                  return seen.add(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and
	          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
	          // not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object) ? other != +other : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	          stack.set(object, other);

	          // Recursively compare objects (susceptible to call stack limits).
	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a
	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	     * Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = toPairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
	    function getPrototype(value) {
	      return nativeGetPrototype(Object(value));
	    }

	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    function getSymbols(object) {
	      // Coerce `object` to an object to avoid non-object errors in V8.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	      return getOwnPropertySymbols(Object(object));
	    }

	    // Fallback for IE < 11.
	    if (!getOwnPropertySymbols) {
	      getSymbols = function() {
	        return [];
	      };
	    }

	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function getTag(value) {
	      return objectToString.call(value);
	    }

	    // Fallback for data views, maps, sets, and weak maps in IE 11,
	    // for data views in Edge, and promises in Node.js.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : undefined;

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var result,
	          index = -1,
	          length = path.length;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result) {
	        return result;
	      }
	      var length = object ? object.length : 0;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isString(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value);
	    }

	    /**
	     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
	     * iteratee shorthand.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenableIteratee(value) {
	      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	      }
	      return objValue;
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoize(function(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to process.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length,
	          args = Array(length ? length - 1 : 0),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return length
	        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
	        : [];
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other given
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([3, 2, 1], [4, 2]);
	     * // => [3, 1]
	     */
	    var difference = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	     * // => [3.1, 1.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = rest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = rest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3))
	        : -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3), true)
	        : -1;
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      fromIndex = toInteger(fromIndex);
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [4, 2], [1, 2]);
	     * // => [2]
	     */
	    var intersection = rest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = rest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = rest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (
	          index < 0
	            ? nativeMax(length + index, 0)
	            : nativeMin(index, length - 1)
	        ) + 1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the element at `n` index of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    var pull = rest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = rest(function(array, indexes) {
	      indexes = baseFlatten(indexes, 1);

	      var length = array ? array.length : 0,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2, 1], [4, 2], [1, 2]);
	     * // => [2, 1, 4]
	     */
	    var union = rest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1, 1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [4, 2]);
	     * // => [1, 4]
	     */
	    var xor = rest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = rest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = rest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     *
	     * _(['a', 'b', 'c']).at(0, 2).value();
	     * // => ['a', 'c']
	     */
	    var wrapperAt = rest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    function find(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate, true);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function, it's
	     * invoked for and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = rest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getIteratee(predicate, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;

	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = baseClamp(toInteger(n), 0, length);
	      }
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      if (isObjectLike(collection)) {
	        var tag = getTag(collection);
	        if (tag == mapTag || tag == setTag) {
	          return collection.size;
	        }
	      }
	      return keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    var sortBy = rest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	        ? iteratees[0]
	        : baseFlatten(iteratees, 1, isFlattenableIteratee);

	      return baseOrderBy(collection, iteratees, []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @type {Function}
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred function to be invoked.
	     */
	    var now = Date.now;

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = rest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = rest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime = 0,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (!lastCallTime || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        clearTimeout(timerId);
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastCallTime = lastInvokeTime = 0;
	        lastArgs = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one or more milliseconds.
	     */
	    var defer = rest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = rest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrapper(func, FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [transforms[_.identity]] The functions to transform.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = rest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return rest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = rest(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, array);
	          case 1: return func.call(this, args[0], array);
	          case 2: return func.call(this, args[0], args[1], array);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return rest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @type {Function}
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    function isArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = !Buffer ? constant(false) : function(value) {
	      return value instanceof Buffer;
	    };

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) || isFunction(value.splice) ||
	            isArguments(value) || isBuffer(value))) {
	        return !value.length;
	      }
	      if (isObjectLike(value)) {
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return !(nonEnumShadows && keys(value).length);
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    function isMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    function isSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.c = 3;
	     * }
	     *
	     * function Bar() {
	     *   this.e = 5;
	     * }
	     *
	     * Foo.prototype.d = 4;
	     * Bar.prototype.f = 6;
	     *
	     * _.assign({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3, 'e': 5 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * function Bar() {
	     *   this.d = 4;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     * Bar.prototype.e = 5;
	     *
	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     *
	     * _.at(['a', 'b', 'c'], 0, 2);
	     * // => ['a', 'c']
	     */
	    var at = rest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = rest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = rest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = rest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = rest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), toKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      predicate = getIteratee(predicate);
	      return basePickBy(object, function(value, key) {
	        return !predicate(value, key);
	      });
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = rest(function(object, props) {
	      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. The iteratee is invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (separator == '' && reHasComplexSymbol.test(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return nativeSplit.call(string, separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      return string.lastIndexOf(baseToString(target), position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = rest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, 'onClick');
	     * jQuery(element).on('click', view.onClick);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = rest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        key = toKey(key);
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return rest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = rest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = rest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at `n` index. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return rest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over(Math.max, Math.min);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    });

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    });

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), baseGt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), baseLt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    });

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    });

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.deburr = deburr;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      predicate = getIteratee(predicate, 3);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Expose Lodash on the free variable `window` or `self` when available so it's
	  // globally accessible, even when bundled with Browserify, Webpack, etc. This
	  // also prevents errors in cases where Lodash is loaded by a script tag in the
	  // presence of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch
	  // for more details. Use `_.noConflict` to remove Lodash from the global object.
	  (freeWindow || freeSelf || {})._ = _;

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(98)(module), (function() { return this; }())))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	(function (root, factory) {

	  // Node.
	  if(typeof module === 'object' && typeof module.exports === 'object') {
	    exports = module.exports = factory(__webpack_require__(129));
	  } else if(typeof navigator === "object") {
	    // Browser Global.
	    if (!root.Terraformer){
	      throw new Error("Terraformer.WKT requires the core Terraformer library. http://github.com/esri/terraformer")
	    }
	    root.Terraformer.WKT = factory(root.Terraformer);
	  }

	}(this, function(Terraformer) {
	  var exports = { };

	  /* Jison generated parser */
	var parser = (function(){
	var parser = {trace: function trace() { },
	yy: {},
	symbols_: {"error":2,"expressions":3,"point":4,"EOF":5,"linestring":6,"polygon":7,"multipoint":8,"multilinestring":9,"multipolygon":10,"coordinate":11,"DOUBLE_TOK":12,"ptarray":13,"COMMA":14,"ring_list":15,"ring":16,"(":17,")":18,"POINT":19,"Z":20,"ZM":21,"M":22,"EMPTY":23,"point_untagged":24,"polygon_list":25,"polygon_untagged":26,"point_list":27,"LINESTRING":28,"POLYGON":29,"MULTIPOINT":30,"MULTILINESTRING":31,"MULTIPOLYGON":32,"$accept":0,"$end":1},
	terminals_: {2:"error",5:"EOF",12:"DOUBLE_TOK",14:"COMMA",17:"(",18:")",19:"POINT",20:"Z",21:"ZM",22:"M",23:"EMPTY",28:"LINESTRING",29:"POLYGON",30:"MULTIPOINT",31:"MULTILINESTRING",32:"MULTIPOLYGON"},
	productions_: [0,[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[11,2],[11,3],[11,4],[13,3],[13,1],[15,3],[15,1],[16,3],[4,4],[4,5],[4,5],[4,5],[4,2],[24,1],[24,3],[25,3],[25,1],[26,3],[27,3],[27,1],[6,4],[6,5],[6,5],[6,5],[6,2],[7,4],[7,5],[7,5],[7,5],[7,2],[8,4],[8,5],[8,5],[8,5],[8,2],[9,4],[9,5],[9,5],[9,5],[9,2],[10,4],[10,5],[10,5],[10,5],[10,2]],
	performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$,_$
	/**/) {

	var $0 = $.length - 1;
	switch (yystate) {
	case 1: return $[$0-1]; 
	break;
	case 2: return $[$0-1]; 
	break;
	case 3: return $[$0-1]; 
	break;
	case 4: return $[$0-1]; 
	break;
	case 5: return $[$0-1]; 
	break;
	case 6: return $[$0-1]; 
	break;
	case 7: this.$ = new PointArray([ Number($[$0-1]), Number($[$0]) ]); 
	break;
	case 8: this.$ = new PointArray([ Number($[$0-2]), Number($[$0-1]), Number($[$0]) ]); 
	break;
	case 9: this.$ = new PointArray([ Number($[$0-3]), Number($[$0-2]), Number($[$0-1]), Number($[$0]) ]); 
	break;
	case 10: this.$ = $[$0-2].addPoint($[$0]); 
	break;
	case 11: this.$ = $[$0]; 
	break;
	case 12: this.$ = $[$0-2].addRing($[$0]); 
	break;
	case 13: this.$ = new RingList($[$0]); 
	break;
	case 14: this.$ = new Ring($[$0-1]); 
	break;
	case 15: this.$ = { "type": "Point", "coordinates": $[$0-1].data[0] }; 
	break;
	case 16: this.$ = { "type": "Point", "coordinates": $[$0-1].data[0], "properties": { z: true } }; 
	break;
	case 17: this.$ = { "type": "Point", "coordinates": $[$0-1].data[0], "properties": { z: true, m: true } }; 
	break;
	case 18: this.$ = { "type": "Point", "coordinates": $[$0-1].data[0], "properties": { m: true } }; 
	break;
	case 19: this.$ = { "type": "Point", "coordinates": [ ] }; 
	break;
	case 20: this.$ = $[$0]; 
	break;
	case 21: this.$ = $[$0-1]; 
	break;
	case 22: this.$ = $[$0-2].addPolygon($[$0]); 
	break;
	case 23: this.$ = new PolygonList($[$0]); 
	break;
	case 24: this.$ = $[$0-1]; 
	break;
	case 25: this.$ = $[$0-2].addPoint($[$0]); 
	break;
	case 26: this.$ = $[$0]; 
	break;
	case 27: this.$ = { "type": "LineString", "coordinates": $[$0-1].data }; 
	break;
	case 28: this.$ = { "type": "LineString", "coordinates": $[$0-1].data, "properties": { z: true } }; 
	break;
	case 29: this.$ = { "type": "LineString", "coordinates": $[$0-1].data, "properties": { m: true } }; 
	break;
	case 30: this.$ = { "type": "LineString", "coordinates": $[$0-1].data, "properties": { z: true, m: true } }; 
	break;
	case 31: this.$ = { "type": "LineString", "coordinates": [ ] }; 
	break;
	case 32: this.$ = { "type": "Polygon", "coordinates": $[$0-1].toJSON() }; 
	break;
	case 33: this.$ = { "type": "Polygon", "coordinates": $[$0-1].toJSON(), "properties": { z: true } }; 
	break;
	case 34: this.$ = { "type": "Polygon", "coordinates": $[$0-1].toJSON(), "properties": { m: true } }; 
	break;
	case 35: this.$ = { "type": "Polygon", "coordinates": $[$0-1].toJSON(), "properties": { z: true, m: true } }; 
	break;
	case 36: this.$ = { "type": "Polygon", "coordinates": [ ] }; 
	break;
	case 37: this.$ = { "type": "MultiPoint", "coordinates": $[$0-1].data }; 
	break;
	case 38: this.$ = { "type": "MultiPoint", "coordinates": $[$0-1].data, "properties": { z: true } }; 
	break;
	case 39: this.$ = { "type": "MultiPoint", "coordinates": $[$0-1].data, "properties": { m: true } }; 
	break;
	case 40: this.$ = { "type": "MultiPoint", "coordinates": $[$0-1].data, "properties": { z: true, m: true } }; 
	break;
	case 41: this.$ = { "type": "MultiPoint", "coordinates": [ ] } 
	break;
	case 42: this.$ = { "type": "MultiLineString", "coordinates": $[$0-1].toJSON() }; 
	break;
	case 43: this.$ = { "type": "MultiLineString", "coordinates": $[$0-1].toJSON(), "properties": { z: true } }; 
	break;
	case 44: this.$ = { "type": "MultiLineString", "coordinates": $[$0-1].toJSON(), "properties": { m: true } }; 
	break;
	case 45: this.$ = { "type": "MultiLineString", "coordinates": $[$0-1].toJSON(), "properties": { z: true, m: true } }; 
	break;
	case 46: this.$ = { "type": "MultiLineString", "coordinates": [ ] }; 
	break;
	case 47: this.$ = { "type": "MultiPolygon", "coordinates": $[$0-1].toJSON() }; 
	break;
	case 48: this.$ = { "type": "MultiPolygon", "coordinates": $[$0-1].toJSON(), "properties": { z: true } }; 
	break;
	case 49: this.$ = { "type": "MultiPolygon", "coordinates": $[$0-1].toJSON(), "properties": { m: true } }; 
	break;
	case 50: this.$ = { "type": "MultiPolygon", "coordinates": $[$0-1].toJSON(), "properties": { z: true, m: true } }; 
	break;
	case 51: this.$ = { "type": "MultiPolygon", "coordinates": [ ] }; 
	break;
	}
	},
	table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,19:[1,8],28:[1,9],29:[1,10],30:[1,11],31:[1,12],32:[1,13]},{1:[3]},{5:[1,14]},{5:[1,15]},{5:[1,16]},{5:[1,17]},{5:[1,18]},{5:[1,19]},{17:[1,20],20:[1,21],21:[1,22],22:[1,23],23:[1,24]},{17:[1,25],20:[1,26],21:[1,28],22:[1,27],23:[1,29]},{17:[1,30],20:[1,31],21:[1,33],22:[1,32],23:[1,34]},{17:[1,35],20:[1,36],21:[1,38],22:[1,37],23:[1,39]},{17:[1,40],20:[1,41],21:[1,43],22:[1,42],23:[1,44]},{17:[1,45],20:[1,46],21:[1,48],22:[1,47],23:[1,49]},{1:[2,1]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{1:[2,6]},{11:51,12:[1,52],13:50},{17:[1,53]},{17:[1,54]},{17:[1,55]},{5:[2,19]},{11:58,12:[1,52],17:[1,59],24:57,27:56},{17:[1,60]},{17:[1,61]},{17:[1,62]},{5:[2,31]},{15:63,16:64,17:[1,65]},{17:[1,66]},{17:[1,67]},{17:[1,68]},{5:[2,36]},{11:58,12:[1,52],17:[1,59],24:57,27:69},{17:[1,70]},{17:[1,71]},{17:[1,72]},{5:[2,41]},{15:73,16:64,17:[1,65]},{17:[1,74]},{17:[1,75]},{17:[1,76]},{5:[2,46]},{17:[1,79],25:77,26:78},{17:[1,80]},{17:[1,81]},{17:[1,82]},{5:[2,51]},{14:[1,84],18:[1,83]},{14:[2,11],18:[2,11]},{12:[1,85]},{11:51,12:[1,52],13:86},{11:51,12:[1,52],13:87},{11:51,12:[1,52],13:88},{14:[1,90],18:[1,89]},{14:[2,26],18:[2,26]},{14:[2,20],18:[2,20]},{11:91,12:[1,52]},{11:58,12:[1,52],17:[1,59],24:57,27:92},{11:58,12:[1,52],17:[1,59],24:57,27:93},{11:58,12:[1,52],17:[1,59],24:57,27:94},{14:[1,96],18:[1,95]},{14:[2,13],18:[2,13]},{11:51,12:[1,52],13:97},{15:98,16:64,17:[1,65]},{15:99,16:64,17:[1,65]},{15:100,16:64,17:[1,65]},{14:[1,90],18:[1,101]},{11:58,12:[1,52],17:[1,59],24:57,27:102},{11:58,12:[1,52],17:[1,59],24:57,27:103},{11:58,12:[1,52],17:[1,59],24:57,27:104},{14:[1,96],18:[1,105]},{15:106,16:64,17:[1,65]},{15:107,16:64,17:[1,65]},{15:108,16:64,17:[1,65]},{14:[1,110],18:[1,109]},{14:[2,23],18:[2,23]},{15:111,16:64,17:[1,65]},{17:[1,79],25:112,26:78},{17:[1,79],25:113,26:78},{17:[1,79],25:114,26:78},{5:[2,15]},{11:115,12:[1,52]},{12:[1,116],14:[2,7],18:[2,7]},{14:[1,84],18:[1,117]},{14:[1,84],18:[1,118]},{14:[1,84],18:[1,119]},{5:[2,27]},{11:58,12:[1,52],17:[1,59],24:120},{18:[1,121]},{14:[1,90],18:[1,122]},{14:[1,90],18:[1,123]},{14:[1,90],18:[1,124]},{5:[2,32]},{16:125,17:[1,65]},{14:[1,84],18:[1,126]},{14:[1,96],18:[1,127]},{14:[1,96],18:[1,128]},{14:[1,96],18:[1,129]},{5:[2,37]},{14:[1,90],18:[1,130]},{14:[1,90],18:[1,131]},{14:[1,90],18:[1,132]},{5:[2,42]},{14:[1,96],18:[1,133]},{14:[1,96],18:[1,134]},{14:[1,96],18:[1,135]},{5:[2,47]},{17:[1,79],26:136},{14:[1,96],18:[1,137]},{14:[1,110],18:[1,138]},{14:[1,110],18:[1,139]},{14:[1,110],18:[1,140]},{14:[2,10],18:[2,10]},{12:[1,141],14:[2,8],18:[2,8]},{5:[2,16]},{5:[2,17]},{5:[2,18]},{14:[2,25],18:[2,25]},{14:[2,21],18:[2,21]},{5:[2,28]},{5:[2,29]},{5:[2,30]},{14:[2,12],18:[2,12]},{14:[2,14],18:[2,14]},{5:[2,33]},{5:[2,34]},{5:[2,35]},{5:[2,38]},{5:[2,39]},{5:[2,40]},{5:[2,43]},{5:[2,44]},{5:[2,45]},{14:[2,22],18:[2,22]},{14:[2,24],18:[2,24]},{5:[2,48]},{5:[2,49]},{5:[2,50]},{14:[2,9],18:[2,9]}],
	defaultActions: {14:[2,1],15:[2,2],16:[2,3],17:[2,4],18:[2,5],19:[2,6],24:[2,19],29:[2,31],34:[2,36],39:[2,41],44:[2,46],49:[2,51],83:[2,15],89:[2,27],95:[2,32],101:[2,37],105:[2,42],109:[2,47],117:[2,16],118:[2,17],119:[2,18],122:[2,28],123:[2,29],124:[2,30],127:[2,33],128:[2,34],129:[2,35],130:[2,38],131:[2,39],132:[2,40],133:[2,43],134:[2,44],135:[2,45],138:[2,48],139:[2,49],140:[2,50]},
	parseError: function parseError(str, hash) {
	    throw new Error(str);
	},
	parse: function parse(input) {
	    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
	    this.lexer.setInput(input);
	    this.lexer.yy = this.yy;
	    this.yy.lexer = this.lexer;
	    this.yy.parser = this;
	    if (typeof this.lexer.yylloc == "undefined")
	        this.lexer.yylloc = {};
	    var yyloc = this.lexer.yylloc;
	    lstack.push(yyloc);
	    var ranges = this.lexer.options && this.lexer.options.ranges;
	    if (typeof this.yy.parseError === "function")
	        this.parseError = this.yy.parseError;
	    function popStack(n) {
	        stack.length = stack.length - 2 * n;
	        vstack.length = vstack.length - n;
	        lstack.length = lstack.length - n;
	    }
	    function lex() {
	        var token;
	        token = self.lexer.lex() || 1;
	        if (typeof token !== "number") {
	            token = self.symbols_[token] || token;
	        }
	        return token;
	    }
	    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
	    while (true) {
	        state = stack[stack.length - 1];
	        if (this.defaultActions[state]) {
	            action = this.defaultActions[state];
	        } else {
	            if (symbol === null || typeof symbol == "undefined") {
	                symbol = lex();
	            }
	            action = table[state] && table[state][symbol];
	        }
	        if (typeof action === "undefined" || !action.length || !action[0]) {
	            var errStr = "";
	            if (!recovering) {
	                expected = [];
	                for (p in table[state])
	                    if (this.terminals_[p] && p > 2) {
	                        expected.push("'" + this.terminals_[p] + "'");
	                    }
	                if (this.lexer.showPosition) {
	                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                } else {
	                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
	                }
	                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
	            }
	        }
	        if (action[0] instanceof Array && action.length > 1) {
	            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	        }
	        switch (action[0]) {
	        case 1:
	            stack.push(symbol);
	            vstack.push(this.lexer.yytext);
	            lstack.push(this.lexer.yylloc);
	            stack.push(action[1]);
	            symbol = null;
	            if (!preErrorSymbol) {
	                yyleng = this.lexer.yyleng;
	                yytext = this.lexer.yytext;
	                yylineno = this.lexer.yylineno;
	                yyloc = this.lexer.yylloc;
	                if (recovering > 0)
	                    recovering--;
	            } else {
	                symbol = preErrorSymbol;
	                preErrorSymbol = null;
	            }
	            break;
	        case 2:
	            len = this.productions_[action[1]][1];
	            yyval.$ = vstack[vstack.length - len];
	            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
	            if (ranges) {
	                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	            }
	            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	            if (typeof r !== "undefined") {
	                return r;
	            }
	            if (len) {
	                stack = stack.slice(0, -1 * len * 2);
	                vstack = vstack.slice(0, -1 * len);
	                lstack = lstack.slice(0, -1 * len);
	            }
	            stack.push(this.productions_[action[1]][0]);
	            vstack.push(yyval.$);
	            lstack.push(yyval._$);
	            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	            stack.push(newState);
	            break;
	        case 3:
	            return true;
	        }
	    }
	    return true;
	}
	};
	undefined/* Jison generated lexer */
	var lexer = (function(){
	var lexer = ({EOF:1,
	parseError:function parseError(str, hash) {
	        if (this.yy.parser) {
	            this.yy.parser.parseError(str, hash);
	        } else {
	            throw new Error(str);
	        }
	    },
	setInput:function (input) {
	        this._input = input;
	        this._more = this._less = this.done = false;
	        this.yylineno = this.yyleng = 0;
	        this.yytext = this.matched = this.match = '';
	        this.conditionStack = ['INITIAL'];
	        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
	        if (this.options.ranges) this.yylloc.range = [0,0];
	        this.offset = 0;
	        return this;
	    },
	input:function () {
	        var ch = this._input[0];
	        this.yytext += ch;
	        this.yyleng++;
	        this.offset++;
	        this.match += ch;
	        this.matched += ch;
	        var lines = ch.match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno++;
	            this.yylloc.last_line++;
	        } else {
	            this.yylloc.last_column++;
	        }
	        if (this.options.ranges) this.yylloc.range[1]++;

	        this._input = this._input.slice(1);
	        return ch;
	    },
	unput:function (ch) {
	        var len = ch.length;
	        var lines = ch.split(/(?:\r\n?|\n)/g);

	        this._input = ch + this._input;
	        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
	        //this.yyleng -= len;
	        this.offset -= len;
	        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	        this.match = this.match.substr(0, this.match.length-1);
	        this.matched = this.matched.substr(0, this.matched.length-1);

	        if (lines.length-1) this.yylineno -= lines.length-1;
	        var r = this.yylloc.range;

	        this.yylloc = {first_line: this.yylloc.first_line,
	          last_line: this.yylineno+1,
	          first_column: this.yylloc.first_column,
	          last_column: lines ?
	              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
	              this.yylloc.first_column - len
	          };

	        if (this.options.ranges) {
	            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	        }
	        return this;
	    },
	more:function () {
	        this._more = true;
	        return this;
	    },
	less:function (n) {
	        this.unput(this.match.slice(n));
	    },
	pastInput:function () {
	        var past = this.matched.substr(0, this.matched.length - this.match.length);
	        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
	    },
	upcomingInput:function () {
	        var next = this.match;
	        if (next.length < 20) {
	            next += this._input.substr(0, 20-next.length);
	        }
	        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
	    },
	showPosition:function () {
	        var pre = this.pastInput();
	        var c = new Array(pre.length + 1).join("-");
	        return pre + this.upcomingInput() + "\n" + c+"^";
	    },
	next:function () {
	        if (this.done) {
	            return this.EOF;
	        }
	        if (!this._input) this.done = true;

	        var token,
	            match,
	            tempMatch,
	            index,
	            col,
	            lines;
	        if (!this._more) {
	            this.yytext = '';
	            this.match = '';
	        }
	        var rules = this._currentRules();
	        for (var i=0;i < rules.length; i++) {
	            tempMatch = this._input.match(this.rules[rules[i]]);
	            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                match = tempMatch;
	                index = i;
	                if (!this.options.flex) break;
	            }
	        }
	        if (match) {
	            lines = match[0].match(/(?:\r\n?|\n).*/g);
	            if (lines) this.yylineno += lines.length;
	            this.yylloc = {first_line: this.yylloc.last_line,
	                           last_line: this.yylineno+1,
	                           first_column: this.yylloc.last_column,
	                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
	            this.yytext += match[0];
	            this.match += match[0];
	            this.matches = match;
	            this.yyleng = this.yytext.length;
	            if (this.options.ranges) {
	                this.yylloc.range = [this.offset, this.offset += this.yyleng];
	            }
	            this._more = false;
	            this._input = this._input.slice(match[0].length);
	            this.matched += match[0];
	            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
	            if (this.done && this._input) this.done = false;
	            if (token) return token;
	            else return;
	        }
	        if (this._input === "") {
	            return this.EOF;
	        } else {
	            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
	                    {text: "", token: null, line: this.yylineno});
	        }
	    },
	lex:function lex() {
	        var r = this.next();
	        if (typeof r !== 'undefined') {
	            return r;
	        } else {
	            return this.lex();
	        }
	    },
	begin:function begin(condition) {
	        this.conditionStack.push(condition);
	    },
	popState:function popState() {
	        return this.conditionStack.pop();
	    },
	_currentRules:function _currentRules() {
	        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
	    },
	topState:function () {
	        return this.conditionStack[this.conditionStack.length-2];
	    },
	pushState:function begin(condition) {
	        this.begin(condition);
	    }});
	lexer.options = {};
	lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
	/**/) {

	var YYSTATE=YY_START
	switch($avoiding_name_collisions) {
	case 0:// ignore
	break;
	case 1:return 17
	break;
	case 2:return 18
	break;
	case 3:return 12
	break;
	case 4:return 19
	break;
	case 5:return 28
	break;
	case 6:return 29
	break;
	case 7:return 30
	break;
	case 8:return 31
	break;
	case 9:return 32
	break;
	case 10:return 14
	break;
	case 11:return 23
	break;
	case 12:return 22
	break;
	case 13:return 20
	break;
	case 14:return 21
	break;
	case 15:return 5
	break;
	case 16:return "INVALID"
	break;
	}
	};
	lexer.rules = [/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:-?[0-9]+(\.[0-9]+)?([eE][\-\+]?[0-9]+)?)/,/^(?:POINT\b)/,/^(?:LINESTRING\b)/,/^(?:POLYGON\b)/,/^(?:MULTIPOINT\b)/,/^(?:MULTILINESTRING\b)/,/^(?:MULTIPOLYGON\b)/,/^(?:,)/,/^(?:EMPTY\b)/,/^(?:M\b)/,/^(?:Z\b)/,/^(?:ZM\b)/,/^(?:$)/,/^(?:.)/];
	lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"inclusive":true}};
	return lexer;})()
	parser.lexer = lexer;
	function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
	return new Parser;
	})();

	  function PointArray (point) {
	    this.data = [ point ];
	    this.type = 'PointArray';
	  }

	  PointArray.prototype.addPoint = function (point) {
	    if (point.type === 'PointArray') {
	      this.data = this.data.concat(point.data);
	    } else {
	      this.data.push(point);
	    }

	    return this;
	  };

	  PointArray.prototype.toJSON = function () {
	    return this.data;
	  };

	  function Ring (point) {
	    this.data = point;
	    this.type = 'Ring';
	  }

	  Ring.prototype.toJSON = function () {
	    var data = [ ];

	    for (var i = 0; i < this.data.data.length; i++) {
	      data.push(this.data.data[i]);
	    }

	    return data;
	  };

	  function RingList (ring) {
	    this.data = [ ring ];
	    this.type = 'RingList';
	  }

	  RingList.prototype.addRing = function (ring) {
	    this.data.push(ring);

	    return this;
	  };

	  RingList.prototype.toJSON = function () {
	    var data = [ ];

	    for (var i = 0; i < this.data.length; i++) {
	      data.push(this.data[i].toJSON());
	    }

	    if (data.length === 1) {
	      return data;
	    } else {
	      return data;
	    }
	  };

	  function PolygonList (polygon) {
	    this.data = [ polygon ];
	    this.type = 'PolygonList';
	  }

	  PolygonList.prototype.addPolygon = function (polygon) {
	    this.data.push(polygon);

	    return this;
	  };

	  PolygonList.prototype.toJSON = function () {
	    var data = [ ];

	    for (var i = 0; i < this.data.length; i++) {
	      data = data.concat( [ this.data[i].toJSON() ] );
	    }

	    return data;
	  };

	  function _parse () {
	    return parser.parse.apply(parser, arguments);
	  }

	  function parse (element) {
	    var res, primitive;

	    try {
	      res = parser.parse(element);
	    } catch (err) {
	      throw Error("Unable to parse: " + err);
	    }

	    return Terraformer.Primitive(res);
	  }

	  function arrayToRing (arr) {
	    var parts = [ ], ret = '';

	    for (var i = 0; i < arr.length; i++) {
	      parts.push(arr[i].join(' '));
	    }

	    ret += '(' + parts.join(', ') + ')';

	    return ret;

	  }

	  function pointToWKTPoint (primitive) {
	    var ret = 'POINT ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates.length === 3) {
	      // 3d or time? default to 3d
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates.length === 4) {
	      // 3d and time
	      ret += 'ZM ';
	    }

	    // include coordinates
	    ret += '(' + primitive.coordinates.join(' ') + ')';

	    return ret;
	  }

	  function lineStringToWKTLineString (primitive) {
	    var ret = 'LINESTRING ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0 || primitive.coordinates[0].length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates[0].length === 3) {
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates[0].length === 4) {
	      ret += 'ZM ';
	    }

	    ret += arrayToRing(primitive.coordinates);

	    return ret;
	  }

	  function polygonToWKTPolygon (primitive) {
	    var ret = 'POLYGON ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0 || primitive.coordinates[0].length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates[0][0].length === 3) {
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates[0][0].length === 4) {
	      ret += 'ZM ';
	    }

	    ret += '(';
	    var parts = [ ];
	    for (var i = 0; i < primitive.coordinates.length; i++) {
	      parts.push(arrayToRing(primitive.coordinates[i]));
	    }

	    ret += parts.join(', ');
	    ret += ')';

	    return ret;
	  }

	  function multiPointToWKTMultiPoint (primitive) {
	    var ret = 'MULTIPOINT ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0 || primitive.coordinates[0].length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates[0].length === 3) {
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates[0].length === 4) {
	      ret += 'ZM ';
	    }

	    ret += arrayToRing(primitive.coordinates);

	    return ret;
	  }

	  function multiLineStringToWKTMultiLineString (primitive) {
	    var ret = 'MULTILINESTRING ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0 || primitive.coordinates[0].length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates[0][0].length === 3) {
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates[0][0].length === 4) {
	      ret += 'ZM ';
	    }

	    ret += '(';
	    var parts = [ ];
	    for (var i = 0; i < primitive.coordinates.length; i++) {
	      parts.push(arrayToRing(primitive.coordinates[i]));
	    }

	    ret += parts.join(', ');
	    ret += ')';

	    return ret;
	  }

	  function multiPolygonToWKTMultiPolygon (primitive) {
	    var ret = 'MULTIPOLYGON ';

	    if (primitive.coordinates === undefined || primitive.coordinates.length === 0 || primitive.coordinates[0].length === 0) {
	      ret += 'EMPTY';

	      return ret;
	    } else if (primitive.coordinates[0][0][0].length === 3) {
	      if (primitive.properties && primitive.properties.m === true) {
	        ret += 'M ';
	      } else {
	        ret += 'Z ';
	      }
	    } else if (primitive.coordinates[0][0][0].length === 4) {
	      ret += 'ZM ';
	    }

	    ret += '(';
	    var inner = [ ];
	    for (var c = 0; c < primitive.coordinates.length; c++) {
	      var it = '(';
	      var parts = [ ];
	      for (var i = 0; i < primitive.coordinates[c].length; i++) {
	        parts.push(arrayToRing(primitive.coordinates[c][i]));
	      }

	      it += parts.join(', ');
	      it += ')';

	      inner.push(it);
	    }

	    ret += inner.join(', ');
	    ret += ')';

	    return ret;
	  }

	  function convert (primitive) {
	    switch (primitive.type) {
	      case 'Point':
	        return pointToWKTPoint(primitive);
	      case 'LineString':
	        return lineStringToWKTLineString(primitive);
	      case 'Polygon':
	        return polygonToWKTPolygon(primitive);
	      case 'MultiPoint':
	        return multiPointToWKTMultiPoint(primitive);
	      case 'MultiLineString':
	        return multiLineStringToWKTMultiLineString(primitive);
	      case 'MultiPolygon':
	        return multiPolygonToWKTMultiPolygon(primitive);
	      default:
	        throw Error ("Unknown Type: " + primitive.type);
	    }
	  }



	  exports.parser  = parser;
	  exports.Parser  = parser.Parser;
	  exports.parse   = parse;
	  exports.convert = convert;

	  return exports;
	}));


/***/ },
/* 129 */
/***/ function(module, exports) {

	(function (root, factory) {

	  // Node.
	  if(typeof module === 'object' && typeof module.exports === 'object') {
	    exports = module.exports = factory();
	  }

	  // Browser Global.
	  if(typeof window === "object") {
	    root.Terraformer = factory();
	  }

	}(this, function(){
	  var exports = {},
	      EarthRadius = 6378137,
	      DegreesPerRadian = 57.295779513082320,
	      RadiansPerDegree =  0.017453292519943,
	      MercatorCRS = {
	        "type": "link",
	        "properties": {
	          "href": "http://spatialreference.org/ref/sr-org/6928/ogcwkt/",
	          "type": "ogcwkt"
	        }
	      },
	      GeographicCRS = {
	        "type": "link",
	        "properties": {
	          "href": "http://spatialreference.org/ref/epsg/4326/ogcwkt/",
	          "type": "ogcwkt"
	        }
	      };

	  /*
	  Internal: isArray function
	  */
	  function isArray(obj) {
	    return Object.prototype.toString.call(obj) === "[object Array]";
	  }

	  /*
	  Internal: safe warning
	  */
	  function warn() {
	    var args = Array.prototype.slice.apply(arguments);

	    if (typeof console !== undefined && console.warn) {
	      console.warn.apply(console, args);
	    }
	  }

	  /*
	  Internal: Extend one object with another.
	  */
	  function extend(destination, source) {
	    for (var k in source) {
	      if (source.hasOwnProperty(k)) {
	        destination[k] = source[k];
	      }
	    }
	    return destination;
	  }

	  /*
	  Public: Calculate an bounding box for a geojson object
	  */
	  function calculateBounds (geojson) {
	    if(geojson.type){
	      switch (geojson.type) {
	        case 'Point':
	          return [ geojson.coordinates[0], geojson.coordinates[1], geojson.coordinates[0], geojson.coordinates[1]];

	        case 'MultiPoint':
	          return calculateBoundsFromArray(geojson.coordinates);

	        case 'LineString':
	          return calculateBoundsFromArray(geojson.coordinates);

	        case 'MultiLineString':
	          return calculateBoundsFromNestedArrays(geojson.coordinates);

	        case 'Polygon':
	          return calculateBoundsFromNestedArrays(geojson.coordinates);

	        case 'MultiPolygon':
	          return calculateBoundsFromNestedArrayOfArrays(geojson.coordinates);

	        case 'Feature':
	          return geojson.geometry? calculateBounds(geojson.geometry) : null;

	        case 'FeatureCollection':
	          return calculateBoundsForFeatureCollection(geojson);

	        case 'GeometryCollection':
	          return calculateBoundsForGeometryCollection(geojson);

	        default:
	          throw new Error("Unknown type: " + geojson.type);
	      }
	    }
	    return null;
	  }

	  /*
	  Internal: Calculate an bounding box from an nested array of positions
	  [
	    [
	      [ [lng, lat],[lng, lat],[lng, lat] ]
	    ]
	    [
	      [lng, lat],[lng, lat],[lng, lat]
	    ]
	    [
	      [lng, lat],[lng, lat],[lng, lat]
	    ]
	  ]
	  */
	  function calculateBoundsFromNestedArrays (array) {
	    var x1 = null, x2 = null, y1 = null, y2 = null;

	    for (var i = 0; i < array.length; i++) {
	      var inner = array[i];

	      for (var j = 0; j < inner.length; j++) {
	        var lonlat = inner[j];

	        var lon = lonlat[0];
	        var lat = lonlat[1];

	        if (x1 === null) {
	          x1 = lon;
	        } else if (lon < x1) {
	          x1 = lon;
	        }

	        if (x2 === null) {
	          x2 = lon;
	        } else if (lon > x2) {
	          x2 = lon;
	        }

	        if (y1 === null) {
	          y1 = lat;
	        } else if (lat < y1) {
	          y1 = lat;
	        }

	        if (y2 === null) {
	          y2 = lat;
	        } else if (lat > y2) {
	          y2 = lat;
	        }
	      }
	    }

	    return [x1, y1, x2, y2 ];
	  }

	  /*
	  Internal: Calculate a bounding box from an array of arrays of arrays
	  [
	    [ [lng, lat],[lng, lat],[lng, lat] ]
	    [ [lng, lat],[lng, lat],[lng, lat] ]
	    [ [lng, lat],[lng, lat],[lng, lat] ]
	  ]
	  */
	  function calculateBoundsFromNestedArrayOfArrays (array) {
	    var x1 = null, x2 = null, y1 = null, y2 = null;

	    for (var i = 0; i < array.length; i++) {
	      var inner = array[i];

	      for (var j = 0; j < inner.length; j++) {
	        var innerinner = inner[j];
	        for (var k = 0; k < innerinner.length; k++) {
	          var lonlat = innerinner[k];

	          var lon = lonlat[0];
	          var lat = lonlat[1];

	          if (x1 === null) {
	            x1 = lon;
	          } else if (lon < x1) {
	            x1 = lon;
	          }

	          if (x2 === null) {
	            x2 = lon;
	          } else if (lon > x2) {
	            x2 = lon;
	          }

	          if (y1 === null) {
	            y1 = lat;
	          } else if (lat < y1) {
	            y1 = lat;
	          }

	          if (y2 === null) {
	            y2 = lat;
	          } else if (lat > y2) {
	            y2 = lat;
	          }
	        }
	      }
	    }

	    return [x1, y1, x2, y2];
	  }

	  /*
	  Internal: Calculate a bounding box from an array of positions
	  [
	    [lng, lat],[lng, lat],[lng, lat]
	  ]
	  */
	  function calculateBoundsFromArray (array) {
	    var x1 = null, x2 = null, y1 = null, y2 = null;

	    for (var i = 0; i < array.length; i++) {
	      var lonlat = array[i];
	      var lon = lonlat[0];
	      var lat = lonlat[1];

	      if (x1 === null) {
	        x1 = lon;
	      } else if (lon < x1) {
	        x1 = lon;
	      }

	      if (x2 === null) {
	        x2 = lon;
	      } else if (lon > x2) {
	        x2 = lon;
	      }

	      if (y1 === null) {
	        y1 = lat;
	      } else if (lat < y1) {
	        y1 = lat;
	      }

	      if (y2 === null) {
	        y2 = lat;
	      } else if (lat > y2) {
	        y2 = lat;
	      }
	    }

	    return [x1, y1, x2, y2 ];
	  }

	  /*
	  Internal: Calculate an bounding box for a feature collection
	  */
	  function calculateBoundsForFeatureCollection(featureCollection){
	    var extents = [], extent;
	    for (var i = featureCollection.features.length - 1; i >= 0; i--) {
	      extent = calculateBounds(featureCollection.features[i].geometry);
	      extents.push([extent[0],extent[1]]);
	      extents.push([extent[2],extent[3]]);
	    }

	    return calculateBoundsFromArray(extents);
	  }

	  /*
	  Internal: Calculate an bounding box for a geometry collection
	  */
	  function calculateBoundsForGeometryCollection(geometryCollection){
	    var extents = [], extent;

	    for (var i = geometryCollection.geometries.length - 1; i >= 0; i--) {
	      extent = calculateBounds(geometryCollection.geometries[i]);
	      extents.push([extent[0],extent[1]]);
	      extents.push([extent[2],extent[3]]);
	    }

	    return calculateBoundsFromArray(extents);
	  }

	  function calculateEnvelope(geojson){
	    var bounds = calculateBounds(geojson);
	    return {
	      x: bounds[0],
	      y: bounds[1],
	      w: Math.abs(bounds[0] - bounds[2]),
	      h: Math.abs(bounds[1] - bounds[3])
	    };
	  }

	  /*
	  Internal: Convert radians to degrees. Used by spatial reference converters.
	  */
	  function radToDeg(rad) {
	    return rad * DegreesPerRadian;
	  }

	  /*
	  Internal: Convert degrees to radians. Used by spatial reference converters.
	  */
	  function degToRad(deg) {
	    return deg * RadiansPerDegree;
	  }

	  /*
	  Internal: Loop over each array in a geojson object and apply a function to it. Used by spatial reference converters.
	  */
	  function eachPosition(coordinates, func) {
	    for (var i = 0; i < coordinates.length; i++) {
	      // we found a number so lets convert this pair
	      if(typeof coordinates[i][0] === "number"){
	        coordinates[i] = func(coordinates[i]);
	      }
	      // we found an coordinates array it again and run THIS function against it
	      if(typeof coordinates[i] === "object"){
	        coordinates[i] = eachPosition(coordinates[i], func);
	      }
	    }
	    return coordinates;
	  }

	  /*
	  Public: Convert a GeoJSON Position object to Geographic (4326)
	  */
	  function positionToGeographic(position) {
	    var x = position[0];
	    var y = position[1];
	    return [radToDeg(x / EarthRadius) - (Math.floor((radToDeg(x / EarthRadius) + 180) / 360) * 360), radToDeg((Math.PI / 2) - (2 * Math.atan(Math.exp(-1.0 * y / EarthRadius))))];
	  }

	  /*
	  Public: Convert a GeoJSON Position object to Web Mercator (102100)
	  */
	  function positionToMercator(position) {
	    var lng = position[0];
	    var lat = Math.max(Math.min(position[1], 89.99999), -89.99999);
	    return [degToRad(lng) * EarthRadius, EarthRadius/2.0 * Math.log( (1.0 + Math.sin(degToRad(lat))) / (1.0 - Math.sin(degToRad(lat))) )];
	  }

	  /*
	  Public: Apply a function agaist all positions in a geojson object. Used by spatial reference converters.
	  */
	  function applyConverter(geojson, converter, noCrs){
	    if(geojson.type === "Point") {
	      geojson.coordinates = converter(geojson.coordinates);
	    } else if(geojson.type === "Feature") {
	      geojson.geometry = applyConverter(geojson.geometry, converter, true);
	    } else if(geojson.type === "FeatureCollection") {
	      for (var f = 0; f < geojson.features.length; f++) {
	        geojson.features[f] = applyConverter(geojson.features[f], converter, true);
	      }
	    } else if(geojson.type === "GeometryCollection") {
	      for (var g = 0; g < geojson.geometries.length; g++) {
	        geojson.geometries[g] = applyConverter(geojson.geometries[g], converter, true);
	      }
	    } else {
	      geojson.coordinates = eachPosition(geojson.coordinates, converter);
	    }

	    if(!noCrs){
	      if(converter === positionToMercator){
	        geojson.crs = MercatorCRS;
	      }
	    }

	    if(converter === positionToGeographic){
	      delete geojson.crs;
	    }

	    return geojson;
	  }

	  /*
	  Public: Convert a GeoJSON object to ESRI Web Mercator (102100)
	  */
	  function toMercator(geojson) {
	    return applyConverter(geojson, positionToMercator);
	  }

	  /*
	  Convert a GeoJSON object to Geographic coordinates (WSG84, 4326)
	  */
	  function toGeographic(geojson) {
	    return applyConverter(geojson, positionToGeographic);
	  }


	  /*
	  Internal: -1,0,1 comparison function
	  */
	  function cmp(a, b) {
	    if(a < b) {
	      return -1;
	    } else if(a > b) {
	      return 1;
	    } else {
	      return 0;
	    }
	  }

	  /*
	  Internal: used for sorting
	  */
	  function compSort(p1, p2) {
	    if (p1[0] > p2[0]) {
	      return -1;
	    } else if (p1[0] < p2[0]) {
	      return 1;
	    } else if (p1[1] > p2[1]) {
	      return -1;
	    } else if (p1[1] < p2[1]) {
	      return 1;
	    } else {
	      return 0;
	    }
	  }


	  /*
	  Internal: used to determine turn
	  */
	  function turn(p, q, r) {
	    // Returns -1, 0, 1 if p,q,r forms a right, straight, or left turn.
	    return cmp((q[0] - p[0]) * (r[1] - p[1]) - (r[0] - p[0]) * (q[1] - p[1]), 0);
	  }

	  /*
	  Internal: used to determine euclidean distance between two points
	  */
	  function euclideanDistance(p, q) {
	    // Returns the squared Euclidean distance between p and q.
	    var dx = q[0] - p[0];
	    var dy = q[1] - p[1];

	    return dx * dx + dy * dy;
	  }

	  function nextHullPoint(points, p) {
	    // Returns the next point on the convex hull in CCW from p.
	    var q = p;
	    for(var r in points) {
	      var t = turn(p, q, points[r]);
	      if(t === -1 || t === 0 && euclideanDistance(p, points[r]) > euclideanDistance(p, q)) {
	        q = points[r];
	      }
	    }
	    return q;
	  }

	  function convexHull(points) {
	    // implementation of the Jarvis March algorithm
	    // adapted from http://tixxit.wordpress.com/2009/12/09/jarvis-march/

	    if(points.length === 0) {
	      return [];
	    } else if(points.length === 1) {
	      return points;
	    }

	    // Returns the points on the convex hull of points in CCW order.
	    var hull = [points.sort(compSort)[0]];

	    for(var p = 0; p < hull.length; p++) {
	      var q = nextHullPoint(points, hull[p]);

	      if(q !== hull[0]) {
	        hull.push(q);
	      }
	    }

	    return hull;
	  }

	  function isConvex(points) {
	    var ltz;

	    for (var i = 0; i < points.length - 3; i++) {
	      var p1 = points[i];
	      var p2 = points[i + 1];
	      var p3 = points[i + 2];
	      var v = [p2[0] - p1[0], p2[1] - p1[1]];

	      // p3.x * v.y - p3.y * v.x + v.x * p1.y - v.y * p1.x
	      var res = p3[0] * v[1] - p3[1] * v[0] + v[0] * p1[1] - v[1] * p1[0];

	      if (i === 0) {
	        if (res < 0) {
	          ltz = true;
	        } else {
	          ltz = false;
	        }
	      } else {
	        if (ltz && (res > 0) || !ltz && (res < 0)) {
	          return false;
	        }
	      }
	    }

	    return true;
	  }

	  function coordinatesContainPoint(coordinates, point) {
	    var contains = false;
	    for(var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {
	      if (((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1]) ||
	           (coordinates[j][1] <= point[1] && point[1] < coordinates[i][1])) &&
	          (point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0])) {
	        contains = !contains;
	      }
	    }
	    return contains;
	  }

	  function polygonContainsPoint(polygon, point) {
	    if (polygon && polygon.length) {
	      if (polygon.length === 1) { // polygon with no holes
	        return coordinatesContainPoint(polygon[0], point);
	      } else { // polygon with holes
	        if (coordinatesContainPoint(polygon[0], point)) {
	          for (var i = 1; i < polygon.length; i++) {
	            if (coordinatesContainPoint(polygon[i], point)) {
	              return false; // found in hole
	            }
	          }

	          return true;
	        } else {
	          return false;
	        }
	      }
	    } else {
	      return false;
	    }
	  }

	  function edgeIntersectsEdge(a1, a2, b1, b2) {
	    var ua_t = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);
	    var ub_t = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);
	    var u_b  = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);

	    if ( u_b !== 0 ) {
	      var ua = ua_t / u_b;
	      var ub = ub_t / u_b;

	      if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {
	        return true;
	      }
	    }

	    return false;
	  }

	  function isNumber(n) {
	    return !isNaN(parseFloat(n)) && isFinite(n);
	  }

	  function arraysIntersectArrays(a, b) {
	    if (isNumber(a[0][0])) {
	      if (isNumber(b[0][0])) {
	        for (var i = 0; i < a.length - 1; i++) {
	          for (var j = 0; j < b.length - 1; j++) {
	            if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {
	              return true;
	            }
	          }
	        }
	      } else {
	        for (var k = 0; k < b.length; k++) {
	          if (arraysIntersectArrays(a, b[k])) {
	            return true;
	          }
	        }
	      }
	    } else {
	      for (var l = 0; l < a.length; l++) {
	        if (arraysIntersectArrays(a[l], b)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }

	  /*
	  Internal: Returns a copy of coordinates for s closed polygon
	  */
	  function closedPolygon(coordinates) {
	    var outer = [ ];

	    for (var i = 0; i < coordinates.length; i++) {
	      var inner = coordinates[i].slice();
	      if (pointsEqual(inner[0], inner[inner.length - 1]) === false) {
	        inner.push(inner[0]);
	      }

	      outer.push(inner);
	    }

	    return outer;
	  }

	  function pointsEqual(a, b) {
	    for (var i = 0; i < a.length; i++) {

	      if (a[i] !== b[i]) {
	        return false;
	      }
	    }

	    return true;
	  }

	  function coordinatesEqual(a, b) {
	    if (a.length !== b.length) {
	      return false;
	    }

	    var na = a.slice().sort(compSort);
	    var nb = b.slice().sort(compSort);

	    for (var i = 0; i < na.length; i++) {
	      if (na[i].length !== nb[i].length) {
	        return false;
	      }
	      for (var j = 0; j < na.length; j++) {
	        if (na[i][j] !== nb[i][j]) {
	          return false;
	        }
	      }
	    }

	    return true;
	  }

	  /*
	  Internal: An array of variables that will be excluded form JSON objects.
	  */
	  var excludeFromJSON = ["length"];

	  /*
	  Internal: Base GeoJSON Primitive
	  */
	  function Primitive(geojson){
	    if(geojson){
	      switch (geojson.type) {
	      case 'Point':
	        return new Point(geojson);

	      case 'MultiPoint':
	        return new MultiPoint(geojson);

	      case 'LineString':
	        return new LineString(geojson);

	      case 'MultiLineString':
	        return new MultiLineString(geojson);

	      case 'Polygon':
	        return new Polygon(geojson);

	      case 'MultiPolygon':
	        return new MultiPolygon(geojson);

	      case 'Feature':
	        return new Feature(geojson);

	      case 'FeatureCollection':
	        return new FeatureCollection(geojson);

	      case 'GeometryCollection':
	        return new GeometryCollection(geojson);

	      default:
	        throw new Error("Unknown type: " + geojson.type);
	      }
	    }
	  }

	  Primitive.prototype.toMercator = function(){
	    return toMercator(this);
	  };

	  Primitive.prototype.toGeographic = function(){
	    return toGeographic(this);
	  };

	  Primitive.prototype.envelope = function(){
	    return calculateEnvelope(this);
	  };

	  Primitive.prototype.bbox = function(){
	    return calculateBounds(this);
	  };

	  Primitive.prototype.convexHull = function(){
	    var coordinates = [ ], i, j;
	    if (this.type === 'Point') {
	      return null;
	    } else if (this.type === 'LineString' || this.type === 'MultiPoint') {
	      if (this.coordinates && this.coordinates.length >= 3) {
	        coordinates = this.coordinates;
	      } else {
	        return null;
	      }
	    } else if (this.type === 'Polygon' || this.type === 'MultiLineString') {
	      if (this.coordinates && this.coordinates.length > 0) {
	        for (i = 0; i < this.coordinates.length; i++) {
	          coordinates = coordinates.concat(this.coordinates[i]);
	        }
	        if(coordinates.length < 3){
	          return null;
	        }
	      } else {
	        return null;
	      }
	    } else if (this.type === 'MultiPolygon') {
	      if (this.coordinates && this.coordinates.length > 0) {
	        for (i = 0; i < this.coordinates.length; i++) {
	          for (j = 0; j < this.coordinates[i].length; j++) {
	            coordinates = coordinates.concat(this.coordinates[i][j]);
	          }
	        }
	        if(coordinates.length < 3){
	          return null;
	        }
	      } else {
	        return null;
	      }
	    } else if(this.type === "Feature"){
	      var primitive = new Primitive(this.geometry);
	      return primitive.convexHull();
	    }

	    return new Polygon({
	      type: 'Polygon',
	      coordinates: closedPolygon([convexHull(coordinates)])
	    });
	  };

	  Primitive.prototype.toJSON = function(){
	    var obj = {};
	    for (var key in this) {
	      if (this.hasOwnProperty(key) && excludeFromJSON.indexOf(key) === -1) {
	        obj[key] = this[key];
	      }
	    }
	    obj.bbox = calculateBounds(this);
	    return obj;
	  };

	  Primitive.prototype.contains = function(primitive){
	    return new Primitive(primitive).within(this);
	  };

	  Primitive.prototype.within = function(primitive) {
	    var coordinates, i, contains;

	    // if we are passed a feature, use the polygon inside instead
	    if (primitive.type === 'Feature') {
	      primitive = primitive.geometry;
	    }

	    // point.within(point) :: equality
	    if (primitive.type === "Point") {
	      if (this.type === "Point") {
	        return pointsEqual(this.coordinates, primitive.coordinates);

	      }
	    }

	    // point.within(multilinestring)
	    if (primitive.type === "MultiLineString") {
	      if (this.type === "Point") {
	        for (i = 0; i < primitive.coordinates.length; i++) {
	          var linestring = { type: "LineString", coordinates: primitive.coordinates[i] };

	          if (this.within(linestring)) {
	            return true;
	          }
	        }
	      }
	    }

	    // point.within(linestring), point.within(multipoint)
	    if (primitive.type === "LineString" || primitive.type === "MultiPoint") {
	      if (this.type === "Point") {
	        for (i = 0; i < primitive.coordinates.length; i++) {
	          if (this.coordinates.length !== primitive.coordinates[i].length) {
	            return false;
	          }

	          if (pointsEqual(this.coordinates, primitive.coordinates[i])) {
	            return true;
	          }
	        }
	      }
	    }

	    if (primitive.type === "Polygon") {
	      // polygon.within(polygon)
	      if (this.type === "Polygon") {
	        // check for equal polygons
	        if (primitive.coordinates.length === this.coordinates.length) {
	          for (i = 0; i < this.coordinates.length; i++) {
	            if (coordinatesEqual(this.coordinates[i], primitive.coordinates[i])) {
	              return true;
	            }
	          }
	        }

	        if (this.coordinates.length && polygonContainsPoint(primitive.coordinates, this.coordinates[0][0])) {
	          return !arraysIntersectArrays(closedPolygon(this.coordinates), closedPolygon(primitive.coordinates));
	        } else {
	          return false;
	        }

	      // point.within(polygon)
	      } else if (this.type === "Point") {
	        return polygonContainsPoint(primitive.coordinates, this.coordinates);

	      // linestring/multipoint withing polygon
	      } else if (this.type === "LineString" || this.type === "MultiPoint") {
	        if (!this.coordinates || this.coordinates.length === 0) {
	          return false;
	        }

	        for (i = 0; i < this.coordinates.length; i++) {
	          if (polygonContainsPoint(primitive.coordinates, this.coordinates[i]) === false) {
	            return false;
	          }
	        }

	        return true;

	      // multilinestring.within(polygon)
	      } else if (this.type === "MultiLineString") {
	        for (i = 0; i < this.coordinates.length; i++) {
	          var ls = new LineString(this.coordinates[i]);

	          if (ls.within(primitive) === false) {
	            contains++;
	            return false;
	          }
	        }

	        return true;

	      // multipolygon.within(polygon)
	      } else if (this.type === "MultiPolygon") {
	        for (i = 0; i < this.coordinates.length; i++) {
	          var p1 = new Primitive({ type: "Polygon", coordinates: this.coordinates[i] });

	          if (p1.within(primitive) === false) {
	            return false;
	          }
	        }

	        return true;
	      }

	    }

	    if (primitive.type === "MultiPolygon") {
	      // point.within(multipolygon)
	      if (this.type === "Point") {
	        if (primitive.coordinates.length) {
	          for (i = 0; i < primitive.coordinates.length; i++) {
	            coordinates = primitive.coordinates[i];
	            if (polygonContainsPoint(coordinates, this.coordinates) && arraysIntersectArrays([this.coordinates], primitive.coordinates) === false) {
	              return true;
	            }
	          }
	        }

	        return false;
	      // polygon.within(multipolygon)
	      } else if (this.type === "Polygon") {
	        for (i = 0; i < this.coordinates.length; i++) {
	          if (primitive.coordinates[i].length === this.coordinates.length) {
	            for (j = 0; j < this.coordinates.length; j++) {
	              if (coordinatesEqual(this.coordinates[j], primitive.coordinates[i][j])) {
	                return true;
	              }
	            }
	          }
	        }

	        if (arraysIntersectArrays(this.coordinates, primitive.coordinates) === false) {
	          if (primitive.coordinates.length) {
	            for (i = 0; i < primitive.coordinates.length; i++) {
	              coordinates = primitive.coordinates[i];
	              if (polygonContainsPoint(coordinates, this.coordinates[0][0]) === false) {
	                contains = false;
	              } else {
	                contains = true;
	              }
	            }

	            return contains;
	          }
	        }

	      // linestring.within(multipolygon), multipoint.within(multipolygon)
	      } else if (this.type === "LineString" || this.type === "MultiPoint") {
	        for (i = 0; i < primitive.coordinates.length; i++) {
	          var p = { type: "Polygon", coordinates: primitive.coordinates[i] };

	          if (this.within(p)) {
	            return true;
	          }

	          return false;
	        }

	      // multilinestring.within(multipolygon)
	      } else if (this.type === "MultiLineString") {
	        for (i = 0; i < this.coordinates.length; i++) {
	          var lines = new LineString(this.coordinates[i]);

	          if (lines.within(primitive) === false) {
	            return false;
	          }
	        }

	        return true;

	      // multipolygon.within(multipolygon)
	      } else if (this.type === "MultiPolygon") {
	        for (i = 0; i < primitive.coordinates.length; i++) {
	          var mpoly = { type: "Polygon", coordinates: primitive.coordinates[i] };

	          if (this.within(mpoly) === false) {
	            return false;
	          }
	        }

	        return true;
	      }
	    }

	    // default to false
	    return false;
	  };

	  Primitive.prototype.intersects = function(primitive) {
	    // if we are passed a feature, use the polygon inside instead
	    if (primitive.type === 'Feature') {
	      primitive = primitive.geometry;
	    }

	    var p = new Primitive(primitive);
	    if (this.within(primitive) || p.within(this)) {
	      return true;
	    }


	    if (this.type !== 'Point' && this.type !== 'MultiPoint' &&
	        primitive.type !== 'Point' && primitive.type !== 'MultiPoint') {
	      return arraysIntersectArrays(this.coordinates, primitive.coordinates);
	    } else if (this.type === 'Feature') {
	      // in the case of a Feature, use the internal primitive for intersection
	      var inner = new Primitive(this.geometry);
	      return inner.intersects(primitive);
	    }

	    warn("Type " + this.type + " to " + primitive.type + " intersection is not supported by intersects");
	    return false;
	  };


	  /*
	  GeoJSON Point Class
	    new Point();
	    new Point(x,y,z,wtf);
	    new Point([x,y,z,wtf]);
	    new Point([x,y]);
	    new Point({
	      type: "Point",
	      coordinates: [x,y]
	    });
	  */
	  function Point(input){
	    var args = Array.prototype.slice.call(arguments);

	    if(input && input.type === "Point" && input.coordinates){
	      extend(this, input);
	    } else if(input && isArray(input)) {
	      this.coordinates = input;
	    } else if(args.length >= 2) {
	      this.coordinates = args;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.Point";
	    }

	    this.type = "Point";
	  }

	  Point.prototype = new Primitive();
	  Point.prototype.constructor = Point;

	  /*
	  GeoJSON MultiPoint Class
	      new MultiPoint();
	      new MultiPoint([[x,y], [x1,y1]]);
	      new MultiPoint({
	        type: "MultiPoint",
	        coordinates: [x,y]
	      });
	  */
	  function MultiPoint(input){
	    if(input && input.type === "MultiPoint" && input.coordinates){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.coordinates = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.MultiPoint";
	    }

	    this.type = "MultiPoint";
	  }

	  MultiPoint.prototype = new Primitive();
	  MultiPoint.prototype.constructor = MultiPoint;
	  MultiPoint.prototype.forEach = function(func){
	    for (var i = 0; i < this.coordinates.length; i++) {
	      func.apply(this, [this.coordinates[i], i, this.coordinates]);
	    }
	    return this;
	  };
	  MultiPoint.prototype.addPoint = function(point){
	    this.coordinates.push(point);
	    return this;
	  };
	  MultiPoint.prototype.insertPoint = function(point, index){
	    this.coordinates.splice(index, 0, point);
	    return this;
	  };
	  MultiPoint.prototype.removePoint = function(remove){
	    if(typeof remove === "number"){
	      this.coordinates.splice(remove, 1);
	    } else {
	      this.coordinates.splice(this.coordinates.indexOf(remove), 1);
	    }
	    return this;
	  };
	  MultiPoint.prototype.get = function(i){
	    return new Point(this.coordinates[i]);
	  };

	  /*
	  GeoJSON LineString Class
	      new LineString();
	      new LineString([[x,y], [x1,y1]]);
	      new LineString({
	        type: "LineString",
	        coordinates: [x,y]
	      });
	  */
	  function LineString(input){
	    if(input && input.type === "LineString" && input.coordinates){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.coordinates = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.LineString";
	    }

	    this.type = "LineString";
	  }

	  LineString.prototype = new Primitive();
	  LineString.prototype.constructor = LineString;
	  LineString.prototype.addVertex = function(point){
	    this.coordinates.push(point);
	    return this;
	  };
	  LineString.prototype.insertVertex = function(point, index){
	    this.coordinates.splice(index, 0, point);
	    return this;
	  };
	  LineString.prototype.removeVertex = function(remove){
	    this.coordinates.splice(remove, 1);
	    return this;
	  };

	  /*
	  GeoJSON MultiLineString Class
	      new MultiLineString();
	      new MultiLineString([ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]);
	      new MultiLineString({
	        type: "MultiLineString",
	        coordinates: [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]
	      });
	  */
	  function MultiLineString(input){
	    if(input && input.type === "MultiLineString" && input.coordinates){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.coordinates = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.MultiLineString";
	    }

	    this.type = "MultiLineString";
	  }

	  MultiLineString.prototype = new Primitive();
	  MultiLineString.prototype.constructor = MultiLineString;
	  MultiLineString.prototype.forEach = function(func){
	    for (var i = 0; i < this.coordinates.length; i++) {
	      func.apply(this, [this.coordinates[i], i, this.coordinates ]);
	    }
	  };
	  MultiLineString.prototype.get = function(i){
	    return new LineString(this.coordinates[i]);
	  };

	  /*
	  GeoJSON Polygon Class
	      new Polygon();
	      new Polygon([ [[x,y], [x1,y1], [x2,y2]] ]);
	      new Polygon({
	        type: "Polygon",
	        coordinates: [ [[x,y], [x1,y1], [x2,y2]] ]
	      });
	  */
	  function Polygon(input){
	    if(input && input.type === "Polygon" && input.coordinates){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.coordinates = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.Polygon";
	    }

	    this.type = "Polygon";
	  }

	  Polygon.prototype = new Primitive();
	  Polygon.prototype.constructor = Polygon;
	  Polygon.prototype.addVertex = function(point){
	    this.insertVertex(point, this.coordinates[0].length - 1);
	    return this;
	  };
	  Polygon.prototype.insertVertex = function(point, index){
	    this.coordinates[0].splice(index, 0, point);
	    return this;
	  };
	  Polygon.prototype.removeVertex = function(remove){
	    this.coordinates[0].splice(remove, 1);
	    return this;
	  };
	  Polygon.prototype.close = function() {
	    this.coordinates = closedPolygon(this.coordinates);
	  };
	  Polygon.prototype.hasHoles = function() {
	    return this.coordinates.length > 1;
	  };
	  Polygon.prototype.holes = function() {
	    holes = [];
	    if (this.hasHoles()) {
	      for (var i = 1; i < this.coordinates.length; i++) {
	        holes.push(new Polygon([this.coordinates[i]]));
	      }
	    }
	    return holes;
	  };

	  /*
	  GeoJSON MultiPolygon Class
	      new MultiPolygon();
	      new MultiPolygon([ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]);
	      new MultiPolygon({
	        type: "MultiPolygon",
	        coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]
	      });
	  */
	  function MultiPolygon(input){
	    if(input && input.type === "MultiPolygon" && input.coordinates){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.coordinates = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.MultiPolygon";
	    }

	    this.type = "MultiPolygon";
	  }

	  MultiPolygon.prototype = new Primitive();
	  MultiPolygon.prototype.constructor = MultiPolygon;
	  MultiPolygon.prototype.forEach = function(func){
	    for (var i = 0; i < this.coordinates.length; i++) {
	      func.apply(this, [this.coordinates[i], i, this.coordinates ]);
	    }
	  };
	  MultiPolygon.prototype.get = function(i){
	    return new Polygon(this.coordinates[i]);
	  };
	  MultiPolygon.prototype.close = function(){
	    var outer = [];
	    this.forEach(function(polygon){
	      outer.push(closedPolygon(polygon));
	    });
	    this.coordinates = outer;
	    return this;
	  };

	  /*
	  GeoJSON Feature Class
	      new Feature();
	      new Feature({
	        type: "Feature",
	        geometry: {
	          type: "Polygon",
	          coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]
	        }
	      });
	      new Feature({
	        type: "Polygon",
	        coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]
	      });
	  */
	  function Feature(input){
	    if(input && input.type === "Feature"){
	      extend(this, input);
	    } else if(input && input.type && input.coordinates) {
	      this.geometry = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.Feature";
	    }

	    this.type = "Feature";
	  }

	  Feature.prototype = new Primitive();
	  Feature.prototype.constructor = Feature;

	  /*
	  GeoJSON FeatureCollection Class
	      new FeatureCollection();
	      new FeatureCollection([feature, feature1]);
	      new FeatureCollection({
	        type: "FeatureCollection",
	        coordinates: [feature, feature1]
	      });
	  */
	  function FeatureCollection(input){
	    if(input && input.type === "FeatureCollection" && input.features){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.features = input;
	    } else {
	      throw "Terraformer: invalid input for Terraformer.FeatureCollection";
	    }

	    this.type = "FeatureCollection";
	  }

	  FeatureCollection.prototype = new Primitive();
	  FeatureCollection.prototype.constructor = FeatureCollection;
	  FeatureCollection.prototype.forEach = function(func){
	    for (var i = 0; i < this.features.length; i++) {
	      func.apply(this, [this.features[i], i, this.features]);
	    }
	  };
	  FeatureCollection.prototype.get = function(id){
	    var found;
	    this.forEach(function(feature){
	      if(feature.id === id){
	        found = feature;
	      }
	    });
	    return new Feature(found);
	  };

	  /*
	  GeoJSON GeometryCollection Class
	      new GeometryCollection();
	      new GeometryCollection([geometry, geometry1]);
	      new GeometryCollection({
	        type: "GeometryCollection",
	        coordinates: [geometry, geometry1]
	      });
	  */
	  function GeometryCollection(input){
	    if(input && input.type === "GeometryCollection" && input.geometries){
	      extend(this, input);
	    } else if(isArray(input)) {
	      this.geometries = input;
	    } else if(input.coordinates && input.type){
	      this.type = "GeometryCollection";
	      this.geometries = [input];
	    } else {
	      throw "Terraformer: invalid input for Terraformer.GeometryCollection";
	    }

	    this.type = "GeometryCollection";
	  }

	  GeometryCollection.prototype = new Primitive();
	  GeometryCollection.prototype.constructor = GeometryCollection;
	  GeometryCollection.prototype.forEach = function(func){
	    for (var i = 0; i < this.geometries.length; i++) {
	      func.apply(this, [this.geometries[i], i, this.geometries]);
	    }
	  };
	  GeometryCollection.prototype.get = function(i){
	    return new Primitive(this.geometries[i]);
	  };

	  function createCircle(center, radius, interpolate){
	    var mercatorPosition = positionToMercator(center);
	    var steps = interpolate || 64;
	    var polygon = {
	      type: "Polygon",
	      coordinates: [[]]
	    };
	    for(var i=1; i<=steps; i++) {
	      var radians = i * (360/steps) * Math.PI / 180;
	      polygon.coordinates[0].push([mercatorPosition[0] + radius * Math.cos(radians), mercatorPosition[1] + radius * Math.sin(radians)]);
	    }
	    polygon.coordinates = closedPolygon(polygon.coordinates);

	    return toGeographic(polygon);
	  }

	  function Circle (center, radius, interpolate) {
	    var steps = interpolate || 64;
	    var rad = radius || 250;

	    if(!center || center.length < 2 || !rad || !steps) {
	      throw new Error("Terraformer: missing parameter for Terraformer.Circle");
	    }

	    extend(this, new Feature({
	      type: "Feature",
	      geometry: createCircle(center, rad, steps),
	      properties: {
	        radius: rad,
	        center: center,
	        steps: steps
	      }
	    }));
	  }

	  Circle.prototype = new Primitive();
	  Circle.prototype.constructor = Circle;
	  Circle.prototype.recalculate = function(){
	    this.geometry = createCircle(this.properties.center, this.properties.radius, this.properties.steps);
	    return this;
	  };
	  Circle.prototype.center = function(coordinates){
	    if(coordinates){
	      this.properties.center = coordinates;
	      this.recalculate();
	    }
	    return this.properties.center;
	  };
	  Circle.prototype.radius = function(radius){
	    if(radius){
	      this.properties.radius = radius;
	      this.recalculate();
	    }
	    return this.properties.radius;
	  };
	  Circle.prototype.steps = function(steps){
	    if(steps){
	      this.properties.steps = steps;
	      this.recalculate();
	    }
	    return this.properties.steps;
	  };

	  Circle.prototype.toJSON = function() {
	    var output = Primitive.prototype.toJSON.call(this);
	    return output;
	  };

	  exports.Primitive = Primitive;
	  exports.Point = Point;
	  exports.MultiPoint = MultiPoint;
	  exports.LineString = LineString;
	  exports.MultiLineString = MultiLineString;
	  exports.Polygon = Polygon;
	  exports.MultiPolygon = MultiPolygon;
	  exports.Feature = Feature;
	  exports.FeatureCollection = FeatureCollection;
	  exports.GeometryCollection = GeometryCollection;
	  exports.Circle = Circle;

	  exports.toMercator = toMercator;
	  exports.toGeographic = toGeographic;

	  exports.Tools = {};
	  exports.Tools.positionToMercator = positionToMercator;
	  exports.Tools.positionToGeographic = positionToGeographic;
	  exports.Tools.applyConverter = applyConverter;
	  exports.Tools.toMercator = toMercator;
	  exports.Tools.toGeographic = toGeographic;
	  exports.Tools.createCircle = createCircle;

	  exports.Tools.calculateBounds = calculateBounds;
	  exports.Tools.calculateEnvelope = calculateEnvelope;

	  exports.Tools.coordinatesContainPoint = coordinatesContainPoint;
	  exports.Tools.polygonContainsPoint = polygonContainsPoint;
	  exports.Tools.arraysIntersectArrays = arraysIntersectArrays;
	  exports.Tools.coordinatesContainPoint = coordinatesContainPoint;
	  exports.Tools.coordinatesEqual = coordinatesEqual;
	  exports.Tools.convexHull = convexHull;
	  exports.Tools.isConvex = isConvex;

	  exports.MercatorCRS = MercatorCRS;
	  exports.GeographicCRS = GeographicCRS;

	  return exports;
	}));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.
	 * All sequelize errors inherit from the base JS error object.
	 *
	 * @fileOverview The Error Objects produced by Sequelize.
	 * @class Errors
	 */

	var util = __webpack_require__(124);
	var error = module.exports = {};

	/**
	 * The Base Error all Sequelize Errors inherit from.
	 *
	 * @constructor
	 * @alias Error
	 */
	error.BaseError = function() {
	  var tmp = Error.apply(this, arguments);
	  tmp.name = this.name = 'SequelizeBaseError';

	  this.message = tmp.message;
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, this.constructor);
	};
	util.inherits(error.BaseError, Error);


	/**
	 * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,
	 * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.
	 *
	 * @param {string} message Error message
	 * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors
	 *
	 * @extends BaseError
	 * @constructor
	 */
	error.ValidationError = function(message, errors) {
	  error.BaseError.apply(this, arguments);
	  this.name = 'SequelizeValidationError';
	  this.message = 'Validation Error';
	/**
	 * An array of ValidationErrorItems
	 * @member errors
	 */
	  this.errors = errors || [];

	  // Use provided error message if available...
	  if (message) {
	    this.message = message;

	  // ... otherwise create a concatenated message out of existing errors.
	  } else if (this.errors.length > 0 && this.errors[0].message) {
	    this.message = this.errors.map(function(err) {
	      return err.type + ': ' + err.message;
	    }).join(',\n');
	  }
	};
	util.inherits(error.ValidationError, error.BaseError);

	/**
	 * Gets all validation error items for the path / field specified.
	 *
	 * @param {string} path The path to be checked for error items
	 * @returns {Array} Validation error items for the specified path
	 */
	error.ValidationError.prototype.get = function(path) {
	  return this.errors.reduce(function(reduced, error) {
	    if (error.path === path) {
	      reduced.push(error);
	    }
	    return reduced;
	  }, []);
	};

	/**
	 * A base class for all database related errors.
	 * @extends BaseError
	 * @constructor
	 */
	error.DatabaseError = function (parent) {
	  error.BaseError.apply(this, [parent.message]);
	  this.name = 'SequelizeDatabaseError';

	/**
	 * The database specific error which triggered this one
	 * @member parent
	 */
	  this.parent = parent;
	  this.original = parent;
	/**
	 * The SQL that triggered the error
	 * @member sql
	 */
	  this.sql = parent.sql;
	/**
	 * The message from the DB.
	 * @member message
	 * @name message
	 */
	/**
	 * The fields of the unique constraint
	 * @member fields
	 * @name fields
	 */
	/**
	 * The value(s) which triggered the error
	 * @member value
	 * @name value
	 */
	/**
	 * The name of the index that triggered the error
	 * @member index
	 * @name index
	 */
	};
	util.inherits(error.DatabaseError, error.BaseError);

	/**
	 * Thrown when a database query times out because of a deadlock
	 * @extends DatabaseError
	 * @constructor
	 */
	error.TimeoutError = function (parent) {
	  error.DatabaseError.call(this, parent);
	  this.name = 'SequelizeTimeoutError';
	};
	util.inherits(error.TimeoutError, error.BaseError);

	 /**
	 * Thrown when a unique constraint is violated in the database
	 * @extends DatabaseError
	 * @constructor
	 */
	error.UniqueConstraintError = function (options) {
	  options = options || {};
	  options.parent = options.parent || { sql: '' };
	  options.message = options.message || options.parent.message || 'Validation Error';
	  options.errors = options.errors || {};

	  error.ValidationError.call(this, options.message, options.errors);
	  this.name = 'SequelizeUniqueConstraintError';
	  this.message = options.message;
	  this.errors = options.errors;
	  this.fields = options.fields;
	  this.parent = options.parent;
	  this.original = options.parent;
	  this.sql = options.parent.sql;
	};
	util.inherits(error.UniqueConstraintError, error.ValidationError);

	/**
	 * Thrown when a foreign key constraint is violated in the database
	 * @extends DatabaseError
	 * @constructor
	 */
	error.ForeignKeyConstraintError = function (options) {
	  options = options || {};
	  options.parent = options.parent || { sql: '' };

	  error.DatabaseError.call(this, options.parent);
	  this.name = 'SequelizeForeignKeyConstraintError';

	  this.message = options.message || options.parent.message || 'Database Error';
	  this.fields = options.fields;
	  this.table = options.table;
	  this.value = options.value;
	  this.index = options.index;
	};
	util.inherits(error.ForeignKeyConstraintError, error.DatabaseError);

	/**
	 * Thrown when an exclusion constraint is violated in the database
	 * @extends DatabaseError
	 * @constructor
	 */
	error.ExclusionConstraintError = function (options) {
	  options = options || {};
	  options.parent = options.parent || { sql: '' };

	  error.DatabaseError.call(this, options.parent);
	  this.name = 'SequelizeExclusionConstraintError';

	  this.message = options.message || options.parent.message;
	  this.constraint = options.constraint;
	  this.fields = options.fields;
	  this.table = options.table;
	};
	util.inherits(error.ExclusionConstraintError, error.DatabaseError);

	/**
	 * Validation Error Item
	 * Instances of this class are included in the `ValidationError.errors` property.
	 *
	 * @param {string} message An error message
	 * @param {string} type The type of the validation error
	 * @param {string} path The field that triggered the validation error
	 * @param {string} value The value that generated the error
	 * @constructor
	 */
	error.ValidationErrorItem = function(message, type, path, value) {
	  this.message = message || '';
	  this.type = type || null;
	  this.path = path || null;
	  this.value = value || null;
	};

	/**
	 * A base class for all connection related errors.
	 * @extends BaseError
	 * @constructor
	 */
	error.ConnectionError = function (parent) {
	  error.BaseError.apply(this, [parent ? parent.message : '']);
	  this.name = 'SequelizeConnectionError';
	/**
	 * The connection specific error which triggered this one
	 * @member parent
	 */
	  this.parent = parent;
	  this.original = parent;
	};
	util.inherits(error.ConnectionError, error.BaseError);

	/**
	 * Thrown when a connection to a database is refused
	 * @extends ConnectionError
	 * @constructor
	 */
	error.ConnectionRefusedError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeConnectionRefusedError';
	};
	util.inherits(error.ConnectionRefusedError, error.ConnectionError);

	/**
	 * Thrown when a connection to a database is refused due to insufficient privileges
	 * @extends ConnectionError
	 * @constructor
	 */
	error.AccessDeniedError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeAccessDeniedError';
	};
	util.inherits(error.AccessDeniedError, error.ConnectionError);

	/**
	 * Thrown when a connection to a database has a hostname that was not found
	 * @extends ConnectionError
	 * @constructor
	 */
	error.HostNotFoundError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeHostNotFoundError';
	};
	util.inherits(error.HostNotFoundError, error.ConnectionError);

	/**
	 * Thrown when a connection to a database has a hostname that was not reachable
	 * @extends ConnectionError
	 * @constructor
	 */
	error.HostNotReachableError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeHostNotReachableError';
	};
	util.inherits(error.HostNotReachableError, error.ConnectionError);

	/**
	 * Thrown when a connection to a database has invalid values for any of the connection parameters
	 * @extends ConnectionError
	 * @constructor
	 */
	error.InvalidConnectionError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeInvalidConnectionError';
	};
	util.inherits(error.InvalidConnectionError, error.ConnectionError);

	/**
	 * Thrown when a connection to a database times out
	 * @extends ConnectionError
	 * @constructor
	 */
	error.ConnectionTimedOutError = function (parent) {
	  error.ConnectionError.call(this, parent);
	  this.name = 'SequelizeConnectionTimedOutError';
	};
	util.inherits(error.ConnectionTimedOutError, error.ConnectionError);

	/**
	 * Thrown when a some problem occurred with Instance methods (see message for details)
	 * @extends BaseError
	 * @constructor
	 */
	error.InstanceError = function (message) {
	  error.BaseError.apply(this, arguments);
	  this.name = 'SequelizeInstanceError';
	  this.message = message;
	};
	util.inherits(error.InstanceError, error.BaseError);

	/**
	 * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)
	 * @extends BaseError
	 * @constructor
	 */
	error.EmptyResultError = function (message) {
	  error.BaseError.apply(this, arguments);
	  this.name = 'SequelizeEmptyResultError';
	  this.message = message;
	};
	util.inherits(error.EmptyResultError, error.BaseError);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _toDate = __webpack_require__(132);

	var _toDate2 = _interopRequireDefault(_toDate);

	var _toFloat = __webpack_require__(134);

	var _toFloat2 = _interopRequireDefault(_toFloat);

	var _toInt = __webpack_require__(135);

	var _toInt2 = _interopRequireDefault(_toInt);

	var _toBoolean = __webpack_require__(136);

	var _toBoolean2 = _interopRequireDefault(_toBoolean);

	var _equals = __webpack_require__(137);

	var _equals2 = _interopRequireDefault(_equals);

	var _contains = __webpack_require__(138);

	var _contains2 = _interopRequireDefault(_contains);

	var _matches = __webpack_require__(140);

	var _matches2 = _interopRequireDefault(_matches);

	var _isEmail = __webpack_require__(141);

	var _isEmail2 = _interopRequireDefault(_isEmail);

	var _isURL = __webpack_require__(145);

	var _isURL2 = _interopRequireDefault(_isURL);

	var _isMACAddress = __webpack_require__(147);

	var _isMACAddress2 = _interopRequireDefault(_isMACAddress);

	var _isIP = __webpack_require__(146);

	var _isIP2 = _interopRequireDefault(_isIP);

	var _isFQDN = __webpack_require__(144);

	var _isFQDN2 = _interopRequireDefault(_isFQDN);

	var _isBoolean = __webpack_require__(148);

	var _isBoolean2 = _interopRequireDefault(_isBoolean);

	var _isAlpha = __webpack_require__(149);

	var _isAlpha2 = _interopRequireDefault(_isAlpha);

	var _isAlphanumeric = __webpack_require__(151);

	var _isAlphanumeric2 = _interopRequireDefault(_isAlphanumeric);

	var _isNumeric = __webpack_require__(152);

	var _isNumeric2 = _interopRequireDefault(_isNumeric);

	var _isLowercase = __webpack_require__(153);

	var _isLowercase2 = _interopRequireDefault(_isLowercase);

	var _isUppercase = __webpack_require__(154);

	var _isUppercase2 = _interopRequireDefault(_isUppercase);

	var _isAscii = __webpack_require__(155);

	var _isAscii2 = _interopRequireDefault(_isAscii);

	var _isFullWidth = __webpack_require__(156);

	var _isFullWidth2 = _interopRequireDefault(_isFullWidth);

	var _isHalfWidth = __webpack_require__(157);

	var _isHalfWidth2 = _interopRequireDefault(_isHalfWidth);

	var _isVariableWidth = __webpack_require__(158);

	var _isVariableWidth2 = _interopRequireDefault(_isVariableWidth);

	var _isMultibyte = __webpack_require__(159);

	var _isMultibyte2 = _interopRequireDefault(_isMultibyte);

	var _isSurrogatePair = __webpack_require__(160);

	var _isSurrogatePair2 = _interopRequireDefault(_isSurrogatePair);

	var _isInt = __webpack_require__(161);

	var _isInt2 = _interopRequireDefault(_isInt);

	var _isFloat = __webpack_require__(162);

	var _isFloat2 = _interopRequireDefault(_isFloat);

	var _isDecimal = __webpack_require__(163);

	var _isDecimal2 = _interopRequireDefault(_isDecimal);

	var _isHexadecimal = __webpack_require__(164);

	var _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);

	var _isDivisibleBy = __webpack_require__(165);

	var _isDivisibleBy2 = _interopRequireDefault(_isDivisibleBy);

	var _isHexColor = __webpack_require__(166);

	var _isHexColor2 = _interopRequireDefault(_isHexColor);

	var _isMD = __webpack_require__(167);

	var _isMD2 = _interopRequireDefault(_isMD);

	var _isJSON = __webpack_require__(168);

	var _isJSON2 = _interopRequireDefault(_isJSON);

	var _isNull = __webpack_require__(169);

	var _isNull2 = _interopRequireDefault(_isNull);

	var _isLength = __webpack_require__(170);

	var _isLength2 = _interopRequireDefault(_isLength);

	var _isByteLength = __webpack_require__(143);

	var _isByteLength2 = _interopRequireDefault(_isByteLength);

	var _isUUID = __webpack_require__(171);

	var _isUUID2 = _interopRequireDefault(_isUUID);

	var _isMongoId = __webpack_require__(172);

	var _isMongoId2 = _interopRequireDefault(_isMongoId);

	var _isDate = __webpack_require__(173);

	var _isDate2 = _interopRequireDefault(_isDate);

	var _isAfter = __webpack_require__(175);

	var _isAfter2 = _interopRequireDefault(_isAfter);

	var _isBefore = __webpack_require__(176);

	var _isBefore2 = _interopRequireDefault(_isBefore);

	var _isIn = __webpack_require__(177);

	var _isIn2 = _interopRequireDefault(_isIn);

	var _isCreditCard = __webpack_require__(178);

	var _isCreditCard2 = _interopRequireDefault(_isCreditCard);

	var _isISIN = __webpack_require__(179);

	var _isISIN2 = _interopRequireDefault(_isISIN);

	var _isISBN = __webpack_require__(180);

	var _isISBN2 = _interopRequireDefault(_isISBN);

	var _isMobilePhone = __webpack_require__(181);

	var _isMobilePhone2 = _interopRequireDefault(_isMobilePhone);

	var _isCurrency = __webpack_require__(182);

	var _isCurrency2 = _interopRequireDefault(_isCurrency);

	var _isISO = __webpack_require__(174);

	var _isISO2 = _interopRequireDefault(_isISO);

	var _isBase = __webpack_require__(183);

	var _isBase2 = _interopRequireDefault(_isBase);

	var _isDataURI = __webpack_require__(184);

	var _isDataURI2 = _interopRequireDefault(_isDataURI);

	var _ltrim = __webpack_require__(185);

	var _ltrim2 = _interopRequireDefault(_ltrim);

	var _rtrim = __webpack_require__(186);

	var _rtrim2 = _interopRequireDefault(_rtrim);

	var _trim = __webpack_require__(187);

	var _trim2 = _interopRequireDefault(_trim);

	var _escape = __webpack_require__(188);

	var _escape2 = _interopRequireDefault(_escape);

	var _unescape = __webpack_require__(189);

	var _unescape2 = _interopRequireDefault(_unescape);

	var _stripLow = __webpack_require__(190);

	var _stripLow2 = _interopRequireDefault(_stripLow);

	var _whitelist = __webpack_require__(192);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	var _blacklist = __webpack_require__(191);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _isWhitelisted = __webpack_require__(193);

	var _isWhitelisted2 = _interopRequireDefault(_isWhitelisted);

	var _normalizeEmail = __webpack_require__(194);

	var _normalizeEmail2 = _interopRequireDefault(_normalizeEmail);

	var _toString = __webpack_require__(139);

	var _toString2 = _interopRequireDefault(_toString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var version = '5.7.0';

	var validator = {
	  version: version,
	  toDate: _toDate2.default,
	  toFloat: _toFloat2.default, toInt: _toInt2.default,
	  toBoolean: _toBoolean2.default,
	  equals: _equals2.default, contains: _contains2.default, matches: _matches2.default,
	  isEmail: _isEmail2.default, isURL: _isURL2.default, isMACAddress: _isMACAddress2.default, isIP: _isIP2.default, isFQDN: _isFQDN2.default,
	  isBoolean: _isBoolean2.default,
	  isAlpha: _isAlpha2.default, isAlphanumeric: _isAlphanumeric2.default, isNumeric: _isNumeric2.default, isLowercase: _isLowercase2.default, isUppercase: _isUppercase2.default,
	  isAscii: _isAscii2.default, isFullWidth: _isFullWidth2.default, isHalfWidth: _isHalfWidth2.default, isVariableWidth: _isVariableWidth2.default,
	  isMultibyte: _isMultibyte2.default, isSurrogatePair: _isSurrogatePair2.default,
	  isInt: _isInt2.default, isFloat: _isFloat2.default, isDecimal: _isDecimal2.default, isHexadecimal: _isHexadecimal2.default, isDivisibleBy: _isDivisibleBy2.default,
	  isHexColor: _isHexColor2.default,
	  isMD5: _isMD2.default,
	  isJSON: _isJSON2.default,
	  isNull: _isNull2.default,
	  isLength: _isLength2.default, isByteLength: _isByteLength2.default,
	  isUUID: _isUUID2.default, isMongoId: _isMongoId2.default,
	  isDate: _isDate2.default, isAfter: _isAfter2.default, isBefore: _isBefore2.default,
	  isIn: _isIn2.default,
	  isCreditCard: _isCreditCard2.default,
	  isISIN: _isISIN2.default, isISBN: _isISBN2.default,
	  isMobilePhone: _isMobilePhone2.default,
	  isCurrency: _isCurrency2.default,
	  isISO8601: _isISO2.default,
	  isBase64: _isBase2.default, isDataURI: _isDataURI2.default,
	  ltrim: _ltrim2.default, rtrim: _rtrim2.default, trim: _trim2.default,
	  escape: _escape2.default, unescape: _unescape2.default, stripLow: _stripLow2.default,
	  whitelist: _whitelist2.default, blacklist: _blacklist2.default,
	  isWhitelisted: _isWhitelisted2.default,
	  normalizeEmail: _normalizeEmail2.default,
	  toString: _toString2.default
	};

	exports.default = validator;
	module.exports = exports['default'];

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toDate;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toDate(date) {
	  (0, _assertString2.default)(date);
	  date = Date.parse(date);
	  return !isNaN(date) ? new Date(date) : null;
	}
	module.exports = exports['default'];

/***/ },
/* 133 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = assertString;
	function assertString(input) {
	  if (typeof input !== 'string') {
	    throw new TypeError('This library (validator.js) validates strings only');
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toFloat;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toFloat(str) {
	  (0, _assertString2.default)(str);
	  return parseFloat(str);
	}
	module.exports = exports['default'];

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toInt;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toInt(str, radix) {
	  (0, _assertString2.default)(str);
	  return parseInt(str, radix || 10);
	}
	module.exports = exports['default'];

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toBoolean;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toBoolean(str, strict) {
	  (0, _assertString2.default)(str);
	  if (strict) {
	    return str === '1' || str === 'true';
	  }
	  return str !== '0' && str !== 'false' && str !== '';
	}
	module.exports = exports['default'];

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = equals;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function equals(str, comparison) {
	  (0, _assertString2.default)(str);
	  return str === comparison;
	}
	module.exports = exports['default'];

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = contains;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _toString = __webpack_require__(139);

	var _toString2 = _interopRequireDefault(_toString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function contains(str, elem) {
	  (0, _assertString2.default)(str);
	  return str.indexOf((0, _toString2.default)(elem)) >= 0;
	}
	module.exports = exports['default'];

/***/ },
/* 139 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = toString;
	function toString(input) {
	  if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input !== null) {
	    if (typeof input.toString === 'function') {
	      input = input.toString();
	    } else {
	      input = '[object Object]';
	    }
	  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
	    input = '';
	  }
	  return String(input);
	}
	module.exports = exports['default'];

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = matches;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function matches(str, pattern, modifiers) {
	  (0, _assertString2.default)(str);
	  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
	    pattern = new RegExp(pattern, modifiers);
	  }
	  return pattern.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isEmail;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _merge = __webpack_require__(142);

	var _merge2 = _interopRequireDefault(_merge);

	var _isByteLength = __webpack_require__(143);

	var _isByteLength2 = _interopRequireDefault(_isByteLength);

	var _isFQDN = __webpack_require__(144);

	var _isFQDN2 = _interopRequireDefault(_isFQDN);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var default_email_options = {
	  allow_display_name: false,
	  allow_utf8_local_part: true,
	  require_tld: true
	};

	/* eslint-disable max-len */
	/* eslint-disable no-control-regex */
	var displayName = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i;
	var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
	var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
	var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
	var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
	/* eslint-enable max-len */
	/* eslint-enable no-control-regex */

	function isEmail(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_email_options);

	  if (options.allow_display_name) {
	    var display_email = str.match(displayName);
	    if (display_email) {
	      str = display_email[1];
	    }
	  }

	  var parts = str.split('@');
	  var domain = parts.pop();
	  var user = parts.join('@');

	  var lower_domain = domain.toLowerCase();
	  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {
	    user = user.replace(/\./g, '').toLowerCase();
	  }

	  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 256 })) {
	    return false;
	  }

	  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {
	    return false;
	  }

	  if (user[0] === '"') {
	    user = user.slice(1, user.length - 1);
	    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
	  }

	  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;

	  var user_parts = user.split('.');
	  for (var i = 0; i < user_parts.length; i++) {
	    if (!pattern.test(user_parts[i])) {
	      return false;
	    }
	  }

	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 142 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = merge;
	function merge() {
	  var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var defaults = arguments[1];

	  for (var key in defaults) {
	    if (typeof obj[key] === 'undefined') {
	      obj[key] = defaults[key];
	    }
	  }
	  return obj;
	}
	module.exports = exports['default'];

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isByteLength;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable prefer-rest-params */
	function isByteLength(str, options) {
	  (0, _assertString2.default)(str);
	  var min = void 0;
	  var max = void 0;
	  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    min = options.min || 0;
	    max = options.max;
	  } else {
	    // backwards compatibility: isByteLength(str, min [, max])
	    min = arguments[1];
	    max = arguments[2];
	  }
	  var len = encodeURI(str).split(/%..|./).length - 1;
	  return len >= min && (typeof max === 'undefined' || len <= max);
	}
	module.exports = exports['default'];

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isFDQN;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _merge = __webpack_require__(142);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var default_fqdn_options = {
	  require_tld: true,
	  allow_underscores: false,
	  allow_trailing_dot: false
	};

	function isFDQN(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_fqdn_options);

	  /* Remove the optional trailing dot before checking validity */
	  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
	    str = str.substring(0, str.length - 1);
	  }
	  var parts = str.split('.');
	  if (options.require_tld) {
	    var tld = parts.pop();
	    if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
	      return false;
	    }
	  }
	  for (var part, i = 0; i < parts.length; i++) {
	    part = parts[i];
	    if (options.allow_underscores) {
	      part = part.replace(/_/g, '');
	    }
	    if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
	      return false;
	    }
	    if (/[\uff01-\uff5e]/.test(part)) {
	      // disallow full-width chars
	      return false;
	    }
	    if (part[0] === '-' || part[part.length - 1] === '-') {
	      return false;
	    }
	  }
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isURL;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _isFQDN = __webpack_require__(144);

	var _isFQDN2 = _interopRequireDefault(_isFQDN);

	var _isIP = __webpack_require__(146);

	var _isIP2 = _interopRequireDefault(_isIP);

	var _merge = __webpack_require__(142);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var default_url_options = {
	  protocols: ['http', 'https', 'ftp'],
	  require_tld: true,
	  require_protocol: false,
	  require_host: true,
	  require_valid_protocol: true,
	  allow_underscores: false,
	  allow_trailing_dot: false,
	  allow_protocol_relative_urls: false
	};

	var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

	function isRegExp(obj) {
	  return Object.prototype.toString.call(obj) === '[object RegExp]';
	}

	function checkHost(host, matches) {
	  for (var i = 0; i < matches.length; i++) {
	    var match = matches[i];
	    if (host === match || isRegExp(match) && match.test(host)) {
	      return true;
	    }
	  }
	  return false;
	}

	function isURL(url, options) {
	  (0, _assertString2.default)(url);
	  if (!url || url.length >= 2083 || /\s/.test(url)) {
	    return false;
	  }
	  if (url.indexOf('mailto:') === 0) {
	    return false;
	  }
	  options = (0, _merge2.default)(options, default_url_options);
	  var protocol = void 0,
	      auth = void 0,
	      host = void 0,
	      hostname = void 0,
	      port = void 0,
	      port_str = void 0,
	      split = void 0,
	      ipv6 = void 0;

	  split = url.split('#');
	  url = split.shift();

	  split = url.split('?');
	  url = split.shift();

	  split = url.split('://');
	  if (split.length > 1) {
	    protocol = split.shift();
	    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
	      return false;
	    }
	  } else if (options.require_protocol) {
	    return false;
	  } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {
	    split[0] = url.substr(2);
	  }
	  url = split.join('://');

	  split = url.split('/');
	  url = split.shift();

	  if (url === '' && !options.require_host) {
	    return true;
	  }

	  split = url.split('@');
	  if (split.length > 1) {
	    auth = split.shift();
	    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
	      return false;
	    }
	  }
	  hostname = split.join('@');

	  port_str = ipv6 = null;
	  var ipv6_match = hostname.match(wrapped_ipv6);
	  if (ipv6_match) {
	    host = '';
	    ipv6 = ipv6_match[1];
	    port_str = ipv6_match[2] || null;
	  } else {
	    split = hostname.split(':');
	    host = split.shift();
	    if (split.length) {
	      port_str = split.join(':');
	    }
	  }

	  if (port_str !== null) {
	    port = parseInt(port_str, 10);
	    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
	      return false;
	    }
	  }

	  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6)) && host !== 'localhost') {
	    return false;
	  }

	  host = host || ipv6;

	  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
	    return false;
	  }
	  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
	    return false;
	  }

	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isIP;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ipv4Maybe = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
	var ipv6Block = /^[0-9A-F]{1,4}$/i;

	function isIP(str) {
	  var version = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

	  (0, _assertString2.default)(str);
	  version = String(version);
	  if (!version) {
	    return isIP(str, 4) || isIP(str, 6);
	  } else if (version === '4') {
	    if (!ipv4Maybe.test(str)) {
	      return false;
	    }
	    var parts = str.split('.').sort(function (a, b) {
	      return a - b;
	    });
	    return parts[3] <= 255;
	  } else if (version === '6') {
	    var blocks = str.split(':');
	    var foundOmissionBlock = false; // marker to indicate ::

	    // At least some OS accept the last 32 bits of an IPv6 address
	    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says
	    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,
	    // and '::a.b.c.d' is deprecated, but also valid.
	    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);
	    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;

	    if (blocks.length > expectedNumberOfBlocks) {
	      return false;
	    }
	    // initial or final ::
	    if (str === '::') {
	      return true;
	    } else if (str.substr(0, 2) === '::') {
	      blocks.shift();
	      blocks.shift();
	      foundOmissionBlock = true;
	    } else if (str.substr(str.length - 2) === '::') {
	      blocks.pop();
	      blocks.pop();
	      foundOmissionBlock = true;
	    }

	    for (var i = 0; i < blocks.length; ++i) {
	      // test for a :: which can not be at the string start/end
	      // since those cases have been handled above
	      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {
	        if (foundOmissionBlock) {
	          return false; // multiple :: in address
	        }
	        foundOmissionBlock = true;
	      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {
	        // it has been checked before that the last
	        // block is a valid IPv4 address
	      } else if (!ipv6Block.test(blocks[i])) {
	        return false;
	      }
	    }
	    if (foundOmissionBlock) {
	      return blocks.length >= 1;
	    }
	    return blocks.length === expectedNumberOfBlocks;
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMACAddress;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;

	function isMACAddress(str) {
	  (0, _assertString2.default)(str);
	  return macAddress.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBoolean;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isBoolean(str) {
	  (0, _assertString2.default)(str);
	  return ['true', 'false', '1', '0'].indexOf(str) >= 0;
	}
	module.exports = exports['default'];

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAlpha;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _alpha = __webpack_require__(150);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAlpha(str) {
	  var locale = arguments.length <= 1 || arguments[1] === undefined ? 'en-US' : arguments[1];

	  (0, _assertString2.default)(str);
	  if (locale in _alpha.alpha) {
	    return _alpha.alpha[locale].test(str);
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 150 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var alpha = exports.alpha = {
	  'en-US': /^[A-Z]+$/i,
	  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'de-DE': /^[A-ZÄÖÜß]+$/i,
	  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'nl-NL': /^[A-ZÉËÏÓÖÜ]+$/i,
	  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
	  'ru-RU': /^[А-ЯЁ]+$/i,
	  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
	  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
	  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
	};

	var alphanumeric = exports.alphanumeric = {
	  'en-US': /^[0-9A-Z]+$/i,
	  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
	  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'nl-NL': /^[0-9A-ZÉËÏÓÖÜ]+$/i,
	  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
	  'ru-RU': /^[0-9А-ЯЁ]+$/i,
	  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
	  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
	  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
	};

	var englishLocales = exports.englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];

	for (var locale, i = 0; i < englishLocales.length; i++) {
	  locale = 'en-' + englishLocales[i];
	  alpha[locale] = alpha['en-US'];
	  alphanumeric[locale] = alphanumeric['en-US'];
	}

	alpha['pt-BR'] = alpha['pt-PT'];
	alphanumeric['pt-BR'] = alphanumeric['pt-PT'];

	// Source: http://www.localeplanet.com/java/
	var arabicLocales = exports.arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];

	for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
	  _locale = 'ar-' + arabicLocales[_i];
	  alpha[_locale] = alpha.ar;
	  alphanumeric[_locale] = alphanumeric.ar;
	}

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAlphanumeric;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _alpha = __webpack_require__(150);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAlphanumeric(str) {
	  var locale = arguments.length <= 1 || arguments[1] === undefined ? 'en-US' : arguments[1];

	  (0, _assertString2.default)(str);
	  if (locale in _alpha.alphanumeric) {
	    return _alpha.alphanumeric[locale].test(str);
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isNumeric;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var numeric = /^[-+]?[0-9]+$/;

	function isNumeric(str) {
	  (0, _assertString2.default)(str);
	  return numeric.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isLowercase;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isLowercase(str) {
	  (0, _assertString2.default)(str);
	  return str === str.toLowerCase();
	}
	module.exports = exports['default'];

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isUppercase;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isUppercase(str) {
	  (0, _assertString2.default)(str);
	  return str === str.toUpperCase();
	}
	module.exports = exports['default'];

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAscii;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable no-control-regex */
	var ascii = /^[\x00-\x7F]+$/;
	/* eslint-enable no-control-regex */

	function isAscii(str) {
	  (0, _assertString2.default)(str);
	  return ascii.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fullWidth = undefined;
	exports.default = isFullWidth;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var fullWidth = exports.fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;

	function isFullWidth(str) {
	  (0, _assertString2.default)(str);
	  return fullWidth.test(str);
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.halfWidth = undefined;
	exports.default = isHalfWidth;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var halfWidth = exports.halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;

	function isHalfWidth(str) {
	  (0, _assertString2.default)(str);
	  return halfWidth.test(str);
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isVariableWidth;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _isFullWidth = __webpack_require__(156);

	var _isHalfWidth = __webpack_require__(157);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isVariableWidth(str) {
	  (0, _assertString2.default)(str);
	  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMultibyte;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable no-control-regex */
	var multibyte = /[^\x00-\x7F]/;
	/* eslint-enable no-control-regex */

	function isMultibyte(str) {
	  (0, _assertString2.default)(str);
	  return multibyte.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isSurrogatePair;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

	function isSurrogatePair(str) {
	  (0, _assertString2.default)(str);
	  return surrogatePair.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isInt;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
	var intLeadingZeroes = /^[-+]?[0-9]+$/;

	function isInt(str, options) {
	  (0, _assertString2.default)(str);
	  options = options || {};

	  // Get the regex to use for testing, based on whether
	  // leading zeroes are allowed or not.
	  var regex = options.hasOwnProperty('allow_leading_zeroes') && options.allow_leading_zeroes ? intLeadingZeroes : int;

	  // Check min/max
	  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
	  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;

	  return regex.test(str) && minCheckPassed && maxCheckPassed;
	}
	module.exports = exports['default'];

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isFloat;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var float = /^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/;

	function isFloat(str, options) {
	  (0, _assertString2.default)(str);
	  options = options || {};
	  if (str === '' || str === '.') {
	    return false;
	  }
	  return float.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max);
	}
	module.exports = exports['default'];

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDecimal;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var decimal = /^[-+]?([0-9]+|\.[0-9]+|[0-9]+\.[0-9]+)$/;

	function isDecimal(str) {
	  (0, _assertString2.default)(str);
	  return str !== '' && decimal.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isHexadecimal;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var hexadecimal = /^[0-9A-F]+$/i;

	function isHexadecimal(str) {
	  (0, _assertString2.default)(str);
	  return hexadecimal.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDivisibleBy;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _toFloat = __webpack_require__(134);

	var _toFloat2 = _interopRequireDefault(_toFloat);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isDivisibleBy(str, num) {
	  (0, _assertString2.default)(str);
	  return (0, _toFloat2.default)(str) % parseInt(num, 10) === 0;
	}
	module.exports = exports['default'];

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isHexColor;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;

	function isHexColor(str) {
	  (0, _assertString2.default)(str);
	  return hexcolor.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMD5;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var md5 = /^[a-f0-9]{32}$/;

	function isMD5(str) {
	  (0, _assertString2.default)(str);
	  return md5.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isJSON;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isJSON(str) {
	  (0, _assertString2.default)(str);
	  try {
	    var obj = JSON.parse(str);
	    return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
	  } catch (e) {/* ignore */}
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isNull;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isNull(str) {
	  (0, _assertString2.default)(str);
	  return str.length === 0;
	}
	module.exports = exports['default'];

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isLength;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable prefer-rest-params */
	function isLength(str, options) {
	  (0, _assertString2.default)(str);
	  var min = void 0;
	  var max = void 0;
	  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    min = options.min || 0;
	    max = options.max;
	  } else {
	    // backwards compatibility: isLength(str, min [, max])
	    min = arguments[1];
	    max = arguments[2];
	  }
	  var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
	  var len = str.length - surrogatePairs.length;
	  return len >= min && (typeof max === 'undefined' || len <= max);
	}
	module.exports = exports['default'];

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isUUID;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var uuid = {
	  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
	  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
	  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
	  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
	};

	function isUUID(str) {
	  var version = arguments.length <= 1 || arguments[1] === undefined ? 'all' : arguments[1];

	  (0, _assertString2.default)(str);
	  var pattern = uuid[version];
	  return pattern && pattern.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMongoId;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _isHexadecimal = __webpack_require__(164);

	var _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isMongoId(str) {
	  (0, _assertString2.default)(str);
	  return (0, _isHexadecimal2.default)(str) && str.length === 24;
	}
	module.exports = exports['default'];

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDate;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _isISO = __webpack_require__(174);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getTimezoneOffset(str) {
	  var iso8601Parts = str.match(_isISO.iso8601);
	  var timezone = void 0,
	      sign = void 0,
	      hours = void 0,
	      minutes = void 0;
	  if (!iso8601Parts) {
	    str = str.toLowerCase();
	    timezone = str.match(/(?:\s|gmt\s*)(-|\+)(\d{1,4})(\s|$)/);
	    if (!timezone) {
	      return str.indexOf('gmt') !== -1 ? 0 : null;
	    }
	    sign = timezone[1];
	    var offset = timezone[2];
	    if (offset.length === 3) {
	      offset = '0' + offset;
	    }
	    if (offset.length <= 2) {
	      hours = 0;
	      minutes = parseInt(offset, 10);
	    } else {
	      hours = parseInt(offset.slice(0, 2), 10);
	      minutes = parseInt(offset.slice(2, 4), 10);
	    }
	  } else {
	    timezone = iso8601Parts[21];
	    if (!timezone) {
	      // if no hour/minute was provided, the date is GMT
	      return !iso8601Parts[12] ? 0 : null;
	    }
	    if (timezone === 'z' || timezone === 'Z') {
	      return 0;
	    }
	    sign = iso8601Parts[22];
	    if (timezone.indexOf(':') !== -1) {
	      hours = parseInt(iso8601Parts[23], 10);
	      minutes = parseInt(iso8601Parts[24], 10);
	    } else {
	      hours = 0;
	      minutes = parseInt(iso8601Parts[23], 10);
	    }
	  }
	  return (hours * 60 + minutes) * (sign === '-' ? 1 : -1);
	}

	function isDate(str) {
	  (0, _assertString2.default)(str);
	  var normalizedDate = new Date(Date.parse(str));
	  if (isNaN(normalizedDate)) {
	    return false;
	  }

	  // normalizedDate is in the user's timezone. Apply the input
	  // timezone offset to the date so that the year and day match
	  // the input
	  var timezoneOffset = getTimezoneOffset(str);
	  if (timezoneOffset !== null) {
	    var timezoneDifference = normalizedDate.getTimezoneOffset() - timezoneOffset;
	    normalizedDate = new Date(normalizedDate.getTime() + 60000 * timezoneDifference);
	  }

	  var day = String(normalizedDate.getDate());
	  var dayOrYear = void 0,
	      dayOrYearMatches = void 0,
	      year = void 0;
	  // check for valid double digits that could be late days
	  // check for all matches since a string like '12/23' is a valid date
	  // ignore everything with nearby colons
	  dayOrYearMatches = str.match(/(^|[^:\d])[23]\d([^T:\d]|$)/g);
	  if (!dayOrYearMatches) {
	    return true;
	  }
	  dayOrYear = dayOrYearMatches.map(function (digitString) {
	    return digitString.match(/\d+/g)[0];
	  }).join('/');

	  year = String(normalizedDate.getFullYear()).slice(-2);
	  if (dayOrYear === day || dayOrYear === year) {
	    return true;
	  } else if (dayOrYear === '' + day / year || dayOrYear === '' + year / day) {
	    return true;
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.iso8601 = undefined;

	exports.default = function (str) {
	  (0, _assertString2.default)(str);
	  return iso8601.test(str);
	};

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable max-len */
	// from http://goo.gl/0ejHHW
	var iso8601 = exports.iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
	/* eslint-enable max-len */

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAfter;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _toDate = __webpack_require__(132);

	var _toDate2 = _interopRequireDefault(_toDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAfter(str) {
	  var date = arguments.length <= 1 || arguments[1] === undefined ? String(new Date()) : arguments[1];

	  (0, _assertString2.default)(str);
	  var comparison = (0, _toDate2.default)(date);
	  var original = (0, _toDate2.default)(str);
	  return !!(original && comparison && original > comparison);
	}
	module.exports = exports['default'];

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBefore;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _toDate = __webpack_require__(132);

	var _toDate2 = _interopRequireDefault(_toDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isBefore(str) {
	  var date = arguments.length <= 1 || arguments[1] === undefined ? String(new Date()) : arguments[1];

	  (0, _assertString2.default)(str);
	  var comparison = (0, _toDate2.default)(date);
	  var original = (0, _toDate2.default)(str);
	  return !!(original && comparison && original < comparison);
	}
	module.exports = exports['default'];

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isIn;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _toString = __webpack_require__(139);

	var _toString2 = _interopRequireDefault(_toString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isIn(str, options) {
	  (0, _assertString2.default)(str);
	  var i = void 0;
	  if (Object.prototype.toString.call(options) === '[object Array]') {
	    var array = [];
	    for (i in options) {
	      if ({}.hasOwnProperty.call(options, i)) {
	        array[i] = (0, _toString2.default)(options[i]);
	      }
	    }
	    return array.indexOf(str) >= 0;
	  } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    return options.hasOwnProperty(str);
	  } else if (options && typeof options.indexOf === 'function') {
	    return options.indexOf(str) >= 0;
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isCreditCard;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable max-len */
	var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})|62[0-9]{14}$/;
	/* eslint-enable max-len */

	function isCreditCard(str) {
	  (0, _assertString2.default)(str);
	  var sanitized = str.replace(/[^0-9]+/g, '');
	  if (!creditCard.test(sanitized)) {
	    return false;
	  }
	  var sum = 0;
	  var digit = void 0;
	  var tmpNum = void 0;
	  var shouldDouble = void 0;
	  for (var i = sanitized.length - 1; i >= 0; i--) {
	    digit = sanitized.substring(i, i + 1);
	    tmpNum = parseInt(digit, 10);
	    if (shouldDouble) {
	      tmpNum *= 2;
	      if (tmpNum >= 10) {
	        sum += tmpNum % 10 + 1;
	      } else {
	        sum += tmpNum;
	      }
	    } else {
	      sum += tmpNum;
	    }
	    shouldDouble = !shouldDouble;
	  }
	  return !!(sum % 10 === 0 ? sanitized : false);
	}
	module.exports = exports['default'];

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISIN;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;

	function isISIN(str) {
	  (0, _assertString2.default)(str);
	  if (!isin.test(str)) {
	    return false;
	  }

	  var checksumStr = str.replace(/[A-Z]/g, function (character) {
	    return parseInt(character, 36);
	  });

	  var sum = 0;
	  var digit = void 0;
	  var tmpNum = void 0;
	  var shouldDouble = true;
	  for (var i = checksumStr.length - 2; i >= 0; i--) {
	    digit = checksumStr.substring(i, i + 1);
	    tmpNum = parseInt(digit, 10);
	    if (shouldDouble) {
	      tmpNum *= 2;
	      if (tmpNum >= 10) {
	        sum += tmpNum + 1;
	      } else {
	        sum += tmpNum;
	      }
	    } else {
	      sum += tmpNum;
	    }
	    shouldDouble = !shouldDouble;
	  }

	  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;
	}
	module.exports = exports['default'];

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISBN;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
	var isbn13Maybe = /^(?:[0-9]{13})$/;
	var factor = [1, 3];

	function isISBN(str) {
	  var version = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

	  (0, _assertString2.default)(str);
	  version = String(version);
	  if (!version) {
	    return isISBN(str, 10) || isISBN(str, 13);
	  }
	  var sanitized = str.replace(/[\s-]+/g, '');
	  var checksum = 0;
	  var i = void 0;
	  if (version === '10') {
	    if (!isbn10Maybe.test(sanitized)) {
	      return false;
	    }
	    for (i = 0; i < 9; i++) {
	      checksum += (i + 1) * sanitized.charAt(i);
	    }
	    if (sanitized.charAt(9) === 'X') {
	      checksum += 10 * 10;
	    } else {
	      checksum += 10 * sanitized.charAt(9);
	    }
	    if (checksum % 11 === 0) {
	      return !!sanitized;
	    }
	  } else if (version === '13') {
	    if (!isbn13Maybe.test(sanitized)) {
	      return false;
	    }
	    for (i = 0; i < 12; i++) {
	      checksum += factor[i % 2] * sanitized.charAt(i);
	    }
	    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
	      return !!sanitized;
	    }
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMobilePhone;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable max-len */
	var phones = {
	  'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
	  'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
	  'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
	  'en-US': /^(\+?1)?[2-9]\d{2}[2-9](?!11)\d{6}$/,
	  'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
	  'de-DE': /^(\+?49[ \.\-])?([\(]{1}[0-9]{1,6}[\)])?([0-9 \.\-\/]{3,20})((x|ext|extension)[ ]?[0-9]{1,4})?$/,
	  'da-DK': /^(\+?45)?(\d{8})$/,
	  'el-GR': /^(\+?30)?(69\d{8})$/,
	  'en-AU': /^(\+?61|0)4\d{8}$/,
	  'en-GB': /^(\+?44|0)7\d{9}$/,
	  'en-HK': /^(\+?852\-?)?[569]\d{3}\-?\d{4}$/,
	  'en-IN': /^(\+?91|0)?[789]\d{9}$/,
	  'en-NZ': /^(\+?64|0)2\d{7,9}$/,
	  'en-ZA': /^(\+?27|0)\d{9}$/,
	  'en-ZM': /^(\+?26)?09[567]\d{7}$/,
	  'es-ES': /^(\+?34)?(6\d{1}|7[1234])\d{7}$/,
	  'fi-FI': /^(\+?358|0)\s?(4(0|1|2|4|5)?|50)\s?(\d\s?){4,8}\d$/,
	  'fr-FR': /^(\+?33|0)[67]\d{8}$/,
	  'hu-HU': /^(\+?36)(20|30|70)\d{7}$/,
	  'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
	  'ja-JP': /^(\+?81|0)\d{1,4}[ \-]?\d{1,4}[ \-]?\d{4}$/,
	  'ms-MY': /^(\+?6?01){1}(([145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
	  'nb-NO': /^(\+?47)?[49]\d{7}$/,
	  'nl-BE': /^(\+?32|0)4?\d{8}$/,
	  'nn-NO': /^(\+?47)?[49]\d{7}$/,
	  'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
	  'pt-BR': /^(\+?55|0)\-?[1-9]{2}\-?[2-9]{1}\d{3,4}\-?\d{4}$/,
	  'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
	  'ru-RU': /^(\+?7|8)?9\d{9}$/,
	  'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
	  'tr-TR': /^(\+?90|0)?5\d{9}$/,
	  'vi-VN': /^(\+?84|0)?((1(2([0-9])|6([2-9])|88|99))|(9((?!5)[0-9])))([0-9]{7})$/,
	  'zh-CN': /^(\+?0?86\-?)?1[345789]\d{9}$/,
	  'zh-TW': /^(\+?886\-?|0)?9\d{8}$/
	};
	/* eslint-enable max-len */

	// aliases
	phones['en-CA'] = phones['en-US'];
	phones['fr-BE'] = phones['nl-BE'];

	function isMobilePhone(str, locale) {
	  (0, _assertString2.default)(str);
	  if (locale in phones) {
	    return phones[locale].test(str);
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isCurrency;

	var _merge = __webpack_require__(142);

	var _merge2 = _interopRequireDefault(_merge);

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function currencyRegex(options) {
	  var symbol = '(\\' + options.symbol.replace(/\./g, '\\.') + ')' + (options.require_symbol ? '' : '?'),
	      negative = '-?',
	      whole_dollar_amount_without_sep = '[1-9]\\d*',
	      whole_dollar_amount_with_sep = '[1-9]\\d{0,2}(\\' + options.thousands_separator + '\\d{3})*',
	      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
	      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',
	      decimal_amount = '(\\' + options.decimal_separator + '\\d{2})?';
	  var pattern = whole_dollar_amount + decimal_amount;

	  // default is negative sign before symbol, but there are two other options (besides parens)
	  if (options.allow_negatives && !options.parens_for_negatives) {
	    if (options.negative_sign_after_digits) {
	      pattern += negative;
	    } else if (options.negative_sign_before_digits) {
	      pattern = negative + pattern;
	    }
	  }

	  // South African Rand, for example, uses R 123 (space) and R-123 (no space)
	  if (options.allow_negative_sign_placeholder) {
	    pattern = '( (?!\\-))?' + pattern;
	  } else if (options.allow_space_after_symbol) {
	    pattern = ' ?' + pattern;
	  } else if (options.allow_space_after_digits) {
	    pattern += '( (?!$))?';
	  }

	  if (options.symbol_after_digits) {
	    pattern += symbol;
	  } else {
	    pattern = symbol + pattern;
	  }

	  if (options.allow_negatives) {
	    if (options.parens_for_negatives) {
	      pattern = '(\\(' + pattern + '\\)|' + pattern + ')';
	    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
	      pattern = negative + pattern;
	    }
	  }

	  /* eslint-disable prefer-template */
	  return new RegExp('^' +
	  // ensure there's a dollar and/or decimal amount, and that
	  // it doesn't start with a space or a negative sign followed by a space
	  '(?!-? )(?=.*\\d)' + pattern + '$');
	  /* eslint-enable prefer-template */
	}

	var default_currency_options = {
	  symbol: '$',
	  require_symbol: false,
	  allow_space_after_symbol: false,
	  symbol_after_digits: false,
	  allow_negatives: true,
	  parens_for_negatives: false,
	  negative_sign_before_digits: false,
	  negative_sign_after_digits: false,
	  allow_negative_sign_placeholder: false,
	  thousands_separator: ',',
	  decimal_separator: '.',
	  allow_space_after_digits: false
	};

	function isCurrency(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_currency_options);
	  return currencyRegex(options).test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBase64;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var notBase64 = /[^A-Z0-9+\/=]/i;

	function isBase64(str) {
	  (0, _assertString2.default)(str);
	  var len = str.length;
	  if (!len || len % 4 !== 0 || notBase64.test(str)) {
	    return false;
	  }
	  var firstPaddingChar = str.indexOf('=');
	  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
	}
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDataURI;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var dataURI = /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9!\$&',\(\)\*\+,;=\-\._~:@\/\?%\s]*\s*$/i; // eslint-disable-line max-len

	function isDataURI(str) {
	  (0, _assertString2.default)(str);
	  return dataURI.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ltrim;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function ltrim(str, chars) {
	  (0, _assertString2.default)(str);
	  var pattern = chars ? new RegExp('^[' + chars + ']+', 'g') : /^\s+/g;
	  return str.replace(pattern, '');
	}
	module.exports = exports['default'];

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = rtrim;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function rtrim(str, chars) {
	  (0, _assertString2.default)(str);
	  var pattern = chars ? new RegExp('[' + chars + ']') : /\s/;

	  var idx = str.length - 1;
	  while (idx >= 0 && pattern.test(str[idx])) {
	    idx--;
	  }

	  return idx < str.length ? str.substr(0, idx + 1) : str;
	}
	module.exports = exports['default'];

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = trim;

	var _rtrim = __webpack_require__(186);

	var _rtrim2 = _interopRequireDefault(_rtrim);

	var _ltrim = __webpack_require__(185);

	var _ltrim2 = _interopRequireDefault(_ltrim);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function trim(str, chars) {
	  return (0, _rtrim2.default)((0, _ltrim2.default)(str, chars), chars);
	}
	module.exports = exports['default'];

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	      value: true
	});
	exports.default = escape;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escape(str) {
	      (0, _assertString2.default)(str);
	      return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/`/g, '&#96;');
	}
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	      value: true
	});
	exports.default = unescape;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function unescape(str) {
	      (0, _assertString2.default)(str);
	      return str.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#96;/g, '`');
	}
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = stripLow;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	var _blacklist = __webpack_require__(191);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function stripLow(str, keep_new_lines) {
	  (0, _assertString2.default)(str);
	  var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
	  return (0, _blacklist2.default)(str, chars);
	}
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = blacklist;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function blacklist(str, chars) {
	  (0, _assertString2.default)(str);
	  return str.replace(new RegExp('[' + chars + ']+', 'g'), '');
	}
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = whitelist;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function whitelist(str, chars) {
	  (0, _assertString2.default)(str);
	  return str.replace(new RegExp('[^' + chars + ']+', 'g'), '');
	}
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isWhitelisted;

	var _assertString = __webpack_require__(133);

	var _assertString2 = _interopRequireDefault(_assertString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isWhitelisted(str, chars) {
	  (0, _assertString2.default)(str);
	  for (var i = str.length - 1; i >= 0; i--) {
	    if (chars.indexOf(str[i]) === -1) {
	      return false;
	    }
	  }
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = normalizeEmail;

	var _isEmail = __webpack_require__(141);

	var _isEmail2 = _interopRequireDefault(_isEmail);

	var _merge = __webpack_require__(142);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var default_normalize_email_options = {
	  lowercase: true,
	  remove_dots: true,
	  remove_extension: true
	};

	function normalizeEmail(email, options) {
	  options = (0, _merge2.default)(options, default_normalize_email_options);
	  if (!(0, _isEmail2.default)(email)) {
	    return false;
	  }
	  var parts = email.split('@', 2);
	  parts[1] = parts[1].toLowerCase();
	  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
	    if (options.remove_extension) {
	      parts[0] = parts[0].split('+')[0];
	    }
	    if (options.remove_dots) {
	      parts[0] = parts[0].replace(/\./g, '');
	    }
	    if (!parts[0].length) {
	      return false;
	    }
	    parts[0] = parts[0].toLowerCase();
	    parts[1] = 'gmail.com';
	  } else if (options.lowercase) {
	    parts[0] = parts[0].toLowerCase();
	  }
	  return parts.join('@');
	}
	module.exports = exports['default'];

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var moment = module.exports = __webpack_require__(196);
	moment.tz.load(__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./data/packed/latest.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())));


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//! moment-timezone.js
	//! version : 0.5.11
	//! Copyright (c) JS Foundation and other contributors
	//! license : MIT
	//! github.com/moment/moment-timezone

	(function (root, factory) {
		"use strict";

		/*global define*/
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(197)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));                 // AMD
		} else if (typeof module === 'object' && module.exports) {
			module.exports = factory(require('moment')); // Node
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";

		// Do not load moment-timezone a second time.
		// if (moment.tz !== undefined) {
		// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		// 	return moment;
		// }

		var VERSION = "0.5.11",
			zones = {},
			links = {},
			names = {},
			guesses = {},
			cachedGuess,

			momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];

		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}

		/************************************
			Unpacking
		************************************/

		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}

		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;

			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}

			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}

			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}

			return out * sign;
		}

		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}

		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}

			array[length - 1] = Infinity;
		}

		function mapIndices (source, indices) {
			var out = [], i;

			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}

			return out;
		}

		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');

			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);

			intToUntil(untils, indices.length);

			return {
				name       : data[0],
				abbrs      : mapIndices(data[1].split(' '), indices),
				offsets    : mapIndices(offsets, indices),
				untils     : untils,
				population : data[5] | 0
			};
		}

		/************************************
			Zone object
		************************************/

		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}

		Zone.prototype = {
			_set : function (unpacked) {
				this.name       = unpacked.name;
				this.abbrs      = unpacked.abbrs;
				this.untils     = unpacked.untils;
				this.offsets    = unpacked.offsets;
				this.population = unpacked.population;
			},

			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;

				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},

			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;

				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];

					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}

					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}

				return offsets[max];
			},

			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},

			offset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};

		/************************************
			Current Timezone
		************************************/

		function OffsetAt(at) {
			var timeString = at.toTimeString();
			var abbr = timeString.match(/\([a-z ]+\)/i);
			if (abbr && abbr[0]) {
				// 17:56:31 GMT-0600 (CST)
				// 17:56:31 GMT-0600 (Central Standard Time)
				abbr = abbr[0].match(/[A-Z]/g);
				abbr = abbr ? abbr.join('') : undefined;
			} else {
				// 17:56:31 CST
				// 17:56:31 GMT+0800 (台北標準時間)
				abbr = timeString.match(/[A-Z]{3,5}/g);
				abbr = abbr ? abbr[0] : undefined;
			}

			if (abbr === 'GMT') {
				abbr = undefined;
			}

			this.at = +at;
			this.abbr = abbr;
			this.offset = at.getTimezoneOffset();
		}

		function ZoneScore(zone) {
			this.zone = zone;
			this.offsetScore = 0;
			this.abbrScore = 0;
		}

		ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
			this.offsetScore += Math.abs(this.zone.offset(offsetAt.at) - offsetAt.offset);
			if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
				this.abbrScore++;
			}
		};

		function findChange(low, high) {
			var mid, diff;

			while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
				mid = new OffsetAt(new Date(low.at + diff));
				if (mid.offset === low.offset) {
					low = mid;
				} else {
					high = mid;
				}
			}

			return low;
		}

		function userOffsets() {
			var startYear = new Date().getFullYear() - 2,
				last = new OffsetAt(new Date(startYear, 0, 1)),
				offsets = [last],
				change, next, i;

			for (i = 1; i < 48; i++) {
				next = new OffsetAt(new Date(startYear, i, 1));
				if (next.offset !== last.offset) {
					change = findChange(last, next);
					offsets.push(change);
					offsets.push(new OffsetAt(new Date(change.at + 6e4)));
				}
				last = next;
			}

			for (i = 0; i < 4; i++) {
				offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
				offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
			}

			return offsets;
		}

		function sortZoneScores (a, b) {
			if (a.offsetScore !== b.offsetScore) {
				return a.offsetScore - b.offsetScore;
			}
			if (a.abbrScore !== b.abbrScore) {
				return a.abbrScore - b.abbrScore;
			}
			return b.zone.population - a.zone.population;
		}

		function addToGuesses (name, offsets) {
			var i, offset;
			arrayToInt(offsets);
			for (i = 0; i < offsets.length; i++) {
				offset = offsets[i];
				guesses[offset] = guesses[offset] || {};
				guesses[offset][name] = true;
			}
		}

		function guessesForUserOffsets (offsets) {
			var offsetsLength = offsets.length,
				filteredGuesses = {},
				out = [],
				i, j, guessesOffset;

			for (i = 0; i < offsetsLength; i++) {
				guessesOffset = guesses[offsets[i].offset] || {};
				for (j in guessesOffset) {
					if (guessesOffset.hasOwnProperty(j)) {
						filteredGuesses[j] = true;
					}
				}
			}

			for (i in filteredGuesses) {
				if (filteredGuesses.hasOwnProperty(i)) {
					out.push(names[i]);
				}
			}

			return out;
		}

		function rebuildGuess () {

			// use Intl API when available and returning valid time zone
			try {
				var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
				if (intlName){
					var name = names[normalizeName(intlName)];
					if (name) {
						return name;
					}
					logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
				}
			} catch (e) {
				// Intl unavailable, fall back to manual guessing.
			}

			var offsets = userOffsets(),
				offsetsLength = offsets.length,
				guesses = guessesForUserOffsets(offsets),
				zoneScores = [],
				zoneScore, i, j;

			for (i = 0; i < guesses.length; i++) {
				zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
				for (j = 0; j < offsetsLength; j++) {
					zoneScore.scoreOffsetAt(offsets[j]);
				}
				zoneScores.push(zoneScore);
			}

			zoneScores.sort(sortZoneScores);

			return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
		}

		function guess (ignoreCache) {
			if (!cachedGuess || ignoreCache) {
				cachedGuess = rebuildGuess();
			}
			return cachedGuess;
		}

		/************************************
			Global Methods
		************************************/

		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}

		function addZone (packed) {
			var i, name, split, normalized;

			if (typeof packed === "string") {
				packed = [packed];
			}

			for (i = 0; i < packed.length; i++) {
				split = packed[i].split('|');
				name = split[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
				if (split[5]) {
					addToGuesses(normalized, split[2].split(' '));
				}
			}
		}

		function getZone (name, caller) {
			name = normalizeName(name);

			var zone = zones[name];
			var link;

			if (zone instanceof Zone) {
				return zone;
			}

			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}

			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}

			return null;
		}

		function getNames () {
			var i, out = [];

			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}

			return out.sort();
		}

		function addLink (aliases) {
			var i, alias, normal0, normal1;

			if (typeof aliases === "string") {
				aliases = [aliases];
			}

			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');

				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);

				links[normal0] = normal1;
				names[normal0] = alias[0];

				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}

		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			tz.dataVersion = data.version;
		}

		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
					logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}

		function needsOffset (m) {
			return !!(m._a && (m._tzm === undefined));
		}

		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}

		/************************************
			moment.tz namespace
		************************************/

		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);

			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}

			out.tz(name);

			return out;
		}

		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.guess        = guess;
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;

		/************************************
			Interface with Moment.js
		************************************/

		var fn = moment.fn;

		moment.tz = tz;

		moment.defaultZone = null;

		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;

			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.offset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					mom.utcOffset(-offset, keepTime);
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};

		fn.tz = function (name) {
			if (name) {
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};

		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}

		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}

		fn.zoneName = abbrWrap(fn.zoneName);
		fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
		fn.utc      = resetZoneWrap(fn.utc);

		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};

		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
			// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
			// moment 2.7.0
			momentProperties._z = null;
		}

		// INJECT DATA

		return moment;
	}));


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.17.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}

	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	var some$1 = some;

	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i in momentProperties) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _ordinalParseLenient.
	    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys;

	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var keys$1 = keys;

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}

	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	var indexOf$1 = indexOf;

	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return this._months;
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return this._monthsShort;
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function createDate (y, m, d, h, M, s, ms) {
	    //can't just apply() to create a date:
	    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	    var date = new Date(y, m, d, h, M, s, ms);

	    //the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    //the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return this._weekdays;
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    ordinalParse: defaultOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            __webpack_require__(198)("./" + name);
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys$1(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	        hooks.createFromInputFallback(config);
	    }
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse)) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }

	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (input === undefined) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (typeof(input) === 'object') {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString () {
	    var m = this.clone().utc();
	    if (0 < m.year() && m.year() <= 9999) {
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            return this.toDate().toISOString();
	        } else {
	            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    } else {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$1 () {
	    return isValid(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIOROITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto = Moment.prototype;

	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$1;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;

	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;

	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;

	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;

	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;

	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;

	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;

	// Hour
	proto.hour = proto.hours = getSetHour;

	// Minute
	proto.minute = proto.minutes = getSetMinute;

	// Second
	proto.second = proto.seconds = getSetSecond;

	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;

	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;

	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;

	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$1 = Locale.prototype;

	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;

	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;

	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;

	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;

	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this[units + 's']();
	}

	function makeGetter(name) {
	    return function () {
	        return this._data[name];
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    s: 45,  // seconds to minute
	    m: 45,  // minutes to hour
	    h: 22,  // hours to day
	    d: 26,  // days to month
	    M: 11   // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds < thresholds.s && ['s', seconds]  ||
	            minutes <= 1           && ['m']           ||
	            minutes < thresholds.m && ['mm', minutes] ||
	            hours   <= 1           && ['h']           ||
	            hours   < thresholds.h && ['hh', hours]   ||
	            days    <= 1           && ['d']           ||
	            days    < thresholds.d && ['dd', days]    ||
	            months  <= 1           && ['M']           ||
	            months  < thresholds.M && ['MM', months]  ||
	            years   <= 1           && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    return true;
	}

	function humanize (withSuffix) {
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}

	var proto$2 = Duration.prototype;

	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;

	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports


	hooks.version = '2.17.1';

	setHookCallback(createLocal);

	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;

	return hooks;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(98)(module)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 199,
		"./af.js": 199,
		"./ar": 200,
		"./ar-dz": 201,
		"./ar-dz.js": 201,
		"./ar-ly": 202,
		"./ar-ly.js": 202,
		"./ar-ma": 203,
		"./ar-ma.js": 203,
		"./ar-sa": 204,
		"./ar-sa.js": 204,
		"./ar-tn": 205,
		"./ar-tn.js": 205,
		"./ar.js": 200,
		"./az": 206,
		"./az.js": 206,
		"./be": 207,
		"./be.js": 207,
		"./bg": 208,
		"./bg.js": 208,
		"./bn": 209,
		"./bn.js": 209,
		"./bo": 210,
		"./bo.js": 210,
		"./br": 211,
		"./br.js": 211,
		"./bs": 212,
		"./bs.js": 212,
		"./ca": 213,
		"./ca.js": 213,
		"./cs": 214,
		"./cs.js": 214,
		"./cv": 215,
		"./cv.js": 215,
		"./cy": 216,
		"./cy.js": 216,
		"./da": 217,
		"./da.js": 217,
		"./de": 218,
		"./de-at": 219,
		"./de-at.js": 219,
		"./de.js": 218,
		"./dv": 220,
		"./dv.js": 220,
		"./el": 221,
		"./el.js": 221,
		"./en-au": 222,
		"./en-au.js": 222,
		"./en-ca": 223,
		"./en-ca.js": 223,
		"./en-gb": 224,
		"./en-gb.js": 224,
		"./en-ie": 225,
		"./en-ie.js": 225,
		"./en-nz": 226,
		"./en-nz.js": 226,
		"./eo": 227,
		"./eo.js": 227,
		"./es": 228,
		"./es-do": 229,
		"./es-do.js": 229,
		"./es.js": 228,
		"./et": 230,
		"./et.js": 230,
		"./eu": 231,
		"./eu.js": 231,
		"./fa": 232,
		"./fa.js": 232,
		"./fi": 233,
		"./fi.js": 233,
		"./fo": 234,
		"./fo.js": 234,
		"./fr": 235,
		"./fr-ca": 236,
		"./fr-ca.js": 236,
		"./fr-ch": 237,
		"./fr-ch.js": 237,
		"./fr.js": 235,
		"./fy": 238,
		"./fy.js": 238,
		"./gd": 239,
		"./gd.js": 239,
		"./gl": 240,
		"./gl.js": 240,
		"./he": 241,
		"./he.js": 241,
		"./hi": 242,
		"./hi.js": 242,
		"./hr": 243,
		"./hr.js": 243,
		"./hu": 244,
		"./hu.js": 244,
		"./hy-am": 245,
		"./hy-am.js": 245,
		"./id": 246,
		"./id.js": 246,
		"./is": 247,
		"./is.js": 247,
		"./it": 248,
		"./it.js": 248,
		"./ja": 249,
		"./ja.js": 249,
		"./jv": 250,
		"./jv.js": 250,
		"./ka": 251,
		"./ka.js": 251,
		"./kk": 252,
		"./kk.js": 252,
		"./km": 253,
		"./km.js": 253,
		"./ko": 254,
		"./ko.js": 254,
		"./ky": 255,
		"./ky.js": 255,
		"./lb": 256,
		"./lb.js": 256,
		"./lo": 257,
		"./lo.js": 257,
		"./lt": 258,
		"./lt.js": 258,
		"./lv": 259,
		"./lv.js": 259,
		"./me": 260,
		"./me.js": 260,
		"./mi": 261,
		"./mi.js": 261,
		"./mk": 262,
		"./mk.js": 262,
		"./ml": 263,
		"./ml.js": 263,
		"./mr": 264,
		"./mr.js": 264,
		"./ms": 265,
		"./ms-my": 266,
		"./ms-my.js": 266,
		"./ms.js": 265,
		"./my": 267,
		"./my.js": 267,
		"./nb": 268,
		"./nb.js": 268,
		"./ne": 269,
		"./ne.js": 269,
		"./nl": 270,
		"./nl-be": 271,
		"./nl-be.js": 271,
		"./nl.js": 270,
		"./nn": 272,
		"./nn.js": 272,
		"./pa-in": 273,
		"./pa-in.js": 273,
		"./pl": 274,
		"./pl.js": 274,
		"./pt": 275,
		"./pt-br": 276,
		"./pt-br.js": 276,
		"./pt.js": 275,
		"./ro": 277,
		"./ro.js": 277,
		"./ru": 278,
		"./ru.js": 278,
		"./se": 279,
		"./se.js": 279,
		"./si": 280,
		"./si.js": 280,
		"./sk": 281,
		"./sk.js": 281,
		"./sl": 282,
		"./sl.js": 282,
		"./sq": 283,
		"./sq.js": 283,
		"./sr": 284,
		"./sr-cyrl": 285,
		"./sr-cyrl.js": 285,
		"./sr.js": 284,
		"./ss": 286,
		"./ss.js": 286,
		"./sv": 287,
		"./sv.js": 287,
		"./sw": 288,
		"./sw.js": 288,
		"./ta": 289,
		"./ta.js": 289,
		"./te": 290,
		"./te.js": 290,
		"./tet": 291,
		"./tet.js": 291,
		"./th": 292,
		"./th.js": 292,
		"./tl-ph": 293,
		"./tl-ph.js": 293,
		"./tlh": 294,
		"./tlh.js": 294,
		"./tr": 295,
		"./tr.js": 295,
		"./tzl": 296,
		"./tzl.js": 296,
		"./tzm": 297,
		"./tzm-latn": 298,
		"./tzm-latn.js": 298,
		"./tzm.js": 297,
		"./uk": 299,
		"./uk.js": 299,
		"./uz": 300,
		"./uz.js": 300,
		"./vi": 301,
		"./vi.js": 301,
		"./x-pseudo": 302,
		"./x-pseudo.js": 302,
		"./yo": 303,
		"./yo.js": 303,
		"./zh-cn": 304,
		"./zh-cn.js": 304,
		"./zh-hk": 305,
		"./zh-hk.js": 305,
		"./zh-tw": 306,
		"./zh-tw.js": 306
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 198;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var af = moment.defineLocale('af', {
	    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	    meridiemParse: /vm|nm/i,
	    isPM : function (input) {
	        return /^nm$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'vm' : 'VM';
	        } else {
	            return isLower ? 'nm' : 'NM';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Vandag om] LT',
	        nextDay : '[Môre om] LT',
	        nextWeek : 'dddd [om] LT',
	        lastDay : '[Gister om] LT',
	        lastWeek : '[Laas] dddd [om] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'oor %s',
	        past : '%s gelede',
	        s : '\'n paar sekondes',
	        m : '\'n minuut',
	        mm : '%d minute',
	        h : '\'n uur',
	        hh : '%d ure',
	        d : '\'n dag',
	        dd : '%d dae',
	        M : '\'n maand',
	        MM : '%d maande',
	        y : '\'n jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	    },
	    week : {
	        dow : 1, // Maandag is die eerste dag van die week.
	        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	    }
	});

	return af;

	})));


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'كانون الثاني يناير',
	    'شباط فبراير',
	    'آذار مارس',
	    'نيسان أبريل',
	    'أيار مايو',
	    'حزيران يونيو',
	    'تموز يوليو',
	    'آب أغسطس',
	    'أيلول سبتمبر',
	    'تشرين الأول أكتوبر',
	    'تشرين الثاني نوفمبر',
	    'كانون الأول ديسمبر'
	];

	var ar = moment.defineLocale('ar', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ar;

	})));


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arDz = moment.defineLocale('ar-dz', {
	    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 4  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arDz;

	})));


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '1',
	    '2': '2',
	    '3': '3',
	    '4': '4',
	    '5': '5',
	    '6': '6',
	    '7': '7',
	    '8': '8',
	    '9': '9',
	    '0': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];

	var arLy = moment.defineLocale('ar-ly', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arLy;

	})));


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arMa = moment.defineLocale('ar-ma', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arMa;

	})));


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};

	var arSa = moment.defineLocale('ar-sa', {
	    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arSa;

	})));


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arTn = moment.defineLocale('ar-tn', {
	    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'في %s',
	        past: 'منذ %s',
	        s: 'ثوان',
	        m: 'دقيقة',
	        mm: '%d دقائق',
	        h: 'ساعة',
	        hh: '%d ساعات',
	        d: 'يوم',
	        dd: '%d أيام',
	        M: 'شهر',
	        MM: '%d أشهر',
	        y: 'سنة',
	        yy: '%d سنوات'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return arTn;

	})));


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    1: '-inci',
	    5: '-inci',
	    8: '-inci',
	    70: '-inci',
	    80: '-inci',
	    2: '-nci',
	    7: '-nci',
	    20: '-nci',
	    50: '-nci',
	    3: '-üncü',
	    4: '-üncü',
	    100: '-üncü',
	    6: '-ncı',
	    9: '-uncu',
	    10: '-uncu',
	    30: '-uncu',
	    60: '-ıncı',
	    90: '-ıncı'
	};

	var az = moment.defineLocale('az', {
	    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[sabah saat] LT',
	        nextWeek : '[gələn həftə] dddd [saat] LT',
	        lastDay : '[dünən] LT',
	        lastWeek : '[keçən həftə] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s əvvəl',
	        s : 'birneçə saniyyə',
	        m : 'bir dəqiqə',
	        mm : '%d dəqiqə',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir il',
	        yy : '%d il'
	    },
	    meridiemParse: /gecə|səhər|gündüz|axşam/,
	    isPM : function (input) {
	        return /^(gündüz|axşam)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'gecə';
	        } else if (hour < 12) {
	            return 'səhər';
	        } else if (hour < 17) {
	            return 'gündüz';
	        } else {
	            return 'axşam';
	        }
	    },
	    ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '-ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return az;

	})));


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	        'dd': 'дзень_дні_дзён',
	        'MM': 'месяц_месяцы_месяцаў',
	        'yy': 'год_гады_гадоў'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвіліна' : 'хвіліну';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'гадзіна' : 'гадзіну';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}

	var be = moment.defineLocale('be', {
	    months : {
	        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	    },
	    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	    weekdays : {
	        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	    },
	    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сёння ў] LT',
	        nextDay: '[Заўтра ў] LT',
	        lastDay: '[Учора ў] LT',
	        nextWeek: function () {
	            return '[У] dddd [ў] LT';
	        },
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'праз %s',
	        past : '%s таму',
	        s : 'некалькі секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithPlural,
	        hh : relativeTimeWithPlural,
	        d : 'дзень',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночы|раніцы|дня|вечара/,
	    isPM : function (input) {
	        return /^(дня|вечара)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночы';
	        } else if (hour < 12) {
	            return 'раніцы';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечара';
	        }
	    },
	    ordinalParse: /\d{1,2}-(і|ы|га)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return be;

	})));


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var bg = moment.defineLocale('bg', {
	    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Днес в] LT',
	        nextDay : '[Утре в] LT',
	        nextWeek : 'dddd [в] LT',
	        lastDay : '[Вчера в] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'след %s',
	        past : 'преди %s',
	        s : 'няколко секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дни',
	        M : 'месец',
	        MM : '%d месеца',
	        y : 'година',
	        yy : '%d години'
	    },
	    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bg;

	})));


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '১',
	    '2': '২',
	    '3': '৩',
	    '4': '৪',
	    '5': '৫',
	    '6': '৬',
	    '7': '৭',
	    '8': '৮',
	    '9': '৯',
	    '0': '০'
	};
	var numberMap = {
	    '১': '1',
	    '২': '2',
	    '৩': '3',
	    '৪': '4',
	    '৫': '5',
	    '৬': '6',
	    '৭': '7',
	    '৮': '8',
	    '৯': '9',
	    '০': '0'
	};

	var bn = moment.defineLocale('bn', {
	    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm সময়',
	        LTS : 'A h:mm:ss সময়',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm সময়',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	    },
	    calendar : {
	        sameDay : '[আজ] LT',
	        nextDay : '[আগামীকাল] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[গতকাল] LT',
	        lastWeek : '[গত] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s পরে',
	        past : '%s আগে',
	        s : 'কয়েক সেকেন্ড',
	        m : 'এক মিনিট',
	        mm : '%d মিনিট',
	        h : 'এক ঘন্টা',
	        hh : '%d ঘন্টা',
	        d : 'এক দিন',
	        dd : '%d দিন',
	        M : 'এক মাস',
	        MM : '%d মাস',
	        y : 'এক বছর',
	        yy : '%d বছর'
	    },
	    preparse: function (string) {
	        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'রাত';
	        } else if (hour < 10) {
	            return 'সকাল';
	        } else if (hour < 17) {
	            return 'দুপুর';
	        } else if (hour < 20) {
	            return 'বিকাল';
	        } else {
	            return 'রাত';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bn;

	})));


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '༡',
	    '2': '༢',
	    '3': '༣',
	    '4': '༤',
	    '5': '༥',
	    '6': '༦',
	    '7': '༧',
	    '8': '༨',
	    '9': '༩',
	    '0': '༠'
	};
	var numberMap = {
	    '༡': '1',
	    '༢': '2',
	    '༣': '3',
	    '༤': '4',
	    '༥': '5',
	    '༦': '6',
	    '༧': '7',
	    '༨': '8',
	    '༩': '9',
	    '༠': '0'
	};

	var bo = moment.defineLocale('bo', {
	    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[དི་རིང] LT',
	        nextDay : '[སང་ཉིན] LT',
	        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	        lastDay : '[ཁ་སང] LT',
	        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ལ་',
	        past : '%s སྔན་ལ',
	        s : 'ལམ་སང',
	        m : 'སྐར་མ་གཅིག',
	        mm : '%d སྐར་མ',
	        h : 'ཆུ་ཚོད་གཅིག',
	        hh : '%d ཆུ་ཚོད',
	        d : 'ཉིན་གཅིག',
	        dd : '%d ཉིན་',
	        M : 'ཟླ་བ་གཅིག',
	        MM : '%d ཟླ་བ',
	        y : 'ལོ་གཅིག',
	        yy : '%d ལོ'
	    },
	    preparse: function (string) {
	        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'མཚན་མོ';
	        } else if (hour < 10) {
	            return 'ཞོགས་ཀས';
	        } else if (hour < 17) {
	            return 'ཉིན་གུང';
	        } else if (hour < 20) {
	            return 'དགོང་དག';
	        } else {
	            return 'མཚན་མོ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bo;

	})));


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function relativeTimeWithMutation(number, withoutSuffix, key) {
	    var format = {
	        'mm': 'munutenn',
	        'MM': 'miz',
	        'dd': 'devezh'
	    };
	    return number + ' ' + mutation(format[key], number);
	}
	function specialMutationForYears(number) {
	    switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	    }
	}
	function lastNumber(number) {
	    if (number > 9) {
	        return lastNumber(number % 10);
	    }
	    return number;
	}
	function mutation(text, number) {
	    if (number === 2) {
	        return softMutation(text);
	    }
	    return text;
	}
	function softMutation(text) {
	    var mutationTable = {
	        'm': 'v',
	        'b': 'v',
	        'd': 'z'
	    };
	    if (mutationTable[text.charAt(0)] === undefined) {
	        return text;
	    }
	    return mutationTable[text.charAt(0)] + text.substring(1);
	}

	var br = moment.defineLocale('br', {
	    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h[e]mm A',
	        LTS : 'h[e]mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [a viz] MMMM YYYY',
	        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	    },
	    calendar : {
	        sameDay : '[Hiziv da] LT',
	        nextDay : '[Warc\'hoazh da] LT',
	        nextWeek : 'dddd [da] LT',
	        lastDay : '[Dec\'h da] LT',
	        lastWeek : 'dddd [paset da] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'a-benn %s',
	        past : '%s \'zo',
	        s : 'un nebeud segondennoù',
	        m : 'ur vunutenn',
	        mm : relativeTimeWithMutation,
	        h : 'un eur',
	        hh : '%d eur',
	        d : 'un devezh',
	        dd : relativeTimeWithMutation,
	        M : 'ur miz',
	        MM : relativeTimeWithMutation,
	        y : 'ur bloaz',
	        yy : specialMutationForYears
	    },
	    ordinalParse: /\d{1,2}(añ|vet)/,
	    ordinal : function (number) {
	        var output = (number === 1) ? 'añ' : 'vet';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return br;

	})));


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}

	var bs = moment.defineLocale('bs', {
	    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bs;

	})));


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ca = moment.defineLocale('ca', {
	    months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	    monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextDay : function () {
	            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastDay : function () {
	            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'd\'aquí %s',
	        past : 'fa %s',
	        s : 'uns segons',
	        m : 'un minut',
	        mm : '%d minuts',
	        h : 'una hora',
	        hh : '%d hores',
	        d : 'un dia',
	        dd : '%d dies',
	        M : 'un mes',
	        MM : '%d mesos',
	        y : 'un any',
	        yy : '%d anys'
	    },
	    ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	    ordinal : function (number, period) {
	        var output = (number === 1) ? 'r' :
	            (number === 2) ? 'n' :
	            (number === 3) ? 'r' :
	            (number === 4) ? 't' : 'è';
	        if (period === 'w' || period === 'W') {
	            output = 'a';
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return ca;

	})));


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	    }
	}

	var cs = moment.defineLocale('cs', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParse : (function (months, monthsShort) {
	        var i, _monthsParse = [];
	        for (i = 0; i < 12; i++) {
	            // use custom parser to solve problem with July (červenec)
	            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	        }
	        return _monthsParse;
	    }(months, monthsShort)),
	    shortMonthsParse : (function (monthsShort) {
	        var i, _shortMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	        }
	        return _shortMonthsParse;
	    }(monthsShort)),
	    longMonthsParse : (function (months) {
	        var i, _longMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	        }
	        return _longMonthsParse;
	    }(months)),
	    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm',
	        l : 'D. M. YYYY'
	    },
	    calendar : {
	        sameDay: '[dnes v] LT',
	        nextDay: '[zítra v] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	            }
	        },
	        lastDay: '[včera v] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'před %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse : /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return cs;

	})));


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var cv = moment.defineLocale('cv', {
	    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	    },
	    calendar : {
	        sameDay: '[Паян] LT [сехетре]',
	        nextDay: '[Ыран] LT [сехетре]',
	        lastDay: '[Ӗнер] LT [сехетре]',
	        nextWeek: '[Ҫитес] dddd LT [сехетре]',
	        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (output) {
	            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	            return output + affix;
	        },
	        past : '%s каялла',
	        s : 'пӗр-ик ҫеккунт',
	        m : 'пӗр минут',
	        mm : '%d минут',
	        h : 'пӗр сехет',
	        hh : '%d сехет',
	        d : 'пӗр кун',
	        dd : '%d кун',
	        M : 'пӗр уйӑх',
	        MM : '%d уйӑх',
	        y : 'пӗр ҫул',
	        yy : '%d ҫул'
	    },
	    ordinalParse: /\d{1,2}-мӗш/,
	    ordinal : '%d-мӗш',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return cv;

	})));


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var cy = moment.defineLocale('cy', {
	    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    // time formats are the same as en-gb
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[Heddiw am] LT',
	        nextDay: '[Yfory am] LT',
	        nextWeek: 'dddd [am] LT',
	        lastDay: '[Ddoe am] LT',
	        lastWeek: 'dddd [diwethaf am] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'mewn %s',
	        past: '%s yn ôl',
	        s: 'ychydig eiliadau',
	        m: 'munud',
	        mm: '%d munud',
	        h: 'awr',
	        hh: '%d awr',
	        d: 'diwrnod',
	        dd: '%d diwrnod',
	        M: 'mis',
	        MM: '%d mis',
	        y: 'blwyddyn',
	        yy: '%d flynedd'
	    },
	    ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	    ordinal: function (number) {
	        var b = number,
	            output = '',
	            lookup = [
	                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	        if (b > 20) {
	            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                output = 'fed'; // not 30ain, 70ain or 90ain
	            } else {
	                output = 'ain';
	            }
	        } else if (b > 0) {
	            output = lookup[b];
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return cy;

	})));


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var da = moment.defineLocale('da', {
	    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[I dag kl.] LT',
	        nextDay : '[I morgen kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[I går kl.] LT',
	        lastWeek : '[sidste] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'få sekunder',
	        m : 'et minut',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dage',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'et år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return da;

	})));


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var de = moment.defineLocale('de', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return de;

	})));


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var deAt = moment.defineLocale('de-at', {
	    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return deAt;

	})));


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'ޖެނުއަރީ',
	    'ފެބްރުއަރީ',
	    'މާރިޗު',
	    'އޭޕްރީލު',
	    'މޭ',
	    'ޖޫން',
	    'ޖުލައި',
	    'އޯގަސްޓު',
	    'ސެޕްޓެމްބަރު',
	    'އޮކްޓޯބަރު',
	    'ނޮވެމްބަރު',
	    'ޑިސެމްބަރު'
	];
	var weekdays = [
	    'އާދިއްތަ',
	    'ހޯމަ',
	    'އަންގާރަ',
	    'ބުދަ',
	    'ބުރާސްފަތި',
	    'ހުކުރު',
	    'ހޮނިހިރު'
	];

	var dv = moment.defineLocale('dv', {
	    months : months,
	    monthsShort : months,
	    weekdays : weekdays,
	    weekdaysShort : weekdays,
	    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	    longDateFormat : {

	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/M/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /މކ|މފ/,
	    isPM : function (input) {
	        return 'މފ' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'މކ';
	        } else {
	            return 'މފ';
	        }
	    },
	    calendar : {
	        sameDay : '[މިއަދު] LT',
	        nextDay : '[މާދަމާ] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[އިއްޔެ] LT',
	        lastWeek : '[ފާއިތުވި] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ތެރޭގައި %s',
	        past : 'ކުރިން %s',
	        s : 'ސިކުންތުކޮޅެއް',
	        m : 'މިނިޓެއް',
	        mm : 'މިނިޓު %d',
	        h : 'ގަޑިއިރެއް',
	        hh : 'ގަޑިއިރު %d',
	        d : 'ދުވަހެއް',
	        dd : 'ދުވަސް %d',
	        M : 'މަހެއް',
	        MM : 'މަސް %d',
	        y : 'އަހަރެއް',
	        yy : 'އަހަރު %d'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 7,  // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return dv;

	})));


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}


	var el = moment.defineLocale('el', {
	    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	    months : function (momentToFormat, format) {
	        if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	            return this._monthsGenitiveEl[momentToFormat.month()];
	        } else {
	            return this._monthsNominativeEl[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'μμ' : 'ΜΜ';
	        } else {
	            return isLower ? 'πμ' : 'ΠΜ';
	        }
	    },
	    isPM : function (input) {
	        return ((input + '').toLowerCase()[0] === 'μ');
	    },
	    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendarEl : {
	        sameDay : '[Σήμερα {}] LT',
	        nextDay : '[Αύριο {}] LT',
	        nextWeek : 'dddd [{}] LT',
	        lastDay : '[Χθες {}] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 6:
	                    return '[το προηγούμενο] dddd [{}] LT';
	                default:
	                    return '[την προηγούμενη] dddd [{}] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    calendar : function (key, mom) {
	        var output = this._calendarEl[key],
	            hours = mom && mom.hours();
	        if (isFunction(output)) {
	            output = output.apply(mom);
	        }
	        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	    },
	    relativeTime : {
	        future : 'σε %s',
	        past : '%s πριν',
	        s : 'λίγα δευτερόλεπτα',
	        m : 'ένα λεπτό',
	        mm : '%d λεπτά',
	        h : 'μία ώρα',
	        hh : '%d ώρες',
	        d : 'μία μέρα',
	        dd : '%d μέρες',
	        M : 'ένας μήνας',
	        MM : '%d μήνες',
	        y : 'ένας χρόνος',
	        yy : '%d χρόνια'
	    },
	    ordinalParse: /\d{1,2}η/,
	    ordinal: '%dη',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4st is the first week of the year.
	    }
	});

	return el;

	})));


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enAu = moment.defineLocale('en-au', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enAu;

	})));


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enCa = moment.defineLocale('en-ca', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'YYYY-MM-DD',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	return enCa;

	})));


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enGb = moment.defineLocale('en-gb', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enGb;

	})));


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enIe = moment.defineLocale('en-ie', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enIe;

	})));


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enNz = moment.defineLocale('en-nz', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enNz;

	})));


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var eo = moment.defineLocale('eo', {
	    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	    weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	    weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D[-an de] MMMM, YYYY',
	        LLL : 'D[-an de] MMMM, YYYY HH:mm',
	        LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	    },
	    meridiemParse: /[ap]\.t\.m/i,
	    isPM: function (input) {
	        return input.charAt(0).toLowerCase() === 'p';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'p.t.m.' : 'P.T.M.';
	        } else {
	            return isLower ? 'a.t.m.' : 'A.T.M.';
	        }
	    },
	    calendar : {
	        sameDay : '[Hodiaŭ je] LT',
	        nextDay : '[Morgaŭ je] LT',
	        nextWeek : 'dddd [je] LT',
	        lastDay : '[Hieraŭ je] LT',
	        lastWeek : '[pasinta] dddd [je] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'je %s',
	        past : 'antaŭ %s',
	        s : 'sekundoj',
	        m : 'minuto',
	        mm : '%d minutoj',
	        h : 'horo',
	        hh : '%d horoj',
	        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	        dd : '%d tagoj',
	        M : 'monato',
	        MM : '%d monatoj',
	        y : 'jaro',
	        yy : '%d jaroj'
	    },
	    ordinalParse: /\d{1,2}a/,
	    ordinal : '%da',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return eo;

	})));


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	var es = moment.defineLocale('es', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return es;

	})));


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	var esDo = moment.defineLocale('es-do', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY h:mm A',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return esDo;

	})));


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	        'm' : ['ühe minuti', 'üks minut'],
	        'mm': [number + ' minuti', number + ' minutit'],
	        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	        'hh': [number + ' tunni', number + ' tundi'],
	        'd' : ['ühe päeva', 'üks päev'],
	        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	        'MM': [number + ' kuu', number + ' kuud'],
	        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	        'yy': [number + ' aasta', number + ' aastat']
	    };
	    if (withoutSuffix) {
	        return format[key][2] ? format[key][2] : format[key][1];
	    }
	    return isFuture ? format[key][0] : format[key][1];
	}

	var et = moment.defineLocale('et', {
	    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	    longDateFormat : {
	        LT   : 'H:mm',
	        LTS : 'H:mm:ss',
	        L    : 'DD.MM.YYYY',
	        LL   : 'D. MMMM YYYY',
	        LLL  : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[Täna,] LT',
	        nextDay  : '[Homme,] LT',
	        nextWeek : '[Järgmine] dddd LT',
	        lastDay  : '[Eile,] LT',
	        lastWeek : '[Eelmine] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s pärast',
	        past   : '%s tagasi',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : '%d päeva',
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return et;

	})));


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var eu = moment.defineLocale('eu', {
	    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY[ko] MMMM[ren] D[a]',
	        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	        l : 'YYYY-M-D',
	        ll : 'YYYY[ko] MMM D[a]',
	        lll : 'YYYY[ko] MMM D[a] HH:mm',
	        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	    },
	    calendar : {
	        sameDay : '[gaur] LT[etan]',
	        nextDay : '[bihar] LT[etan]',
	        nextWeek : 'dddd LT[etan]',
	        lastDay : '[atzo] LT[etan]',
	        lastWeek : '[aurreko] dddd LT[etan]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s barru',
	        past : 'duela %s',
	        s : 'segundo batzuk',
	        m : 'minutu bat',
	        mm : '%d minutu',
	        h : 'ordu bat',
	        hh : '%d ordu',
	        d : 'egun bat',
	        dd : '%d egun',
	        M : 'hilabete bat',
	        MM : '%d hilabete',
	        y : 'urte bat',
	        yy : '%d urte'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return eu;

	})));


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '۱',
	    '2': '۲',
	    '3': '۳',
	    '4': '۴',
	    '5': '۵',
	    '6': '۶',
	    '7': '۷',
	    '8': '۸',
	    '9': '۹',
	    '0': '۰'
	};
	var numberMap = {
	    '۱': '1',
	    '۲': '2',
	    '۳': '3',
	    '۴': '4',
	    '۵': '5',
	    '۶': '6',
	    '۷': '7',
	    '۸': '8',
	    '۹': '9',
	    '۰': '0'
	};

	var fa = moment.defineLocale('fa', {
	    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /قبل از ظهر|بعد از ظهر/,
	    isPM: function (input) {
	        return /بعد از ظهر/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'قبل از ظهر';
	        } else {
	            return 'بعد از ظهر';
	        }
	    },
	    calendar : {
	        sameDay : '[امروز ساعت] LT',
	        nextDay : '[فردا ساعت] LT',
	        nextWeek : 'dddd [ساعت] LT',
	        lastDay : '[دیروز ساعت] LT',
	        lastWeek : 'dddd [پیش] [ساعت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'در %s',
	        past : '%s پیش',
	        s : 'چندین ثانیه',
	        m : 'یک دقیقه',
	        mm : '%d دقیقه',
	        h : 'یک ساعت',
	        hh : '%d ساعت',
	        d : 'یک روز',
	        dd : '%d روز',
	        M : 'یک ماه',
	        MM : '%d ماه',
	        y : 'یک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/[۰-۹]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    ordinalParse: /\d{1,2}م/,
	    ordinal : '%dم',
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12 // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return fa;

	})));


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	var numbersFuture = [
	        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	        numbersPast[7], numbersPast[8], numbersPast[9]
	    ];
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = '';
	    switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	    }
	    result = verbalNumber(number, isFuture) + ' ' + result;
	    return result;
	}
	function verbalNumber(number, isFuture) {
	    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	}

	var fi = moment.defineLocale('fi', {
	    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'Do MMMM[ta] YYYY',
	        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	        l : 'D.M.YYYY',
	        ll : 'Do MMM YYYY',
	        lll : 'Do MMM YYYY, [klo] HH.mm',
	        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	    },
	    calendar : {
	        sameDay : '[tänään] [klo] LT',
	        nextDay : '[huomenna] [klo] LT',
	        nextWeek : 'dddd [klo] LT',
	        lastDay : '[eilen] [klo] LT',
	        lastWeek : '[viime] dddd[na] [klo] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s päästä',
	        past : '%s sitten',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fi;

	})));


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var fo = moment.defineLocale('fo', {
	    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D. MMMM, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Í dag kl.] LT',
	        nextDay : '[Í morgin kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[Í gjár kl.] LT',
	        lastWeek : '[síðstu] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'um %s',
	        past : '%s síðani',
	        s : 'fá sekund',
	        m : 'ein minutt',
	        mm : '%d minuttir',
	        h : 'ein tími',
	        hh : '%d tímar',
	        d : 'ein dagur',
	        dd : '%d dagar',
	        M : 'ein mánaði',
	        MM : '%d mánaðir',
	        y : 'eitt ár',
	        yy : '%d ár'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fo;

	})));


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var fr = moment.defineLocale('fr', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : '');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fr;

	})));


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var frCa = moment.defineLocale('fr-ca', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : 'e');
	    }
	});

	return frCa;

	})));


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var frCh = moment.defineLocale('fr-ch', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : 'e');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return frCh;

	})));


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	var fy = moment.defineLocale('fy', {
	    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[hjoed om] LT',
	        nextDay: '[moarn om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[juster om] LT',
	        lastWeek: '[ôfrûne] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'oer %s',
	        past : '%s lyn',
	        s : 'in pear sekonden',
	        m : 'ien minút',
	        mm : '%d minuten',
	        h : 'ien oere',
	        hh : '%d oeren',
	        d : 'ien dei',
	        dd : '%d dagen',
	        M : 'ien moanne',
	        MM : '%d moannen',
	        y : 'ien jier',
	        yy : '%d jierren'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fy;

	})));


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	];

	var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

	var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

	var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

	var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

	var gd = moment.defineLocale('gd', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParseExact : true,
	    weekdays : weekdays,
	    weekdaysShort : weekdaysShort,
	    weekdaysMin : weekdaysMin,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[An-diugh aig] LT',
	        nextDay : '[A-màireach aig] LT',
	        nextWeek : 'dddd [aig] LT',
	        lastDay : '[An-dè aig] LT',
	        lastWeek : 'dddd [seo chaidh] [aig] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ann an %s',
	        past : 'bho chionn %s',
	        s : 'beagan diogan',
	        m : 'mionaid',
	        mm : '%d mionaidean',
	        h : 'uair',
	        hh : '%d uairean',
	        d : 'latha',
	        dd : '%d latha',
	        M : 'mìos',
	        MM : '%d mìosan',
	        y : 'bliadhna',
	        yy : '%d bliadhna'
	    },
	    ordinalParse : /\d{1,2}(d|na|mh)/,
	    ordinal : function (number) {
	        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return gd;

	})));


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var gl = moment.defineLocale('gl', {
	    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        lastDay : function () {
	            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	        },
	        lastWeek : function () {
	            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (str) {
	            if (str.indexOf('un') === 0) {
	                return 'n' + str;
	            }
	            return 'en ' + str;
	        },
	        past : 'hai %s',
	        s : 'uns segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'unha hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un ano',
	        yy : '%d anos'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return gl;

	})));


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var he = moment.defineLocale('he', {
	    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [ב]MMMM YYYY',
	        LLL : 'D [ב]MMMM YYYY HH:mm',
	        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	        l : 'D/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[היום ב־]LT',
	        nextDay : '[מחר ב־]LT',
	        nextWeek : 'dddd [בשעה] LT',
	        lastDay : '[אתמול ב־]LT',
	        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'בעוד %s',
	        past : 'לפני %s',
	        s : 'מספר שניות',
	        m : 'דקה',
	        mm : '%d דקות',
	        h : 'שעה',
	        hh : function (number) {
	            if (number === 2) {
	                return 'שעתיים';
	            }
	            return number + ' שעות';
	        },
	        d : 'יום',
	        dd : function (number) {
	            if (number === 2) {
	                return 'יומיים';
	            }
	            return number + ' ימים';
	        },
	        M : 'חודש',
	        MM : function (number) {
	            if (number === 2) {
	                return 'חודשיים';
	            }
	            return number + ' חודשים';
	        },
	        y : 'שנה',
	        yy : function (number) {
	            if (number === 2) {
	                return 'שנתיים';
	            } else if (number % 10 === 0 && number !== 10) {
	                return number + ' שנה';
	            }
	            return number + ' שנים';
	        }
	    },
	    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	    isPM : function (input) {
	        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 5) {
	            return 'לפנות בוקר';
	        } else if (hour < 10) {
	            return 'בבוקר';
	        } else if (hour < 12) {
	            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	        } else if (hour < 18) {
	            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	        } else {
	            return 'בערב';
	        }
	    }
	});

	return he;

	})));


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	var hi = moment.defineLocale('hi', {
	    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm बजे',
	        LTS : 'A h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[कल] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[कल] LT',
	        lastWeek : '[पिछले] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s में',
	        past : '%s पहले',
	        s : 'कुछ ही क्षण',
	        m : 'एक मिनट',
	        mm : '%d मिनट',
	        h : 'एक घंटा',
	        hh : '%d घंटे',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महीने',
	        MM : '%d महीने',
	        y : 'एक वर्ष',
	        yy : '%d वर्ष'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	    meridiemParse: /रात|सुबह|दोपहर|शाम/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सुबह') {
	            return hour;
	        } else if (meridiem === 'दोपहर') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'शाम') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात';
	        } else if (hour < 10) {
	            return 'सुबह';
	        } else if (hour < 17) {
	            return 'दोपहर';
	        } else if (hour < 20) {
	            return 'शाम';
	        } else {
	            return 'रात';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hi;

	})));


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}

	var hr = moment.defineLocale('hr', {
	    months : {
	        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	    },
	    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hr;

	})));


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	function translate(number, withoutSuffix, key, isFuture) {
	    var num = number,
	        suffix;
	    switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	    }
	    return '';
	}
	function week(isFuture) {
	    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	}

	var hu = moment.defineLocale('hu', {
	    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY.MM.DD.',
	        LL : 'YYYY. MMMM D.',
	        LLL : 'YYYY. MMMM D. H:mm',
	        LLLL : 'YYYY. MMMM D., dddd H:mm'
	    },
	    meridiemParse: /de|du/i,
	    isPM: function (input) {
	        return input.charAt(1).toLowerCase() === 'u';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower === true ? 'de' : 'DE';
	        } else {
	            return isLower === true ? 'du' : 'DU';
	        }
	    },
	    calendar : {
	        sameDay : '[ma] LT[-kor]',
	        nextDay : '[holnap] LT[-kor]',
	        nextWeek : function () {
	            return week.call(this, true);
	        },
	        lastDay : '[tegnap] LT[-kor]',
	        lastWeek : function () {
	            return week.call(this, false);
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s múlva',
	        past : '%s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return hu;

	})));


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var hyAm = moment.defineLocale('hy-am', {
	    months : {
	        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	    },
	    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY թ.',
	        LLL : 'D MMMM YYYY թ., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	    },
	    calendar : {
	        sameDay: '[այսօր] LT',
	        nextDay: '[վաղը] LT',
	        lastDay: '[երեկ] LT',
	        nextWeek: function () {
	            return 'dddd [օրը ժամը] LT';
	        },
	        lastWeek: function () {
	            return '[անցած] dddd [օրը ժամը] LT';
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s հետո',
	        past : '%s առաջ',
	        s : 'մի քանի վայրկյան',
	        m : 'րոպե',
	        mm : '%d րոպե',
	        h : 'ժամ',
	        hh : '%d ժամ',
	        d : 'օր',
	        dd : '%d օր',
	        M : 'ամիս',
	        MM : '%d ամիս',
	        y : 'տարի',
	        yy : '%d տարի'
	    },
	    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	    isPM: function (input) {
	        return /^(ցերեկվա|երեկոյան)$/.test(input);
	    },
	    meridiem : function (hour) {
	        if (hour < 4) {
	            return 'գիշերվա';
	        } else if (hour < 12) {
	            return 'առավոտվա';
	        } else if (hour < 17) {
	            return 'ցերեկվա';
	        } else {
	            return 'երեկոյան';
	        }
	    },
	    ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hyAm;

	})));


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var id = moment.defineLocale('id', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|siang|sore|malam/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'siang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sore' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'siang';
	        } else if (hours < 19) {
	            return 'sore';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Besok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kemarin pukul] LT',
	        lastWeek : 'dddd [lalu pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lalu',
	        s : 'beberapa detik',
	        m : 'semenit',
	        mm : '%d menit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return id;

	})));


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(n) {
	    if (n % 100 === 11) {
	        return true;
	    } else if (n % 10 === 1) {
	        return false;
	    }
	    return true;
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	    }
	}

	var is = moment.defineLocale('is', {
	    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	    },
	    calendar : {
	        sameDay : '[í dag kl.] LT',
	        nextDay : '[á morgun kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[í gær kl.] LT',
	        lastWeek : '[síðasta] dddd [kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'eftir %s',
	        past : 'fyrir %s síðan',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : 'klukkustund',
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return is;

	})));


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var it = moment.defineLocale('it', {
	    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	    weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	    weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	    weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Oggi alle] LT',
	        nextDay: '[Domani alle] LT',
	        nextWeek: 'dddd [alle] LT',
	        lastDay: '[Ieri alle] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[la scorsa] dddd [alle] LT';
	                default:
	                    return '[lo scorso] dddd [alle] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	        },
	        past : '%s fa',
	        s : 'alcuni secondi',
	        m : 'un minuto',
	        mm : '%d minuti',
	        h : 'un\'ora',
	        hh : '%d ore',
	        d : 'un giorno',
	        dd : '%d giorni',
	        M : 'un mese',
	        MM : '%d mesi',
	        y : 'un anno',
	        yy : '%d anni'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return it;

	})));


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ja = moment.defineLocale('ja', {
	    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	    longDateFormat : {
	        LT : 'Ah時m分',
	        LTS : 'Ah時m分s秒',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日Ah時m分',
	        LLLL : 'YYYY年M月D日Ah時m分 dddd'
	    },
	    meridiemParse: /午前|午後/i,
	    isPM : function (input) {
	        return input === '午後';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return '午前';
	        } else {
	            return '午後';
	        }
	    },
	    calendar : {
	        sameDay : '[今日] LT',
	        nextDay : '[明日] LT',
	        nextWeek : '[来週]dddd LT',
	        lastDay : '[昨日] LT',
	        lastWeek : '[前週]dddd LT',
	        sameElse : 'L'
	    },
	    ordinalParse : /\d{1,2}日/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s後',
	        past : '%s前',
	        s : '数秒',
	        m : '1分',
	        mm : '%d分',
	        h : '1時間',
	        hh : '%d時間',
	        d : '1日',
	        dd : '%d日',
	        M : '1ヶ月',
	        MM : '%dヶ月',
	        y : '1年',
	        yy : '%d年'
	    }
	});

	return ja;

	})));


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var jv = moment.defineLocale('jv', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /enjing|siyang|sonten|ndalu/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'enjing') {
	            return hour;
	        } else if (meridiem === 'siyang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'enjing';
	        } else if (hours < 15) {
	            return 'siyang';
	        } else if (hours < 19) {
	            return 'sonten';
	        } else {
	            return 'ndalu';
	        }
	    },
	    calendar : {
	        sameDay : '[Dinten puniko pukul] LT',
	        nextDay : '[Mbenjang pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kala wingi pukul] LT',
	        lastWeek : 'dddd [kepengker pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'wonten ing %s',
	        past : '%s ingkang kepengker',
	        s : 'sawetawis detik',
	        m : 'setunggal menit',
	        mm : '%d menit',
	        h : 'setunggal jam',
	        hh : '%d jam',
	        d : 'sedinten',
	        dd : '%d dinten',
	        M : 'sewulan',
	        MM : '%d wulan',
	        y : 'setaun',
	        yy : '%d taun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return jv;

	})));


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ka = moment.defineLocale('ka', {
	    months : {
	        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	    },
	    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	    weekdays : {
	        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	        isFormat: /(წინა|შემდეგ)/
	    },
	    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[დღეს] LT[-ზე]',
	        nextDay : '[ხვალ] LT[-ზე]',
	        lastDay : '[გუშინ] LT[-ზე]',
	        nextWeek : '[შემდეგ] dddd LT[-ზე]',
	        lastWeek : '[წინა] dddd LT-ზე',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                s.replace(/ი$/, 'ში') :
	                s + 'ში';
	        },
	        past : function (s) {
	            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                return s.replace(/(ი|ე)$/, 'ის წინ');
	            }
	            if ((/წელი/).test(s)) {
	                return s.replace(/წელი$/, 'წლის წინ');
	            }
	        },
	        s : 'რამდენიმე წამი',
	        m : 'წუთი',
	        mm : '%d წუთი',
	        h : 'საათი',
	        hh : '%d საათი',
	        d : 'დღე',
	        dd : '%d დღე',
	        M : 'თვე',
	        MM : '%d თვე',
	        y : 'წელი',
	        yy : '%d წელი'
	    },
	    ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	    ordinal : function (number) {
	        if (number === 0) {
	            return number;
	        }
	        if (number === 1) {
	            return number + '-ლი';
	        }
	        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	            return 'მე-' + number;
	        }
	        return number + '-ე';
	    },
	    week : {
	        dow : 1,
	        doy : 7
	    }
	});

	return ka;

	})));


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    0: '-ші',
	    1: '-ші',
	    2: '-ші',
	    3: '-ші',
	    4: '-ші',
	    5: '-ші',
	    6: '-шы',
	    7: '-ші',
	    8: '-ші',
	    9: '-шы',
	    10: '-шы',
	    20: '-шы',
	    30: '-шы',
	    40: '-шы',
	    50: '-ші',
	    60: '-шы',
	    70: '-ші',
	    80: '-ші',
	    90: '-шы',
	    100: '-ші'
	};

	var kk = moment.defineLocale('kk', {
	    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгін сағат] LT',
	        nextDay : '[Ертең сағат] LT',
	        nextWeek : 'dddd [сағат] LT',
	        lastDay : '[Кеше сағат] LT',
	        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ішінде',
	        past : '%s бұрын',
	        s : 'бірнеше секунд',
	        m : 'бір минут',
	        mm : '%d минут',
	        h : 'бір сағат',
	        hh : '%d сағат',
	        d : 'бір күн',
	        dd : '%d күн',
	        M : 'бір ай',
	        MM : '%d ай',
	        y : 'бір жыл',
	        yy : '%d жыл'
	    },
	    ordinalParse: /\d{1,2}-(ші|шы)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return kk;

	})));


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var km = moment.defineLocale('km', {
	    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	        nextDay: '[ស្អែក ម៉ោង] LT',
	        nextWeek: 'dddd [ម៉ោង] LT',
	        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%sទៀត',
	        past: '%sមុន',
	        s: 'ប៉ុន្មានវិនាទី',
	        m: 'មួយនាទី',
	        mm: '%d នាទី',
	        h: 'មួយម៉ោង',
	        hh: '%d ម៉ោង',
	        d: 'មួយថ្ងៃ',
	        dd: '%d ថ្ងៃ',
	        M: 'មួយខែ',
	        MM: '%d ខែ',
	        y: 'មួយឆ្នាំ',
	        yy: '%d ឆ្នាំ'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return km;

	})));


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ko = moment.defineLocale('ko', {
	    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	    longDateFormat : {
	        LT : 'A h시 m분',
	        LTS : 'A h시 m분 s초',
	        L : 'YYYY.MM.DD',
	        LL : 'YYYY년 MMMM D일',
	        LLL : 'YYYY년 MMMM D일 A h시 m분',
	        LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	    },
	    calendar : {
	        sameDay : '오늘 LT',
	        nextDay : '내일 LT',
	        nextWeek : 'dddd LT',
	        lastDay : '어제 LT',
	        lastWeek : '지난주 dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s 후',
	        past : '%s 전',
	        s : '몇 초',
	        ss : '%d초',
	        m : '일분',
	        mm : '%d분',
	        h : '한 시간',
	        hh : '%d시간',
	        d : '하루',
	        dd : '%d일',
	        M : '한 달',
	        MM : '%d달',
	        y : '일 년',
	        yy : '%d년'
	    },
	    ordinalParse : /\d{1,2}일/,
	    ordinal : '%d일',
	    meridiemParse : /오전|오후/,
	    isPM : function (token) {
	        return token === '오후';
	    },
	    meridiem : function (hour, minute, isUpper) {
	        return hour < 12 ? '오전' : '오후';
	    }
	});

	return ko;

	})));


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var suffixes = {
	    0: '-чү',
	    1: '-чи',
	    2: '-чи',
	    3: '-чү',
	    4: '-чү',
	    5: '-чи',
	    6: '-чы',
	    7: '-чи',
	    8: '-чи',
	    9: '-чу',
	    10: '-чу',
	    20: '-чы',
	    30: '-чу',
	    40: '-чы',
	    50: '-чү',
	    60: '-чы',
	    70: '-чи',
	    80: '-чи',
	    90: '-чу',
	    100: '-чү'
	};

	var ky = moment.defineLocale('ky', {
	    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгүн саат] LT',
	        nextDay : '[Эртең саат] LT',
	        nextWeek : 'dddd [саат] LT',
	        lastDay : '[Кече саат] LT',
	        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ичинде',
	        past : '%s мурун',
	        s : 'бирнече секунд',
	        m : 'бир мүнөт',
	        mm : '%d мүнөт',
	        h : 'бир саат',
	        hh : '%d саат',
	        d : 'бир күн',
	        dd : '%d күн',
	        M : 'бир ай',
	        MM : '%d ай',
	        y : 'бир жыл',
	        yy : '%d жыл'
	    },
	    ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ky;

	})));


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eng Minutt', 'enger Minutt'],
	        'h': ['eng Stonn', 'enger Stonn'],
	        'd': ['een Dag', 'engem Dag'],
	        'M': ['ee Mount', 'engem Mount'],
	        'y': ['ee Joer', 'engem Joer']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	function processFutureTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'a ' + string;
	    }
	    return 'an ' + string;
	}
	function processPastTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'viru ' + string;
	    }
	    return 'virun ' + string;
	}
	/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function eifelerRegelAppliesToNumber(number) {
	    number = parseInt(number, 10);
	    if (isNaN(number)) {
	        return false;
	    }
	    if (number < 0) {
	        // Negative Number --> always true
	        return true;
	    } else if (number < 10) {
	        // Only 1 digit
	        if (4 <= number && number <= 7) {
	            return true;
	        }
	        return false;
	    } else if (number < 100) {
	        // 2 digits
	        var lastDigit = number % 10, firstDigit = number / 10;
	        if (lastDigit === 0) {
	            return eifelerRegelAppliesToNumber(firstDigit);
	        }
	        return eifelerRegelAppliesToNumber(lastDigit);
	    } else if (number < 10000) {
	        // 3 or 4 digits --> recursively check first digit
	        while (number >= 10) {
	            number = number / 10;
	        }
	        return eifelerRegelAppliesToNumber(number);
	    } else {
	        // Anything larger than 4 digits: recursively check first n-3 digits
	        number = number / 1000;
	        return eifelerRegelAppliesToNumber(number);
	    }
	}

	var lb = moment.defineLocale('lb', {
	    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm [Auer]',
	        LTS: 'H:mm:ss [Auer]',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm [Auer]',
	        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	    },
	    calendar: {
	        sameDay: '[Haut um] LT',
	        sameElse: 'L',
	        nextDay: '[Muer um] LT',
	        nextWeek: 'dddd [um] LT',
	        lastDay: '[Gëschter um] LT',
	        lastWeek: function () {
	            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	            switch (this.day()) {
	                case 2:
	                case 4:
	                    return '[Leschten] dddd [um] LT';
	                default:
	                    return '[Leschte] dddd [um] LT';
	            }
	        }
	    },
	    relativeTime : {
	        future : processFutureTime,
	        past : processPastTime,
	        s : 'e puer Sekonnen',
	        m : processRelativeTime,
	        mm : '%d Minutten',
	        h : processRelativeTime,
	        hh : '%d Stonnen',
	        d : processRelativeTime,
	        dd : '%d Deeg',
	        M : processRelativeTime,
	        MM : '%d Méint',
	        y : processRelativeTime,
	        yy : '%d Joer'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal: '%d.',
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lb;

	})));


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var lo = moment.defineLocale('lo', {
	    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	    isPM: function (input) {
	        return input === 'ຕອນແລງ';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ຕອນເຊົ້າ';
	        } else {
	            return 'ຕອນແລງ';
	        }
	    },
	    calendar : {
	        sameDay : '[ມື້ນີ້ເວລາ] LT',
	        nextDay : '[ມື້ອື່ນເວລາ] LT',
	        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ອີກ %s',
	        past : '%sຜ່ານມາ',
	        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	        m : '1 ນາທີ',
	        mm : '%d ນາທີ',
	        h : '1 ຊົ່ວໂມງ',
	        hh : '%d ຊົ່ວໂມງ',
	        d : '1 ມື້',
	        dd : '%d ມື້',
	        M : '1 ເດືອນ',
	        MM : '%d ເດືອນ',
	        y : '1 ປີ',
	        yy : '%d ປີ'
	    },
	    ordinalParse: /(ທີ່)\d{1,2}/,
	    ordinal : function (number) {
	        return 'ທີ່' + number;
	    }
	});

	return lo;

	})));


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var units = {
	    'm' : 'minutė_minutės_minutę',
	    'mm': 'minutės_minučių_minutes',
	    'h' : 'valanda_valandos_valandą',
	    'hh': 'valandos_valandų_valandas',
	    'd' : 'diena_dienos_dieną',
	    'dd': 'dienos_dienų_dienas',
	    'M' : 'mėnuo_mėnesio_mėnesį',
	    'MM': 'mėnesiai_mėnesių_mėnesius',
	    'y' : 'metai_metų_metus',
	    'yy': 'metai_metų_metus'
	};
	function translateSeconds(number, withoutSuffix, key, isFuture) {
	    if (withoutSuffix) {
	        return 'kelios sekundės';
	    } else {
	        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	    }
	}
	function translateSingular(number, withoutSuffix, key, isFuture) {
	    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	}
	function special(number) {
	    return number % 10 === 0 || (number > 10 && number < 20);
	}
	function forms(key) {
	    return units[key].split('_');
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    if (number === 1) {
	        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	    } else if (withoutSuffix) {
	        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	    } else {
	        if (isFuture) {
	            return result + forms(key)[1];
	        } else {
	            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	        }
	    }
	}
	var lt = moment.defineLocale('lt', {
	    months : {
	        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	    },
	    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	    weekdays : {
	        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	        isFormat: /dddd HH:mm/
	    },
	    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY [m.] MMMM D [d.]',
	        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY [m.] MMMM D [d.]',
	        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	    },
	    calendar : {
	        sameDay : '[Šiandien] LT',
	        nextDay : '[Rytoj] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[Vakar] LT',
	        lastWeek : '[Praėjusį] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'po %s',
	        past : 'prieš %s',
	        s : translateSeconds,
	        m : translateSingular,
	        mm : translate,
	        h : translateSingular,
	        hh : translate,
	        d : translateSingular,
	        dd : translate,
	        M : translateSingular,
	        MM : translate,
	        y : translateSingular,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}-oji/,
	    ordinal : function (number) {
	        return number + '-oji';
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lt;

	})));


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var units = {
	    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'h': 'stundas_stundām_stunda_stundas'.split('_'),
	    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	    'd': 'dienas_dienām_diena_dienas'.split('_'),
	    'dd': 'dienas_dienām_diena_dienas'.split('_'),
	    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'y': 'gada_gadiem_gads_gadi'.split('_'),
	    'yy': 'gada_gadiem_gads_gadi'.split('_')
	};
	/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function format(forms, number, withoutSuffix) {
	    if (withoutSuffix) {
	        // E.g. "21 minūte", "3 minūtes".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	    } else {
	        // E.g. "21 minūtes" as in "pēc 21 minūtes".
	        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	    }
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    return number + ' ' + format(units[key], number, withoutSuffix);
	}
	function relativeTimeWithSingular(number, withoutSuffix, key) {
	    return format(units[key], number, withoutSuffix);
	}
	function relativeSeconds(number, withoutSuffix) {
	    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	}

	var lv = moment.defineLocale('lv', {
	    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY.',
	        LL : 'YYYY. [gada] D. MMMM',
	        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	    },
	    calendar : {
	        sameDay : '[Šodien pulksten] LT',
	        nextDay : '[Rīt pulksten] LT',
	        nextWeek : 'dddd [pulksten] LT',
	        lastDay : '[Vakar pulksten] LT',
	        lastWeek : '[Pagājušā] dddd [pulksten] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'pēc %s',
	        past : 'pirms %s',
	        s : relativeSeconds,
	        m : relativeTimeWithSingular,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithSingular,
	        hh : relativeTimeWithPlural,
	        d : relativeTimeWithSingular,
	        dd : relativeTimeWithPlural,
	        M : relativeTimeWithSingular,
	        MM : relativeTimeWithPlural,
	        y : relativeTimeWithSingular,
	        yy : relativeTimeWithPlural
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lv;

	})));


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jednog minuta'],
	        mm: ['minut', 'minuta', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mjesec', 'mjeseca', 'mjeseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var me = moment.defineLocale('me', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sjutra u] LT',

	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedjelje] [u] LT',
	                '[prošlog] [ponedjeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srijede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mjesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return me;

	})));


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var mi = moment.defineLocale('mi', {
	    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY [i] HH:mm',
	        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	    },
	    calendar: {
	        sameDay: '[i teie mahana, i] LT',
	        nextDay: '[apopo i] LT',
	        nextWeek: 'dddd [i] LT',
	        lastDay: '[inanahi i] LT',
	        lastWeek: 'dddd [whakamutunga i] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'i roto i %s',
	        past: '%s i mua',
	        s: 'te hēkona ruarua',
	        m: 'he meneti',
	        mm: '%d meneti',
	        h: 'te haora',
	        hh: '%d haora',
	        d: 'he ra',
	        dd: '%d ra',
	        M: 'he marama',
	        MM: '%d marama',
	        y: 'he tau',
	        yy: '%d tau'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return mi;

	})));


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var mk = moment.defineLocale('mk', {
	    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Денес во] LT',
	        nextDay : '[Утре во] LT',
	        nextWeek : '[Во] dddd [во] LT',
	        lastDay : '[Вчера во] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'после %s',
	        past : 'пред %s',
	        s : 'неколку секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дена',
	        M : 'месец',
	        MM : '%d месеци',
	        y : 'година',
	        yy : '%d години'
	    },
	    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return mk;

	})));


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ml = moment.defineLocale('ml', {
	    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm -നു',
	        LTS : 'A h:mm:ss -നു',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm -നു',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	    },
	    calendar : {
	        sameDay : '[ഇന്ന്] LT',
	        nextDay : '[നാളെ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ഇന്നലെ] LT',
	        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s കഴിഞ്ഞ്',
	        past : '%s മുൻപ്',
	        s : 'അൽപ നിമിഷങ്ങൾ',
	        m : 'ഒരു മിനിറ്റ്',
	        mm : '%d മിനിറ്റ്',
	        h : 'ഒരു മണിക്കൂർ',
	        hh : '%d മണിക്കൂർ',
	        d : 'ഒരു ദിവസം',
	        dd : '%d ദിവസം',
	        M : 'ഒരു മാസം',
	        MM : '%d മാസം',
	        y : 'ഒരു വർഷം',
	        yy : '%d വർഷം'
	    },
	    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'രാത്രി';
	        } else if (hour < 12) {
	            return 'രാവിലെ';
	        } else if (hour < 17) {
	            return 'ഉച്ച കഴിഞ്ഞ്';
	        } else if (hour < 20) {
	            return 'വൈകുന്നേരം';
	        } else {
	            return 'രാത്രി';
	        }
	    }
	});

	return ml;

	})));


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	function relativeTimeMr(number, withoutSuffix, string, isFuture)
	{
	    var output = '';
	    if (withoutSuffix) {
	        switch (string) {
	            case 's': output = 'काही सेकंद'; break;
	            case 'm': output = 'एक मिनिट'; break;
	            case 'mm': output = '%d मिनिटे'; break;
	            case 'h': output = 'एक तास'; break;
	            case 'hh': output = '%d तास'; break;
	            case 'd': output = 'एक दिवस'; break;
	            case 'dd': output = '%d दिवस'; break;
	            case 'M': output = 'एक महिना'; break;
	            case 'MM': output = '%d महिने'; break;
	            case 'y': output = 'एक वर्ष'; break;
	            case 'yy': output = '%d वर्षे'; break;
	        }
	    }
	    else {
	        switch (string) {
	            case 's': output = 'काही सेकंदां'; break;
	            case 'm': output = 'एका मिनिटा'; break;
	            case 'mm': output = '%d मिनिटां'; break;
	            case 'h': output = 'एका तासा'; break;
	            case 'hh': output = '%d तासां'; break;
	            case 'd': output = 'एका दिवसा'; break;
	            case 'dd': output = '%d दिवसां'; break;
	            case 'M': output = 'एका महिन्या'; break;
	            case 'MM': output = '%d महिन्यां'; break;
	            case 'y': output = 'एका वर्षा'; break;
	            case 'yy': output = '%d वर्षां'; break;
	        }
	    }
	    return output.replace(/%d/i, number);
	}

	var mr = moment.defineLocale('mr', {
	    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm वाजता',
	        LTS : 'A h:mm:ss वाजता',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm वाजता',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[उद्या] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[काल] LT',
	        lastWeek: '[मागील] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future: '%sमध्ये',
	        past: '%sपूर्वी',
	        s: relativeTimeMr,
	        m: relativeTimeMr,
	        mm: relativeTimeMr,
	        h: relativeTimeMr,
	        hh: relativeTimeMr,
	        d: relativeTimeMr,
	        dd: relativeTimeMr,
	        M: relativeTimeMr,
	        MM: relativeTimeMr,
	        y: relativeTimeMr,
	        yy: relativeTimeMr
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात्री') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सकाळी') {
	            return hour;
	        } else if (meridiem === 'दुपारी') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'सायंकाळी') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात्री';
	        } else if (hour < 10) {
	            return 'सकाळी';
	        } else if (hour < 17) {
	            return 'दुपारी';
	        } else if (hour < 20) {
	            return 'सायंकाळी';
	        } else {
	            return 'रात्री';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return mr;

	})));


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ms = moment.defineLocale('ms', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ms;

	})));


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var msMy = moment.defineLocale('ms-my', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return msMy;

	})));


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '၁',
	    '2': '၂',
	    '3': '၃',
	    '4': '၄',
	    '5': '၅',
	    '6': '၆',
	    '7': '၇',
	    '8': '၈',
	    '9': '၉',
	    '0': '၀'
	};
	var numberMap = {
	    '၁': '1',
	    '၂': '2',
	    '၃': '3',
	    '၄': '4',
	    '၅': '5',
	    '၆': '6',
	    '၇': '7',
	    '၈': '8',
	    '၉': '9',
	    '၀': '0'
	};

	var my = moment.defineLocale('my', {
	    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ယနေ.] LT [မှာ]',
	        nextDay: '[မနက်ဖြန်] LT [မှာ]',
	        nextWeek: 'dddd LT [မှာ]',
	        lastDay: '[မနေ.က] LT [မှာ]',
	        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'လာမည့် %s မှာ',
	        past: 'လွန်ခဲ့သော %s က',
	        s: 'စက္ကန်.အနည်းငယ်',
	        m: 'တစ်မိနစ်',
	        mm: '%d မိနစ်',
	        h: 'တစ်နာရီ',
	        hh: '%d နာရီ',
	        d: 'တစ်ရက်',
	        dd: '%d ရက်',
	        M: 'တစ်လ',
	        MM: '%d လ',
	        y: 'တစ်နှစ်',
	        yy: '%d နှစ်'
	    },
	    preparse: function (string) {
	        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return my;

	})));


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var nb = moment.defineLocale('nb', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[i dag kl.] LT',
	        nextDay: '[i morgen kl.] LT',
	        nextWeek: 'dddd [kl.] LT',
	        lastDay: '[i går kl.] LT',
	        lastWeek: '[forrige] dddd [kl.] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'noen sekunder',
	        m : 'ett minutt',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dager',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nb;

	})));


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	var ne = moment.defineLocale('ne', {
	    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'Aको h:mm बजे',
	        LTS : 'Aको h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, Aको h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'राति') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'बिहान') {
	            return hour;
	        } else if (meridiem === 'दिउँसो') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'साँझ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 3) {
	            return 'राति';
	        } else if (hour < 12) {
	            return 'बिहान';
	        } else if (hour < 16) {
	            return 'दिउँसो';
	        } else if (hour < 20) {
	            return 'साँझ';
	        } else {
	            return 'राति';
	        }
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[भोलि] LT',
	        nextWeek : '[आउँदो] dddd[,] LT',
	        lastDay : '[हिजो] LT',
	        lastWeek : '[गएको] dddd[,] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sमा',
	        past : '%s अगाडि',
	        s : 'केही क्षण',
	        m : 'एक मिनेट',
	        mm : '%d मिनेट',
	        h : 'एक घण्टा',
	        hh : '%d घण्टा',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महिना',
	        MM : '%d महिना',
	        y : 'एक बर्ष',
	        yy : '%d बर्ष'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ne;

	})));


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	var nl = moment.defineLocale('nl', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },

	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nl;

	})));


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	var nlBe = moment.defineLocale('nl-be', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },

	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nlBe;

	})));


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var nn = moment.defineLocale('nn', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[I dag klokka] LT',
	        nextDay: '[I morgon klokka] LT',
	        nextWeek: 'dddd [klokka] LT',
	        lastDay: '[I går klokka] LT',
	        lastWeek: '[Føregåande] dddd [klokka] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s sidan',
	        s : 'nokre sekund',
	        m : 'eit minutt',
	        mm : '%d minutt',
	        h : 'ein time',
	        hh : '%d timar',
	        d : 'ein dag',
	        dd : '%d dagar',
	        M : 'ein månad',
	        MM : '%d månader',
	        y : 'eit år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nn;

	})));


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '੧',
	    '2': '੨',
	    '3': '੩',
	    '4': '੪',
	    '5': '੫',
	    '6': '੬',
	    '7': '੭',
	    '8': '੮',
	    '9': '੯',
	    '0': '੦'
	};
	var numberMap = {
	    '੧': '1',
	    '੨': '2',
	    '੩': '3',
	    '੪': '4',
	    '੫': '5',
	    '੬': '6',
	    '੭': '7',
	    '੮': '8',
	    '੯': '9',
	    '੦': '0'
	};

	var paIn = moment.defineLocale('pa-in', {
	    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm ਵਜੇ',
	        LTS : 'A h:mm:ss ਵਜੇ',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	    },
	    calendar : {
	        sameDay : '[ਅਜ] LT',
	        nextDay : '[ਕਲ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ਕਲ] LT',
	        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ਵਿੱਚ',
	        past : '%s ਪਿਛਲੇ',
	        s : 'ਕੁਝ ਸਕਿੰਟ',
	        m : 'ਇਕ ਮਿੰਟ',
	        mm : '%d ਮਿੰਟ',
	        h : 'ਇੱਕ ਘੰਟਾ',
	        hh : '%d ਘੰਟੇ',
	        d : 'ਇੱਕ ਦਿਨ',
	        dd : '%d ਦਿਨ',
	        M : 'ਇੱਕ ਮਹੀਨਾ',
	        MM : '%d ਮਹੀਨੇ',
	        y : 'ਇੱਕ ਸਾਲ',
	        yy : '%d ਸਾਲ'
	    },
	    preparse: function (string) {
	        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ਰਾਤ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ਸਵੇਰ') {
	            return hour;
	        } else if (meridiem === 'ਦੁਪਹਿਰ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ਸ਼ਾਮ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ਰਾਤ';
	        } else if (hour < 10) {
	            return 'ਸਵੇਰ';
	        } else if (hour < 17) {
	            return 'ਦੁਪਹਿਰ';
	        } else if (hour < 20) {
	            return 'ਸ਼ਾਮ';
	        } else {
	            return 'ਰਾਤ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return paIn;

	})));


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	function plural(n) {
	    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	}
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	    }
	}

	var pl = moment.defineLocale('pl', {
	    months : function (momentToFormat, format) {
	        if (format === '') {
	            // Hack: if format empty we know this is used to generate
	            // RegExp by moment. Give then back both valid forms of months
	            // in RegExp ready format.
	            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	        } else if (/D MMMM/.test(format)) {
	            return monthsSubjective[momentToFormat.month()];
	        } else {
	            return monthsNominative[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Dziś o] LT',
	        nextDay: '[Jutro o] LT',
	        nextWeek: '[W] dddd [o] LT',
	        lastDay: '[Wczoraj o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : '%s temu',
	        s : 'kilka sekund',
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : '1 dzień',
	        dd : '%d dni',
	        M : 'miesiąc',
	        MM : translate,
	        y : 'rok',
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return pl;

	})));


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var pt = moment.defineLocale('pt', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : 'há %s',
	        s : 'segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return pt;

	})));


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ptBr = moment.defineLocale('pt-br', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : '%s atrás',
	        s : 'poucos segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal : '%dº'
	});

	return ptBr;

	})));


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	        separator = ' ';
	    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	        separator = ' de ';
	    }
	    return number + separator + format[key];
	}

	var ro = moment.defineLocale('ro', {
	    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[azi la] LT',
	        nextDay: '[mâine la] LT',
	        nextWeek: 'dddd [la] LT',
	        lastDay: '[ieri la] LT',
	        lastWeek: '[fosta] dddd [la] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'peste %s',
	        past : '%s în urmă',
	        s : 'câteva secunde',
	        m : 'un minut',
	        mm : relativeTimeWithPlural,
	        h : 'o oră',
	        hh : relativeTimeWithPlural,
	        d : 'o zi',
	        dd : relativeTimeWithPlural,
	        M : 'o lună',
	        MM : relativeTimeWithPlural,
	        y : 'un an',
	        yy : relativeTimeWithPlural
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ro;

	})));


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	        'hh': 'час_часа_часов',
	        'dd': 'день_дня_дней',
	        'MM': 'месяц_месяца_месяцев',
	        'yy': 'год_года_лет'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'минута' : 'минуту';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	var ru = moment.defineLocale('ru', {
	    months : {
	        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	    },
	    monthsShort : {
	        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	    },
	    weekdays : {
	        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	    },
	    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	    // копия предыдущего
	    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	    // полные названия с падежами
	    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

	    // Выражение, которое соотвествует только сокращённым формам
	    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сегодня в] LT',
	        nextDay: '[Завтра в] LT',
	        lastDay: '[Вчера в] LT',
	        nextWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        lastWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'через %s',
	        past : '%s назад',
	        s : 'несколько секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'час',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночи|утра|дня|вечера/i,
	    isPM : function (input) {
	        return /^(дня|вечера)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночи';
	        } else if (hour < 12) {
	            return 'утра';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечера';
	        }
	    },
	    ordinalParse: /\d{1,2}-(й|го|я)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ru;

	})));


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var se = moment.defineLocale('se', {
	    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'MMMM D. [b.] YYYY',
	        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[otne ti] LT',
	        nextDay: '[ihttin ti] LT',
	        nextWeek: 'dddd [ti] LT',
	        lastDay: '[ikte ti] LT',
	        lastWeek: '[ovddit] dddd [ti] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s geažes',
	        past : 'maŋit %s',
	        s : 'moadde sekunddat',
	        m : 'okta minuhta',
	        mm : '%d minuhtat',
	        h : 'okta diimmu',
	        hh : '%d diimmut',
	        d : 'okta beaivi',
	        dd : '%d beaivvit',
	        M : 'okta mánnu',
	        MM : '%d mánut',
	        y : 'okta jahki',
	        yy : '%d jagit'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return se;

	})));


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	/*jshint -W100*/
	var si = moment.defineLocale('si', {
	    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'a h:mm',
	        LTS : 'a h:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY MMMM D',
	        LLL : 'YYYY MMMM D, a h:mm',
	        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	    },
	    calendar : {
	        sameDay : '[අද] LT[ට]',
	        nextDay : '[හෙට] LT[ට]',
	        nextWeek : 'dddd LT[ට]',
	        lastDay : '[ඊයේ] LT[ට]',
	        lastWeek : '[පසුගිය] dddd LT[ට]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sකින්',
	        past : '%sකට පෙර',
	        s : 'තත්පර කිහිපය',
	        m : 'මිනිත්තුව',
	        mm : 'මිනිත්තු %d',
	        h : 'පැය',
	        hh : 'පැය %d',
	        d : 'දිනය',
	        dd : 'දින %d',
	        M : 'මාසය',
	        MM : 'මාස %d',
	        y : 'වසර',
	        yy : 'වසර %d'
	    },
	    ordinalParse: /\d{1,2} වැනි/,
	    ordinal : function (number) {
	        return number + ' වැනි';
	    },
	    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	    isPM : function (input) {
	        return input === 'ප.ව.' || input === 'පස් වරු';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'ප.ව.' : 'පස් වරු';
	        } else {
	            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	        }
	    }
	});

	return si;

	})));


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	    }
	}

	var sk = moment.defineLocale('sk', {
	    months : months,
	    monthsShort : monthsShort,
	    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[dnes o] LT',
	        nextDay: '[zajtra o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	            }
	        },
	        lastDay: '[včera o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'pred %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sk;

	})));


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	    }
	}

	var sl = moment.defineLocale('sl', {
	    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danes ob] LT',
	        nextDay  : '[jutri ob] LT',

	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	            }
	        },
	        lastDay  : '[včeraj ob] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'čez %s',
	        past   : 'pred %s',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : processRelativeTime,
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sl;

	})));


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sq = moment.defineLocale('sq', {
	    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /PD|MD/,
	    isPM: function (input) {
	        return input.charAt(0) === 'M';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        return hours < 12 ? 'PD' : 'MD';
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Sot në] LT',
	        nextDay : '[Nesër në] LT',
	        nextWeek : 'dddd [në] LT',
	        lastDay : '[Dje në] LT',
	        lastWeek : 'dddd [e kaluar në] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'në %s',
	        past : '%s më parë',
	        s : 'disa sekonda',
	        m : 'një minutë',
	        mm : '%d minuta',
	        h : 'një orë',
	        hh : '%d orë',
	        d : 'një ditë',
	        dd : '%d ditë',
	        M : 'një muaj',
	        MM : '%d muaj',
	        y : 'një vit',
	        yy : '%d vite'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sq;

	})));


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jedne minute'],
	        mm: ['minut', 'minute', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mesec', 'meseca', 'meseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var sr = moment.defineLocale('sr', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sutra u] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedelje] [u] LT',
	                '[prošlog] [ponedeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'pre %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sr;

	})));


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['један минут', 'једне минуте'],
	        mm: ['минут', 'минуте', 'минута'],
	        h: ['један сат', 'једног сата'],
	        hh: ['сат', 'сата', 'сати'],
	        dd: ['дан', 'дана', 'дана'],
	        MM: ['месец', 'месеца', 'месеци'],
	        yy: ['година', 'године', 'година']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var srCyrl = moment.defineLocale('sr-cyrl', {
	    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[данас у] LT',
	        nextDay: '[сутра у] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	            }
	        },
	        lastDay  : '[јуче у] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[прошле] [недеље] [у] LT',
	                '[прошлог] [понедељка] [у] LT',
	                '[прошлог] [уторка] [у] LT',
	                '[прошле] [среде] [у] LT',
	                '[прошлог] [четвртка] [у] LT',
	                '[прошлог] [петка] [у] LT',
	                '[прошле] [суботе] [у] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past   : 'пре %s',
	        s      : 'неколико секунди',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'дан',
	        dd     : translator.translate,
	        M      : 'месец',
	        MM     : translator.translate,
	        y      : 'годину',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return srCyrl;

	})));


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var ss = moment.defineLocale('ss', {
	    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Namuhla nga] LT',
	        nextDay : '[Kusasa nga] LT',
	        nextWeek : 'dddd [nga] LT',
	        lastDay : '[Itolo nga] LT',
	        lastWeek : 'dddd [leliphelile] [nga] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'nga %s',
	        past : 'wenteka nga %s',
	        s : 'emizuzwana lomcane',
	        m : 'umzuzu',
	        mm : '%d emizuzu',
	        h : 'lihora',
	        hh : '%d emahora',
	        d : 'lilanga',
	        dd : '%d emalanga',
	        M : 'inyanga',
	        MM : '%d tinyanga',
	        y : 'umnyaka',
	        yy : '%d iminyaka'
	    },
	    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'ekuseni';
	        } else if (hours < 15) {
	            return 'emini';
	        } else if (hours < 19) {
	            return 'entsambama';
	        } else {
	            return 'ebusuku';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ekuseni') {
	            return hour;
	        } else if (meridiem === 'emini') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	            if (hour === 0) {
	                return 0;
	            }
	            return hour + 12;
	        }
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : '%d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return ss;

	})));


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sv = moment.defineLocale('sv', {
	    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Idag] LT',
	        nextDay: '[Imorgon] LT',
	        lastDay: '[Igår] LT',
	        nextWeek: '[På] dddd LT',
	        lastWeek: '[I] dddd[s] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : 'för %s sedan',
	        s : 'några sekunder',
	        m : 'en minut',
	        mm : '%d minuter',
	        h : 'en timme',
	        hh : '%d timmar',
	        d : 'en dag',
	        dd : '%d dagar',
	        M : 'en månad',
	        MM : '%d månader',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}(e|a)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'e' :
	            (b === 1) ? 'a' :
	            (b === 2) ? 'a' :
	            (b === 3) ? 'e' : 'e';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sv;

	})));


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sw = moment.defineLocale('sw', {
	    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[leo saa] LT',
	        nextDay : '[kesho saa] LT',
	        nextWeek : '[wiki ijayo] dddd [saat] LT',
	        lastDay : '[jana] LT',
	        lastWeek : '[wiki iliyopita] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s baadaye',
	        past : 'tokea %s',
	        s : 'hivi punde',
	        m : 'dakika moja',
	        mm : 'dakika %d',
	        h : 'saa limoja',
	        hh : 'masaa %d',
	        d : 'siku moja',
	        dd : 'masiku %d',
	        M : 'mwezi mmoja',
	        MM : 'miezi %d',
	        y : 'mwaka mmoja',
	        yy : 'miaka %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sw;

	})));


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '௧',
	    '2': '௨',
	    '3': '௩',
	    '4': '௪',
	    '5': '௫',
	    '6': '௬',
	    '7': '௭',
	    '8': '௮',
	    '9': '௯',
	    '0': '௦'
	};
	var numberMap = {
	    '௧': '1',
	    '௨': '2',
	    '௩': '3',
	    '௪': '4',
	    '௫': '5',
	    '௬': '6',
	    '௭': '7',
	    '௮': '8',
	    '௯': '9',
	    '௦': '0'
	};

	var ta = moment.defineLocale('ta', {
	    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, HH:mm',
	        LLLL : 'dddd, D MMMM YYYY, HH:mm'
	    },
	    calendar : {
	        sameDay : '[இன்று] LT',
	        nextDay : '[நாளை] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[நேற்று] LT',
	        lastWeek : '[கடந்த வாரம்] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s இல்',
	        past : '%s முன்',
	        s : 'ஒரு சில விநாடிகள்',
	        m : 'ஒரு நிமிடம்',
	        mm : '%d நிமிடங்கள்',
	        h : 'ஒரு மணி நேரம்',
	        hh : '%d மணி நேரம்',
	        d : 'ஒரு நாள்',
	        dd : '%d நாட்கள்',
	        M : 'ஒரு மாதம்',
	        MM : '%d மாதங்கள்',
	        y : 'ஒரு வருடம்',
	        yy : '%d ஆண்டுகள்'
	    },
	    ordinalParse: /\d{1,2}வது/,
	    ordinal : function (number) {
	        return number + 'வது';
	    },
	    preparse: function (string) {
	        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // refer http://ta.wikipedia.org/s/1er1
	    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 2) {
	            return ' யாமம்';
	        } else if (hour < 6) {
	            return ' வைகறை';  // வைகறை
	        } else if (hour < 10) {
	            return ' காலை'; // காலை
	        } else if (hour < 14) {
	            return ' நண்பகல்'; // நண்பகல்
	        } else if (hour < 18) {
	            return ' எற்பாடு'; // எற்பாடு
	        } else if (hour < 22) {
	            return ' மாலை'; // மாலை
	        } else {
	            return ' யாமம்';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'யாமம்') {
	            return hour < 2 ? hour : hour + 12;
	        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	            return hour;
	        } else if (meridiem === 'நண்பகல்') {
	            return hour >= 10 ? hour : hour + 12;
	        } else {
	            return hour + 12;
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ta;

	})));


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var te = moment.defineLocale('te', {
	    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[నేడు] LT',
	        nextDay : '[రేపు] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[నిన్న] LT',
	        lastWeek : '[గత] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s లో',
	        past : '%s క్రితం',
	        s : 'కొన్ని క్షణాలు',
	        m : 'ఒక నిమిషం',
	        mm : '%d నిమిషాలు',
	        h : 'ఒక గంట',
	        hh : '%d గంటలు',
	        d : 'ఒక రోజు',
	        dd : '%d రోజులు',
	        M : 'ఒక నెల',
	        MM : '%d నెలలు',
	        y : 'ఒక సంవత్సరం',
	        yy : '%d సంవత్సరాలు'
	    },
	    ordinalParse : /\d{1,2}వ/,
	    ordinal : '%dవ',
	    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'రాత్రి') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ఉదయం') {
	            return hour;
	        } else if (meridiem === 'మధ్యాహ్నం') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'సాయంత్రం') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'రాత్రి';
	        } else if (hour < 10) {
	            return 'ఉదయం';
	        } else if (hour < 17) {
	            return 'మధ్యాహ్నం';
	        } else if (hour < 20) {
	            return 'సాయంత్రం';
	        } else {
	            return 'రాత్రి';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return te;

	})));


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tet = moment.defineLocale('tet', {
	    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Ohin iha] LT',
	        nextDay: '[Aban iha] LT',
	        nextWeek: 'dddd [iha] LT',
	        lastDay: '[Horiseik iha] LT',
	        lastWeek: 'dddd [semana kotuk] [iha] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'iha %s',
	        past : '%s liuba',
	        s : 'minutu balun',
	        m : 'minutu ida',
	        mm : 'minutus %d',
	        h : 'horas ida',
	        hh : 'horas %d',
	        d : 'loron ida',
	        dd : 'loron %d',
	        M : 'fulan ida',
	        MM : 'fulan %d',
	        y : 'tinan ida',
	        yy : 'tinan %d'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tet;

	})));


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var th = moment.defineLocale('th', {
	    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY เวลา H:mm',
	        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	    },
	    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	    isPM: function (input) {
	        return input === 'หลังเที่ยง';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ก่อนเที่ยง';
	        } else {
	            return 'หลังเที่ยง';
	        }
	    },
	    calendar : {
	        sameDay : '[วันนี้ เวลา] LT',
	        nextDay : '[พรุ่งนี้ เวลา] LT',
	        nextWeek : 'dddd[หน้า เวลา] LT',
	        lastDay : '[เมื่อวานนี้ เวลา] LT',
	        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'อีก %s',
	        past : '%sที่แล้ว',
	        s : 'ไม่กี่วินาที',
	        m : '1 นาที',
	        mm : '%d นาที',
	        h : '1 ชั่วโมง',
	        hh : '%d ชั่วโมง',
	        d : '1 วัน',
	        dd : '%d วัน',
	        M : '1 เดือน',
	        MM : '%d เดือน',
	        y : '1 ปี',
	        yy : '%d ปี'
	    }
	});

	return th;

	})));


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tlPh = moment.defineLocale('tl-ph', {
	    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'MM/D/YYYY',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY HH:mm',
	        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: 'LT [ngayong araw]',
	        nextDay: '[Bukas ng] LT',
	        nextWeek: 'LT [sa susunod na] dddd',
	        lastDay: 'LT [kahapon]',
	        lastWeek: 'LT [noong nakaraang] dddd',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'sa loob ng %s',
	        past : '%s ang nakalipas',
	        s : 'ilang segundo',
	        m : 'isang minuto',
	        mm : '%d minuto',
	        h : 'isang oras',
	        hh : '%d oras',
	        d : 'isang araw',
	        dd : '%d araw',
	        M : 'isang buwan',
	        MM : '%d buwan',
	        y : 'isang taon',
	        yy : '%d taon'
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tlPh;

	})));


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

	function translateFuture(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'leS' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'waQ' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'nem' :
	    time + ' pIq';
	    return time;
	}

	function translatePast(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'Hu’' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'wen' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'ben' :
	    time + ' ret';
	    return time;
	}

	function translate(number, withoutSuffix, string, isFuture) {
	    var numberNoun = numberAsNoun(number);
	    switch (string) {
	        case 'mm':
	            return numberNoun + ' tup';
	        case 'hh':
	            return numberNoun + ' rep';
	        case 'dd':
	            return numberNoun + ' jaj';
	        case 'MM':
	            return numberNoun + ' jar';
	        case 'yy':
	            return numberNoun + ' DIS';
	    }
	}

	function numberAsNoun(number) {
	    var hundred = Math.floor((number % 1000) / 100),
	    ten = Math.floor((number % 100) / 10),
	    one = number % 10,
	    word = '';
	    if (hundred > 0) {
	        word += numbersNouns[hundred] + 'vatlh';
	    }
	    if (ten > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	    }
	    if (one > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	    }
	    return (word === '') ? 'pagh' : word;
	}

	var tlh = moment.defineLocale('tlh', {
	    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[DaHjaj] LT',
	        nextDay: '[wa’leS] LT',
	        nextWeek: 'LLL',
	        lastDay: '[wa’Hu’] LT',
	        lastWeek: 'LLL',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : translateFuture,
	        past : translatePast,
	        s : 'puS lup',
	        m : 'wa’ tup',
	        mm : translate,
	        h : 'wa’ rep',
	        hh : translate,
	        d : 'wa’ jaj',
	        dd : translate,
	        M : 'wa’ jar',
	        MM : translate,
	        y : 'wa’ DIS',
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tlh;

	})));


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    1: '\'inci',
	    5: '\'inci',
	    8: '\'inci',
	    70: '\'inci',
	    80: '\'inci',
	    2: '\'nci',
	    7: '\'nci',
	    20: '\'nci',
	    50: '\'nci',
	    3: '\'üncü',
	    4: '\'üncü',
	    100: '\'üncü',
	    6: '\'ncı',
	    9: '\'uncu',
	    10: '\'uncu',
	    30: '\'uncu',
	    60: '\'ıncı',
	    90: '\'ıncı'
	};

	var tr = moment.defineLocale('tr', {
	    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[yarın saat] LT',
	        nextWeek : '[haftaya] dddd [saat] LT',
	        lastDay : '[dün] LT',
	        lastWeek : '[geçen hafta] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s önce',
	        s : 'birkaç saniye',
	        m : 'bir dakika',
	        mm : '%d dakika',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir yıl',
	        yy : '%d yıl'
	    },
	    ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '\'ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tr;

	})));


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	var tzl = moment.defineLocale('tzl', {
	    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM [dallas] YYYY',
	        LLL : 'D. MMMM [dallas] YYYY HH.mm',
	        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	    },
	    meridiemParse: /d\'o|d\'a/i,
	    isPM : function (input) {
	        return 'd\'o' === input.toLowerCase();
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'd\'o' : 'D\'O';
	        } else {
	            return isLower ? 'd\'a' : 'D\'A';
	        }
	    },
	    calendar : {
	        sameDay : '[oxhi à] LT',
	        nextDay : '[demà à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[ieiri à] LT',
	        lastWeek : '[sür el] dddd [lasteu à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'osprei %s',
	        past : 'ja%s',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['viensas secunds', '\'iensas secunds'],
	        'm': ['\'n míut', '\'iens míut'],
	        'mm': [number + ' míuts', '' + number + ' míuts'],
	        'h': ['\'n þora', '\'iensa þora'],
	        'hh': [number + ' þoras', '' + number + ' þoras'],
	        'd': ['\'n ziua', '\'iensa ziua'],
	        'dd': [number + ' ziuas', '' + number + ' ziuas'],
	        'M': ['\'n mes', '\'iens mes'],
	        'MM': [number + ' mesen', '' + number + ' mesen'],
	        'y': ['\'n ar', '\'iens ar'],
	        'yy': [number + ' ars', '' + number + ' ars']
	    };
	    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	}

	return tzl;

	})));


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tzm = moment.defineLocale('tzm', {
	    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	        nextWeek: 'dddd [ⴴ] LT',
	        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	        lastWeek: 'dddd [ⴴ] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	        past : 'ⵢⴰⵏ %s',
	        s : 'ⵉⵎⵉⴽ',
	        m : 'ⵎⵉⵏⵓⴺ',
	        mm : '%d ⵎⵉⵏⵓⴺ',
	        h : 'ⵙⴰⵄⴰ',
	        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	        d : 'ⴰⵙⵙ',
	        dd : '%d oⵙⵙⴰⵏ',
	        M : 'ⴰⵢoⵓⵔ',
	        MM : '%d ⵉⵢⵢⵉⵔⵏ',
	        y : 'ⴰⵙⴳⴰⵙ',
	        yy : '%d ⵉⵙⴳⴰⵙⵏ'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tzm;

	})));


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tzmLatn = moment.defineLocale('tzm-latn', {
	    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[asdkh g] LT',
	        nextDay: '[aska g] LT',
	        nextWeek: 'dddd [g] LT',
	        lastDay: '[assant g] LT',
	        lastWeek: 'dddd [g] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dadkh s yan %s',
	        past : 'yan %s',
	        s : 'imik',
	        m : 'minuḍ',
	        mm : '%d minuḍ',
	        h : 'saɛa',
	        hh : '%d tassaɛin',
	        d : 'ass',
	        dd : '%d ossan',
	        M : 'ayowr',
	        MM : '%d iyyirn',
	        y : 'asgas',
	        yy : '%d isgasn'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tzmLatn;

	})));


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	        'dd': 'день_дні_днів',
	        'MM': 'місяць_місяці_місяців',
	        'yy': 'рік_роки_років'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвилина' : 'хвилину';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'година' : 'годину';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	function weekdaysCaseReplace(m, format) {
	    var weekdays = {
	        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	    },
	    nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	        'accusative' :
	        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	            'genitive' :
	            'nominative');
	    return weekdays[nounCase][m.day()];
	}
	function processHoursFunction(str) {
	    return function () {
	        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	    };
	}

	var uk = moment.defineLocale('uk', {
	    months : {
	        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	    },
	    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	    weekdays : weekdaysCaseReplace,
	    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY р.',
	        LLL : 'D MMMM YYYY р., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	    },
	    calendar : {
	        sameDay: processHoursFunction('[Сьогодні '),
	        nextDay: processHoursFunction('[Завтра '),
	        lastDay: processHoursFunction('[Вчора '),
	        nextWeek: processHoursFunction('[У] dddd ['),
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past : '%s тому',
	        s : 'декілька секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'годину',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'місяць',
	        MM : relativeTimeWithPlural,
	        y : 'рік',
	        yy : relativeTimeWithPlural
	    },
	    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	    meridiemParse: /ночі|ранку|дня|вечора/,
	    isPM: function (input) {
	        return /^(дня|вечора)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночі';
	        } else if (hour < 12) {
	            return 'ранку';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечора';
	        }
	    },
	    ordinalParse: /\d{1,2}-(й|го)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return uk;

	})));


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var uz = moment.defineLocale('uz', {
	    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бугун соат] LT [да]',
	        nextDay : '[Эртага] LT [да]',
	        nextWeek : 'dddd [куни соат] LT [да]',
	        lastDay : '[Кеча соат] LT [да]',
	        lastWeek : '[Утган] dddd [куни соат] LT [да]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Якин %s ичида',
	        past : 'Бир неча %s олдин',
	        s : 'фурсат',
	        m : 'бир дакика',
	        mm : '%d дакика',
	        h : 'бир соат',
	        hh : '%d соат',
	        d : 'бир кун',
	        dd : '%d кун',
	        M : 'бир ой',
	        MM : '%d ой',
	        y : 'бир йил',
	        yy : '%d йил'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return uz;

	})));


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var vi = moment.defineLocale('vi', {
	    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /sa|ch/i,
	    isPM : function (input) {
	        return /^ch$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'sa' : 'SA';
	        } else {
	            return isLower ? 'ch' : 'CH';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [năm] YYYY',
	        LLL : 'D MMMM [năm] YYYY HH:mm',
	        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	        l : 'DD/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hôm nay lúc] LT',
	        nextDay: '[Ngày mai lúc] LT',
	        nextWeek: 'dddd [tuần tới lúc] LT',
	        lastDay: '[Hôm qua lúc] LT',
	        lastWeek: 'dddd [tuần rồi lúc] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s tới',
	        past : '%s trước',
	        s : 'vài giây',
	        m : 'một phút',
	        mm : '%d phút',
	        h : 'một giờ',
	        hh : '%d giờ',
	        d : 'một ngày',
	        dd : '%d ngày',
	        M : 'một tháng',
	        MM : '%d tháng',
	        y : 'một năm',
	        yy : '%d năm'
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return vi;

	})));


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var xPseudo = moment.defineLocale('x-pseudo', {
	    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[T~ódá~ý át] LT',
	        nextDay : '[T~ómó~rró~w át] LT',
	        nextWeek : 'dddd [át] LT',
	        lastDay : '[Ý~ést~érdá~ý át] LT',
	        lastWeek : '[L~ást] dddd [át] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'í~ñ %s',
	        past : '%s á~gó',
	        s : 'á ~féw ~sécó~ñds',
	        m : 'á ~míñ~úté',
	        mm : '%d m~íñú~tés',
	        h : 'á~ñ hó~úr',
	        hh : '%d h~óúrs',
	        d : 'á ~dáý',
	        dd : '%d d~áýs',
	        M : 'á ~móñ~th',
	        MM : '%d m~óñt~hs',
	        y : 'á ~ýéár',
	        yy : '%d ý~éárs'
	    },
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return xPseudo;

	})));


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var yo = moment.defineLocale('yo', {
	    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Ònì ni] LT',
	        nextDay : '[Ọ̀la ni] LT',
	        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	        lastDay : '[Àna ni] LT',
	        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ní %s',
	        past : '%s kọjá',
	        s : 'ìsẹjú aayá die',
	        m : 'ìsẹjú kan',
	        mm : 'ìsẹjú %d',
	        h : 'wákati kan',
	        hh : 'wákati %d',
	        d : 'ọjọ́ kan',
	        dd : 'ọjọ́ %d',
	        M : 'osù kan',
	        MM : 'osù %d',
	        y : 'ọdún kan',
	        yy : 'ọdún %d'
	    },
	    ordinalParse : /ọjọ́\s\d{1,2}/,
	    ordinal : 'ọjọ́ %d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return yo;

	})));


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhCn = moment.defineLocale('zh-cn', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah点mm分',
	        LTS : 'Ah点m分s秒',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah点mm分',
	        LLLL : 'YYYY年MMMD日ddddAh点mm分',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah点mm分',
	        llll : 'YYYY年MMMD日ddddAh点mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' ||
	                meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        } else {
	            // '中午'
	            return hour >= 11 ? hour : hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : function () {
	            return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	        },
	        nextDay : function () {
	            return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	        },
	        lastDay : function () {
	            return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	        },
	        nextWeek : function () {
	            var startOfWeek, prefix;
	            startOfWeek = moment().startOf('week');
	            prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
	            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	        },
	        lastWeek : function () {
	            var startOfWeek, prefix;
	            startOfWeek = moment().startOf('week');
	            prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	        },
	        sameElse : 'LL'
	    },
	    ordinalParse: /\d{1,2}(日|月|周)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s内',
	        past : '%s前',
	        s : '几秒',
	        m : '1 分钟',
	        mm : '%d 分钟',
	        h : '1 小时',
	        hh : '%d 小时',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 个月',
	        MM : '%d 个月',
	        y : '1 年',
	        yy : '%d 年'
	    },
	    week : {
	        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return zhCn;

	})));


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhHk = moment.defineLocale('zh-hk', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah點mm分',
	        LTS : 'Ah點m分s秒',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah點mm分',
	        LLLL : 'YYYY年MMMD日ddddAh點mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah點mm分',
	        llll : 'YYYY年MMMD日ddddAh點mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    ordinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});

	return zhHk;

	})));


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(197)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhTw = moment.defineLocale('zh-tw', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah點mm分',
	        LTS : 'Ah點m分s秒',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah點mm分',
	        LLLL : 'YYYY年MMMD日ddddAh點mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah點mm分',
	        llll : 'YYYY年MMMD日ddddAh點mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    ordinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});

	return zhTw;

	})));


/***/ },
/* 307 */,
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	/*jshint -W110 */

	var _ = __webpack_require__(127)
	  , wkx = __webpack_require__(309);

	module.exports = function (BaseTypes) {
	  var warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');

	  BaseTypes.UUID.types.postgres = {
	    oids: [2950],
	    array_oids: [2951]
	  };

	  BaseTypes.JSON.types.postgres = {
	    oids: [114],
	    array_oids: [199]
	  };

	  BaseTypes.JSONB.types.postgres = {
	    oids: [3802],
	    array_oids: [3807]
	  };

	  BaseTypes.DATEONLY.types.postgres = {
	    oids: [1082],
	    array_oids: [1182]
	  };

	  BaseTypes.TIME.types.postgres = {
	    oids: [1083],
	    array_oids: [1183]
	  };

	  var DECIMAL = BaseTypes.DECIMAL.inherits();

	  DECIMAL.parse = function (value) {
	    return value;
	  };

	  // numeric
	  BaseTypes.DECIMAL.types.postgres = {
	    oids: [1700],
	    array_oids: [1231]
	  };

	  var STRING = BaseTypes.STRING.inherits();
	  STRING.prototype.toSql = function () {
	    if (this._binary) {
	      return 'BYTEA';
	    }
	    return BaseTypes.STRING.prototype.toSql.call(this);
	  };

	  BaseTypes.STRING.types.postgres = {
	    oids: [1043],
	    array_oids: [1015]
	  };

	  var TEXT = BaseTypes.TEXT.inherits();

	  TEXT.prototype.toSql = function() {
	    if (this._length) {
	      warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');
	      this._length = undefined;
	    }
	    return 'TEXT';
	  };

	  BaseTypes.TEXT.types.postgres = {
	    oids: [25],
	    array_oids: [1009]
	  };

	  var CHAR = BaseTypes.CHAR.inherits();

	  CHAR.prototype.toSql = function() {
	    if (this._binary) {
	      return 'BYTEA';
	    }
	    return BaseTypes.CHAR.prototype.toSql.call(this);
	  };

	  BaseTypes.CHAR.types.postgres = {
	    oids: [18, 1042],
	    array_oids: [1002, 1014]
	  };

	  var BOOLEAN = BaseTypes.BOOLEAN.inherits();

	  BOOLEAN.prototype.toSql = function() {
	    return 'BOOLEAN';
	  };

	  BaseTypes.BOOLEAN.types.postgres = {
	    oids: [16],
	    array_oids: [1000]
	  };

	  var DATE = BaseTypes.DATE.inherits();

	  DATE.prototype.toSql = function() {
	    return 'TIMESTAMP WITH TIME ZONE';
	  };

	  BaseTypes.DATE.types.postgres = {
	    oids: [1184],
	    array_oids: [1185]
	  };

	  var INTEGER = BaseTypes.INTEGER.inherits(function() {
	    if (!(this instanceof INTEGER)) return new INTEGER();
	    BaseTypes.INTEGER.apply(this, arguments);

	    // POSTGRES does not support any parameters for integer
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('PostgreSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  INTEGER.parse = function (value) {
	    return parseInt(value, 10);
	  };

	  // int4
	  BaseTypes.INTEGER.types.postgres = {
	    oids: [23],
	    array_oids: [1007]
	  };

	  var BIGINT = BaseTypes.BIGINT.inherits(function() {
	    if (!(this instanceof BIGINT)) return new BIGINT();
	    BaseTypes.BIGINT.apply(this, arguments);

	    // POSTGRES does not support any parameters for bigint
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('PostgreSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  // int8
	  BaseTypes.BIGINT.types.postgres = {
	    oids: [20],
	    array_oids: [1016]
	  };

	  var REAL = BaseTypes.REAL.inherits(function() {
	    if (!(this instanceof REAL)) return new REAL();
	    BaseTypes.REAL.apply(this, arguments);

	    // POSTGRES does not support any parameters for real
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('PostgreSQL does not support REAL with options. Plain `REAL` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  // float4
	  BaseTypes.REAL.types.postgres = {
	    oids: [700],
	    array_oids: [1021]
	  };

	  var DOUBLE = BaseTypes.DOUBLE.inherits(function() {
	    if (!(this instanceof DOUBLE)) return new DOUBLE();
	    BaseTypes.DOUBLE.apply(this, arguments);

	    // POSTGRES does not support any parameters for double
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('PostgreSQL does not support DOUBLE with options. Plain `DOUBLE` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  // float8
	  BaseTypes.DOUBLE.types.postgres = {
	    oids: [701],
	    array_oids: [1022]
	  };

	  var FLOAT = BaseTypes.FLOAT.inherits(function() {
	    if (!(this instanceof FLOAT)) return new FLOAT();
	    BaseTypes.FLOAT.apply(this, arguments);

	    // POSTGRES does only support lengths as parameter.
	    // Values between 1-24 result in REAL
	    // Values between 25-53 result in DOUBLE PRECISION
	    // If decimals are provided remove these and print a warning
	    if (this._decimals) {
	      warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._decimals = undefined;
	    }
	    if (this._unsigned) {
	      warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');
	      this._unsigned = undefined;
	    }
	    if (this._zerofill) {
	      warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');
	      this._zerofill = undefined;
	    }
	  });
	  delete FLOAT.parse; // Float has no separate type in PG

	  var BLOB = BaseTypes.BLOB.inherits();

	  BLOB.prototype.toSql = function() {
	    if (this._length) {
	      warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');
	      this._length = undefined;
	    }
	    return 'BYTEA';
	  };

	  BLOB.prototype.$hexify = function (hex) {
	    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html
	      return "E'\\\\x" + hex + "'";
	  };

	  BaseTypes.BLOB.types.postgres = {
	    oids: [17],
	    array_oids: [1001]
	  };

	  var GEOMETRY = BaseTypes.GEOMETRY.inherits();

	  GEOMETRY.prototype.toSql = function() {
	    var result = this.key;

	    if (this.type){
	      result += '(' + this.type;

	      if (this.srid){
	        result += ',' + this.srid;
	      }

	      result += ')';
	    }

	    return result;
	  };

	  BaseTypes.GEOMETRY.types.postgres = {
	    oids: [],
	    array_oids: []
	  };

	  GEOMETRY.parse = GEOMETRY.prototype.parse = function(value) {
	    var b = new Buffer(value, 'hex');
	    return wkx.Geometry.parse(b).toGeoJSON();
	  };

	  GEOMETRY.prototype.$stringify = function (value, options) {
	    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';
	  };

	  var GEOGRAPHY = BaseTypes.GEOGRAPHY.inherits();

	  GEOGRAPHY.prototype.toSql = function() {
	    var result = 'GEOGRAPHY';

	    if (this.type){
	      result += '(' + this.type;

	      if (this.srid){
	        result += ',' + this.srid;
	      }

	      result += ')';
	    }

	    return result;
	  };

	  BaseTypes.GEOGRAPHY.types.postgres = {
	    oids: [],
	    array_oids: []
	  };

	  GEOGRAPHY.parse = GEOGRAPHY.prototype.parse = function(value) {
	    var b = new Buffer(value, 'hex');
	    return wkx.Geometry.parse(b).toGeoJSON();
	  };

	  GEOGRAPHY.prototype.$stringify = function (value, options) {
	    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';
	  };

	  var hstore;
	  var HSTORE = BaseTypes.HSTORE.inherits(function () {
	    if (!(this instanceof HSTORE)) return new HSTORE();
	    BaseTypes.HSTORE.apply(this, arguments);

	    if (!hstore) {
	      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated
	      hstore = __webpack_require__(323);
	    }
	  });

	  HSTORE.parse = function (value) {
	    if (!hstore) {
	      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated
	      hstore = __webpack_require__(323);
	    }
	    return hstore.parse(value);
	  };

	  HSTORE.prototype.escape = false;
	  HSTORE.prototype.$stringify = function (value) {
	    if (!hstore) {
	      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated
	      hstore = __webpack_require__(323);
	    }
	    return "'" + hstore.stringify(value) + "'";
	  };

	  BaseTypes.HSTORE.types.postgres = {
	    oids: [],
	    array_oids: []
	  };

	  var RANGE = BaseTypes.RANGE.inherits();

	  RANGE.oid_map = {
	    3904: 23, // int4
	    3905: 23,
	    3906: 1700, // Numeric
	    3907: 1700,
	    3908: 1114, // timestamp
	    3909: 1114,
	    3910: 1184, // timestamptz
	    3911: 1184,
	    3912: 1082, // date
	    3913: 1082,
	    3926: 20,    // int8
	    3927: 20,
	  };

	  var range = __webpack_require__(326);
	  RANGE.parse = function (value, oid, getTypeParser) {
	    var parser = getTypeParser(RANGE.oid_map[oid]);

	    return range.parse(value, parser);
	  };

	  RANGE.prototype.escape = false;
	  RANGE.prototype.$stringify = function (values, options) {
	    var valuesStringified = values.map(function (value) {
	      if (this.options.subtype.stringify) {
	        return this.options.subtype.stringify(value, options);
	      } else {
	        return options.escape(value);
	      }
	    }, this);

	    // Array.map does not preserve extra array properties
	    valuesStringified.inclusive = values.inclusive;

	    return  '\'' + range.stringify(valuesStringified) + '\'';
	  };

	  BaseTypes.RANGE.types.postgres = {
	    oids: [3904, 3906, 3908, 3910, 3912, 3926],
	    array_oids: [3905, 3907, 3909, 3911, 3913, 3927]
	  };

	  BaseTypes.ARRAY.prototype.escape = false;
	  BaseTypes.ARRAY.prototype.$stringify = function (values, options) {
	    var str = 'ARRAY[' + values.map(function (value) {
	      if (this.type && this.type.stringify) {
	        value = this.type.stringify(value, options);

	        if (this.type.escape === false) {
	          return value;
	        }
	      }
	      return options.escape(value);
	    }, this).join(',') + ']';

	    if (this.type) {
	      str += '::' + this.toSql();
	    }

	    return str;
	  };

	  var exports = {
	    DECIMAL: DECIMAL,
	    BLOB: BLOB,
	    STRING: STRING,
	    CHAR: CHAR,
	    TEXT: TEXT,
	    INTEGER: INTEGER,
	    BOOLEAN: BOOLEAN,
	    DATE: DATE,
	    BIGINT: BIGINT,
	    REAL: REAL,
	    'DOUBLE PRECISION': DOUBLE,
	    FLOAT: FLOAT,
	    GEOMETRY: GEOMETRY,
	    GEOGRAPHY: GEOGRAPHY,
	    HSTORE: HSTORE,
	    RANGE: RANGE
	  };

	  _.forIn(exports, function (DataType, key) {
	    if (!DataType.key) DataType.key = key;
	    if (!DataType.extend) {
	      DataType.extend = function(oldType) {
	        return new DataType(oldType.options);
	      };
	    }
	  });

	  return exports;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	exports.Types = __webpack_require__(310);
	exports.Geometry = __webpack_require__(311);
	exports.Point = __webpack_require__(312);
	exports.LineString = __webpack_require__(315);
	exports.Polygon = __webpack_require__(316);
	exports.MultiPoint = __webpack_require__(317);
	exports.MultiLineString = __webpack_require__(318);
	exports.MultiPolygon = __webpack_require__(319);
	exports.GeometryCollection = __webpack_require__(320);

/***/ },
/* 310 */
/***/ function(module, exports) {

	module.exports = {
	    wkt: {
	        Point: 'POINT',
	        LineString: 'LINESTRING',
	        Polygon: 'POLYGON',
	        MultiPoint: 'MULTIPOINT',
	        MultiLineString: 'MULTILINESTRING',
	        MultiPolygon: 'MULTIPOLYGON',
	        GeometryCollection: 'GEOMETRYCOLLECTION'
	    },
	    wkb: {
	        Point: 1,
	        LineString: 2,
	        Polygon: 3,
	        MultiPoint: 4,
	        MultiLineString: 5,
	        MultiPolygon: 6,
	        GeometryCollection: 7
	    },
	    geoJSON: {
	        Point: 'Point',
	        LineString: 'LineString',
	        Polygon: 'Polygon',
	        MultiPoint: 'MultiPoint',
	        MultiLineString: 'MultiLineString',
	        MultiPolygon: 'MultiPolygon',
	        GeometryCollection: 'GeometryCollection'
	    }
	};


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = Geometry;

	var Types = __webpack_require__(310);
	var Point = __webpack_require__(312);
	var LineString = __webpack_require__(315);
	var Polygon = __webpack_require__(316);
	var MultiPoint = __webpack_require__(317);
	var MultiLineString = __webpack_require__(318);
	var MultiPolygon = __webpack_require__(319);
	var GeometryCollection = __webpack_require__(320);
	var BinaryReader = __webpack_require__(321);
	var BinaryWriter = __webpack_require__(313);
	var WktParser = __webpack_require__(322);
	var ZigZag = __webpack_require__(314);

	function Geometry() {
	    this.srid = undefined;
	    this.hasZ = false;
	    this.hasM = false;
	}

	Geometry.parse = function (value, options) {
	    var valueType = typeof value;

	    if (valueType === 'string' || value instanceof WktParser)
	        return Geometry._parseWkt(value);
	    else if (Buffer.isBuffer(value) || value instanceof BinaryReader)
	        return Geometry._parseWkb(value, options);
	    else
	        throw new Error('first argument must be a string or Buffer');
	};

	Geometry._parseWkt = function (value) {
	    var wktParser,
	        srid;

	    if (value instanceof WktParser)
	        wktParser = value;
	    else
	        wktParser = new WktParser(value);

	    var match = wktParser.matchRegex([/^SRID=(\d+);/]);
	    if (match)
	        srid = match[1];

	    var geometryType = wktParser.matchType();
	    var dimension = wktParser.matchDimension();

	    var options = {
	        srid: srid,
	        hasZ: dimension.hasZ,
	        hasM: dimension.hasM
	    };

	    switch (geometryType) {
	    case Types.wkt.Point:
	        return Point._parseWkt(wktParser, options);
	    case Types.wkt.LineString:
	        return LineString._parseWkt(wktParser, options);
	    case Types.wkt.Polygon:
	        return Polygon._parseWkt(wktParser, options);
	    case Types.wkt.MultiPoint:
	        return MultiPoint._parseWkt(wktParser, options);
	    case Types.wkt.MultiLineString:
	        return MultiLineString._parseWkt(wktParser, options);
	    case Types.wkt.MultiPolygon:
	        return MultiPolygon._parseWkt(wktParser, options);
	    case Types.wkt.GeometryCollection:
	        return GeometryCollection._parseWkt(wktParser, options);
	    }
	};

	Geometry._parseWkb = function (value, parentOptions) {
	    var binaryReader,
	        hasSrid,
	        srid,
	        wkbType,
	        geometryType,
	        options = {};

	    if (value instanceof BinaryReader)
	        binaryReader = value;
	    else
	        binaryReader = new BinaryReader(value);

	    binaryReader.isBigEndian = !binaryReader.readInt8();

	    wkbType = binaryReader.readUInt32();

	    options.hasSrid = (wkbType & 0x20000000) === 0x20000000;

	    if (options.hasSrid)
	        options.srid = binaryReader.readUInt32();

	    options.hasZ = false;
	    options.hasM = false;

	    if (!options.hasSrid && (!parentOptions || !parentOptions.hasSrid)) {
	        if (wkbType >= 1000 && wkbType < 2000) {
	            options.hasZ = true;
	            geometryType = wkbType - 1000;
	        }
	        else if (wkbType >= 2000 && wkbType < 3000) {
	            options.hasM = true;
	            geometryType = wkbType - 2000;
	        }
	        else if (wkbType >= 3000 && wkbType < 4000) {
	            options.hasZ = true;
	            options.hasM = true;
	            geometryType = wkbType - 3000;
	        }
	        else {
	            geometryType = wkbType;
	        }
	    }
	    else {
	        if (wkbType & 0x80000000)
	            options.hasZ = true;
	        if (wkbType & 0x40000000)
	            options.hasM = true;

	        geometryType = wkbType & 0xF;
	    }

	    switch (geometryType) {
	    case Types.wkb.Point:
	        return Point._parseWkb(binaryReader, options);
	    case Types.wkb.LineString:
	        return LineString._parseWkb(binaryReader, options);
	    case Types.wkb.Polygon:
	        return Polygon._parseWkb(binaryReader, options);
	    case Types.wkb.MultiPoint:
	        return MultiPoint._parseWkb(binaryReader, options);
	    case Types.wkb.MultiLineString:
	        return MultiLineString._parseWkb(binaryReader, options);
	    case Types.wkb.MultiPolygon:
	        return MultiPolygon._parseWkb(binaryReader, options);
	    case Types.wkb.GeometryCollection:
	        return GeometryCollection._parseWkb(binaryReader, options);
	    default:
	        throw new Error('GeometryType ' + geometryType + ' not supported');
	    }
	};

	Geometry.parseTwkb = function (value) {
	    var binaryReader,
	        options = {};

	    if (value instanceof BinaryReader)
	        binaryReader = value;
	    else
	        binaryReader = new BinaryReader(value);

	    var type = binaryReader.readUInt8();
	    var metadataHeader = binaryReader.readUInt8();

	    var geometryType = type & 0x0F;
	    options.precision = ZigZag.decode(type >> 4);
	    options.precisionFactor = Math.pow(10, options.precision);

	    options.hasBoundingBox = metadataHeader >> 0 & 1;
	    options.hasSizeAttribute = metadataHeader >> 1 & 1;
	    options.hasIdList = metadataHeader >> 2 & 1;
	    options.hasExtendedPrecision = metadataHeader >> 3 & 1;
	    options.isEmpty = metadataHeader >> 4 & 1;

	    if (options.hasExtendedPrecision) {
	        var extendedPrecision = binaryReader.readUInt8();
	        options.hasZ = (extendedPrecision & 0x01) === 0x01;
	        options.hasM = (extendedPrecision & 0x02) === 0x02;

	        options.zPrecision = ZigZag.decode((extendedPrecision & 0x1C) >> 2);
	        options.zPrecisionFactor = Math.pow(10, options.zPrecision);

	        options.mPrecision = ZigZag.decode((extendedPrecision & 0xE0) >> 5);
	        options.mPrecisionFactor = Math.pow(10, options.mPrecision);
	    }
	    else {
	        options.hasZ = false;
	        options.hasM = false;
	    }

	    if (options.hasSizeAttribute)
	        binaryReader.readVarInt();
	    if (options.hasBoundingBox) {
	        var dimensions = 2;

	        if (options.hasZ)
	            dimensions++;
	        if (options.hasM)
	            dimensions++;

	        for (var i = 0; i < dimensions; i++) {
	            binaryReader.readVarInt();
	            binaryReader.readVarInt();
	        }
	    }

	    switch (geometryType) {
	    case Types.wkb.Point:
	        return Point._parseTwkb(binaryReader, options);
	    case Types.wkb.LineString:
	        return LineString._parseTwkb(binaryReader, options);
	    case Types.wkb.Polygon:
	        return Polygon._parseTwkb(binaryReader, options);
	    case Types.wkb.MultiPoint:
	        return MultiPoint._parseTwkb(binaryReader, options);
	    case Types.wkb.MultiLineString:
	        return MultiLineString._parseTwkb(binaryReader, options);
	    case Types.wkb.MultiPolygon:
	        return MultiPolygon._parseTwkb(binaryReader, options);
	    case Types.wkb.GeometryCollection:
	        return GeometryCollection._parseTwkb(binaryReader, options);
	    default:
	        throw new Error('GeometryType ' + geometryType + ' not supported');
	    }
	};

	Geometry.parseGeoJSON = function (value) {
	    var geometry;

	    switch (value.type) {
	    case Types.geoJSON.Point:
	        geometry = Point._parseGeoJSON(value); break;
	    case Types.geoJSON.LineString:
	        geometry = LineString._parseGeoJSON(value); break;
	    case Types.geoJSON.Polygon:
	        geometry = Polygon._parseGeoJSON(value); break;
	    case Types.geoJSON.MultiPoint:
	        geometry = MultiPoint._parseGeoJSON(value); break;
	    case Types.geoJSON.MultiLineString:
	        geometry = MultiLineString._parseGeoJSON(value); break;
	    case Types.geoJSON.MultiPolygon:
	        geometry = MultiPolygon._parseGeoJSON(value); break;
	    case Types.geoJSON.GeometryCollection:
	        geometry = GeometryCollection._parseGeoJSON(value); break;
	    default:
	        throw new Error('GeometryType ' + value.type + ' not supported');
	    }

	    if (value.crs && value.crs.type && value.crs.type === 'name' && value.crs.properties && value.crs.properties.name) {
	        var crs = value.crs.properties.name;

	        if (crs.indexOf('EPSG:') === 0)
	            geometry.srid = parseInt(crs.substring(5));
	        else if (crs.indexOf('urn:ogc:def:crs:EPSG::') === 0)
	            geometry.srid = parseInt(crs.substring(22));
	        else
	            throw new Error('Unsupported crs: ' + crs);
	    }

	    return geometry;
	};

	Geometry.prototype.toEwkt = function () {
	    return 'SRID=' + this.srid + ';' + this.toWkt();
	};

	Geometry.prototype.toEwkb = function () {
	    var ewkb = new BinaryWriter(this._getWkbSize() + 4);
	    var wkb = this.toWkb();

	    ewkb.writeInt8(1);
	    ewkb.writeUInt32LE(wkb.slice(1, 5).readUInt32LE(0) | 0x20000000, true);
	    ewkb.writeUInt32LE(this.srid);

	    ewkb.writeBuffer(wkb.slice(5));

	    return ewkb.buffer;
	};

	Geometry.prototype._getWktType = function (wktType, isEmpty) {
	    var wkt = wktType;

	    if (this.hasZ && this.hasM)
	        wkt += ' ZM ';
	    else if (this.hasZ)
	        wkt += ' Z ';
	    else if (this.hasM)
	        wkt += ' M ';

	    if (isEmpty && !this.hasZ && !this.hasM)
	        wkt += ' ';

	    if (isEmpty)
	        wkt += 'EMPTY';

	    return wkt;
	};

	Geometry.prototype._getWktCoordinate = function (point) {
	    var coordinates = point.x + ' ' + point.y;

	    if (this.hasZ)
	        coordinates += ' ' + point.z;
	    if (this.hasM)
	        coordinates += ' ' + point.m;

	    return coordinates;
	};

	Geometry.prototype._writeWkbType = function (wkb, geometryType, parentOptions) {
	    var dimensionType = 0;

	    if (typeof this.srid === 'undefined' && (!parentOptions || typeof parentOptions.srid === 'undefined')) {
	        if (this.hasZ && this.hasM)
	            dimensionType += 3000;
	        else if(this.hasZ)
	            dimensionType += 1000;
	        else if(this.hasM)
	            dimensionType += 2000;
	    }
	    else {
	        if (this.hasZ)
	            dimensionType |= 0x80000000;
	        if (this.hasM)
	            dimensionType |= 0x40000000;
	    }

	    wkb.writeUInt32LE(dimensionType + geometryType, true);
	};

	Geometry.getTwkbPrecision = function (xyPrecision, zPrecision, mPrecision) {
	    return {
	        xy: xyPrecision,
	        z: zPrecision,
	        m: mPrecision,
	        xyFactor: Math.pow(10, xyPrecision),
	        zFactor: Math.pow(10, zPrecision),
	        mFactor: Math.pow(10, mPrecision)
	    };
	};

	Geometry.prototype._writeTwkbHeader = function (twkb, geometryType, precision, isEmpty) {
	    var type = (ZigZag.encode(precision.xy) << 4) + geometryType;
	    var metadataHeader = (this.hasZ || this.hasM) << 3;
	    metadataHeader += isEmpty << 4;

	    twkb.writeUInt8(type);
	    twkb.writeUInt8(metadataHeader);

	    if (this.hasZ || this.hasM) {
	        var extendedPrecision = 0;
	        if (this.hasZ)
	            extendedPrecision |= 0x1;
	        if (this.hasM)
	            extendedPrecision |= 0x2;

	        twkb.writeUInt8(extendedPrecision);
	    }
	};

	Geometry.prototype.toGeoJSON = function (options) {
	    var geoJSON = {};

	    if (this.srid) {
	        if (options) {
	            if (options.shortCrs) {
	                geoJSON.crs = {
	                    type: 'name',
	                    properties: {
	                        name: 'EPSG:' + this.srid
	                    }
	                };
	            }
	            else if (options.longCrs) {
	                geoJSON.crs = {
	                    type: 'name',
	                    properties: {
	                        name: 'urn:ogc:def:crs:EPSG::' + this.srid
	                    }
	                };
	            }
	        }
	    }

	    return geoJSON;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Point;

	var util = __webpack_require__(124);

	var Geometry = __webpack_require__(311);
	var Types = __webpack_require__(310);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function Point(x, y, z, m) {
	    Geometry.call(this);

	    this.x = x;
	    this.y = y;
	    this.z = z;
	    this.m = m;

	    this.hasZ = typeof this.z !== 'undefined';
	    this.hasM = typeof this.m !== 'undefined';
	}

	util.inherits(Point, Geometry);

	Point.Z = function (x, y, z) {
	    var point = new Point(x, y, z);
	    point.hasZ = true;
	    return point;
	};

	Point.M = function (x, y, m) {
	    var point = new Point(x, y, undefined, m);
	    point.hasM = true;
	    return point;
	};

	Point.ZM = function (x, y, z, m) {
	    var point = new Point(x, y, z, m);
	    point.hasZ = true;
	    point.hasM = true;
	    return point;
	};

	Point._parseWkt = function (value, options) {
	    var point = new Point();
	    point.srid = options.srid;
	    point.hasZ = options.hasZ;
	    point.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return point;

	    value.expectGroupStart();

	    var coordinate = value.matchCoordinate(options);

	    point.x = coordinate.x;
	    point.y = coordinate.y;
	    point.z = coordinate.z;
	    point.m = coordinate.m;

	    value.expectGroupEnd();

	    return point;
	};

	Point._parseWkb = function (value, options) {
	    var point = Point._readWkbPoint(value, options);
	    point.srid = options.srid;
	    return point;
	};

	Point._readWkbPoint = function (value, options) {
	    return new Point(value.readDouble(), value.readDouble(),
	        options.hasZ ? value.readDouble() : undefined,
	        options.hasM ? value.readDouble() : undefined);
	};

	Point._parseTwkb = function (value, options) {
	    var point = new Point();
	    point.hasZ = options.hasZ;
	    point.hasM = options.hasM;

	    if (options.isEmpty)
	        return point;

	    point.x = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
	    point.y = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
	    point.z = options.hasZ ? ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor : undefined;
	    point.m = options.hasM ? ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor : undefined;

	    return point;
	};

	Point._readTwkbPoint = function (value, options, previousPoint) {
	    previousPoint.x += ZigZag.decode(value.readVarInt()) / options.precisionFactor;
	    previousPoint.y += ZigZag.decode(value.readVarInt()) / options.precisionFactor;

	    if (options.hasZ)
	        previousPoint.z += ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor;
	    if (options.hasM)
	        previousPoint.m += ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor;

	    return new Point(previousPoint.x, previousPoint.y, previousPoint.z, previousPoint.m);
	};

	Point._parseGeoJSON = function (value) {
	    return Point._readGeoJSONPoint(value.coordinates);
	};

	Point._readGeoJSONPoint = function (coordinates) {
	    if (coordinates.length === 0)
	        return new Point();

	    if (coordinates.length > 2)
	        return new Point(coordinates[0], coordinates[1], coordinates[2]);

	    return new Point(coordinates[0], coordinates[1]);
	};

	Point.prototype.toWkt = function () {
	    if (typeof this.x === 'undefined' && typeof this.y === 'undefined' &&
	        typeof this.z === 'undefined' && typeof this.m === 'undefined')
	        return this._getWktType(Types.wkt.Point, true);

	    return this._getWktType(Types.wkt.Point, false) + '(' + this._getWktCoordinate(this) + ')';
	};

	Point.prototype.toWkb = function (parentOptions) {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    if (typeof this.x === 'undefined' && typeof this.y === 'undefined') {
	        this._writeWkbType(wkb, Types.wkb.MultiPoint, parentOptions);
	        wkb.writeUInt32LE(0);
	    }
	    else {
	        this._writeWkbType(wkb, Types.wkb.Point, parentOptions);
	        this._writeWkbPoint(wkb);
	    }

	    return wkb.buffer;
	};

	Point.prototype._writeWkbPoint = function (wkb) {
	    wkb.writeDoubleLE(this.x);
	    wkb.writeDoubleLE(this.y);

	    if (this.hasZ)
	        wkb.writeDoubleLE(this.z);
	    if (this.hasM)
	        wkb.writeDoubleLE(this.m);
	};

	Point.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = typeof this.x === 'undefined' && typeof this.y === 'undefined';

	    this._writeTwkbHeader(twkb, Types.wkb.Point, precision, isEmpty);

	    if (!isEmpty)
	        this._writeTwkbPoint(twkb, precision, new Point(0, 0, 0, 0));

	    return twkb.buffer;
	};

	Point.prototype._writeTwkbPoint = function (twkb, precision, previousPoint) {
	    var x = this.x * precision.xyFactor;
	    var y = this.y * precision.xyFactor;
	    var z = this.z * precision.zFactor;
	    var m = this.m * precision.mFactor;

	    twkb.writeVarInt(ZigZag.encode(x - previousPoint.x));
	    twkb.writeVarInt(ZigZag.encode(y - previousPoint.y));
	    if (this.hasZ)
	        twkb.writeVarInt(ZigZag.encode(z - previousPoint.z));
	    if (this.hasM)
	        twkb.writeVarInt(ZigZag.encode(m - previousPoint.m));

	    previousPoint.x = x;
	    previousPoint.y = y;
	    previousPoint.z = z;
	    previousPoint.m = m;
	};

	Point.prototype._getWkbSize = function () {
	    if (typeof this.x === 'undefined' && typeof this.y === 'undefined')
	        return 1 + 4 + 4;

	    var size = 1 + 4 + 8 + 8;

	    if (this.hasZ)
	        size += 8;
	    if (this.hasM)
	        size += 8;

	    return size;
	};

	Point.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.Point;

	    if (typeof this.x === 'undefined' && typeof this.y === 'undefined')
	        geoJSON.coordinates = [];
	    else if (typeof this.z !== 'undefined')
	        geoJSON.coordinates = [this.x, this.y, this.z];
	    else
	        geoJSON.coordinates = [this.x, this.y];

	    return geoJSON;
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = BinaryWriter;

	function BinaryWriter(size, allowResize) {
	    this.buffer = new Buffer(size);
	    this.position = 0;
	    this.allowResize = allowResize;
	}

	function _write(write, size) {
	    return function (value, noAssert) {
	        this.ensureSize(size);

	        write.call(this.buffer, value, this.position, noAssert);
	        this.position += size;
	    };
	}

	BinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);
	BinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);
	BinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);
	BinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);
	BinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);
	BinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);
	BinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);
	BinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);
	BinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);
	BinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);
	BinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);
	BinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);
	BinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);
	BinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);

	BinaryWriter.prototype.writeBuffer = function (buffer) {
	    this.ensureSize(buffer.length);

	    buffer.copy(this.buffer, this.position, 0, buffer.length);
	    this.position += buffer.length;
	};

	BinaryWriter.prototype.writeVarInt = function (value) {
	    var length = 1;

	    while ((value & 0xFFFFFF80) !== 0) {
	        this.writeUInt8((value & 0x7F) | 0x80);
	        value >>>= 7;
	        length++;
	    }

	    this.writeUInt8(value & 0x7F);

	    return length;
	};

	BinaryWriter.prototype.ensureSize = function (size) {
	    if (this.buffer.length < this.position + size) {
	        if (this.allowResize) {
	            var tempBuffer = new Buffer(this.position + size);
	            this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);
	            this.buffer = tempBuffer;
	        }
	        else {
	            throw new RangeError('index out of range');
	        }
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 314 */
/***/ function(module, exports) {

	module.exports = {
	    encode: function (value) {
	        return (value << 1) ^ (value >> 31);
	    },
	    decode: function (value) {
	        return (value >> 1) ^ (-(value & 1));
	    }
	};


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = LineString;

	var util = __webpack_require__(124);

	var Geometry = __webpack_require__(311);
	var Types = __webpack_require__(310);
	var Point = __webpack_require__(312);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function LineString(points) {
	    Geometry.call(this);

	    this.points = points || [];

	    if (this.points.length > 0) {
	        this.hasZ = this.points[0].hasZ;
	        this.hasM = this.points[0].hasM;
	    }
	}

	util.inherits(LineString, Geometry);

	LineString.Z = function (points) {
	    var lineString = new LineString(points);
	    lineString.hasZ = true;
	    return lineString;
	};

	LineString.M = function (points) {
	    var lineString = new LineString(points);
	    lineString.hasM = true;
	    return lineString;
	};

	LineString.ZM = function (points) {
	    var lineString = new LineString(points);
	    lineString.hasZ = true;
	    lineString.hasM = true;
	    return lineString;
	};

	LineString._parseWkt = function (value, options) {
	    var lineString = new LineString();
	    lineString.srid = options.srid;
	    lineString.hasZ = options.hasZ;
	    lineString.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return lineString;

	    value.expectGroupStart();
	    lineString.points.push.apply(lineString.points, value.matchCoordinates(options));
	    value.expectGroupEnd();

	    return lineString;
	};

	LineString._parseWkb = function (value, options) {
	    var lineString = new LineString();
	    lineString.srid = options.srid;
	    lineString.hasZ = options.hasZ;
	    lineString.hasM = options.hasM;

	    var pointCount = value.readUInt32();

	    for (var i = 0; i < pointCount; i++)
	        lineString.points.push(Point._readWkbPoint(value, options));

	    return lineString;
	};

	LineString._parseTwkb = function (value, options) {
	    var lineString = new LineString();
	    lineString.hasZ = options.hasZ;
	    lineString.hasM = options.hasM;

	    if (options.isEmpty)
	        return lineString;

	    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
	    var pointCount = value.readVarInt();

	    for (var i = 0; i < pointCount; i++)
	        lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

	    return lineString;
	};

	LineString._parseGeoJSON = function (value) {
	    var lineString = new LineString();

	    if (value.coordinates.length > 0)
	        lineString.hasZ = value.coordinates[0].length > 2;

	    for (var i = 0; i < value.coordinates.length; i++)
	        lineString.points.push(Point._readGeoJSONPoint(value.coordinates[i]));

	    return lineString;
	};

	LineString.prototype.toWkt = function () {
	    if (this.points.length === 0)
	        return this._getWktType(Types.wkt.LineString, true);

	    return this._getWktType(Types.wkt.LineString, false) + this._toInnerWkt();
	};

	LineString.prototype._toInnerWkt = function () {
	    var innerWkt = '(';

	    for (var i = 0; i < this.points.length; i++)
	        innerWkt += this._getWktCoordinate(this.points[i]) + ',';

	    innerWkt = innerWkt.slice(0, -1);
	    innerWkt += ')';

	    return innerWkt;
	};

	LineString.prototype.toWkb = function (parentOptions) {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.LineString, parentOptions);
	    wkb.writeUInt32LE(this.points.length);

	    for (var i = 0; i < this.points.length; i++)
	        this.points[i]._writeWkbPoint(wkb);

	    return wkb.buffer;
	};

	LineString.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.points.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.LineString, precision, isEmpty);

	    if (this.points.length > 0) {
	        twkb.writeVarInt(this.points.length);

	        var previousPoint = new Point(0, 0, 0, 0);
	        for (var i = 0; i < this.points.length; i++)
	            this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
	    }

	    return twkb.buffer;
	};

	LineString.prototype._getWkbSize = function () {
	    var coordinateSize = 16;

	    if (this.hasZ)
	        coordinateSize += 8;
	    if (this.hasM)
	        coordinateSize += 8;

	    return 1 + 4 + 4 + (this.points.length * coordinateSize);
	};

	LineString.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.LineString;
	    geoJSON.coordinates = [];

	    for (var i = 0; i < this.points.length; i++) {
	        if (this.hasZ)
	            geoJSON.coordinates.push([this.points[i].x, this.points[i].y, this.points[i].z]);
	        else
	            geoJSON.coordinates.push([this.points[i].x, this.points[i].y]);
	    }

	    return geoJSON;
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Polygon;

	var util = __webpack_require__(124);

	var Geometry = __webpack_require__(311);
	var Types = __webpack_require__(310);
	var Point = __webpack_require__(312);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function Polygon(exteriorRing, interiorRings) {
	    Geometry.call(this);

	    this.exteriorRing = exteriorRing || [];
	    this.interiorRings = interiorRings || [];

	    if (this.exteriorRing.length > 0) {
	        this.hasZ = this.exteriorRing[0].hasZ;
	        this.hasM = this.exteriorRing[0].hasM;
	    }
	}

	util.inherits(Polygon, Geometry);

	Polygon.Z = function (exteriorRing, interiorRings) {
	    var polygon = new Polygon(exteriorRing, interiorRings);
	    polygon.hasZ = true;
	    return polygon;
	};

	Polygon.M = function (exteriorRing, interiorRings) {
	    var polygon = new Polygon(exteriorRing, interiorRings);
	    polygon.hasM = true;
	    return polygon;
	};

	Polygon.ZM = function (exteriorRing, interiorRings) {
	    var polygon = new Polygon(exteriorRing, interiorRings);
	    polygon.hasZ = true;
	    polygon.hasM = true;
	    return polygon;
	};

	Polygon._parseWkt = function (value, options) {
	    var polygon = new Polygon();
	    polygon.srid = options.srid;
	    polygon.hasZ = options.hasZ;
	    polygon.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return polygon;

	    value.expectGroupStart();

	    value.expectGroupStart();
	    polygon.exteriorRing.push.apply(polygon.exteriorRing, value.matchCoordinates(options));
	    value.expectGroupEnd();

	    while (value.isMatch([','])) {
	        value.expectGroupStart();
	        polygon.interiorRings.push(value.matchCoordinates(options));
	        value.expectGroupEnd();
	    }

	    value.expectGroupEnd();

	    return polygon;
	};

	Polygon._parseWkb = function (value, options) {
	    var polygon = new Polygon();
	    polygon.srid = options.srid;
	    polygon.hasZ = options.hasZ;
	    polygon.hasM = options.hasM;

	    var ringCount = value.readUInt32();

	    if (ringCount > 0) {
	        var exteriorRingCount = value.readUInt32();

	        for (var i = 0; i < exteriorRingCount; i++)
	            polygon.exteriorRing.push(Point._readWkbPoint(value, options));

	        for (i = 1; i < ringCount; i++) {
	            var interiorRing = [];

	            var interiorRingCount = value.readUInt32();

	            for (var j = 0; j < interiorRingCount; j++)
	                interiorRing.push(Point._readWkbPoint(value, options));

	            polygon.interiorRings.push(interiorRing);
	        }
	    }

	    return polygon;
	};

	Polygon._parseTwkb = function (value, options) {
	    var polygon = new Polygon();
	    polygon.hasZ = options.hasZ;
	    polygon.hasM = options.hasM;

	    if (options.isEmpty)
	        return polygon;

	    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
	    var ringCount = value.readVarInt();
	    var exteriorRingCount = value.readVarInt();

	    for (var i = 0; i < exteriorRingCount; i++)
	        polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

	    for (i = 1; i < ringCount; i++) {
	        var interiorRing = [];

	        var interiorRingCount = value.readVarInt();

	        for (var j = 0; j < interiorRingCount; j++)
	            interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

	        polygon.interiorRings.push(interiorRing);
	    }

	    return polygon;
	};

	Polygon._parseGeoJSON = function (value) {
	    var polygon = new Polygon();

	    if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
	        polygon.hasZ = value.coordinates[0][0].length > 2;

	    for (var i = 0; i < value.coordinates.length; i++) {
	        if (i > 0)
	            polygon.interiorRings.push([]);

	        for (var j = 0; j  < value.coordinates[i].length; j++) {
	            if (i === 0)
	                polygon.exteriorRing.push(Point._readGeoJSONPoint(value.coordinates[i][j]));
	            else
	                polygon.interiorRings[i - 1].push(Point._readGeoJSONPoint(value.coordinates[i][j]));
	        }
	    }

	    return polygon;
	};

	Polygon.prototype.toWkt = function () {
	    if (this.exteriorRing.length === 0)
	        return this._getWktType(Types.wkt.Polygon, true);

	    return this._getWktType(Types.wkt.Polygon, false) + this._toInnerWkt();
	};

	Polygon.prototype._toInnerWkt = function () {
	    var innerWkt = '((';

	    for (var i = 0; i < this.exteriorRing.length; i++)
	        innerWkt += this._getWktCoordinate(this.exteriorRing[i]) + ',';

	    innerWkt = innerWkt.slice(0, -1);
	    innerWkt += ')';

	    for (i = 0; i < this.interiorRings.length; i++) {
	        innerWkt += ',(';

	        for (var j = 0; j < this.interiorRings[i].length; j++) {
	            innerWkt += this._getWktCoordinate(this.interiorRings[i][j]) + ',';
	        }

	        innerWkt = innerWkt.slice(0, -1);
	        innerWkt += ')';
	    }

	    innerWkt += ')';

	    return innerWkt;
	};

	Polygon.prototype.toWkb = function (parentOptions) {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.Polygon, parentOptions);

	    if (this.exteriorRing.length > 0) {
	        wkb.writeUInt32LE(1 + this.interiorRings.length);
	        wkb.writeUInt32LE(this.exteriorRing.length);
	    }
	    else {
	        wkb.writeUInt32LE(0);
	    }

	    for (var i = 0; i < this.exteriorRing.length; i++)
	        this.exteriorRing[i]._writeWkbPoint(wkb);

	    for (i = 0; i < this.interiorRings.length; i++) {
	        wkb.writeUInt32LE(this.interiorRings[i].length);

	        for (var j = 0; j < this.interiorRings[i].length; j++)
	            this.interiorRings[i][j]._writeWkbPoint(wkb);
	    }

	    return wkb.buffer;
	};

	Polygon.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.exteriorRing.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.Polygon, precision, isEmpty);

	    if (this.exteriorRing.length > 0) {
	        twkb.writeVarInt(1 + this.interiorRings.length);

	        twkb.writeVarInt(this.exteriorRing.length);

	        var previousPoint = new Point(0, 0, 0, 0);
	        for (var i = 0; i < this.exteriorRing.length; i++)
	            this.exteriorRing[i]._writeTwkbPoint(twkb, precision, previousPoint);

	        for (i = 0; i < this.interiorRings.length; i++) {
	            twkb.writeVarInt(this.interiorRings[i].length);

	            for (var j = 0; j < this.interiorRings[i].length; j++)
	                this.interiorRings[i][j]._writeTwkbPoint(twkb, precision, previousPoint);
	        }
	    }

	    return twkb.buffer;
	};

	Polygon.prototype._getWkbSize = function () {
	    var coordinateSize = 16;

	    if (this.hasZ)
	        coordinateSize += 8;
	    if (this.hasM)
	        coordinateSize += 8;

	    var size = 1 + 4 + 4;

	    if (this.exteriorRing.length > 0)
	        size += 4 + (this.exteriorRing.length * coordinateSize);

	    for (var i = 0; i < this.interiorRings.length; i++)
	        size += 4 + (this.interiorRings[i].length * coordinateSize);

	    return size;
	};

	Polygon.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.Polygon;
	    geoJSON.coordinates = [];

	    if (this.exteriorRing.length > 0) {
	        var exteriorRing = [];

	        for (var i = 0; i < this.exteriorRing.length; i++) {
	            if (this.hasZ)
	                exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y, this.exteriorRing[i].z]);
	            else
	                exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y]);
	        }

	        geoJSON.coordinates.push(exteriorRing);
	    }

	    for (var j = 0; j < this.interiorRings.length; j++) {
	        var interiorRing = [];

	        for (var k = 0; k < this.interiorRings[j].length; k++) {
	            if (this.hasZ)
	                interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y, this.interiorRings[j][k].z]);
	            else
	                interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y]);
	        }

	        geoJSON.coordinates.push(interiorRing);
	    }

	    return geoJSON;
	};


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = MultiPoint;

	var util = __webpack_require__(124);

	var Types = __webpack_require__(310);
	var Geometry = __webpack_require__(311);
	var Point = __webpack_require__(312);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function MultiPoint(points) {
	    Geometry.call(this);

	    this.points = points || [];
	}

	util.inherits(MultiPoint, Geometry);

	MultiPoint.Z = function (points) {
	    var multiPoint = new MultiPoint(points);
	    multiPoint.hasZ = true;
	    return multiPoint;
	};

	MultiPoint.M = function (points) {
	    var multiPoint = new MultiPoint(points);
	    multiPoint.hasM = true;
	    return multiPoint;
	};

	MultiPoint.ZM = function (points) {
	    var multiPoint = new MultiPoint(points);
	    multiPoint.hasZ = true;
	    multiPoint.hasM = true;
	    return multiPoint;
	};

	MultiPoint._parseWkt = function (value, options) {
	    var multiPoint = new MultiPoint();
	    multiPoint.srid = options.srid;
	    multiPoint.hasZ = options.hasZ;
	    multiPoint.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return multiPoint;

	    value.expectGroupStart();
	    multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));
	    value.expectGroupEnd();

	    return multiPoint;
	};

	MultiPoint._parseWkb = function (value, options) {
	    var multiPoint = new MultiPoint();
	    multiPoint.srid = options.srid;
	    multiPoint.hasZ = options.hasZ;
	    multiPoint.hasM = options.hasM;

	    var pointCount = value.readUInt32();

	    for (var i = 0; i < pointCount; i++)
	        multiPoint.points.push(Geometry.parse(value, options));

	    return multiPoint;
	};

	MultiPoint._parseTwkb = function (value, options) {
	    var multiPoint = new MultiPoint();
	    multiPoint.hasZ = options.hasZ;
	    multiPoint.hasM = options.hasM;

	    if (options.isEmpty)
	        return multiPoint;

	    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
	    var pointCount = value.readVarInt();

	    for (var i = 0; i < pointCount; i++)
	        multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));

	    return multiPoint;
	};

	MultiPoint._parseGeoJSON = function (value) {
	    var multiPoint = new MultiPoint();

	    if (value.coordinates.length > 0)
	        multiPoint.hasZ = value.coordinates[0].length > 2;

	    for (var i = 0; i < value.coordinates.length; i++)
	        multiPoint.points.push(Point._parseGeoJSON({ coordinates: value.coordinates[i] }));

	    return multiPoint;
	};

	MultiPoint.prototype.toWkt = function () {
	    if (this.points.length === 0)
	        return this._getWktType(Types.wkt.MultiPoint, true);

	    var wkt = this._getWktType(Types.wkt.MultiPoint, false) + '(';

	    for (var i = 0; i < this.points.length; i++)
	        wkt += this._getWktCoordinate(this.points[i]) + ',';

	    wkt = wkt.slice(0, -1);
	    wkt += ')';

	    return wkt;
	};

	MultiPoint.prototype.toWkb = function () {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.MultiPoint);
	    wkb.writeUInt32LE(this.points.length);

	    for (var i = 0; i < this.points.length; i++)
	        wkb.writeBuffer(this.points[i].toWkb({ srid: this.srid }));

	    return wkb.buffer;
	};

	MultiPoint.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.points.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);

	    if (this.points.length > 0) {
	        twkb.writeVarInt(this.points.length);

	        var previousPoint = new Point(0, 0, 0, 0);
	        for (var i = 0; i < this.points.length; i++)
	            this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
	    }

	    return twkb.buffer;
	};

	MultiPoint.prototype._getWkbSize = function () {
	    var coordinateSize = 16;

	    if (this.hasZ)
	        coordinateSize += 8;
	    if (this.hasM)
	        coordinateSize += 8;

	    coordinateSize += 5;

	    return 1 + 4 + 4 + (this.points.length * coordinateSize);
	};

	MultiPoint.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.MultiPoint;
	    geoJSON.coordinates = [];

	    for (var i = 0; i < this.points.length; i++)
	        geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);

	    return geoJSON;
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = MultiLineString;

	var util = __webpack_require__(124);

	var Types = __webpack_require__(310);
	var Geometry = __webpack_require__(311);
	var Point = __webpack_require__(312);
	var LineString = __webpack_require__(315);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function MultiLineString(lineStrings) {
	    Geometry.call(this);

	    this.lineStrings = lineStrings || [];
	}

	util.inherits(MultiLineString, Geometry);

	MultiLineString.Z = function (lineStrings) {
	    var multiLineString = new MultiLineString(lineStrings);
	    multiLineString.hasZ = true;
	    return multiLineString;
	};

	MultiLineString.M = function (lineStrings) {
	    var multiLineString = new MultiLineString(lineStrings);
	    multiLineString.hasM = true;
	    return multiLineString;
	};

	MultiLineString.ZM = function (lineStrings) {
	    var multiLineString = new MultiLineString(lineStrings);
	    multiLineString.hasZ = true;
	    multiLineString.hasM = true;
	    return multiLineString;
	};

	MultiLineString._parseWkt = function (value, options) {
	    var multiLineString = new MultiLineString();
	    multiLineString.srid = options.srid;
	    multiLineString.hasZ = options.hasZ;
	    multiLineString.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return multiLineString;

	    value.expectGroupStart();

	    do {
	        value.expectGroupStart();
	        multiLineString.lineStrings.push(new LineString(value.matchCoordinates(options)));
	        value.expectGroupEnd();
	    } while (value.isMatch([',']));

	    value.expectGroupEnd();

	    return multiLineString;
	};

	MultiLineString._parseWkb = function (value, options) {
	    var multiLineString = new MultiLineString();
	    multiLineString.srid = options.srid;
	    multiLineString.hasZ = options.hasZ;
	    multiLineString.hasM = options.hasM;

	    var lineStringCount = value.readUInt32();

	    for (var i = 0; i < lineStringCount; i++)
	        multiLineString.lineStrings.push(Geometry.parse(value, options));

	    return multiLineString;
	};

	MultiLineString._parseTwkb = function (value, options) {
	    var multiLineString = new MultiLineString();
	    multiLineString.hasZ = options.hasZ;
	    multiLineString.hasM = options.hasM;

	    if (options.isEmpty)
	        return multiLineString;

	    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
	    var lineStringCount = value.readVarInt();

	    for (var i = 0; i < lineStringCount; i++) {
	        var lineString = new LineString();
	        lineString.hasZ = options.hasZ;
	        lineString.hasM = options.hasM;

	        var pointCount = value.readVarInt();

	        for (var j = 0; j < pointCount; j++)
	            lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

	        multiLineString.lineStrings.push(lineString);
	    }

	    return multiLineString;
	};

	MultiLineString._parseGeoJSON = function (value) {
	    var multiLineString = new MultiLineString();

	    if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
	        multiLineString.hasZ = value.coordinates[0][0].length > 2;

	    for (var i = 0; i < value.coordinates.length; i++)
	        multiLineString.lineStrings.push(LineString._parseGeoJSON({ coordinates: value.coordinates[i] }));

	    return multiLineString;
	};

	MultiLineString.prototype.toWkt = function () {
	    if (this.lineStrings.length === 0)
	        return this._getWktType(Types.wkt.MultiLineString, true);

	    var wkt = this._getWktType(Types.wkt.MultiLineString, false) + '(';

	    for (var i = 0; i < this.lineStrings.length; i++)
	        wkt += this.lineStrings[i]._toInnerWkt() + ',';

	    wkt = wkt.slice(0, -1);
	    wkt += ')';

	    return wkt;
	};

	MultiLineString.prototype.toWkb = function () {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.MultiLineString);
	    wkb.writeUInt32LE(this.lineStrings.length);

	    for (var i = 0; i < this.lineStrings.length; i++)
	        wkb.writeBuffer(this.lineStrings[i].toWkb({ srid: this.srid }));

	    return wkb.buffer;
	};

	MultiLineString.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.lineStrings.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.MultiLineString, precision, isEmpty);

	    if (this.lineStrings.length > 0) {
	        twkb.writeVarInt(this.lineStrings.length);

	        var previousPoint = new Point(0, 0, 0, 0);
	        for (var i = 0; i < this.lineStrings.length; i++) {
	            twkb.writeVarInt(this.lineStrings[i].points.length);

	            for (var j = 0; j < this.lineStrings[i].points.length; j++)
	                this.lineStrings[i].points[j]._writeTwkbPoint(twkb, precision, previousPoint);
	        }
	    }

	    return twkb.buffer;
	};

	MultiLineString.prototype._getWkbSize = function () {
	    var size = 1 + 4 + 4;

	    for (var i = 0; i < this.lineStrings.length; i++)
	        size += this.lineStrings[i]._getWkbSize();

	    return size;
	};

	MultiLineString.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.MultiLineString;
	    geoJSON.coordinates = [];

	    for (var i = 0; i < this.lineStrings.length; i++)
	        geoJSON.coordinates.push(this.lineStrings[i].toGeoJSON().coordinates);

	    return geoJSON;
	};


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = MultiPolygon;

	var util = __webpack_require__(124);

	var Types = __webpack_require__(310);
	var Geometry = __webpack_require__(311);
	var Point = __webpack_require__(312);
	var Polygon = __webpack_require__(316);
	var BinaryWriter = __webpack_require__(313);
	var ZigZag = __webpack_require__(314);

	function MultiPolygon(polygons) {
	    Geometry.call(this);

	    this.polygons = polygons || [];
	}

	util.inherits(MultiPolygon, Geometry);

	MultiPolygon.Z = function (polygons) {
	    var multiPolygon = new MultiPolygon(polygons);
	    multiPolygon.hasZ = true;
	    return multiPolygon;
	};

	MultiPolygon.M = function (polygons) {
	    var multiPolygon = new MultiPolygon(polygons);
	    multiPolygon.hasM = true;
	    return multiPolygon;
	};

	MultiPolygon.ZM = function (polygons) {
	    var multiPolygon = new MultiPolygon(polygons);
	    multiPolygon.hasZ = true;
	    multiPolygon.hasM = true;
	    return multiPolygon;
	};

	MultiPolygon._parseWkt = function (value, options) {
	    var multiPolygon = new MultiPolygon();
	    multiPolygon.srid = options.srid;
	    multiPolygon.hasZ = options.hasZ;
	    multiPolygon.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return multiPolygon;

	    value.expectGroupStart();

	    do {
	        value.expectGroupStart();

	        var exteriorRing = [];
	        var interiorRings = [];

	        value.expectGroupStart();
	        exteriorRing.push.apply(exteriorRing, value.matchCoordinates(options));
	        value.expectGroupEnd();

	        while (value.isMatch([','])) {
	            value.expectGroupStart();
	            interiorRings.push(value.matchCoordinates(options));
	            value.expectGroupEnd();
	        }

	        multiPolygon.polygons.push(new Polygon(exteriorRing, interiorRings));

	        value.expectGroupEnd();

	    } while (value.isMatch([',']));

	    value.expectGroupEnd();

	    return multiPolygon;
	};

	MultiPolygon._parseWkb = function (value, options) {
	    var multiPolygon = new MultiPolygon();
	    multiPolygon.srid = options.srid;
	    multiPolygon.hasZ = options.hasZ;
	    multiPolygon.hasM = options.hasM;

	    var polygonCount = value.readUInt32();

	    for (var i = 0; i < polygonCount; i++)
	        multiPolygon.polygons.push(Geometry.parse(value, options));

	    return multiPolygon;
	};

	MultiPolygon._parseTwkb = function (value, options) {
	    var multiPolygon = new MultiPolygon();
	    multiPolygon.hasZ = options.hasZ;
	    multiPolygon.hasM = options.hasM;

	    if (options.isEmpty)
	        return multiPolygon;

	    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
	    var polygonCount = value.readVarInt();

	    for (var i = 0; i < polygonCount; i++) {
	        var polygon = new Polygon();
	        polygon.hasZ = options.hasZ;
	        polygon.hasM = options.hasM;

	        var ringCount = value.readVarInt();
	        var exteriorRingCount = value.readVarInt();

	        for (var j = 0; j < exteriorRingCount; j++)
	            polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

	        for (j = 1; j < ringCount; j++) {
	            var interiorRing = [];

	            var interiorRingCount = value.readVarInt();

	            for (var k = 0; k < interiorRingCount; k++)
	                interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

	            polygon.interiorRings.push(interiorRing);
	        }

	        multiPolygon.polygons.push(polygon);
	    }

	    return multiPolygon;
	};

	MultiPolygon._parseGeoJSON = function (value) {
	    var multiPolygon = new MultiPolygon();

	    if (value.coordinates.length > 0 && value.coordinates[0].length > 0 && value.coordinates[0][0].length > 0)
	        multiPolygon.hasZ = value.coordinates[0][0][0].length > 2;

	    for (var i = 0; i < value.coordinates.length; i++)
	        multiPolygon.polygons.push(Polygon._parseGeoJSON({ coordinates: value.coordinates[i] }));

	    return multiPolygon;
	};

	MultiPolygon.prototype.toWkt = function () {
	    if (this.polygons.length === 0)
	        return this._getWktType(Types.wkt.MultiPolygon, true);

	    var wkt = this._getWktType(Types.wkt.MultiPolygon, false) + '(';

	    for (var i = 0; i < this.polygons.length; i++)
	        wkt += this.polygons[i]._toInnerWkt() + ',';

	    wkt = wkt.slice(0, -1);
	    wkt += ')';

	    return wkt;
	};

	MultiPolygon.prototype.toWkb = function () {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.MultiPolygon);
	    wkb.writeUInt32LE(this.polygons.length);

	    for (var i = 0; i < this.polygons.length; i++)
	        wkb.writeBuffer(this.polygons[i].toWkb({ srid: this.srid }));

	    return wkb.buffer;
	};

	MultiPolygon.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.polygons.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.MultiPolygon, precision, isEmpty);

	    if (this.polygons.length > 0) {
	        twkb.writeVarInt(this.polygons.length);

	        var previousPoint = new Point(0, 0, 0, 0);
	        for (var i = 0; i < this.polygons.length; i++) {
	            twkb.writeVarInt(1 + this.polygons[i].interiorRings.length);

	            twkb.writeVarInt(this.polygons[i].exteriorRing.length);

	            for (var j = 0; j < this.polygons[i].exteriorRing.length; j++)
	                this.polygons[i].exteriorRing[j]._writeTwkbPoint(twkb, precision, previousPoint);

	            for (j = 0; j < this.polygons[i].interiorRings.length; j++) {
	                twkb.writeVarInt(this.polygons[i].interiorRings[j].length);

	                for (var k = 0; k < this.polygons[i].interiorRings[j].length; k++)
	                    this.polygons[i].interiorRings[j][k]._writeTwkbPoint(twkb, precision, previousPoint);
	            }
	        }
	    }

	    return twkb.buffer;
	};

	MultiPolygon.prototype._getWkbSize = function () {
	    var size = 1 + 4 + 4;

	    for (var i = 0; i < this.polygons.length; i++)
	        size += this.polygons[i]._getWkbSize();

	    return size;
	};

	MultiPolygon.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.MultiPolygon;
	    geoJSON.coordinates = [];

	    for (var i = 0; i < this.polygons.length; i++)
	        geoJSON.coordinates.push(this.polygons[i].toGeoJSON().coordinates);

	    return geoJSON;
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = GeometryCollection;

	var util = __webpack_require__(124);

	var Types = __webpack_require__(310);
	var Geometry = __webpack_require__(311);
	var BinaryWriter = __webpack_require__(313);

	function GeometryCollection(geometries) {
	    Geometry.call(this);

	    this.geometries = geometries || [];
	}

	util.inherits(GeometryCollection, Geometry);

	GeometryCollection.Z = function (geometries) {
	    var geometryCollection = new GeometryCollection(geometries);
	    geometryCollection.hasZ = true;
	    return geometryCollection;
	};

	GeometryCollection.M = function (geometries) {
	    var geometryCollection = new GeometryCollection(geometries);
	    geometryCollection.hasM = true;
	    return geometryCollection;
	};

	GeometryCollection.ZM = function (geometries) {
	    var geometryCollection = new GeometryCollection(geometries);
	    geometryCollection.hasZ = true;
	    geometryCollection.hasM = true;
	    return geometryCollection;
	};

	GeometryCollection._parseWkt = function (value, options) {
	    var geometryCollection = new GeometryCollection();
	    geometryCollection.srid = options.srid;
	    geometryCollection.hasZ = options.hasZ;
	    geometryCollection.hasM = options.hasM;

	    if (value.isMatch(['EMPTY']))
	        return geometryCollection;

	    value.expectGroupStart();

	    do {
	        geometryCollection.geometries.push(Geometry.parse(value));
	    } while (value.isMatch([',']));

	    value.expectGroupEnd();

	    return geometryCollection;
	};

	GeometryCollection._parseWkb = function (value, options) {
	    var geometryCollection = new GeometryCollection();
	    geometryCollection.srid = options.srid;
	    geometryCollection.hasZ = options.hasZ;
	    geometryCollection.hasM = options.hasM;

	    var geometryCount = value.readUInt32();

	    for (var i = 0; i < geometryCount; i++)
	        geometryCollection.geometries.push(Geometry.parse(value, options));

	    return geometryCollection;
	};

	GeometryCollection._parseTwkb = function (value, options) {
	    var geometryCollection = new GeometryCollection();
	    geometryCollection.hasZ = options.hasZ;
	    geometryCollection.hasM = options.hasM;

	    if (options.isEmpty)
	        return geometryCollection;

	    var geometryCount = value.readVarInt();

	    for (var i = 0; i < geometryCount; i++)
	        geometryCollection.geometries.push(Geometry.parseTwkb(value));

	    return geometryCollection;
	};

	GeometryCollection._parseGeoJSON = function (value) {
	    var geometryCollection = new GeometryCollection();

	    for (var i = 0; i < value.geometries.length; i++)
	        geometryCollection.geometries.push(Geometry.parseGeoJSON(value.geometries[i]));

	    if (geometryCollection.geometries.length > 0)
	        geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;

	    return geometryCollection;
	};

	GeometryCollection.prototype.toWkt = function () {
	    if (this.geometries.length === 0)
	        return this._getWktType(Types.wkt.GeometryCollection, true);

	    var wkt = this._getWktType(Types.wkt.GeometryCollection, false) + '(';

	    for (var i = 0; i < this.geometries.length; i++)
	        wkt += this.geometries[i].toWkt() + ',';

	    wkt = wkt.slice(0, -1);
	    wkt += ')';

	    return wkt;
	};

	GeometryCollection.prototype.toWkb = function () {
	    var wkb = new BinaryWriter(this._getWkbSize());

	    wkb.writeInt8(1);

	    this._writeWkbType(wkb, Types.wkb.GeometryCollection);
	    wkb.writeUInt32LE(this.geometries.length);

	    for (var i = 0; i < this.geometries.length; i++)
	        wkb.writeBuffer(this.geometries[i].toWkb({ srid: this.srid }));

	    return wkb.buffer;
	};

	GeometryCollection.prototype.toTwkb = function () {
	    var twkb = new BinaryWriter(0, true);

	    var precision = Geometry.getTwkbPrecision(5, 0, 0);
	    var isEmpty = this.geometries.length === 0;

	    this._writeTwkbHeader(twkb, Types.wkb.GeometryCollection, precision, isEmpty);

	    if (this.geometries.length > 0) {
	        twkb.writeVarInt(this.geometries.length);

	        for (var i = 0; i < this.geometries.length; i++)
	            twkb.writeBuffer(this.geometries[i].toTwkb());
	    }

	    return twkb.buffer;
	};

	GeometryCollection.prototype._getWkbSize = function () {
	    var size = 1 + 4 + 4;

	    for (var i = 0; i < this.geometries.length; i++)
	        size += this.geometries[i]._getWkbSize();

	    return size;
	};

	GeometryCollection.prototype.toGeoJSON = function (options) {
	    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
	    geoJSON.type = Types.geoJSON.GeometryCollection;
	    geoJSON.geometries = [];

	    for (var i = 0; i < this.geometries.length; i++)
	        geoJSON.geometries.push(this.geometries[i].toGeoJSON());

	    return geoJSON;
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = BinaryReader;

	function BinaryReader(buffer, isBigEndian) {
	    this.buffer = buffer;
	    this.position = 0;
	    this.isBigEndian = isBigEndian || false;
	}

	function _read(readLE, readBE, size) {
	    return function () {
	        var value;

	        if (this.isBigEndian)
	            value = readBE.call(this.buffer, this.position);
	        else
	            value = readLE.call(this.buffer, this.position);

	        this.position += size;

	        return value;
	    };
	}

	BinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);
	BinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);
	BinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);
	BinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);
	BinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);
	BinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);
	BinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);
	BinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);

	BinaryReader.prototype.readVarInt = function () {
	    var nextByte,
	        result = 0,
	        bytesRead = 0;

	    do {
	        nextByte = this.buffer[this.position + bytesRead];
	        result += (nextByte & 0x7F) << (7 * bytesRead);
	        bytesRead++;
	    } while (nextByte >= 0x80);

	    this.position += bytesRead;

	    return result;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = WktParser;

	var Types = __webpack_require__(310);
	var Point = __webpack_require__(312);

	function WktParser(value) {
	    this.value = value;
	    this.position = 0;
	}

	WktParser.prototype.match = function (tokens) {
	    this.skipWhitespaces();

	    for (var i = 0; i < tokens.length; i++) {
	        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
	            this.position += tokens[i].length;
	            return tokens[i];
	        }
	    }

	    return null;
	};

	WktParser.prototype.matchRegex = function (tokens) {
	    this.skipWhitespaces();

	    for (var i = 0; i < tokens.length; i++) {
	        var match = this.value.substring(this.position).match(tokens[i]);

	        if (match) {
	            this.position += match[0].length;
	            return match;
	        }
	    }

	    return null;
	};

	WktParser.prototype.isMatch = function (tokens) {
	    this.skipWhitespaces();

	    for (var i = 0; i < tokens.length; i++) {
	        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
	            this.position += tokens[i].length;
	            return true;
	        }
	    }

	    return false;
	};

	WktParser.prototype.matchType = function () {
	    var geometryType = this.match([Types.wkt.Point, Types.wkt.LineString, Types.wkt.Polygon, Types.wkt.MultiPoint,
	                                   Types.wkt.MultiLineString, Types.wkt.MultiPolygon, Types.wkt.GeometryCollection]);

	    if (!geometryType)
	        throw new Error('Expected geometry type');

	    return geometryType;
	};

	WktParser.prototype.matchDimension = function () {
	    var dimension = this.match(['ZM', 'Z', 'M']);

	    switch (dimension) {
	        case 'ZM': return { hasZ: true, hasM: true };
	        case 'Z': return { hasZ: true, hasM: false };
	        case 'M': return { hasZ: false, hasM: true };
	        default: return { hasZ: false, hasM: false };
	    }
	};

	WktParser.prototype.expectGroupStart = function () {
	    if (!this.isMatch(['(']))
	        throw new Error('Expected group start');
	};

	WktParser.prototype.expectGroupEnd = function () {
	    if (!this.isMatch([')']))
	        throw new Error('Expected group end');
	};

	WktParser.prototype.matchCoordinate = function (options) {
	    var match;

	    if (options.hasZ && options.hasM)
	        match = this.matchRegex([/^(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)/]);
	    else if (options.hasZ || options.hasM)
	        match = this.matchRegex([/^(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)/]);
	    else
	        match = this.matchRegex([/^(-?\d+\.?\d*)\s+(-?\d+\.?\d*)/]);

	    if (!match)
	        throw new Error('Expected coordinates');

	    if (options.hasZ && options.hasM)
	        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));
	    else if (options.hasZ)
	        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));
	    else if (options.hasM)
	        return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));
	    else
	        return new Point(parseFloat(match[1]), parseFloat(match[2]));
	};

	WktParser.prototype.matchCoordinates = function (options) {
	    var coordinates = [];

	    do {
	        var startsWithBracket = this.isMatch(['(']);

	        coordinates.push(this.matchCoordinate(options));

	        if (startsWithBracket)
	            this.expectGroupEnd();
	    } while (this.isMatch([',']));

	    return coordinates;
	};

	WktParser.prototype.skipWhitespaces = function () {
	    while (this.position < this.value.length && this.value[this.position] === ' ')
	        this.position++;
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hstore = __webpack_require__(324)({sanitize : true});

	function stringify (data) {
	    if (data === null) return null;
	    return hstore.stringify(data);
	}

	function parse (value) {
	    if (value === null) return null;
	    return hstore.parse(value);
	}

	module.exports = {
	    stringify: stringify,
	    parse: parse
	};


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	  var _ = __webpack_require__(325);

	  function sanitize_input(input) {
	    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]
	    // single quotes (') must be replaced with double single quotes ('')
	    input = input.replace(/'/g, '\'\'');
	    // backslashes (\) must be replaced with double backslashes (\\)
	    input = input.replace(/\\/g, '\\\\');
	    // double quotes (") must be replaced with escaped quotes (\\")
	    input = input.replace(/"/g, '\\"');
	    return input;
	  }

	  function to_string(input, sanitize) {
	    switch(typeof input) {
	      case 'boolean':
	      case 'number':
	      case 'object':
	        return String(input);
	      case 'string':
	        return sanitize ? sanitize_input(input) : input;
	      default:
	        return '';
	    }
	  }

	  module.exports = function (options) {
	    options = _.defaults({}, options, { sanitize: false });

	    return {
	      stringify: function (data, callback) {
	        var hstore = Object.keys(data).map(function (key) {
	          if (data[key] === null) {
	            return '"'+to_string(key, options.sanitize)+'"=>NULL';
	          } else {
	            return '"'+to_string(key, options.sanitize)+'"=>"'+to_string(data[key], options.sanitize)+'"';
	          }
	        });
	        var joined = hstore.join();
	        if (!callback || callback === null) return joined;
	        callback(joined);
	      },

	      parse: function(string, callback) {
	        var result = {},
	        //using [\s\S] to match any character, including line feed and carriage return,
	            r = /(["])(?:\\\1|\\\\|[\s\S])*?\1|NULL/g,
	            matches = string.match(r),
	            i,
	            l,
	            clean = function (value) {
	                // Remove leading double quotes
	                value = value.replace(/^\"|\"$/g, "");
	                // Unescape quotes
	                value = value.replace(/\\"/g, "\"");
	                //Unescape backslashes
	                value = value.replace(/\\\\/g,"\\");
	                //Unescape single quotes
	                value = value.replace(/''/g,"'");

	                return value;
	            };

	        if(matches) {
	          for (i = 0, l = matches.length; i < l; i+= 2) {
	            var key = clean(matches[i]);
	            var value = matches[i + 1];
	            result[key] = value=="NULL"?null:clean(value);
	          }
	        }
	        if (!callback || callback === null) return result;
	        callback(result);
	      }
	    };
	  };
	})();


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127);

	function stringifyRangeBound (bound) {
	  if (bound === null) {
	    return '' ;
	  } else if (bound === Infinity || bound === -Infinity) {
	    return bound.toString().toLowerCase();
	  } else {
	    return JSON.stringify(bound);
	  }
	}

	function parseRangeBound (bound, parseType) {
	  if (!bound) {
	    return null;
	  } else if (bound === 'infinity') {
	    return Infinity;
	  } else if (bound === '-infinity') {
	    return -Infinity;
	  } else {
	    return parseType(bound);
	  }
	}

	function stringify (data) {
	  if (data === null) return null;

	  if (!_.isArray(data)) throw new Error('range must be an array');
	  if (!data.length) return 'empty';
	  if (data.length !== 2) throw new Error('range array length must be 0 (empty) or 2 (lower and upper bounds)');

	  if (data.hasOwnProperty('inclusive')) {
	    if (!data.inclusive) data.inclusive = [false, false];
	    else if (data.inclusive === true) data.inclusive = [true, true];
	  } else {
	    data.inclusive = [false, false];
	  }

	  _.each(data, function (value, index) {
	    if (_.isObject(value)) {
	      if (value.hasOwnProperty('inclusive')) data.inclusive[index] = !!value.inclusive;
	      if (value.hasOwnProperty('value')) data[index] = value.value;
	    }
	  });

	  var lowerBound = stringifyRangeBound(data[0]);
	  var upperBound = stringifyRangeBound(data[1]);

	  return (data.inclusive[0] ? '[' : '(') + lowerBound + ',' + upperBound + (data.inclusive[1] ? ']' : ')');
	}

	function parse (value, parser) {
	  if (value === null) return null;
	  if (value === 'empty') {
	    var empty = [];
	    empty.inclusive = [];
	    return empty;
	  }

	  var result = value
	    .substring(1, value.length - 1)
	    .split(',', 2);

	  if (result.length !== 2) return value;

	  result = result
	    .map(function (value) {
	      return parseRangeBound(value, parser);
	    });

	  result.inclusive = [(value[0] === '['), (value[value.length - 1] === ']')];

	  return result;
	}

	module.exports = {
	  stringify: stringify,
	  parse: parse
	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var wkx = __webpack_require__(309)
	  , _ = __webpack_require__(127)
	  , moment = __webpack_require__(195);

	module.exports = function (BaseTypes) {
	  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';

	  BaseTypes.DATE.types.mysql = ['DATETIME'];
	  BaseTypes.STRING.types.mysql = ['VAR_STRING'];
	  BaseTypes.CHAR.types.mysql = ['STRING'];
	  BaseTypes.TEXT.types.mysql = ['BLOB'];
	  BaseTypes.INTEGER.types.mysql = ['LONG'];
	  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];
	  BaseTypes.FLOAT.types.mysql = ['FLOAT'];
	  BaseTypes.TIME.types.mysql = ['TIME'];
	  BaseTypes.DATEONLY.types.mysql = ['DATE'];
	  BaseTypes.BOOLEAN.types.mysql = ['TINY'];
	  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];
	  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];
	  BaseTypes.UUID.types.mysql = false;
	  BaseTypes.ENUM.types.mysql = false;
	  BaseTypes.REAL.types.mysql = ['DOUBLE'];
	  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];

	  var DATE = BaseTypes.DATE.inherits();

	  DATE.prototype.toSql = function () {
	    return 'DATETIME' + (this._length ? '(' + this._length + ')' : '');
	  };

	  DATE.prototype.$stringify = function (date, options) {
	    date = BaseTypes.DATE.prototype.$applyTimezone(date, options);
	    // Fractional DATETIMEs only supported on MySQL 5.6.4+
	    if (this._length) {
	      return date.format('YYYY-MM-DD HH:mm:ss.SSS');
	    }

	    return date.format('YYYY-MM-DD HH:mm:ss');
	  };

	  DATE.parse = function (value, options) {
	    value = value.string();

	    if (value === null) {
	      return value;
	    }

	    if (moment.tz.zone(options.timezone)) {
	      value = moment.tz(value, options.timezone).toDate();
	    } else {
	      value = new Date(value + ' ' + options.timezone);
	    }

	    return value;
	  };

	  var UUID = BaseTypes.UUID.inherits();

	  UUID.prototype.toSql = function() {
	    return 'CHAR(36) BINARY';
	  };

	  var SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];
	  var GEOMETRY = BaseTypes.GEOMETRY.inherits(function() {
	    if (!(this instanceof GEOMETRY)) return new GEOMETRY();
	    BaseTypes.GEOMETRY.apply(this, arguments);

	    if (_.isEmpty(this.type)) {
	      this.sqlType = this.key;
	    } else if (_.includes(SUPPORTED_GEOMETRY_TYPES, this.type)) {
	      this.sqlType = this.type;
	    } else {
	      throw new Error('Supported geometry types are: ' + SUPPORTED_GEOMETRY_TYPES.join(', '));
	    }
	  });

	  GEOMETRY.parse = GEOMETRY.prototype.parse = function(value) {
	    value = value.buffer();

	    //MySQL doesn't support POINT EMPTY, https://dev.mysql.com/worklog/task/?id=2381
	    if (value === null) {
	      return null;
	    }

	    // For some reason, discard the first 4 bytes
	    value = value.slice(4);

	    return wkx.Geometry.parse(value).toGeoJSON();
	  };

	  GEOMETRY.prototype.toSql = function() {
	    return this.sqlType;
	  };

	  var ENUM = BaseTypes.ENUM.inherits();

	  ENUM.prototype.toSql = function (options) {
	    return 'ENUM(' + _.map(this.values, function(value) {
	      return options.escape(value);
	    }).join(', ') + ')';
	  };

	  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];

	  var exports = {
	    ENUM: ENUM,
	    DATE: DATE,
	    UUID: UUID,
	    GEOMETRY: GEOMETRY
	  };

	  _.forIn(exports, function (DataType, key) {
	    if (!DataType.key) DataType.key = key;
	    if (!DataType.extend) {
	      DataType.extend = function(oldType) {
	        return new DataType(oldType.options);
	      };
	    }
	  });

	  return exports;
	};


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127);

	module.exports = function (BaseTypes) {
	  var warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');

	  BaseTypes.DATE.types.sqlite = ['DATETIME'];
	  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];
	  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];
	  BaseTypes.TEXT.types.sqlite = ['TEXT'];
	  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];
	  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];
	  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];
	  BaseTypes.TIME.types.sqlite = ['TIME'];
	  BaseTypes.DATEONLY.types.sqlite = ['DATE'];
	  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];
	  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];
	  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];
	  BaseTypes.UUID.types.sqlite = ['UUID'];
	  BaseTypes.ENUM.types.sqlite = false;
	  BaseTypes.REAL.types.sqlite = ['REAL'];
	  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];
	  BaseTypes.GEOMETRY.types.sqlite = false;

	  var DATE = BaseTypes.DATE.inherits();
	  DATE.parse = function (date, options) {
	    if (date.indexOf('+') === -1) {
	      // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set
	      return new Date(date + options.timezone);
	    } else {
	      return new Date(date); // We already have a timezone stored in the string
	    }
	  };

	  var STRING = BaseTypes.STRING.inherits();
	  STRING.prototype.toSql = function() {
	    if (this._binary) {
	      return 'VARCHAR BINARY(' + this._length + ')';
	    } else {
	      return BaseTypes.STRING.prototype.toSql.call(this);
	    }
	  };

	  var TEXT = BaseTypes.TEXT.inherits();
	  TEXT.prototype.toSql = function() {
	    if (this._length) {
	      warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');
	      this._length = undefined;
	    }
	    return 'TEXT';
	  };

	  var CHAR = BaseTypes.CHAR.inherits();
	  CHAR.prototype.toSql = function() {
	    if (this._binary) {
	      return 'CHAR BINARY(' + this._length + ')';
	    } else {
	      return BaseTypes.CHAR.prototype.toSql.call(this);
	    }
	  };

	  var NUMBER = BaseTypes.NUMBER.inherits();
	  NUMBER.prototype.toSql = function() {
	    var result = this.key;

	    if (this._unsigned) {
	      result += ' UNSIGNED';
	    }
	    if (this._zerofill) {
	      result += ' ZEROFILL';
	    }

	    if (this._length) {
	      result += '(' + this._length;
	      if (typeof this._decimals === 'number') {
	        result += ',' + this._decimals;
	      }
	      result += ')';
	    }
	    return result;
	  };

	  var INTEGER = BaseTypes.INTEGER.inherits(function(length) {
	    var options = typeof length === 'object' && length || {
	      length: length
	    };
	    if (!(this instanceof INTEGER)) return new INTEGER(options);
	    BaseTypes.INTEGER.call(this, options);
	  });
	  INTEGER.prototype.key = INTEGER.key = 'INTEGER';
	  INTEGER.prototype.toSql = function() {
	    return NUMBER.prototype.toSql.call(this);
	  };

	  var BIGINT = BaseTypes.BIGINT.inherits(function(length) {
	    var options = typeof length === 'object' && length || {
	      length: length
	    };
	    if (!(this instanceof BIGINT)) return new BIGINT(options);
	    BaseTypes.BIGINT.call(this, options);
	  });
	  BIGINT.prototype.key = BIGINT.key = 'BIGINT';
	  BIGINT.prototype.toSql = function() {
	    return NUMBER.prototype.toSql.call(this);
	  };

	  var FLOAT = BaseTypes.FLOAT.inherits(function(length, decimals) {
	    var options = typeof length === 'object' && length || {
	      length: length,
	      decimals: decimals
	    };
	    if (!(this instanceof FLOAT)) return new FLOAT(options);
	    BaseTypes.FLOAT.call(this, options);
	  });
	  FLOAT.prototype.key = FLOAT.key = 'FLOAT';
	  FLOAT.prototype.toSql = function() {
	    return NUMBER.prototype.toSql.call(this);
	  };

	  var DOUBLE = BaseTypes.DOUBLE.inherits(function(length, decimals) {
	    var options = typeof length === 'object' && length || {
	      length: length,
	      decimals: decimals
	    };
	    if (!(this instanceof DOUBLE)) return new DOUBLE(options);
	    BaseTypes.DOUBLE.call(this, options);
	  });
	  DOUBLE.prototype.key = DOUBLE.key = 'DOUBLE PRECISION';
	  DOUBLE.prototype.toSql = function() {
	    return NUMBER.prototype.toSql.call(this);
	  };

	  var REAL = BaseTypes.REAL.inherits(function(length, decimals) {
	    var options = typeof length === 'object' && length || {
	      length: length,
	      decimals: decimals
	    };
	    if (!(this instanceof REAL)) return new REAL(options);
	    BaseTypes.REAL.call(this, options);
	  });
	  REAL.prototype.key = REAL.key = 'REAL';
	  REAL.prototype.toSql = function() {
	    return NUMBER.prototype.toSql.call(this);
	  };

	  [FLOAT, DOUBLE, REAL].forEach(function (floating) {
	    floating.parse = function (value) {
	      if (_.isString(value)) {
	        if (value === 'NaN') {
	          return NaN;
	        } else if (value === 'Infinity') {
	          return Infinity;
	        } else if (value === '-Infinity') {
	          return -Infinity;
	        }
	      }
	      return value;
	    };
	  });

	  var ENUM = BaseTypes.ENUM.inherits();

	  ENUM.prototype.toSql = function () {
	    return 'TEXT';
	  };

	  var exports = {
	    DATE: DATE,
	    STRING: STRING,
	    CHAR: CHAR,
	    NUMBER: NUMBER,
	    FLOAT: FLOAT,
	    REAL: REAL,
	    'DOUBLE PRECISION': DOUBLE,
	    INTEGER: INTEGER,
	    BIGINT: BIGINT,
	    TEXT: TEXT,
	    ENUM: ENUM
	  };

	  _.forIn(exports, function (DataType, key) {
	    if (!DataType.key) DataType.key = key;
	    if (!DataType.extend) {
	      DataType.extend = function(oldType) {
	        return new DataType(oldType.options);
	      };
	    }
	  });

	  return exports;

	};


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127);

	module.exports = function (BaseTypes) {
	  var warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');

	  BaseTypes.DATE.types.mssql = [42];
	  BaseTypes.STRING.types.mssql = [231, 173];
	  BaseTypes.CHAR.types.mssql = [175];
	  BaseTypes.TEXT.types.mssql = false;
	  BaseTypes.INTEGER.types.mssql = [38];
	  BaseTypes.BIGINT.types.mssql = false;
	  BaseTypes.FLOAT.types.mssql = [109];
	  BaseTypes.TIME.types.mssql = [41];
	  BaseTypes.DATEONLY.types.mssql = [40];
	  BaseTypes.BOOLEAN.types.mssql = [104];
	  BaseTypes.BLOB.types.mssql = [165];
	  BaseTypes.DECIMAL.types.mssql = [106];
	  BaseTypes.UUID.types.mssql = false;
	  BaseTypes.ENUM.types.mssql = false;
	  BaseTypes.REAL.types.mssql = [109];
	  BaseTypes.DOUBLE.types.mssql = [109];
	  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported
	  BaseTypes.GEOMETRY.types.mssql = false;

	  var BLOB = BaseTypes.BLOB.inherits();

	  BLOB.prototype.toSql = function() {
	    if (this._length) {
	      if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8
	        warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');
	        return 'VARBINARY(256)';
	      }
	      warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');
	    }
	    return 'VARBINARY(MAX)';
	  };

	  BLOB.prototype.$hexify = function (hex) {
	    return '0x' + hex;
	  };

	  var STRING = BaseTypes.STRING.inherits();

	  STRING.prototype.toSql = function() {
	    if (!this._binary) {
	      return 'NVARCHAR(' + this._length + ')';
	    } else{
	      return 'BINARY(' + this._length + ')';
	    }
	  };

	  STRING.prototype.escape = false;
	  STRING.prototype.$stringify = function (value, options) {
	    if (this._binary) {
	      return BLOB.prototype.$stringify(value);
	    } else {
	      return options.escape(value);
	    }
	  };

	  var TEXT = BaseTypes.TEXT.inherits();

	  TEXT.prototype.toSql = function() {
	    // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.
	    // Using unicode is just future proof
	    if (this._length) {
	      if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8
	        warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');
	        return 'NVARCHAR(256)';
	      }
	      warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');
	    }
	    return 'NVARCHAR(MAX)';
	  };

	  var BOOLEAN = BaseTypes.BOOLEAN.inherits();

	  BOOLEAN.prototype.toSql = function() {
	    return 'BIT';
	  };

	  var UUID = BaseTypes.UUID.inherits();

	  UUID.prototype.toSql = function() {
	    return 'CHAR(36)';
	  };

	  var NOW = BaseTypes.NOW.inherits();

	  NOW.prototype.toSql = function() {
	    return 'GETDATE()';
	  };

	  var DATE = BaseTypes.DATE.inherits();

	  DATE.prototype.toSql = function() {
	    return 'DATETIME2';
	  };

	  DATE.prototype.$stringify = function (date, options) {
	    date = this.$applyTimezone(date, options);

	    // mssql not allow +timezone datetime format
	    return date.format('YYYY-MM-DD HH:mm:ss.SSS');
	  };

	  var INTEGER = BaseTypes.INTEGER.inherits(function() {
	    if (!(this instanceof INTEGER)) return new INTEGER();
	    BaseTypes.INTEGER.apply(this, arguments);

	    // MSSQL does not support any options for integer
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('MSSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  var BIGINT = BaseTypes.BIGINT.inherits(function() {
	    if (!(this instanceof BIGINT)) return new BIGINT();
	    BaseTypes.BIGINT.apply(this, arguments);

	    // MSSQL does not support any options for bigint
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('MSSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  var REAL = BaseTypes.REAL.inherits(function() {
	    if (!(this instanceof REAL)) return new REAL();
	    BaseTypes.REAL.apply(this, arguments);

	    // MSSQL does not support any options for real
	    if (this._length || this.options.length || this._unsigned || this._zerofill) {
	      warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	      this._unsigned = undefined;
	      this._zerofill = undefined;
	    }
	  });

	  var FLOAT = BaseTypes.FLOAT.inherits(function() {
	    if (!(this instanceof FLOAT)) return new FLOAT();
	    BaseTypes.FLOAT.apply(this, arguments);

	    // MSSQL does only support lengths as option.
	    // Values between 1-24 result in 7 digits precision (4 bytes storage size)
	    // Values between 25-53 result in 15 digits precision (8 bytes storage size)
	    // If decimals are provided remove these and print a warning
	    if (this._decimals) {
	      warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');
	      this._length = undefined;
	      this.options.length = undefined;
	    }
	    if (this._unsigned) {
	      warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');
	      this._unsigned = undefined;
	    }
	    if (this._zerofill) {
	      warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');
	      this._zerofill = undefined;
	    }
	  });

	  var ENUM = BaseTypes.ENUM.inherits();
	  ENUM.prototype.toSql = function() {
	    return 'VARCHAR(255)';
	  };

	  var exports = {
	    BLOB: BLOB,
	    BOOLEAN: BOOLEAN,
	    ENUM: ENUM,
	    STRING: STRING,
	    UUID: UUID,
	    DATE: DATE,
	    NOW: NOW,
	    INTEGER: INTEGER,
	    BIGINT: BIGINT,
	    REAL: REAL,
	    FLOAT: FLOAT,
	    TEXT: TEXT
	  };

	  _.forIn(exports, function (DataType, key) {
	    if (!DataType.key) DataType.key = key;
	    if (!DataType.extend) {
	      DataType.extend = function(oldType) {
	        return new DataType(oldType.options);
	      };
	    }
	  });

	  return exports;
	};


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	/* jshint -W110 */
	var dataTypes = __webpack_require__(123)
	  , _ = __webpack_require__(127)
	  , SqlString = exports;

	SqlString.escapeId = function(val, forbidQualified) {
	  if (forbidQualified) {
	    return '`' + val.replace(/`/g, '``') + '`';
	  }
	  return '`' + val.replace(/`/g, '``').replace(/\./g, '`.`') + '`';
	};

	SqlString.escape = function(val, timeZone, dialect, format) {
	  var prependN = false;
	  if (val === undefined || val === null) {
	    return 'NULL';
	  }
	  switch (typeof val) {
	  case 'boolean':
	    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0
	    // for us. Postgres actually has a boolean type with true/false literals,
	    // but sequelize doesn't use it yet.
	    if (dialect === 'sqlite' || dialect === 'mssql') {
	      return +!!val;
	    }
	    return '' + !!val;
	  case 'number':
	    return val + '';
	  case 'string':
	    // In mssql, prepend N to all quoted vals which are originally a string (for
	    // unicode compatibility)
	    prependN = dialect === 'mssql';
	    break;
	  }

	  if (val instanceof Date) {
	    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });
	  }

	  if (Buffer.isBuffer(val)) {
	    if (dataTypes[dialect].BLOB) {
	      return dataTypes[dialect].BLOB.prototype.stringify(val);
	    }

	    return dataTypes.BLOB.prototype.stringify(val);
	  }

	  if (Array.isArray(val)) {
	    var escape = _.partial(SqlString.escape, _, timeZone, dialect, format);
	    if (dialect === 'postgres' && !format) {
	      return dataTypes.ARRAY.prototype.stringify(val, {escape: escape});
	    }
	    return val.map(escape);
	  }

	  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {
	    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS
	    // http://stackoverflow.com/q/603572/130598
	    val = val.replace(/'/g, "''");
	  } else {
	    val = val.replace(/[\0\n\r\b\t\\\'\"\x1a]/g, function(s) {
	      switch (s) {
	        case '\0': return '\\0';
	        case '\n': return '\\n';
	        case '\r': return '\\r';
	        case '\b': return '\\b';
	        case '\t': return '\\t';
	        case '\x1a': return '\\Z';
	        default: return '\\' + s;
	      }
	    });
	  }
	  return (prependN ? "N'" : "'") + val + "'";
	};

	SqlString.format = function(sql, values, timeZone, dialect) {
	  values = [].concat(values);

	  return sql.replace(/\?/g, function(match) {
	    if (!values.length) {
	      return match;
	    }

	    return SqlString.escape(values.shift(), timeZone, dialect, true);
	  });
	};

	SqlString.formatNamedParameters = function(sql, values, timeZone, dialect) {
	  return sql.replace(/\:+(?!\d)(\w+)/g, function(value, key) {
	    if ('postgres' === dialect && '::' === value.slice(0, 2)) {
	      return value;
	    }

	    if (values[key] !== undefined) {
	      return SqlString.escape(values[key], timeZone, dialect, true);
	    } else {
	      throw new Error('Named parameter "' + value + '" has no value in the given object.');
	    }
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127);
	var util = __webpack_require__(124);

	function validateDeprecation (value, expectation, options) {
	  if (!options.deprecated) {
	    return;
	  }

	  var valid = value instanceof options.deprecated || Object.prototype.toString.call(value) === Object.prototype.toString.call(options.deprecated.call());

	  if (valid) {
	    var message = util.format('%s should not be of type "%s"', util.inspect(value), options.deprecated.name);

	    console.log('DEPRECATION WARNING:', options.deprecationWarning || message);
	  }

	  return valid;
	}

	function validate (value, expectation) {
	  // the second part of this check is a workaround to deal with an issue that occurs in node-webkit when
	  // using object literals.  https://github.com/sequelize/sequelize/issues/2685
	  if (value instanceof expectation || Object.prototype.toString.call(value) === Object.prototype.toString.call(expectation.call())) {
	    return true;
	  }

	  throw new Error(util.format('The parameter (value: %s) is no %s.', value, expectation.name));
	}

	function check (value, expectation, options) {
	  options = _.extend({
	    deprecated: false,
	    index: null,
	    method: null,
	    optional: false
	  }, options || {});

	  if (!value && options.optional) {
	    return true;
	  }

	  if (value === undefined) {
	    throw new Error('No value has been passed.');
	  }

	  if (expectation === undefined) {
	    throw new Error('No expectation has been passed.');
	  }

	  return false
	    || validateDeprecation(value, expectation, options)
	    || validate(value, expectation, options);
	}

	module.exports = check;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * inflection
	 * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
	 * MIT Licensed
	 *
	 * @fileoverview
	 * A port of inflection-js to node.js module.
	 */

	( function ( root, factory ){
	  if( true ){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }else if( typeof exports === 'object' ){
	    module.exports = factory();
	  }else{
	    root.inflection = factory();
	  }
	}( this, function (){

	  /**
	   * @description This is a list of nouns that use the same form for both singular and plural.
	   *              This list should remain entirely in lower case to correctly match Strings.
	   * @private
	   */
	  var uncountable_words = [
	    // 'access',
	    'accommodation',
	    'adulthood',
	    'advertising',
	    'advice',
	    'aggression',
	    'aid',
	    'air',
	    'aircraft',
	    'alcohol',
	    'anger',
	    'applause',
	    'arithmetic',
	    // 'art',
	    'assistance',
	    'athletics',
	    // 'attention',

	    'bacon',
	    'baggage',
	    // 'ballet',
	    // 'beauty',
	    'beef',
	    // 'beer',
	    // 'behavior',
	    'biology',
	    // 'billiards',
	    'blood',
	    'botany',
	    // 'bowels',
	    'bread',
	    // 'business',
	    'butter',

	    'carbon',
	    'cardboard',
	    'cash',
	    'chalk',
	    'chaos',
	    'chess',
	    'crossroads',
	    'countryside',

	    // 'damage',
	    'dancing',
	    // 'danger',
	    'deer',
	    // 'delight',
	    // 'dessert',
	    'dignity',
	    'dirt',
	    // 'distribution',
	    'dust',

	    'economics',
	    'education',
	    'electricity',
	    // 'employment',
	    // 'energy',
	    'engineering',
	    'enjoyment',
	    // 'entertainment',
	    'envy',
	    'equipment',
	    'ethics',
	    'evidence',
	    'evolution',

	    // 'failure',
	    // 'faith',
	    'fame',
	    'fiction',
	    // 'fish',
	    'flour',
	    'flu',
	    'food',
	    // 'freedom',
	    // 'fruit',
	    'fuel',
	    'fun',
	    // 'funeral',
	    'furniture',

	    'gallows',
	    'garbage',
	    'garlic',
	    // 'gas',
	    'genetics',
	    // 'glass',
	    'gold',
	    'golf',
	    'gossip',
	    'grammar',
	    // 'grass',
	    'gratitude',
	    'grief',
	    // 'ground',
	    'guilt',
	    'gymnastics',

	    // 'hair',
	    'happiness',
	    'hardware',
	    'harm',
	    'hate',
	    'hatred',
	    'health',
	    'heat',
	    // 'height',
	    'help',
	    'homework',
	    'honesty',
	    'honey',
	    'hospitality',
	    'housework',
	    'humour',
	    'hunger',
	    'hydrogen',

	    'ice',
	    'importance',
	    'inflation',
	    'information',
	    // 'injustice',
	    'innocence',
	    // 'intelligence',
	    'iron',
	    'irony',

	    'jam',
	    // 'jealousy',
	    // 'jelly',
	    'jewelry',
	    // 'joy',
	    'judo',
	    // 'juice',
	    // 'justice',

	    'karate',
	    // 'kindness',
	    'knowledge',

	    // 'labour',
	    'lack',
	    // 'land',
	    'laughter',
	    'lava',
	    'leather',
	    'leisure',
	    'lightning',
	    'linguine',
	    'linguini',
	    'linguistics',
	    'literature',
	    'litter',
	    'livestock',
	    'logic',
	    'loneliness',
	    // 'love',
	    'luck',
	    'luggage',

	    'macaroni',
	    'machinery',
	    'magic',
	    // 'mail',
	    'management',
	    'mankind',
	    'marble',
	    'mathematics',
	    'mayonnaise',
	    'measles',
	    // 'meat',
	    // 'metal',
	    'methane',
	    'milk',
	    'money',
	    // 'moose',
	    'mud',
	    'music',
	    'mumps',

	    'nature',
	    'news',
	    'nitrogen',
	    'nonsense',
	    'nurture',
	    'nutrition',

	    'obedience',
	    'obesity',
	    // 'oil',
	    'oxygen',

	    // 'paper',
	    // 'passion',
	    'pasta',
	    'patience',
	    // 'permission',
	    'physics',
	    'poetry',
	    'pollution',
	    'poverty',
	    // 'power',
	    'pride',
	    // 'production',
	    // 'progress',
	    // 'pronunciation',
	    'psychology',
	    'publicity',
	    'punctuation',

	    // 'quality',
	    // 'quantity',
	    'quartz',

	    'racism',
	    // 'rain',
	    // 'recreation',
	    'relaxation',
	    'reliability',
	    'research',
	    'respect',
	    'revenge',
	    'rice',
	    'rubbish',
	    'rum',

	    'safety',
	    // 'salad',
	    // 'salt',
	    // 'sand',
	    // 'satire',
	    'scenery',
	    'seafood',
	    'seaside',
	    'series',
	    'shame',
	    'sheep',
	    'shopping',
	    // 'silence',
	    'sleep',
	    // 'slang'
	    'smoke',
	    'smoking',
	    'snow',
	    'soap',
	    'software',
	    'soil',
	    // 'sorrow',
	    // 'soup',
	    'spaghetti',
	    // 'speed',
	    'species',
	    // 'spelling',
	    // 'sport',
	    'steam',
	    // 'strength',
	    'stuff',
	    'stupidity',
	    // 'success',
	    // 'sugar',
	    'sunshine',
	    'symmetry',

	    // 'tea',
	    'tennis',
	    'thirst',
	    'thunder',
	    'timber',
	    // 'time',
	    // 'toast',
	    // 'tolerance',
	    // 'trade',
	    'traffic',
	    'transportation',
	    // 'travel',
	    'trust',

	    // 'understanding',
	    'underwear',
	    'unemployment',
	    'unity',
	    // 'usage',

	    'validity',
	    'veal',
	    'vegetation',
	    'vegetarianism',
	    'vengeance',
	    'violence',
	    // 'vision',
	    'vitality',

	    'warmth',
	    // 'water',
	    'wealth',
	    'weather',
	    // 'weight',
	    'welfare',
	    'wheat',
	    // 'whiskey',
	    // 'width',
	    'wildlife',
	    // 'wine',
	    'wisdom',
	    // 'wood',
	    // 'wool',
	    // 'work',

	    // 'yeast',
	    'yoga',

	    'zinc',
	    'zoology'
	  ];

	  /**
	   * @description These rules translate from the singular form of a noun to its plural form.
	   * @private
	   */

	  var regex = {
	    plural : {
	      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),
	      people    : new RegExp( '(pe)ople$'                      , 'gi' ),
	      children  : new RegExp( '(child)ren$'                    , 'gi' ),
	      tia       : new RegExp( '([ti])a$'                       , 'gi' ),
	      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),
	      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),
	      curves    : new RegExp( '(curve)s$'                      , 'gi' ),
	      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),
	      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),
	      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),
	      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),
	      series    : new RegExp( '(s)eries$'                      , 'gi' ),
	      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),
	      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),
	      buses     : new RegExp( '(bus)es$'                       , 'gi' ),
	      oes       : new RegExp( '(o)es$'                         , 'gi' ),
	      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),
	      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),
	      octopi    : new RegExp( '(octop|vir)i$'                  , 'gi' ),
	      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),
	      summonses : new RegExp( '^(summons)es$'                  , 'gi' ),
	      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),
	      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),
	      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),
	      feet      : new RegExp( '^feet$'                         , 'gi' ),
	      teeth     : new RegExp( '^teeth$'                        , 'gi' ),
	      geese     : new RegExp( '^geese$'                        , 'gi' ),
	      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),
	      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),
	      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),
	      genera    : new RegExp( '^genera$'                       , 'gi' ),
	      ss        : new RegExp( 'ss$'                            , 'gi' ),
	      s         : new RegExp( 's$'                             , 'gi' )
	    },

	    singular : {
	      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),
	      person    : new RegExp( '(pe)rson$'                    , 'gi' ),
	      child     : new RegExp( '(child)$'                     , 'gi' ),
	      ox        : new RegExp( '^(ox)$'                       , 'gi' ),
	      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),
	      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),
	      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),
	      summons   : new RegExp( '^(summons)$'                  , 'gi' ),
	      bus       : new RegExp( '(bu)s$'                       , 'gi' ),
	      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),
	      tium      : new RegExp( '([ti])um$'                    , 'gi' ),
	      sis       : new RegExp( 'sis$'                         , 'gi' ),
	      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),
	      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),
	      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),
	      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),
	      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),
	      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),
	      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),
	      foot      : new RegExp( '^foot$'                       , 'gi' ),
	      tooth     : new RegExp( '^tooth$'                      , 'gi' ),
	      goose     : new RegExp( '^goose$'                      , 'gi' ),
	      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),
	      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),
	      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),
	      genus     : new RegExp( '^genus$'                      , 'gi' ),
	      s         : new RegExp( 's$'                           , 'gi' ),
	      common    : new RegExp( '$'                            , 'gi' )
	    }
	  };

	  var plural_rules = [

	    // do not replace if its already a plural word
	    [ regex.plural.men       ],
	    [ regex.plural.people    ],
	    [ regex.plural.children  ],
	    [ regex.plural.tia       ],
	    [ regex.plural.analyses  ],
	    [ regex.plural.hives     ],
	    [ regex.plural.curves    ],
	    [ regex.plural.lrves     ],
	    [ regex.plural.foves     ],
	    [ regex.plural.aeiouyies ],
	    [ regex.plural.series    ],
	    [ regex.plural.movies    ],
	    [ regex.plural.xes       ],
	    [ regex.plural.mice      ],
	    [ regex.plural.buses     ],
	    [ regex.plural.oes       ],
	    [ regex.plural.shoes     ],
	    [ regex.plural.crises    ],
	    [ regex.plural.octopi    ],
	    [ regex.plural.aliases   ],
	    [ regex.plural.summonses ],
	    [ regex.plural.oxen      ],
	    [ regex.plural.matrices  ],
	    [ regex.plural.feet      ],
	    [ regex.plural.teeth     ],
	    [ regex.plural.geese     ],
	    [ regex.plural.quizzes   ],
	    [ regex.plural.whereases ],
	    [ regex.plural.criteria  ],
	    [ regex.plural.genera    ],

	    // original rule
	    [ regex.singular.man      , '$1en' ],
	    [ regex.singular.person   , '$1ople' ],
	    [ regex.singular.child    , '$1ren' ],
	    [ regex.singular.ox       , '$1en' ],
	    [ regex.singular.axis     , '$1es' ],
	    [ regex.singular.octopus  , '$1i' ],
	    [ regex.singular.alias    , '$1es' ],
	    [ regex.singular.summons  , '$1es' ],
	    [ regex.singular.bus      , '$1ses' ],
	    [ regex.singular.buffalo  , '$1oes' ],
	    [ regex.singular.tium     , '$1a' ],
	    [ regex.singular.sis      , 'ses' ],
	    [ regex.singular.ffe      , '$1$2ves' ],
	    [ regex.singular.hive     , '$1ves' ],
	    [ regex.singular.aeiouyy  , '$1ies' ],
	    [ regex.singular.matrix   , '$1ices' ],
	    [ regex.singular.vertex   , '$1ices' ],
	    [ regex.singular.x        , '$1es' ],
	    [ regex.singular.mouse    , '$1ice' ],
	    [ regex.singular.foot     , 'feet' ],
	    [ regex.singular.tooth    , 'teeth' ],
	    [ regex.singular.goose    , 'geese' ],
	    [ regex.singular.quiz     , '$1zes' ],
	    [ regex.singular.whereas  , '$1es' ],
	    [ regex.singular.criterion, '$1a' ],
	    [ regex.singular.genus    , 'genera' ],

	    [ regex.singular.s     , 's' ],
	    [ regex.singular.common, 's' ]
	  ];

	  /**
	   * @description These rules translate from the plural form of a noun to its singular form.
	   * @private
	   */
	  var singular_rules = [

	    // do not replace if its already a singular word
	    [ regex.singular.man     ],
	    [ regex.singular.person  ],
	    [ regex.singular.child   ],
	    [ regex.singular.ox      ],
	    [ regex.singular.axis    ],
	    [ regex.singular.octopus ],
	    [ regex.singular.alias   ],
	    [ regex.singular.summons ],
	    [ regex.singular.bus     ],
	    [ regex.singular.buffalo ],
	    [ regex.singular.tium    ],
	    [ regex.singular.sis     ],
	    [ regex.singular.ffe     ],
	    [ regex.singular.hive    ],
	    [ regex.singular.aeiouyy ],
	    [ regex.singular.x       ],
	    [ regex.singular.matrix  ],
	    [ regex.singular.mouse   ],
	    [ regex.singular.foot    ],
	    [ regex.singular.tooth   ],
	    [ regex.singular.goose   ],
	    [ regex.singular.quiz    ],
	    [ regex.singular.whereas ],
	    [ regex.singular.criterion ],
	    [ regex.singular.genus ],

	    // original rule
	    [ regex.plural.men      , '$1an' ],
	    [ regex.plural.people   , '$1rson' ],
	    [ regex.plural.children , '$1' ],
	    [ regex.plural.genera   , 'genus'],
	    [ regex.plural.criteria , '$1on'],
	    [ regex.plural.tia      , '$1um' ],
	    [ regex.plural.analyses , '$1$2sis' ],
	    [ regex.plural.hives    , '$1ve' ],
	    [ regex.plural.curves   , '$1' ],
	    [ regex.plural.lrves    , '$1f' ],
	    [ regex.plural.foves    , '$1fe' ],
	    [ regex.plural.movies   , '$1ovie' ],
	    [ regex.plural.aeiouyies, '$1y' ],
	    [ regex.plural.series   , '$1eries' ],
	    [ regex.plural.xes      , '$1' ],
	    [ regex.plural.mice     , '$1ouse' ],
	    [ regex.plural.buses    , '$1' ],
	    [ regex.plural.oes      , '$1' ],
	    [ regex.plural.shoes    , '$1' ],
	    [ regex.plural.crises   , '$1is' ],
	    [ regex.plural.octopi   , '$1us' ],
	    [ regex.plural.aliases  , '$1' ],
	    [ regex.plural.summonses, '$1' ],
	    [ regex.plural.oxen     , '$1' ],
	    [ regex.plural.matrices , '$1ix' ],
	    [ regex.plural.vertices , '$1ex' ],
	    [ regex.plural.feet     , 'foot' ],
	    [ regex.plural.teeth    , 'tooth' ],
	    [ regex.plural.geese    , 'goose' ],
	    [ regex.plural.quizzes  , '$1' ],
	    [ regex.plural.whereases, '$1' ],

	    [ regex.plural.ss, 'ss' ],
	    [ regex.plural.s , '' ]
	  ];

	  /**
	   * @description This is a list of words that should not be capitalized for title case.
	   * @private
	   */
	  var non_titlecased_words = [
	    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',
	    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'
	  ];

	  /**
	   * @description These are regular expressions used for converting between String formats.
	   * @private
	   */
	  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );
	  var underbar          = new RegExp( '_', 'g' );
	  var space_or_underbar = new RegExp( '[\ _]', 'g' );
	  var uppercase         = new RegExp( '([A-Z])', 'g' );
	  var underbar_prefix   = new RegExp( '^_' );

	  var inflector = {

	  /**
	   * A helper method that applies rules based replacement to a String.
	   * @private
	   * @function
	   * @param {String} str String to modify and return based on the passed rules.
	   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement
	   * @param {Array: [String]} skip Strings to skip if they match
	   * @param {String} override String to return as though this method succeeded (used to conform to APIs)
	   * @returns {String} Return passed String modified by passed rules.
	   * @example
	   *
	   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'
	   */
	    _apply_rules : function ( str, rules, skip, override ){
	      if( override ){
	        str = override;
	      }else{
	        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );

	        if( !ignore ){
	          var i = 0;
	          var j = rules.length;

	          for( ; i < j; i++ ){
	            if( str.match( rules[ i ][ 0 ])){
	              if( rules[ i ][ 1 ] !== undefined ){
	                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);
	              }
	              break;
	            }
	          }
	        }
	      }

	      return str;
	    },



	  /**
	   * This lets us detect if an Array contains a given element.
	   * @public
	   * @function
	   * @param {Array} arr The subject array.
	   * @param {Object} item Object to locate in the Array.
	   * @param {Number} from_index Starts checking from this position in the Array.(optional)
	   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)
	   * @returns {Number} Return index position in the Array of the passed item.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1
	   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0
	   */
	    indexOf : function ( arr, item, from_index, compare_func ){
	      if( !from_index ){
	        from_index = -1;
	      }

	      var index = -1;
	      var i     = from_index;
	      var j     = arr.length;

	      for( ; i < j; i++ ){
	        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){
	          index = i;
	          break;
	        }
	      }

	      return index;
	    },



	  /**
	   * This function adds pluralization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {String} plural Overrides normal output with said String.(optional)
	   * @returns {String} Singular English language nouns are returned in plural form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.pluralize( 'person' ); // === 'people'
	   *     inflection.pluralize( 'octopus' ); // === 'octopi'
	   *     inflection.pluralize( 'Hat' ); // === 'Hats'
	   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
	   */
	    pluralize : function ( str, plural ){
	      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );
	    },



	  /**
	   * This function adds singularization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {String} singular Overrides normal output with said String.(optional)
	   * @returns {String} Plural English language nouns are returned in singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.singularize( 'people' ); // === 'person'
	   *     inflection.singularize( 'octopi' ); // === 'octopus'
	   *     inflection.singularize( 'Hats' ); // === 'Hat'
	   *     inflection.singularize( 'guys', 'person' ); // === 'person'
	   */
	    singularize : function ( str, singular ){
	      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );
	    },


	  /**
	   * This function will pluralize or singularlize a String appropriately based on an integer value
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Number} count The number to base pluralization off of.
	   * @param {String} singular Overrides normal output with said String.(optional)
	   * @param {String} plural Overrides normal output with said String.(optional)
	   * @returns {String} English language nouns are returned in the plural or singular form based on the count.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.inflect( 'people' 1 ); // === 'person'
	   *     inflection.inflect( 'octopi' 1 ); // === 'octopus'
	   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'
	   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'
	   *     inflection.inflect( 'person', 2 ); // === 'people'
	   *     inflection.inflect( 'octopus', 2 ); // === 'octopi'
	   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'
	   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'
	   */
	    inflect : function ( str, count, singular, plural ){
	      count = parseInt( count, 10 );

	      if( isNaN( count )) return str;

	      if( count === 0 || count > 1 ){
	        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );
	      }else{
	        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );
	      }
	    },



	  /**
	   * This function adds camelization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
	   *                                 Passing true will lowercase it.
	   * @returns {String} Lower case underscored words will be returned in camel case.
	   *                  additionally '/' is translated to '::'
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
	   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
	   */
	    camelize : function ( str, low_first_letter ){
	      var str_path = str.split( '/' );
	      var i        = 0;
	      var j        = str_path.length;
	      var str_arr, init_x, k, l, first;

	      for( ; i < j; i++ ){
	        str_arr = str_path[ i ].split( '_' );
	        k       = 0;
	        l       = str_arr.length;

	        for( ; k < l; k++ ){
	          if( k !== 0 ){
	            str_arr[ k ] = str_arr[ k ].toLowerCase();
	          }

	          first = str_arr[ k ].charAt( 0 );
	          first = low_first_letter && i === 0 && k === 0
	            ? first.toLowerCase() : first.toUpperCase();
	          str_arr[ k ] = first + str_arr[ k ].substring( 1 );
	        }

	        str_path[ i ] = str_arr.join( '' );
	      }

	      return str_path.join( '::' );
	    },



	  /**
	   * This function adds underscore support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)
	   *                  Passing true will return as entered.
	   * @returns {String} Camel cased words are returned as lower cased and underscored.
	   *                  additionally '::' is translated to '/'.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
	   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
	   *     inflection.underscore( 'MP', true ); // === 'MP'
	   */
	    underscore : function ( str, all_upper_case ){
	      if( all_upper_case && str === str.toUpperCase()) return str;

	      var str_path = str.split( '::' );
	      var i        = 0;
	      var j        = str_path.length;

	      for( ; i < j; i++ ){
	        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );
	        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );
	      }

	      return str_path.join( '/' ).toLowerCase();
	    },



	  /**
	   * This function adds humanize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
	   *                                 Passing true will lowercase it.
	   * @returns {String} Lower case underscored words will be returned in humanized form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.humanize( 'message_properties' ); // === 'Message properties'
	   *     inflection.humanize( 'message_properties', true ); // === 'message properties'
	   */
	    humanize : function ( str, low_first_letter ){
	      str = str.toLowerCase();
	      str = str.replace( id_suffix, '' );
	      str = str.replace( underbar, ' ' );

	      if( !low_first_letter ){
	        str = inflector.capitalize( str );
	      }

	      return str;
	    },



	  /**
	   * This function adds capitalization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} All characters will be lower case and the first will be upper.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
	   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
	   */
	    capitalize : function ( str ){
	      str = str.toLowerCase();

	      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );
	    },



	  /**
	   * This function replaces underscores with dashes in the string.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Replaces all spaces or underscores with dashes.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
	   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
	   */
	    dasherize : function ( str ){
	      return str.replace( space_or_underbar, '-' );
	    },



	  /**
	   * This function adds titleize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Capitalizes words as you would for a book title.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
	   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
	   */
	    titleize : function ( str ){
	      str         = str.toLowerCase().replace( underbar, ' ' );
	      var str_arr = str.split( ' ' );
	      var i       = 0;
	      var j       = str_arr.length;
	      var d, k, l;

	      for( ; i < j; i++ ){
	        d = str_arr[ i ].split( '-' );
	        k = 0;
	        l = d.length;

	        for( ; k < l; k++){
	          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){
	            d[ k ] = inflector.capitalize( d[ k ]);
	          }
	        }

	        str_arr[ i ] = d.join( '-' );
	      }

	      str = str_arr.join( ' ' );
	      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );

	      return str;
	    },



	  /**
	   * This function adds demodulize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Removes module names leaving only class names.(Ruby style)
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
	   */
	    demodulize : function ( str ){
	      var str_arr = str.split( '::' );

	      return str_arr[ str_arr.length - 1 ];
	    },



	  /**
	   * This function adds tableize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Return camel cased words into their underscored plural form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
	   */
	    tableize : function ( str ){
	      str = inflector.underscore( str );
	      str = inflector.pluralize( str );

	      return str;
	    },



	  /**
	   * This function adds classification support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Underscored plural nouns become the camel cased singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
	   */
	    classify : function ( str ){
	      str = inflector.camelize( str );
	      str = inflector.singularize( str );

	      return str;
	    },



	  /**
	   * This function adds foreign key support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,
	                                 you can pass true to skip it.(optional)
	   * @returns {String} Underscored plural nouns become the camel cased singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
	   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
	   */
	    foreign_key : function ( str, drop_id_ubar ){
	      str = inflector.demodulize( str );
	      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';

	      return str;
	    },



	  /**
	   * This function adds ordinalize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Return all found numbers their sequence like '22nd'.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
	   */
	    ordinalize : function ( str ){
	      var str_arr = str.split( ' ' );
	      var i       = 0;
	      var j       = str_arr.length;

	      for( ; i < j; i++ ){
	        var k = parseInt( str_arr[ i ], 10 );

	        if( !isNaN( k )){
	          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );
	          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );
	          var suf = 'th';

	          if( ltd != '11' && ltd != '12' && ltd != '13' ){
	            if( ld === '1' ){
	              suf = 'st';
	            }else if( ld === '2' ){
	              suf = 'nd';
	            }else if( ld === '3' ){
	              suf = 'rd';
	            }
	          }

	          str_arr[ i ] += suf;
	        }
	      }

	      return str_arr.join( ' ' );
	    },

	  /**
	   * This function performs multiple inflection methods on a string
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Array} arr An array of inflection methods.
	   * @returns {String}
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'
	   */
	    transform : function ( str, arr ){
	      var i = 0;
	      var j = arr.length;

	      for( ;i < j; i++ ){
	        var method = arr[ i ];

	        if( this.hasOwnProperty( method )){
	          str = this[ method ]( str );
	        }
	      }

	      return str;
	    }
	  };

	/**
	 * @public
	 */
	  inflector.version = '1.10.0';

	  return inflector;
	}));


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	/*global window, require, define */
	(function(_window) {
	  'use strict';

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;

	  function setupBrowser() {
	    // Allow for MSIE11 msCrypto
	    var _crypto = _window.crypto || _window.msCrypto;

	    if (!_rng && _crypto && _crypto.getRandomValues) {
	      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	      //
	      // Moderately fast, high quality
	      try {
	        var _rnds8 = new Uint8Array(16);
	        _whatwgRNG = _rng = function whatwgRNG() {
	          _crypto.getRandomValues(_rnds8);
	          return _rnds8;
	        };
	        _rng();
	      } catch(e) {}
	    }

	    if (!_rng) {
	      // Math.random()-based (RNG)
	      //
	      // If all else fails, use Math.random().  It's fast, but is of unspecified
	      // quality.
	      var  _rnds = new Array(16);
	      _mathRNG = _rng = function() {
	        for (var i = 0, r; i < 16; i++) {
	          if ((i & 0x03) === 0) { r = Math.random() * 0x100000000; }
	          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	        }

	        return _rnds;
	      };
	      if ('undefined' !== typeof console && console.warn) {
	        console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()");
	      }
	    }
	  }

	  function setupNode() {
	    // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	    //
	    // Moderately fast, high quality
	    if (true) {
	      try {
	        var _rb = __webpack_require__(37).randomBytes;
	        _nodeRNG = _rng = _rb && function() {return _rb(16);};
	        _rng();
	      } catch(e) {}
	    }
	  }

	  if (_window) {
	    setupBrowser();
	  } else {
	    setupNode();
	  }

	  // Buffer class to use
	  var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof(options) === 'string') {
	      buf = (options === 'binary') ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;
	  uuid._rng = _rng;
	  uuid._mathRNG = _mathRNG;
	  uuid._nodeRNG = _nodeRNG;
	  uuid._whatwgRNG = _whatwgRNG;

	  if (('undefined' !== typeof module) && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return uuid;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


	  } else {
	    // Publish as global (in browsers)
	    _previousRoot = _window.uuid;

	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _window.uuid = _previousRoot;
	      return uuid;
	    };

	    _window.uuid = uuid;
	  }
	})('undefined' !== typeof window ? window : null);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 334 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = depd

	/**
	 * Create deprecate for namespace in caller.
	 */

	function depd(namespace) {
	  if (!namespace) {
	    throw new TypeError('argument namespace is required')
	  }

	  function deprecate(message) {
	    // no-op in browser
	  }

	  deprecate._file = undefined
	  deprecate._ignored = true
	  deprecate._namespace = namespace
	  deprecate._traced = false
	  deprecate._warned = Object.create(null)

	  deprecate.function = wrapfunction
	  deprecate.property = wrapproperty

	  return deprecate
	}

	/**
	 * Return a wrapped function in a deprecation message.
	 *
	 * This is a no-op version of the wrapper, which does nothing but call
	 * validation.
	 */

	function wrapfunction(fn, message) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('argument fn must be a function')
	  }

	  return fn
	}

	/**
	 * Wrap property in a deprecation message.
	 *
	 * This is a no-op version of the wrapper, which does nothing but call
	 * validation.
	 */

	function wrapproperty(obj, prop, message) {
	  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
	    throw new TypeError('argument obj must be object')
	  }

	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)

	  if (!descriptor) {
	    throw new TypeError('must call property on owner object')
	  }

	  if (!descriptor.configurable) {
	    throw new TypeError('property must be configurable')
	  }

	  return
	}


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Promise = __webpack_require__(121)
	  , shimmer = __webpack_require__(336);

	// functionName: The Promise function that should be shimmed
	// fnArgs: The arguments index that should be CLS enabled (typically all callbacks). Offset from last if negative
	function shimCLS(object, functionName, fnArgs){
	  shimmer.wrap(object, functionName, function(fn) {
	    return function () {
	      if (Promise.Sequelize && Promise.Sequelize.cls) {
	        var ns = Promise.Sequelize.cls;
	        for(var x=0; x<fnArgs.length; x++) {
	          var argIndex = fnArgs[x] < 0 ? arguments.length + fnArgs[x] : fnArgs[x];
	          if ( argIndex < arguments.length && typeof arguments[argIndex] === 'function' ) {
	            arguments[argIndex] = ns.bind( arguments[argIndex] );
	          }
	        }
	      }

	      return fn.apply(this, arguments);
	    };
	  });
	}

	// Core
	shimCLS(Promise, 'join', [-1]);
	shimCLS(Promise.prototype, 'then', [0, 1, 2]);
	shimCLS(Promise.prototype, 'spread', [0, 1]);
	shimCLS(Promise.prototype, 'catch', [-1]);
	shimCLS(Promise.prototype, 'error', [0]);
	shimCLS(Promise.prototype, 'finally', [0]);

	// Collections
	shimCLS(Promise, 'map', [1]);
	shimCLS(Promise, 'reduce', [1]);
	shimCLS(Promise, 'filter', [1]);
	shimCLS(Promise, 'each', [1]);
	shimCLS(Promise.prototype, 'map', [0]);
	shimCLS(Promise.prototype, 'reduce', [0]);
	shimCLS(Promise.prototype, 'filter', [0]);
	shimCLS(Promise.prototype, 'each', [0]);

	// Promisification
	shimCLS(Promise.prototype, 'nodeify', [0]);

	// Utility
	shimCLS(Promise.prototype, 'tap', [0]);

	// Error management configuration
	shimCLS(Promise.prototype, 'done', [0, 1]);

	module.exports = Promise;


/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict'

	function isFunction (funktion) {
	  return funktion && {}.toString.call(funktion) === '[object Function]'
	}

	// Default to complaining loudly when things don't go according to plan.
	var logger = console.error.bind(console)

	// Keep initialization idempotent.
	function shimmer (options) {
	  if (options && options.logger) {
	    if (!isFunction(options.logger)) logger("new logger isn't a function, not replacing")
	    else logger = options.logger
	  }
	}

	function wrap (nodule, name, wrapper) {
	  if (!nodule || !nodule[name]) {
	    logger('no original function ' + name + ' to wrap')
	    return
	  }

	  if (!wrapper) {
	    logger('no wrapper function')
	    logger((new Error()).stack)
	    return
	  }

	  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
	    logger('original object and wrapper must be functions')
	    return
	  }

	  var original = nodule[name]
	  var wrapped = wrapper(original, name)

	  wrapped.__original = original
	  wrapped.__unwrap = function () {
	    if (nodule[name] === wrapped) nodule[name] = original
	  }
	  wrapped.__wrapped = true

	  nodule[name] = wrapped

	  return wrapped
	}

	function massWrap (nodules, names, wrapper) {
	  if (!nodules) {
	    logger('must provide one or more modules to patch')
	    logger((new Error()).stack)
	    return
	  } else if (!Array.isArray(nodules)) {
	    nodules = [nodules]
	  }

	  if (!(names && Array.isArray(names))) {
	    logger('must provide one or more functions to wrap on modules')
	    return
	  }

	  nodules.forEach(function (nodule) {
	    names.forEach(function (name) {
	      wrap(nodule, name, wrapper)
	    })
	  })
	}

	function unwrap (nodule, name) {
	  if (!nodule || !nodule[name]) {
	    logger('no function to unwrap.')
	    logger((new Error()).stack)
	    return
	  }

	  if (!nodule[name].__unwrap) {
	    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')
	  } else {
	    return nodule[name].__unwrap()
	  }
	}

	shimmer.wrap = wrap
	shimmer.massWrap = massWrap
	shimmer.unwrap = unwrap

	module.exports = shimmer


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	/* jshint -W110 */

	var Utils = __webpack_require__(122)
	  , Instance = __webpack_require__(338)
	  , Association = __webpack_require__(342)
	  , HasMany = __webpack_require__(344)
	  , DataTypes = __webpack_require__(123)
	  , Util = __webpack_require__(124)
	  , Promise = __webpack_require__(335)
	  , QueryTypes = __webpack_require__(349)
	  , Hooks = __webpack_require__(351)
	  , sequelizeErrors = __webpack_require__(130)
	  , _ = __webpack_require__(127)
	  , associationsMixin = __webpack_require__(352);

	/**
	 * A Model represents a table in the database. Sometimes you might also see it referred to as model, or simply as factory.
	 * This class should _not_ be instantiated directly, it is created using `sequelize.define`, and already created models can be loaded using `sequelize.import`
	 *
	 * @class Model
	 * @mixes Hooks
	 * @mixes Associations
	 */
	var Model = function(name, attributes, options) {

	  this.options = Utils._.extend({
	    timestamps: true,
	    instanceMethods: {},
	    classMethods: {},
	    validate: {},
	    freezeTableName: false,
	    underscored: false,
	    underscoredAll: false,
	    paranoid: false,
	    rejectOnEmpty: false,
	    whereCollection: null,
	    schema: null,
	    schemaDelimiter: '',
	    defaultScope: {},
	    scopes: [],
	    hooks: {},
	    indexes: []
	  }, options || {});

	  this.associations = {};
	  this.modelManager = null;
	  this.name = name;
	  this.options.hooks = _.mapValues(this.replaceHookAliases(this.options.hooks), function (hooks) {
	    if (!Array.isArray(hooks)) hooks = [hooks];
	    return hooks;
	  });

	  this.sequelize = options.sequelize;
	  this.underscored = this.underscored || this.underscoredAll;

	  if (!this.options.tableName) {
	    this.tableName = this.options.freezeTableName ? name : Utils.underscoredIf(Utils.pluralize(name), this.options.underscoredAll);
	  } else {
	    this.tableName = this.options.tableName;
	  }

	  this.$schema = this.options.schema;
	  this.$schemaDelimiter = this.options.schemaDelimiter;

	  // error check options
	  _.each(options.validate, function(validator, validatorType) {
	    if (_.includes(Utils._.keys(attributes), validatorType)) {
	      throw new Error('A model validator function must not have the same name as a field. Model: ' + name + ', field/validation name: ' + validatorType);
	    }

	    if (!_.isFunction(validator)) {
	      throw new Error('Members of the validate option must be functions. Model: ' + name + ', error with validate member ' + validatorType);
	    }
	  });

	 this.attributes = this.rawAttributes = _.mapValues(attributes, function(attribute, name) {
	   if (!Utils._.isPlainObject(attribute)) {
	     attribute = { type: attribute };
	   }


	    attribute = this.sequelize.normalizeAttribute(attribute);

	    if (attribute.references) {
	      attribute = Utils.formatReferences(attribute);

	      if (attribute.references.model instanceof Model) {
	        attribute.references.model = attribute.references.model.tableName;
	      }
	    }

	    if (attribute.type === undefined) {
	      throw new Error('Unrecognized data type for field ' + name);
	    }

	    return attribute;
	  }.bind(this));
	};

	Object.defineProperty(Model.prototype, 'QueryInterface', {
	  get: function() {
	    return this.modelManager.sequelize.getQueryInterface();
	  }
	});

	Object.defineProperty(Model.prototype, 'QueryGenerator', {
	  get: function() {
	    return this.QueryInterface.QueryGenerator;
	  }
	});

	Model.prototype.toString = function () {
	  return '[object SequelizeModel:'+this.name+']';
	};

	// private

	// validateIncludedElements should have been called before this method
	var paranoidClause = function(model, options) {
	  options = options || {};

	  // Apply on each include
	  // This should be handled before handling where conditions because of logic with returns
	  // otherwise this code will never run on includes of a already conditionable where
	  if (options.include) {
	    options.include.forEach(function(include) {
	      paranoidClause(include.model, include);
	    });
	  }

	  // apply paranoid when groupedLimit is used
	  if (_.get(options, 'groupedLimit.on.options.paranoid')) {
	    var throughModel = _.get(options, 'groupedLimit.on.through.model');
	    if (throughModel) {
	      options.groupedLimit.through = paranoidClause(throughModel, options.groupedLimit.through);
	    }
	  }

	  if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {
	    // This model is not paranoid, nothing to do here;
	    return options;
	  }

	  var deletedAtCol = model._timestampAttributes.deletedAt
	    , deletedAtAttribute = model.rawAttributes[deletedAtCol]
	    , deletedAtObject = {}
	    , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

	  deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;

	  if (Utils._.isEmpty(options.where)) {
	    options.where = deletedAtObject;
	  } else {
	    options.where = { $and: [deletedAtObject, options.where] };
	  }

	  return options;
	};

	var addOptionalClassMethods = function() {
	  var self = this;
	  Utils._.each(this.options.classMethods || {}, function(fct, name) { self[name] = fct; });
	};

	var addDefaultAttributes = function() {
	  var self = this
	    , tail = {}
	    , head = {};

	  // Add id if no primary key was manually added to definition
	  // Can't use this.primaryKeys here, since this function is called before PKs are identified
	  if (!_.some(this.rawAttributes, 'primaryKey')) {
	    if ('id' in this.rawAttributes) {
	      // Something is fishy here!
	      throw new Error("A column called 'id' was added to the attributes of '" + this.tableName + "' but not marked with 'primaryKey: true'");
	    }

	    head = {
	      id: {
	        type: new DataTypes.INTEGER(),
	        allowNull: false,
	        primaryKey: true,
	        autoIncrement: true,
	        _autoGenerated: true
	      }
	    };
	  }

	  if (this._timestampAttributes.createdAt) {
	    tail[this._timestampAttributes.createdAt] = {
	      type: DataTypes.DATE,
	      allowNull: false,
	      _autoGenerated: true
	    };
	  }
	  if (this._timestampAttributes.updatedAt) {
	    tail[this._timestampAttributes.updatedAt] = {
	      type: DataTypes.DATE,
	      allowNull: false,
	      _autoGenerated: true
	    };
	  }
	  if (this._timestampAttributes.deletedAt) {
	    tail[this._timestampAttributes.deletedAt] = {
	      type: DataTypes.DATE,
	      _autoGenerated: true
	    };
	  }

	  var existingAttributes = Utils._.clone(self.rawAttributes);
	  self.rawAttributes = {};

	  Utils._.each(head, function(value, attr) {
	    self.rawAttributes[attr] = value;
	  });

	  Utils._.each(existingAttributes, function(value, attr) {
	    self.rawAttributes[attr] = value;
	  });

	  Utils._.each(tail, function(value, attr) {
	    if (Utils._.isUndefined(self.rawAttributes[attr])) {
	      self.rawAttributes[attr] = value;
	    }
	  });

	  if (!Object.keys(this.primaryKeys).length) {
	    self.primaryKeys.id = self.rawAttributes.id;
	  }
	};

	var findAutoIncrementField = function() {
	  var fields = this.QueryGenerator.findAutoIncrementField(this);

	  this.autoIncrementField = null;

	  fields.forEach(function(field) {
	    if (this.autoIncrementField) {
	      throw new Error('Invalid Instance definition. Only one autoincrement field allowed.');
	    } else {
	      this.autoIncrementField = field;
	    }
	  }.bind(this));
	};

	function conformOptions(options, self) {
	  if (self) {
	    self.$expandAttributes(options);
	  }

	  if (!options.include) {
	    return;
	  }
	  // if include is not an array, wrap in an array
	  if (!Array.isArray(options.include)) {
	    options.include = [options.include];
	  } else if (!options.include.length) {
	    delete options.include;
	    return;
	  }

	  // convert all included elements to { model: Model } form
	  options.include = options.include.map(function(include) {
	    include = conformInclude(include, self);

	    return include;
	  });
	}

	Model.$conformOptions = conformOptions;

	function conformInclude(include, self) {
	  var model;

	  if (include._pseudo) return include;

	  if (include instanceof Association) {
	    if (self && include.target.name === self.name) {
	      model = include.source;
	    } else {
	      model = include.target;
	    }

	    include = { model: model, association: include, as: include.as };
	  } else if (include instanceof Model) {
	    include = { model: include };
	  } else if (_.isPlainObject(include)) {
	    if (include.association) {
	      if (self && include.association.target.name === self.name) {
	        model = include.association.source;
	      } else {
	        model = include.association.target;
	      }

	      if (!include.model) {
	        include.model = model;
	      }
	      if (!include.as) {
	        include.as = include.association.as;
	      }
	    } else {
	      model = include.model;
	    }

	    conformOptions(include, model);
	  } else {
	    throw new Error('Include unexpected. Element has to be either a Model, an Association or an object.');
	  }

	  return include;
	}

	Model.$conformInclude = conformInclude;

	var expandIncludeAllElement = function(includes, include) {
	  // check 'all' attribute provided is valid
	  var all = include.all;
	  delete include.all;

	  if (all !== true) {
	    if (!Array.isArray(all)) {
	      all = [all];
	    }

	    var validTypes = {
	      BelongsTo: true,
	      HasOne: true,
	      HasMany: true,
	      One: ['BelongsTo', 'HasOne'],
	      Has: ['HasOne', 'HasMany'],
	      Many: ['HasMany']
	    };

	    for (var i = 0; i < all.length; i++) {
	      var type = all[i];
	      if (type === 'All') {
	        all = true;
	        break;
	      }

	      var types = validTypes[type];
	      if (!types) {
	        throw new Error('include all \'' + type + '\' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All');
	      }

	      if (types !== true) {
	        // replace type placeholder e.g. 'One' with it's constituent types e.g. 'HasOne', 'BelongsTo'
	        all.splice(i, 1);
	        i--;
	        for (var j = 0; j < types.length; j++) {
	          if (all.indexOf(types[j]) === -1) {
	            all.unshift(types[j]);
	            i++;
	          }
	        }
	      }
	    }
	  }

	  // add all associations of types specified to includes
	  var nested = include.nested;
	  if (nested) {
	    delete include.nested;

	    if (!include.include) {
	      include.include = [];
	    } else if (!Array.isArray(include.include)) {
	      include.include = [include.include];
	    }
	  }

	  var used = [];
	  (function addAllIncludes(parent, includes) {
	    Utils._.forEach(parent.associations, function(association) {
	      if (all !== true && all.indexOf(association.associationType) === -1) {
	        return;
	      }

	      // check if model already included, and skip if so
	      var model = association.target;
	      var as = association.options.as;

	      var predicate = {model: model};
	      if (as) {
	        // We only add 'as' to the predicate if it actually exists
	        predicate.as = as;
	      }

	      if (Utils._.find(includes, predicate)) {
	        return;
	      }

	      // skip if recursing over a model already nested
	      if (nested && used.indexOf(model) !== -1) {
	        return;
	      }
	      used.push(parent);

	      // include this model
	      var thisInclude = Utils.cloneDeep(include);
	      thisInclude.model = model;
	      if (as) {
	        thisInclude.as = as;
	      }
	      includes.push(thisInclude);

	      // run recursively if nested
	      if (nested) {
	        addAllIncludes(model, thisInclude.include);
	        if (thisInclude.include.length === 0) delete thisInclude.include;
	      }
	    });
	    used.pop();
	  })(this, includes);
	};

	var validateIncludedElement;
	var validateIncludedElements = function(options, tableNames) {
	  if (!options.model) options.model = this;

	  tableNames = tableNames || {};
	  options.includeNames = [];
	  options.includeMap = {};

	  /* Legacy */
	  options.hasSingleAssociation = false;
	  options.hasMultiAssociation = false;

	  if (!options.parent) {
	    options.topModel = options.model;
	    options.topLimit = options.limit;
	  }

	  options.include = options.include.map(function (include) {
	    include = conformInclude(include);
	    include.parent = options;

	    validateIncludedElement.call(options.model, include, tableNames, options);

	    if (include.duplicating === undefined) {
	      include.duplicating = include.association.isMultiAssociation;
	    }

	    include.hasDuplicating = include.hasDuplicating || include.duplicating;
	    include.hasRequired = include.hasRequired || include.required;

	    options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;
	    options.hasRequired = options.hasRequired || include.required;

	    options.hasWhere = options.hasWhere || include.hasWhere || !!include.where;
	    return include;
	  });

	  options.include.forEach(function (include) {
	    include.hasParentWhere = options.hasParentWhere || !!options.where;
	    include.hasParentRequired = options.hasParentRequired || !!options.required;

	    if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {
	      if (include.duplicating) {
	        include.subQuery = false;
	        include.subQueryFilter = include.hasRequired;
	      } else {
	        include.subQuery = include.hasRequired;
	        include.subQueryFilter = false;
	      }
	    } else {
	      include.subQuery = include.subQuery || false;
	      if (include.duplicating) {
	        include.subQueryFilter = include.subQuery;
	        include.subQuery = false;
	      } else {
	        include.subQueryFilter = false;
	        include.subQuery = include.subQuery || (include.hasParentRequired && include.hasRequired);
	      }
	    }

	    options.includeMap[include.as] = include;
	    options.includeNames.push(include.as);

	    // Set top level options
	    if (options.topModel === options.model && options.subQuery === undefined && options.topLimit) {
	      if (include.subQuery) {
	        options.subQuery = include.subQuery;
	      } else if (include.hasDuplicating) {
	        options.subQuery = true;
	      }
	    }

	    /* Legacy */
	    options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || !!include.where;
	    options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || !!include.required;

	    if (include.association.isMultiAssociation || include.hasMultiAssociation) {
	      options.hasMultiAssociation = true;
	    }
	    if (include.association.isSingleAssociation || include.hasSingleAssociation) {
	      options.hasSingleAssociation = true;
	    }

	    return include;
	  });

	  if (options.topModel === options.model && options.subQuery === undefined) {
	    options.subQuery = false;
	  }
	  return options;
	};
	Model.$validateIncludedElements = validateIncludedElements;

	validateIncludedElement = function(include, tableNames, options) {
	  tableNames[include.model.getTableName()] = true;

	  if (include.attributes && !options.raw) {
	    include.model.$expandAttributes(include);

	    // Need to make sure virtuals are mapped before setting originalAttributes
	    include = Utils.mapFinderOptions(include, include.model);

	    include.originalAttributes = include.attributes.slice(0);

	    if (include.attributes.length) {
	      _.each(include.model.primaryKeys, function (attr, key) {
	        // Include the primary key if its not already take - take into account that the pk might be aliassed (due to a .field prop)
	        if (!_.some(include.attributes, function (includeAttr) {
	            if (attr.field !== key) {
	              return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;
	            }
	            return includeAttr === key;
	          })) {
	          include.attributes.unshift(key);
	        }
	      });
	    }
	  } else {
	    include = Utils.mapFinderOptions(include, include.model);
	  }

	  // pseudo include just needed the attribute logic, return
	  if (include._pseudo) {
	    include.attributes = Object.keys(include.model.tableAttributes);
	    return Utils.mapFinderOptions(include, include.model);
	  }

	  // check if the current Model is actually associated with the passed Model - or it's a pseudo include
	  var association = include.association || this.getAssociation(include.model, include.as);

	  if (!association) {
	    var msg = include.model.name;

	    if (include.as) {
	      msg += ' (' + include.as + ')';
	    }

	    msg += ' is not associated to ' + this.name + '!';

	    throw new Error(msg);
	  }

	  include.association = association;
	  include.as = association.as;

	  // If through, we create a pseudo child include, to ease our parsing later on
	  if (include.association.through && Object(include.association.through.model) === include.association.through.model) {
	    if (!include.include) include.include = [];
	    var through = include.association.through;

	    include.through = Utils._.defaults(include.through || {}, {
	      model: through.model,
	      as: through.model.name,
	      association: {
	        isSingleAssociation: true
	      },
	      _pseudo: true,
	      parent: include
	    });


	    if (through.scope) {
	      include.through.where = include.through.where ? { $and: [include.through.where, through.scope]} :  through.scope;
	    }

	    include.include.push(include.through);
	    tableNames[through.tableName] = true;
	  }

	  // include.model may be the main model, while the association target may be scoped - thus we need to look at association.target/source
	  var model;
	  if (include.model.scoped === true) {
	    // If the passed model is already scoped, keep that
	    model = include.model;
	  } else {
	    // Otherwise use the model that was originally passed to the association
	    model = include.association.target.name === include.model.name ? include.association.target : include.association.source;
	  }

	  model.$injectScope(include);

	  // This check should happen after injecting the scope, since the scope may contain a .attributes
	  if (!include.attributes) {
	    include.attributes = Object.keys(include.model.tableAttributes);
	  }

	  include = Utils.mapFinderOptions(include, include.model);

	  if (include.required === undefined) {
	    include.required = !!include.where;
	  }

	  if (include.association.scope) {
	    include.where = include.where ? { $and: [include.where, include.association.scope] }:  include.association.scope;
	  }

	  if (include.limit && include.separate === undefined) {
	    include.separate = true;
	  }

	  if (include.separate === true && !(include.association instanceof HasMany)) {
	    throw new Error('Only HasMany associations support include.separate');
	  }

	  if (include.separate === true) {
	    include.duplicating = false;
	  }

	  if (include.separate === true && options.attributes && options.attributes.length && !_.includes(options.attributes, association.source.primaryKeyAttribute)) {
	    options.attributes.push(association.source.primaryKeyAttribute);
	  }

	  // Validate child includes
	  if (include.hasOwnProperty('include')) {
	    validateIncludedElements.call(include.model, include, tableNames, options);
	  }

	  return include;
	};

	var expandIncludeAll = Model.$expandIncludeAll = function(options) {
	  var includes = options.include;
	  if (!includes) {
	    return;
	  }

	 for (var index = 0; index < includes.length; index++) {
	    var include = includes[index];

	    if (include.all) {
	      includes.splice(index, 1);
	      index--;

	      expandIncludeAllElement.call(this, includes, include);
	    }
	  }

	  Utils._.forEach(includes, function(include) {
	    expandIncludeAll.call(include.model, include);
	  });
	};

	Model.prototype.init = function(modelManager) {
	  var self = this;

	  this.modelManager = modelManager;
	  this.primaryKeys = {};

	  // Setup names of timestamp attributes
	  this._timestampAttributes = {};
	  if (this.options.timestamps) {
	    if (this.options.createdAt !== false) {
	      this._timestampAttributes.createdAt = this.options.createdAt || Utils.underscoredIf('createdAt', this.options.underscored);
	    }
	    if (this.options.updatedAt !== false) {
	      this._timestampAttributes.updatedAt = this.options.updatedAt || Utils.underscoredIf('updatedAt', this.options.underscored);
	    }
	    if (this.options.paranoid && this.options.deletedAt !== false) {
	      this._timestampAttributes.deletedAt = this.options.deletedAt || Utils.underscoredIf('deletedAt', this.options.underscored);
	    }
	  }

	  // Add head and tail default attributes (id, timestamps)
	  addOptionalClassMethods.call(this);

	  // Instance prototype
	  this.Instance = function() {
	    Instance.apply(this, arguments);
	  };

	  Util.inherits(this.Instance, Instance);

	  this._readOnlyAttributes = Utils._.values(this._timestampAttributes);
	  this._hasReadOnlyAttributes = this._readOnlyAttributes && this._readOnlyAttributes.length;
	  this._isReadOnlyAttribute = Utils._.memoize(function(key) {
	    return self._hasReadOnlyAttributes && self._readOnlyAttributes.indexOf(key) !== -1;
	  });

	  if (this.options.instanceMethods) {
	    Utils._.each(this.options.instanceMethods, function(fct, name) {
	      self.Instance.prototype[name] = fct;
	    });
	  }

	  addDefaultAttributes.call(this);
	  this.refreshAttributes();

	  findAutoIncrementField.call(this);

	  this.$scope = this.options.defaultScope;

	  if (_.isPlainObject(this.$scope)) {
	    conformOptions(this.$scope, this);
	  }

	  _.each(this.options.scopes, function (scope) {
	    if (_.isPlainObject(scope)) {
	      conformOptions(scope, this);
	    }
	  }.bind(this));

	  this.options.indexes = this.options.indexes.map(this.$conformIndex);

	  this.Instance.prototype.$Model =
	  this.Instance.prototype.Model = this;

	  return this;
	};

	Model.prototype.$conformIndex = function (index) {
	  index = _.defaults(index, {
	    type: '',
	    parser: null
	  });

	  if (index.type && index.type.toLowerCase() === 'unique') {
	    index.unique = true;
	    delete index.type;
	  }
	  return index;
	};

	Model.prototype.refreshAttributes = function() {
	  var self = this
	    , attributeManipulation = {};

	  this.Instance.prototype._customGetters = {};
	  this.Instance.prototype._customSetters = {};

	  Utils._.each(['get', 'set'], function(type) {
	    var opt = type + 'terMethods'
	      , funcs = Utils._.clone(Utils._.isObject(self.options[opt]) ? self.options[opt] : {})
	      , _custom = type === 'get' ? self.Instance.prototype._customGetters : self.Instance.prototype._customSetters;

	    Utils._.each(funcs, function(method, attribute) {
	      _custom[attribute] = method;

	      if (type === 'get') {
	        funcs[attribute] = function() {
	          return this.get(attribute);
	        };
	      }
	      if (type === 'set') {
	        funcs[attribute] = function(value) {
	          return this.set(attribute, value);
	        };
	      }
	    });

	    Utils._.each(self.rawAttributes, function(options, attribute) {
	      if (options.hasOwnProperty(type)) {
	        _custom[attribute] = options[type];
	      }

	      if (type === 'get') {
	        funcs[attribute] = function() {
	          return this.get(attribute);
	        };
	      }
	      if (type === 'set') {
	        funcs[attribute] = function(value) {
	          return this.set(attribute, value);
	        };
	      }
	    });

	    Utils._.each(funcs, function(fct, name) {
	      if (!attributeManipulation[name]) {
	        attributeManipulation[name] = {
	          configurable: true
	        };
	      }
	      attributeManipulation[name][type] = fct;
	    });
	  });

	  this._booleanAttributes = [];
	  this._dateAttributes = [];
	  this._hstoreAttributes = [];
	  this._rangeAttributes = [];
	  this._jsonAttributes = [];
	  this._geometryAttributes = [];
	  this._virtualAttributes = [];
	  this._defaultValues = {};
	  this.Instance.prototype.validators = {};

	  this.fieldRawAttributesMap = {};

	  this.primaryKeys = {};
	  self.options.uniqueKeys = {};

	  _.each(this.rawAttributes, function(definition, name) {
	    definition.type = self.sequelize.normalizeDataType(definition.type);

	    definition.Model = self;
	    definition.fieldName = name;
	    definition._modelAttribute = true;

	    if (definition.field === undefined) {
	      definition.field = name;
	    }

	    if (definition.primaryKey === true) {
	      self.primaryKeys[name] = definition;
	    }

	    self.fieldRawAttributesMap[definition.field] = definition;

	    if (definition.type instanceof DataTypes.BOOLEAN) {
	      self._booleanAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.DATE) {
	      self._dateAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.HSTORE || DataTypes.ARRAY.is(definition.type, DataTypes.HSTORE)) {
	      self._hstoreAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.RANGE || DataTypes.ARRAY.is(definition.type, DataTypes.RANGE)) {
	      self._rangeAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.JSON) {
	      self._jsonAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.VIRTUAL) {
	      self._virtualAttributes.push(name);
	    } else if (definition.type instanceof DataTypes.GEOMETRY) {
	      self._geometryAttributes.push(name);
	    }

	    if (definition.hasOwnProperty('defaultValue')) {
	      self._defaultValues[name] = Utils._.partial(Utils.toDefaultValue, definition.defaultValue);
	    }

	    if (definition.hasOwnProperty('unique') && definition.unique !== false) {
	      var idxName;
	      if (typeof definition.unique === 'object' && definition.unique.hasOwnProperty('name')) {
	        idxName = definition.unique.name;
	      } else if (typeof definition.unique === 'string') {
	        idxName = definition.unique;
	      } else {
	        idxName = self.tableName + '_' + name + '_unique';
	      }

	      var idx = self.options.uniqueKeys[idxName] || { fields: [] };
	      idx = idx || {fields: [], msg: null};
	      idx.fields.push(definition.field);
	      idx.msg = idx.msg || definition.unique.msg || null;
	      idx.name = idxName || false;
	      idx.column = name;

	      self.options.uniqueKeys[idxName] = idx;
	    }

	    if (definition.hasOwnProperty('validate')) {
	      self.Instance.prototype.validators[name] = definition.validate;
	    }

	    if (definition.index === true && definition.type instanceof DataTypes.JSONB) {
	      self.options.indexes.push({
	        fields: [definition.field || name],
	        using: 'gin'
	      });

	      delete definition.index;
	    }
	  });
	  // Create a map of field to attribute names
	  this.fieldAttributeMap = Utils._.reduce(this.fieldRawAttributesMap, function(map, value, key) {
	    if (key !== value.fieldName) {
	      map[key] = value.fieldName;
	    }
	    return map;
	  }, {});

	  this.uniqueKeys = this.options.uniqueKeys;

	  this._hasBooleanAttributes = !!this._booleanAttributes.length;
	  this._isBooleanAttribute = Utils._.memoize(function(key) {
	    return self._booleanAttributes.indexOf(key) !== -1;
	  });

	  this._hasDateAttributes = !!this._dateAttributes.length;
	  this._isDateAttribute = Utils._.memoize(function(key) {
	    return self._dateAttributes.indexOf(key) !== -1;
	  });

	  this._hasHstoreAttributes = !!this._hstoreAttributes.length;
	  this._isHstoreAttribute = Utils._.memoize(function(key) {
	    return self._hstoreAttributes.indexOf(key) !== -1;
	  });

	  this._hasRangeAttributes = !!this._rangeAttributes.length;
	  this._isRangeAttribute = Utils._.memoize(function(key) {
	    return self._rangeAttributes.indexOf(key) !== -1;
	  });

	  this._hasJsonAttributes = !!this._jsonAttributes.length;
	  this._isJsonAttribute = Utils._.memoize(function(key) {
	    return self._jsonAttributes.indexOf(key) !== -1;
	  });

	  this._hasVirtualAttributes = !!this._virtualAttributes.length;
	  this._isVirtualAttribute = Utils._.memoize(function(key) {
	    return self._virtualAttributes.indexOf(key) !== -1;
	  });

	  this._hasGeometryAttributes = !!this._geometryAttributes.length;
	  this._isGeometryAttribute = Utils._.memoize(function(key) {
	    return self._geometryAttributes.indexOf(key) !== -1;
	  });

	  this._hasDefaultValues = !Utils._.isEmpty(this._defaultValues);

	  this.attributes = this.rawAttributes;
	  this.tableAttributes = Utils._.omit(this.rawAttributes, this._virtualAttributes);

	  this.Instance.prototype._hasCustomGetters = Object.keys(this.Instance.prototype._customGetters).length;
	  this.Instance.prototype._hasCustomSetters = Object.keys(this.Instance.prototype._customSetters).length;

	  Object.keys(attributeManipulation).forEach((function(key){
	    if (Instance.prototype.hasOwnProperty(key)) {
	      this.sequelize.log("Not overriding built-in method from model attribute: " + key);
	      return;
	    }
	    Object.defineProperty(this.Instance.prototype, key, attributeManipulation[key]);
	  }).bind(this));


	  this.Instance.prototype.rawAttributes = this.rawAttributes;
	  this.Instance.prototype.attributes = Object.keys(this.Instance.prototype.rawAttributes);
	  this.Instance.prototype._isAttribute = Utils._.memoize(function(key) {
	    return self.Instance.prototype.attributes.indexOf(key) !== -1;
	  });

	  // Primary key convenience variables
	  this.primaryKeyAttributes = Object.keys(this.primaryKeys);
	  this.primaryKeyAttribute = this.primaryKeyAttributes[0];
	  if (this.primaryKeyAttribute) {
	    this.primaryKeyField = this.rawAttributes[this.primaryKeyAttribute].field || this.primaryKeyAttribute;
	  }

	  this.primaryKeyCount = this.primaryKeyAttributes.length;
	  this._hasPrimaryKeys = this.options.hasPrimaryKeys = this.hasPrimaryKeys = this.primaryKeyCount > 0;

	  this._isPrimaryKey = Utils._.memoize(function(key) {
	    return self.primaryKeyAttributes.indexOf(key) !== -1;
	  });

	};

	/**
	 * Remove attribute from model definition
	 * @param {String} [attribute]
	 */
	Model.prototype.removeAttribute = function(attribute) {
	  delete this.rawAttributes[attribute];
	  this.refreshAttributes();
	};

	/**
	 * Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the model instance (this)
	 * @see {Sequelize#sync} for options
	 * @return {Promise<this>}
	 */
	Model.prototype.sync = function(options) {
	  options = _.extend({}, this.options, options);
	  options.hooks = options.hooks === undefined ? true : !!options.hooks;

	  var self = this
	    , attributes = this.tableAttributes;

	  return Promise.try(function () {
	    if (options.hooks) {
	      return self.runHooks('beforeSync', options);
	    }
	  }).then(function () {
	    if (options.force) {
	      return self.drop(options);
	    }
	  }).then(function () {
	    return self.QueryInterface.createTable(self.getTableName(options), attributes, options, self);
	  }).then(function () {
	    return self.QueryInterface.showIndex(self.getTableName(options), options);
	  }).then(function (indexes) {
	    // Assign an auto-generated name to indexes which are not named by the user
	    self.options.indexes = self.QueryInterface.nameIndexes(self.options.indexes, self.tableName);

	    indexes = _.filter(self.options.indexes, function (item1) {
	      return !_.some(indexes, function (item2) {
	        return item1.name === item2.name;
	      });
	    });

	    return Promise.map(indexes, function (index) {
	      return self.QueryInterface.addIndex(
	                self.getTableName(options),
	                _.assign({logging: options.logging,
	                          benchmark: options.benchmark,
	                          transaction: options.transaction}, index),
	                self.tableName);
	    });
	  }).then(function () {
	    if (options.hooks) {
	      return self.runHooks('afterSync', options);
	    }
	  }).return(this);
	};

	/**
	 * Drop the table represented by this Model
	 * @param {Object}   [options]
	 * @param {Boolean}  [options.cascade=false]   Also drop all objects depending on this table, such as views. Only works in postgres
	 * @param {Function} [options.logging=false]   A function that gets executed while running the query to log the sql.
	 * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @return {Promise}
	 */
	Model.prototype.drop = function(options) {
	  return this.QueryInterface.dropTable(this.getTableName(options), options);
	};

	Model.prototype.dropSchema = function(schema) {
	  return this.QueryInterface.dropSchema(schema);
	};

	/**
	 * Apply a schema to this model. For postgres, this will actually place the schema in front of the table name - `"schema"."tableName"`,
	 * while the schema will be prepended to the table name for mysql and sqlite - `'schema.tablename'`.
	 *
	 * @param {String} schema The name of the schema
	 * @param {Object} [options]
	 * @param {String} [options.schemaDelimiter='.'] The character(s) that separates the schema name from the table name
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @return {this}
	 */
	Model.prototype.schema = function(schema, options) { // testhint options:none
	  var self = this;
	  var clone = Object.create(self);

	  clone.$schema = schema;

	  if (!!options) {
	    if (typeof options === 'string') {
	      clone.$schemaDelimiter = options;
	    } else {
	      if (!!options.schemaDelimiter) {
	        clone.$schemaDelimiter = options.schemaDelimiter;
	      }
	    }
	  }

	  clone.Instance = function() {
	    self.Instance.apply(this, arguments);
	  };
	  clone.Instance.prototype = Object.create(self.Instance.prototype);
	  clone.Instance.prototype.$Model = clone;

	  return clone;
	};

	/**
	 * Get the tablename of the model, taking schema into account. The method will return The name as a string if the model has no schema,
	 * or an object with `tableName`, `schema` and `delimiter` properties.
	 *
	 * @param {Object}   [options] The hash of options from any query. You can use one model to access tables with matching schemas by overriding `getTableName` and using custom key/values to alter the name of the table. (eg. subscribers_1, subscribers_2)
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @return {String|Object}
	 */
	Model.prototype.getTableName = function(options) { // testhint options:none
	  return this.QueryGenerator.addSchema(this);
	};

	/**
	 * @return {Model}
	 */
	Model.prototype.unscoped = function () {
	  return this.scope();
	};

	/**
	 * Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.
	 *
	 * By default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.
	 *
	 * @param {String}          name The name of the scope. Use `defaultScope` to override the default scope
	 * @param {Object|Function} scope
	 * @param {Object}          [options]
	 * @param {Boolean}         [options.override=false]
	 */
	Model.prototype.addScope = function (name, scope, options) {
	  options = _.assign({
	    override: false
	  }, options);

	  if ((name === 'defaultScope' || name in this.options.scopes) && options.override === false) {
	    throw new Error('The scope ' + name + ' already exists. Pass { override: true } as options to silence this error');
	  }

	  conformOptions(scope, this);

	  if (name === 'defaultScope') {
	    this.options.defaultScope = this.$scope = scope;
	  } else {
	    this.options.scopes[name] = scope;
	  }
	};

	/**
	 * Apply a scope created in `define` to the model. First let's look at how to create scopes:
	 * ```js
	 * var Model = sequelize.define('model', attributes, {
	 *   defaultScope: {
	 *     where: {
	 *       username: 'dan'
	 *     },
	 *     limit: 12
	 *   },
	 *   scopes: {
	 *     isALie: {
	 *       where: {
	 *         stuff: 'cake'
	 *       }
	 *     },
	 *     complexFunction: function(email, accessLevel) {
	 *       return {
	 *         where: {
	 *           email: {
	 *             $like: email
	 *           },
	 *           accesss_level {
	 *             $gte: accessLevel
	 *           }
	 *         }
	 *       }
	 *     }
	 *   }
	 * })
	 * ```
	 * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:
	 * ```js
	 * Model.findAll() // WHERE username = 'dan'
	 * Model.findAll({ where: { age: { gt: 12 } } }) // WHERE age > 12 AND username = 'dan'
	 * ```
	 *
	 * To invoke scope functions you can do:
	 * ```js
	 * Model.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()
	 * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42
	 * ```
	 *
	 * @param {Array|Object|String|null}    options* The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function, pass an object, with a `method` property. The value can either be a string, if the method does not take any arguments, or an array, where the first element is the name of the method, and consecutive elements are arguments to that method. Pass null to remove all scopes, including the default.
	 * @return {Model}                      A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope.
	 */
	Model.prototype.scope = function(option) {
	  var self = Object.create(this)
	    , options
	    , scope
	    , scopeName;

	  self.$scope = {};
	  self.scoped = true;

	  if (!option) {
	    return self;
	  }

	  options = _.flatten(arguments);
	  options.forEach(function(option) {
	    scope = null;
	    scopeName = null;

	    if (_.isPlainObject(option)) {
	      if (!!option.method) {
	        if (Array.isArray(option.method) && !!self.options.scopes[option.method[0]]) {
	          scopeName = option.method[0];
	          scope = self.options.scopes[scopeName].apply(self, option.method.splice(1));
	        }
	        else if (!!self.options.scopes[option.method]) {
	          scopeName = option.method;
	          scope = self.options.scopes[scopeName].apply(self);
	        }
	      } else {
	        scope = option;
	      }
	    } else {
	      if (option === 'defaultScope' && _.isPlainObject(self.options.defaultScope)) {
	        scope = self.options.defaultScope;
	      } else {
	        scopeName = option;
	        scope = self.options.scopes[scopeName];

	        if (_.isFunction(scope)) {
	          scope = scope();
	          conformOptions(scope, self);
	        }
	      }
	    }

	    if (!!scope) {
	      _.assignWith(self.$scope, scope, function scopeCustomizer(objectValue, sourceValue, key) {
	        if (key === 'where') {
	          return Array.isArray(sourceValue) ? sourceValue : _.assign(objectValue || {}, sourceValue);
	        } else if ( (['attributes','include'].indexOf(key) >= 0) && Array.isArray(objectValue) && Array.isArray(sourceValue)) {
	          return objectValue.concat(sourceValue);
	        }

	        return objectValue ? objectValue : sourceValue;
	      });
	    } else {
	      throw new Error('Invalid scope ' + scopeName + ' called.');
	    }
	  });

	  return self;
	};

	Model.prototype.all = function(options) {
	  return this.findAll(options);
	};

	/**
	 * Search for multiple instances.
	 *
	 * __Simple search using AND and =__
	 * ```js
	 * Model.findAll({
	 *   where: {
	 *     attr1: 42,
	 *     attr2: 'cake'
	 *   }
	 * })
	 * ```
	 * ```sql
	 * WHERE attr1 = 42 AND attr2 = 'cake'
	 *```
	 *
	 * __Using greater than, less than etc.__
	 * ```js
	 *
	 * Model.findAll({
	 *   where: {
	 *     attr1: {
	 *       gt: 50
	 *     },
	 *     attr2: {
	 *       lte: 45
	 *     },
	 *     attr3: {
	 *       in: [1,2,3]
	 *     },
	 *     attr4: {
	 *       ne: 5
	 *     }
	 *   }
	 * })
	 * ```
	 * ```sql
	 * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5
	 * ```
	 * Possible options are: `$ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike, $notILike, '..'/$between, '!..'/$notBetween, '&&'/$overlap, '@>'/$contains, '<@'/$contained`
	 *
	 * __Queries using OR__
	 * ```js
	 * Model.findAll({
	 *   where: {
	 *     name: 'a project',
	 *     $or: [
	 *       {id: [1, 2, 3]},
	 *       {
	 *         $and: [
	 *           {id: {gt: 10}},
	 *           {id: {lt: 100}}
	 *         ]
	 *       }
	 *     ]
	 *   }
	 * });
	 * ```
	 * ```sql
	 * WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));
	 * ```
	 *
	 * The success listener is called with an array of instances if the query succeeds.
	 *
	 * @param  {Object}                    [options] A hash of options to describe the scope of the search
	 * @param  {Object}                    [options.where] A hash of attributes to describe your search. See above for examples.
	 * @param  {Array<String>|Object}      [options.attributes] A list of the attributes that you want to select, or an object with `include` and `exclude` keys. To rename an attribute, you can pass an array, with two elements - the first is the name of the attribute in the DB (or some kind of expression such as `Sequelize.literal`, `Sequelize.fn` and so on), and the second is the name you want the attribute to have in the returned instance
	 * @param  {Array<String>}             [options.attributes.include] Select all the attributes of the model, plus some additional ones. Useful for aggregations, e.g. `{ attributes: { include: [[sequelize.fn('COUNT', sequelize.col('id')), 'total']] }`
	 * @param  {Array<String>}             [options.attributes.exclude] Select all the attributes of the model, except some few. Useful for security purposes e.g. `{ attributes: { exclude: ['password'] } }`
	 * @param  {Boolean}                   [options.paranoid=true] If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will be returned. Only applies if `options.paranoid` is true for the model.
	 * @param  {Array<Object|Model>}       [options.include] A list of associations to eagerly load using a left join. Supported is either `{ include: [ Model1, Model2, ...]}` or `{ include: [{ model: Model1, as: 'Alias' }]}`. If your association are set up with an `as` (eg. `X.hasMany(Y, { as: 'Z }`, you need to specify Z in the as attribute when eager loading Y).
	 * @param  {Model}                     [options.include[].model] The model you want to eagerly load
	 * @param  {String}                    [options.include[].as] The alias of the relation, in case the model you want to eagerly load is aliased. For `hasOne` / `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural
	 * @param  {Association}               [options.include[].association] The association you want to eagerly load. (This can be used instead of providing a model/as pair)
	 * @param  {Object}                    [options.include[].where] Where clauses to apply to the child models. Note that this converts the eager load to an inner join, unless you explicitly set `required: false`
	 * @param  {Boolean}                   [options.include[].or=false] Whether to bind the ON and WHERE clause together by OR instead of AND.
	 * @param  {Object}                    [options.include[].on] Supply your own ON condition for the join.
	 * @param  {Array<String>}             [options.include[].attributes] A list of attributes to select from the child model
	 * @param  {Boolean}                   [options.include[].required] If true, converts to an inner join, which means that the parent model will only be loaded if it has any matching children. True if `include.where` is set, false otherwise.
	 * @param  {Boolean}                   [options.include[].separate] If true, runs a separate query to fetch the associated instances, only supported for hasMany associations
	 * @param  {Number}                    [options.include[].limit] Limit the joined rows, only supported with include.separate=true
	 * @param  {Object}                    [options.include[].through.where] Filter on the join model for belongsToMany relations
	 * @param  {Array}                     [options.include[].through.attributes] A list of attributes to select from the join model for belongsToMany relations
	 * @param  {Array<Object|Model>}       [options.include[].include] Load further nested related models
	 * @param  {String|Array|Sequelize.fn} [options.order] Specifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide several columns / functions to order by. Each element can be further wrapped in a two-element array. The first element is the column / function to order by, the second is the direction. For example: `order: [['name', 'DESC']]`. In this way the column will be escaped, but the direction will not.
	 * @param  {Number}                    [options.limit]
	 * @param  {Number}                    [options.offset]
	 * @param  {Transaction}               [options.transaction] Transaction to run query under
	 * @param  {String|Object}             [options.lock] Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See [transaction.LOCK for an example](transaction#lock)
	 * @param  {Boolean}                   [options.raw] Return raw result. See sequelize.query for more information.
	 * @param  {Function}                  [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}                   [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param  {Object}                    [options.having]
	 * @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 * @param  {Boolean|Error Instance}    [options.rejectOnEmpty=false] Throws an error when no records found
	 *
	 * @see    {Sequelize#query}
	 * @return {Promise<Array<Instance>>}
	 * @alias all
	 */

	Model.prototype.findAll = function(options) {
	  if (options !== undefined && !_.isPlainObject(options)) {
	    throw new Error('The argument passed to findAll must be an options object, use findById if you wish to pass a single primary key value');
	  }
	  // TODO: Remove this in the next major version (4.0)
	  if (arguments.length > 1) {
	    throw new Error('Please note that find* was refactored and uses only one options object from now on.');
	  }
	  var tableNames = {}
	    , originalOptions;

	  tableNames[this.getTableName(options)] = true;
	  options = Utils.cloneDeep(options);

	  _.defaults(options, { hooks: true, rejectOnEmpty: this.options.rejectOnEmpty });

	    //set rejectOnEmpty option from model config
	    options.rejectOnEmpty = options.rejectOnEmpty || this.options.rejectOnEmpty;

	  return Promise.bind(this).then(function() {
	    conformOptions(options, this);
	    this.$injectScope(options);

	    if (options.hooks) {
	      return this.runHooks('beforeFind', options);
	    }
	  }).then(function() {
	    expandIncludeAll.call(this, options);

	    if (options.hooks) {
	      return this.runHooks('beforeFindAfterExpandIncludeAll', options);
	    }
	  }).then(function() {
	    if (options.include) {
	      options.hasJoin = true;

	      validateIncludedElements.call(this, options, tableNames);

	      // If we're not raw, we have to make sure we include the primary key for deduplication
	      if (options.attributes && !options.raw && this.primaryKeyAttribute &&  options.attributes.indexOf(this.primaryKeyAttribute) === -1) {
	        options.originalAttributes = options.attributes;
	        options.attributes = [this.primaryKeyAttribute].concat(options.attributes);
	      }
	    }

	    if (!options.attributes) {
	      options.attributes = Object.keys(this.tableAttributes);
	    }

	    // whereCollection is used for non-primary key updates
	    this.options.whereCollection = options.where || null;

	    Utils.mapFinderOptions(options, this);

	    options = paranoidClause(this, options);

	    if (options.hooks) {
	      return this.runHooks('beforeFindAfterOptions', options);
	    }
	  }).then(function() {
	    originalOptions = Utils.cloneDeep(options);
	    options.tableNames = Object.keys(tableNames);
	    return this.QueryInterface.select(this, this.getTableName(options), options);
	  }).tap(function(results) {
	    if (options.hooks) {
	      return this.runHooks('afterFind', results, options);
	    }
	  }).then(function (results) {

	    //rejectOnEmpty mode
	    if (_.isEmpty(results) && options.rejectOnEmpty) {
	      if (typeof options.rejectOnEmpty === 'function') {
	        throw new options.rejectOnEmpty();
	      } else if (typeof options.rejectOnEmpty === 'object') {
	        throw options.rejectOnEmpty;
	      } else {
	        throw new sequelizeErrors.EmptyResultError();
	      }
	    }

	    return Model.$findSeparate(results, originalOptions);
	  });
	};

	Model.$findSeparate = function(results, options) {
	  if (!options.include || options.raw || !results) return Promise.resolve(results);

	  var original = results;
	  if (options.plain) results = [results];

	  if (!results.length) return original;

	  return Promise.map(options.include, function (include) {
	    if (!include.separate) {
	      return Model.$findSeparate(
	        results.reduce(function (memo, result) {
	          var associations = result.get(include.association.as);

	          // Might be an empty belongsTo relation
	          if (!associations) return memo;

	          // Force array so we can concat no matter if it's 1:1 or :M
	          if (!Array.isArray(associations)) associations = [associations];

	          return memo.concat(associations);
	        }, []),
	        _.assign(
	          {},
	          _.omit(options, 'include', 'attributes', 'order', 'where', 'limit', 'plain', 'scope'),
	          {include: include.include || []}
	        )
	      );
	    }

	    return include.association.get(results, _.assign(
	      {},
	      _.omit(options, 'include', 'attributes', 'order', 'where', 'limit', 'plain'),
	      _.omit(include, 'parent', 'association', 'as')
	    )).then(function (map) {
	      results.forEach(function (result) {
	        result.set(
	          include.association.as,
	          map[result.get(include.association.source.primaryKeyAttribute)],
	          {
	            raw: true
	          }
	        );
	      });
	    });
	  }).return(original);
	};

	/**
	* Search for a single instance by its primary key.
	*
	* @param  {Number|String|Buffer}      id The value of the desired instance's primary key.
	* @param  {Object}                    [options]
	* @param  {Transaction}               [options.transaction] Transaction to run query under
	* @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	*
	* @see {Model#findAll}           for a full explanation of options
	* @return {Promise<Instance>}
	* @alias findByPrimary
	*/
	Model.prototype.findById = function(param, options) {
	  // return Promise resolved with null if no arguments are passed
	  if ([null, undefined].indexOf(param) !== -1) {
	    return Promise.resolve(null);
	  }

	  options = Utils.cloneDeep(options) || {};

	  if (typeof param === 'number' || typeof param === 'string' || Buffer.isBuffer(param)) {
	    options.where = {};
	    options.where[this.primaryKeyAttribute] = param;
	  } else {
	    throw new Error('Argument passed to findById is invalid: '+param);
	  }

	  // Bypass a possible overloaded findOne
	  return Model.prototype.findOne.call(this, options);
	};
	Model.prototype.findByPrimary = Model.prototype.findById;

	/**
	* Search for a single instance. This applies LIMIT 1, so the listener will always be called with a single instance.
	*
	* @param  {Object}                    [options] A hash of options to describe the scope of the search
	* @param  {Transaction}               [options.transaction] Transaction to run query under
	* @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	*
	* @see {Model#findAll}           for an explanation of options
	* @return {Promise<Instance>}
	* @alias find
	*/
	Model.prototype.findOne = function(options) {
	  if (options !== undefined && !_.isPlainObject(options)) {
	    throw new Error('The argument passed to findOne must be an options object, use findById if you wish to pass a single primary key value');
	  }
	  options = Utils.cloneDeep(options);

	  if (options.limit === undefined) {
	    var pkVal = options.where && options.where[this.primaryKeyAttribute];

	    // Don't add limit if querying directly on the pk
	    if (!options.where || !(Utils.isPrimitive(pkVal) || Buffer.isBuffer(pkVal))) {
	      options.limit = 1;
	    }
	  }

	  // Bypass a possible overloaded findAll.
	  return Model.prototype.findAll.call(this, _.defaults(options, {
	    plain: true,
	    rejectOnEmpty: false
	  }));
	};
	Model.prototype.find = Model.prototype.findOne;

	/**
	 * Run an aggregation method on the specified field
	 *
	 * @param {String}          field The field to aggregate over. Can be a field name or *
	 * @param {String}          aggregateFunction The function to use for aggregation, e.g. sum, max etc.
	 * @param {Object}          [options] Query options. See sequelize.query for full options
	 * @param {Object}          [options.where] A hash of search attributes.
	 * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}         [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param {DataType|String} [options.dataType] The type of the result. If `field` is a field in this Model, the default will be the type of that field, otherwise defaults to float.
	 * @param {boolean}         [options.distinct] Applies DISTINCT to the field being aggregated over
	 * @param {Transaction}     [options.transaction] Transaction to run query under
	 * @param {Boolean}         [options.plain] When `true`, the first returned value of `aggregateFunction` is cast to `dataType` and returned. If additional attributes are specified, along with `group` clauses, set `plain` to `false` to return all values of all returned rows.  Defaults to `true`
	 *
	 * @return {Promise<options.dataType|object>}                Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in which case the complete data result is returned.
	 */
	Model.prototype.aggregate = function(attribute, aggregateFunction, options) {
	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, { attributes: [] });
	  conformOptions(options, this);
	  this.$injectScope(options);

	  if (options.include) {
	    expandIncludeAll.call(this, options);
	    validateIncludedElements.call(this, options);
	  }

	  var attrOptions = this.rawAttributes[attribute]
	    , field = attrOptions && attrOptions.field || attribute
	    , aggregateColumn = this.sequelize.col(field);

	  if (options.distinct) {
	    aggregateColumn = this.sequelize.fn('DISTINCT', aggregateColumn);
	  }
	  options.attributes.push([this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]);

	  if (!options.dataType) {
	    if (attrOptions) {
	      options.dataType = attrOptions.type;
	    } else {
	      // Use FLOAT as fallback
	      options.dataType = new DataTypes.FLOAT();
	    }
	  } else {
	    options.dataType = this.sequelize.normalizeDataType(options.dataType);
	  }

	  Utils.mapOptionFieldNames(options, this);
	  options = paranoidClause(this, options);

	  return this.QueryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);
	};

	/**
	 * Count the number of records matching the provided where clause.
	 *
	 * If you provide an `include` option, the number of matching associations will be counted instead.
	 *
	 * @param {Object}        [options]
	 * @param {Object}        [options.where] A hash of search attributes.
	 * @param {Object}        [options.include] Include options. See `find` for details
	 * @param {boolean}       [options.distinct] Apply COUNT(DISTINCT(col)) on primary key, `Model.aggregate` should be used for other columns
	 * @param {Object}        [options.attributes] Used in conjunction with `group`
	 * @param {Object}        [options.group] For creating complex counts. Will return multiple rows as needed.
	 * @param {Transaction}   [options.transaction] Transaction to run query under
	 * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param {String}        [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<Integer>}
	 */
	Model.prototype.count = function(options) {
	  return Promise.bind(this).then(function() {
	    options = _.defaults(Utils.cloneDeep(options), { hooks: true });
	    if (options.hooks) {
	      return this.runHooks('beforeCount', options);
	    }
	  }).then(function() {
	    var col = options.include ? this.name + '.' + this.primaryKeyField : '*';

	    options.plain = !options.group;
	    options.dataType = new DataTypes.INTEGER();
	    options.includeIgnoreAttributes = false;

	    // No limit, offset, order or attributes for the options max be given to count()
	    // Set them to null to prevent scopes setting those values
	    options.limit = null;
	    options.offset = null;
	    options.order = null;

	    return this.aggregate(col, 'count', options);
	  });
	};

	/**
	 * Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging
	 *
	 * ```js
	 * Model.findAndCountAll({
	 *   where: ...,
	 *   limit: 12,
	 *   offset: 12
	 * }).then(function (result) {
	 *   ...
	 * })
	 * ```
	 * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.
	 *
	 * When you add includes, only those which are required (either because they have a where clause, or because `required` is explicitly set to true on the include) will be added to the count part.
	 *
	 * Suppose you want to find all users who have a profile attached:
	 * ```js
	 * User.findAndCountAll({
	 *   include: [
	 *      { model: Profile, required: true}
	 *   ],
	 *   distinct: true,
	 *   limit 3
	 * });
	 * ```
	 * Because the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted
	 *
	 * @param {Object} [findOptions] See findAll
	 *
	 * @see {Model#findAll} for a specification of find and query options
	 * @return {Promise<Object>}
	 * @alias findAndCountAll
	 */
	Model.prototype.findAndCount = function(options) {
	  if (options !== undefined && !_.isPlainObject(options)) {
	    throw new Error('The argument passed to findAndCount must be an options object, use findById if you wish to pass a single primary key value');
	  }

	  var self = this;
	  var countOptions = Utils.cloneDeep(options);
	  if (countOptions.attributes) {
	    countOptions.attributes = undefined;
	  }
	  return self.count(countOptions).then(function(count) {
	    if (count === 0) {
	      return {
	        count: count || 0,
	        rows: []
	      };
	    }
	    return self.findAll(options).then(function(results) {
	      return {
	        count: count || 0,
	        rows: results
	      };
	    });
	  });
	};
	Model.prototype.findAndCountAll = Model.prototype.findAndCount;


	/**
	 * Find the maximum value of field
	 *
	 * @param {String} field
	 * @param {Object} [options] See aggregate
	 * @see {Model#aggregate} for options
	 *
	 * @return {Promise<Any>}
	 */
	Model.prototype.max = function(field, options) {
	  return this.aggregate(field, 'max', options);
	};

	/**
	 * Find the minimum value of field
	 *
	 * @param {String} field
	 * @param {Object} [options] See aggregate
	 * @see {Model#aggregate} for options
	 *
	 * @return {Promise<Any>}
	 */
	Model.prototype.min = function(field, options) {
	  return this.aggregate(field, 'min', options);
	};

	/**
	 * Find the sum of field
	 *
	 * @param {String} field
	 * @param {Object} [options] See aggregate
	 * @see {Model#aggregate} for options
	 *
	 * @return {Promise<Number>}
	 */
	Model.prototype.sum = function(field, options) {
	  return this.aggregate(field, 'sum', options);
	};

	/**
	 * Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.

	 * @param {Object}  values
	 * @param {Object}  [options]
	 * @param {Boolean} [options.raw=false] If set to true, values will ignore field and virtual setters.
	 * @param {Boolean} [options.isNewRecord=true]
	 * @param {Array}   [options.include] an array of include options - Used to build prefetched/included model instances. See `set`
	 *
	 * @return {Instance}
	 */
	Model.prototype.build = function(values, options) { // testhint options:none
	  if (Array.isArray(values)) {
	    return this.bulkBuild(values, options);
	  }
	  options = _.extend({
	    isNewRecord: true,
	    $schema: this.$schema,
	    $schemaDelimiter: this.$schemaDelimiter
	  }, options || {});

	  if (options.attributes) {
	    options.attributes = options.attributes.map(function(attribute) {
	      return Array.isArray(attribute) ? attribute[1] : attribute;
	    });
	  }

	  if (!options.includeValidated) {
	    conformOptions(options, this);
	    if (options.include) {
	      expandIncludeAll.call(this, options);
	      validateIncludedElements.call(this, options);
	    }
	  }

	  return new this.Instance(values, options);
	};


	Model.prototype.bulkBuild = function(valueSets, options) { // testhint options:none
	  options = _.extend({
	    isNewRecord: true
	  }, options || {});

	  if (!options.includeValidated) {
	    conformOptions(options, this);
	    if (options.include) {
	      expandIncludeAll.call(this, options);
	      validateIncludedElements.call(this, options);
	    }
	  }

	  if (options.attributes) {
	    options.attributes = options.attributes.map(function(attribute) {
	      return Array.isArray(attribute) ? attribute[1] : attribute;
	    });
	  }

	  return valueSets.map(function(values) {
	    return this.build(values, options);
	  }.bind(this));
	};

	/**
	 * Builds a new model instance and calls save on it.

	 * @see {Instance#build}
	 * @see {Instance#save}
	 *
	 * @param {Object}        values
	 * @param {Object}        [options]
	 * @param {Boolean}       [options.raw=false] If set to true, values will ignore field and virtual setters.
	 * @param {Boolean}       [options.isNewRecord=true]
	 * @param {Array}         [options.fields] If set, only columns matching those in fields will be saved
	 * @param {Array}         [options.include] an array of include options - Used to build prefetched/included model instances
	 * @param {String}        [options.onDuplicate]
	 * @param {Transaction}   [options.transaction] Transaction to run query under
	 * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param {String}        [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<Instance>}
	 */
	Model.prototype.create = function(values, options) {
	  options = Utils.cloneDeep(options || {});

	  return this.build(values, {
	    isNewRecord: true,
	    attributes: options.fields,
	    include: options.include,
	    raw: options.raw,
	    silent: options.silent
	  }).save(options);
	};

	/**
	 * Find a row that matches the query, or build (but don't save) the row if none is found.
	 * The successful result of the promise will be (instance, initialized) - Make sure to use .spread()
	 *
	 * @param {Object}   options
	 * @param {Object}   options.where A hash of search attributes.
	 * @param {Object}   [options.defaults] Default values to use if building a new instance
	 * @param {Object}   [options.transaction] Transaction to run query under
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 *
	 * @return {Promise<Instance,initialized>}
	 * @alias findOrBuild
	 */
	Model.prototype.findOrInitialize = Model.prototype.findOrBuild = function(options) {
	  if (!options || !options.where || arguments.length > 1) {
	    throw new Error(
	      'Missing where attribute in the options parameter passed to findOrInitialize. ' +
	      'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'
	    );
	  }

	  var self = this
	    , values;

	  return self.find(options).then(function(instance) {
	    if (instance === null) {
	      values = Utils._.clone(options.defaults) || {};
	      if (Utils._.isPlainObject(options.where)) {
	        values = Utils._.defaults(values, options.where);
	      }

	      instance = self.build(values);

	      return Promise.resolve([instance, true]);
	    }

	    return Promise.resolve([instance, false]);
	  });
	};

	/**
	 * Find a row that matches the query, or build and save the row if none is found
	 * The successful result of the promise will be (instance, created) - Make sure to use .spread()
	 *
	 * If no transaction is passed in the `options` object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call.
	 * However, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize.TimeoutError will be thrown instead.
	 * If a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.
	 *
	 * @param {Object}      options
	 * @param {Object}      options.where where A hash of search attributes.
	 * @param {Object}      [options.defaults] Default values to use if creating a new instance
	 * @param {Transaction} [options.transaction] Transaction to run query under
	 * @see {Model#findAll} for a full specification of find and options
	 * @return {Promise<Instance,created>}
	 */
	Model.prototype.findOrCreate = function(options) {
	  if (!options || !options.where || arguments.length > 1) {
	    throw new Error(
	      'Missing where attribute in the options parameter passed to findOrCreate. '+
	      'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'
	    );
	  }

	  options = _.assign({}, options);

	  if (options.transaction === undefined && this.sequelize.constructor.cls) {
	    var t = this.sequelize.constructor.cls.get('transaction');
	    if (t) {
	      options.transaction = t;
	    }
	  }

	  var self = this
	    , internalTransaction = !options.transaction
	    , values
	    , whereFields = Object.keys(options.where)
	    , defaultFields
	    , transaction;

	  if (options.defaults) defaultFields = Object.keys(options.defaults);

	  // Create a transaction or a savepoint, depending on whether a transaction was passed in
	  return self.sequelize.transaction(options).bind({}).then(function (t) {
	    transaction = t;
	    options.transaction = t;

	    return self.findOne(_.defaults({
	      transaction: transaction
	    }, options));
	  }).then(function(instance) {
	    if (instance !== null) {
	      return [instance, false];
	    }

	    values = Utils._.clone(options.defaults) || {};
	    if (Utils._.isPlainObject(options.where)) {
	      values = _.defaults(values, options.where);
	    }

	    options.exception = true;

	    return self.create(values, options).bind(this).then(function(instance) {
	      if (instance.get(self.primaryKeyAttribute, { raw: true }) === null) {
	        // If the query returned an empty result for the primary key, we know that this was actually a unique constraint violation
	        throw new self.sequelize.UniqueConstraintError();
	      }

	      return [instance, true];
	    }).catch(self.sequelize.UniqueConstraintError, function (err) {
	      if (defaultFields) {
	        if (!_.intersection(err.fields, whereFields).length && _.intersection(err.fields, defaultFields).length) {
	          throw err;
	        }
	      }

	      // Someone must have created a matching instance inside the same transaction since we last did a find. Let's find it!
	      return self.findOne(_.defaults({
	        transaction: internalTransaction ? null : transaction
	      }, options)).then(function(instance) {
	        // Sanity check, ideally we caught this at the defaultFeilds/err.fields check
	        // But if we didn't and instance is null, we will throw
	        if (instance === null) throw err;
	        return [instance, false];
	      });
	    });
	  }).finally(function () {
	    if (internalTransaction && transaction) {
	      // If we created a transaction internally (and not just a savepoint), we should clean it up
	      return transaction.commit();
	    }
	  });
	};

	/**
	 * A more performant findOrCreate that will not work under a transaction (at least not in postgres)
	 * Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again
	 *
	 * @param {Object}      options
	 * @param {Object}      options.where where A hash of search attributes.
	 * @param {Object}      [options.defaults] Default values to use if creating a new instance
	 * @see {Model#findAll} for a full specification of find and options
	 * @return {Promise<Instance,created>}
	 */
	Model.prototype.findCreateFind = function(options) {
	  if (!options || !options.where) {
	    throw new Error(
	      'Missing where attribute in the options parameter passed to findOrCreate.'
	    );
	  }

	  var values = Utils._.clone(options.defaults) || {};
	  if (Utils._.isPlainObject(options.where)) {
	    values = _.defaults(values, options.where);
	  }


	  return this.findOne(options).bind(this).then(function (result) {
	    if (result) return [result, false];

	    return this.create(values, options).bind(this).then(function (result) {
	      return [result, true];
	    }).catch(this.sequelize.UniqueConstraintError, function (err) {
	      return this.findOne(options).then(function (result) {
	        return [result, false];
	      });
	    });
	  });
	};

	/**
	 * Insert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.
	 *
	 * **Implementation details:**
	 *
	 * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`
	 * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE
	 * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed regardless of whether the row already existed or not
	 * * MSSQL - Implemented as a single query using `MERGE` and `WHEN (NOT) MATCHED THEN`
	 * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.
	 *
	 * @param  {Object}       values
	 * @param  {Object}       [options]
	 * @param  {Boolean}      [options.validate=true] Run validations before the row is inserted
	 * @param  {Array}        [options.fields=Object.keys(this.attributes)] The fields to insert / update. Defaults to all fields
	 * @param  {Transaction}  [options.transaction] Transaction to run query under
	 * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @alias insertOrUpdate
	 * @return {Promise<created>} Returns a boolean indicating whether the row was created or updated.
	 */
	Model.prototype.upsert = function (values, options) {
	  options = Utils.cloneDeep(options) || {};

	  if (!options.fields) {
	    options.fields = Object.keys(this.attributes);
	  }

	  var createdAtAttr = this._timestampAttributes.createdAt
	    , updatedAtAttr = this._timestampAttributes.updatedAt
	    , hadPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values
	    , instance = this.build(values);

	  return instance.hookValidate(options).bind(this).then(function () {
	    // Map field names
	    var updatedDataValues = _.pick(instance.dataValues, Object.keys(instance._changed))
	      , insertValues = Utils.mapValueFieldNames(instance.dataValues, options.fields, this)
	      , updateValues = Utils.mapValueFieldNames(updatedDataValues, options.fields, this)
	      , now = Utils.now(this.sequelize.options.dialect);

	    // Attach createdAt
	    if (createdAtAttr && !updateValues[createdAtAttr]) {
	      insertValues[createdAtAttr] = this.$getDefaultTimestamp(createdAtAttr) || now;
	    }
	    if (updatedAtAttr && !insertValues[updatedAtAttr]) {
	      insertValues[updatedAtAttr] = updateValues[updatedAtAttr] = this.$getDefaultTimestamp(updatedAtAttr) || now;
	    }

	    // Build adds a null value for the primary key, if none was given by the user.
	    // We need to remove that because of some Postgres technicalities.
	    if (!hadPrimary && this.primaryKeyAttribute && !this.rawAttributes[this.primaryKeyAttribute].defaultValue) {
	      delete insertValues[this.primaryKeyField];
	      delete updateValues[this.primaryKeyField];
	    }

	    return this.QueryInterface.upsert(this.getTableName(options), insertValues, updateValues, instance.where(), this, options);
	  });
	};

	Model.prototype.insertOrUpdate = Model.prototype.upsert;

	/**
	 * Create and insert multiple instances in bulk.
	 *
	 * The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL
	 * and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.
	 * To obtain Instances for the newly created values, you will need to query for them again.
	 *
	 * @param  {Array}        records                          List of objects (key/value pairs) to create instances from
	 * @param  {Object}       [options]
	 * @param  {Array}        [options.fields]                 Fields to insert (defaults to all fields)
	 * @param  {Boolean}      [options.validate=false]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation
	 * @param  {Boolean}      [options.hooks=true]             Run before / after bulk create hooks?
	 * @param  {Boolean}      [options.individualHooks=false]  Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if options.hooks is true.
	 * @param  {Boolean}      [options.ignoreDuplicates=false] Ignore duplicate values for primary keys? (not supported by postgres)
	 * @param  {Array}        [options.updateOnDuplicate]      Fields to update if row key already exists (on duplicate key update)? (only supported by mysql & mariadb). By default, all fields are updated.
	 * @param  {Transaction}  [options.transaction] Transaction to run query under
	 * @param  {Function}     [options.logging=false]          A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param  {Boolean}      [options.returning=false] Append RETURNING * to get back auto generated values (Postgres only)
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<Array<Instance>>}
	 */
	Model.prototype.bulkCreate = function(records, options) {
	  if (!records.length) {
	    return Promise.resolve([]);
	  }

	  options = Utils._.extend({
	    validate: false,
	    hooks: true,
	    individualHooks: false,
	    ignoreDuplicates: false
	  }, options || {});

	  options.fields = options.fields || Object.keys(this.tableAttributes);

	  // Expose model to global hooks
	  options.model = this;

	  var dialect = this.sequelize.options.dialect;
	  if (options.ignoreDuplicates && ['postgres', 'mssql'].indexOf(dialect) !== -1) {
	    return Promise.reject(new Error(dialect + ' does not support the \'ignoreDuplicates\' option.'));
	  }
	  if (options.updateOnDuplicate && ['mysql', 'mariadb'].indexOf(dialect) === -1) {
	    return Promise.reject(new Error(dialect + ' does not support the \'updateOnDuplicate\' option.'));
	  }

	  if (options.updateOnDuplicate) {
	    // By default, all attributes except 'createdAt' can be updated
	    var updatableFields = Utils._.pull(Object.keys(this.tableAttributes), 'createdAt');
	    if (Utils._.isArray(options.updateOnDuplicate) && !Utils._.isEmpty(options.updateOnDuplicate)) {
	      updatableFields = Utils._.intersection(updatableFields, options.updateOnDuplicate);
	    }
	    options.updateOnDuplicate = updatableFields;
	  }

	  var self = this
	    , createdAtAttr = this._timestampAttributes.createdAt
	    , updatedAtAttr = this._timestampAttributes.updatedAt
	    , now = Utils.now(self.modelManager.sequelize.options.dialect);

	  var instances = records.map(function(values) {
	    return self.build(values, {isNewRecord: true});
	  });

	  return Promise.try(function() {
	    // Run before hook
	    if (options.hooks) {
	      return self.runHooks('beforeBulkCreate', instances, options);
	    }
	  }).then(function() {
	    // Validate
	    if (options.validate) {
	      var errors = [];
	      return Promise.map(instances, function(instance) {
	        // hookValidate rejects with errors, validate returns with errors
	        if (options.individualHooks) {
	          return instance.hookValidate(options).catch(function (err) {
	            if (err) {
	              errors.push({record: instance, errors: err});
	            }
	          });
	        } else {
	          return instance.validate(options).then(function (err) {
	            if (err) {
	              errors.push({record: instance, errors: err});
	            }
	          });
	        }
	      }).then(function() {
	        delete options.skip;
	        if (errors.length) {
	          return Promise.reject(errors);
	        }
	      });
	    }
	  }).then(function() {
	    instances.forEach(function(instance) {
	      var values = Utils.mapValueFieldNames(instance.dataValues, options.fields, self);

	      // set createdAt/updatedAt attributes
	      if (createdAtAttr && !values[createdAtAttr]) {
	        values[createdAtAttr] = now;
	      }
	      if (updatedAtAttr && !values[updatedAtAttr]) {
	        values[updatedAtAttr] = now;
	      }

	      instance.dataValues = values;
	    });

	    if (options.individualHooks) {
	      // Create each instance individually
	      return Promise.map(instances, function(instance) {
	        var individualOptions = Utils._.clone(options);
	        delete individualOptions.fields;
	        delete individualOptions.individualHooks;
	        delete individualOptions.ignoreDuplicates;
	        individualOptions.validate = false;
	        individualOptions.hooks = true;

	        return instance.save(individualOptions);
	      }).then(function(_instances) {
	        instances = _instances;
	      });
	    } else {
	      // Create all in one query
	      // Recreate records from instances to represent any changes made in hooks or validation
	      records = instances.map(function(instance) {
	        return Utils._.omit(instance.dataValues, self._virtualAttributes);
	      });

	      // Map attributes for serial identification
	      var attributes = {};
	      for (var attr in self.tableAttributes) {
	        attributes[attr] = self.rawAttributes[attr];
	        if (self.rawAttributes[attr].field) {
	          attributes[self.rawAttributes[attr].field] = self.rawAttributes[attr];
	        }
	      }

	      return self.QueryInterface.bulkInsert(self.getTableName(options), records, options, attributes).then(function (results) {
	        if (Array.isArray(results)) {
	          results.forEach(function (result, i) {
	            instances[i].set(self.primaryKeyAttribute, result[self.rawAttributes[self.primaryKeyAttribute].field], {raw: true});
	            instances[i].isNewRecord = false;
	          });
	        }
	        return results;
	      });
	    }
	  }).then(function() {
	    // Run after hook
	    if (options.hooks) {
	      return self.runHooks('afterBulkCreate', instances, options);
	    }
	  }).then(function() {
	    return instances;
	  });
	};

	/**
	 * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).
	 *
	 * @param {object} [options] The options passed to Model.destroy in addition to truncate
	 * @param {Boolean|function} [options.transaction] Transaction to run query under
	 * @param {Boolean|function} [options.cascade = false] Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.
	 * @param {Transaction}      [options.transaction] Transaction to run query under
	 * @param {Boolean|function} [options.logging] A function that logs sql queries, or false for no logging
	 * @param {Boolean}          [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param {String}           [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise}
	 *
	 * @see {Model#destroy} for more information
	 */
	Model.prototype.truncate = function(options) {
	  options = Utils.cloneDeep(options) || {};
	  options.truncate = true;
	  return this.destroy(options);
	};

	/**
	 * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.
	 *
	 * @param  {Object}       options
	 * @param  {Object}       [options.where]                 Filter the destroy
	 * @param  {Boolean}      [options.hooks=true]            Run before / after bulk destroy hooks?
	 * @param  {Boolean}      [options.individualHooks=false] If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row
	 * @param  {Number}       [options.limit]                 How many rows to delete
	 * @param  {Boolean}      [options.force=false]           Delete instead of setting deletedAt to current timestamp (only applicable if `paranoid` is enabled)
	 * @param  {Boolean}      [options.truncate=false]        If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored
	 * @param  {Boolean}      [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.
	 * @param  {Boolean}      [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.
	 * @param  {Transaction}  [options.transaction] Transaction to run query under
	 * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @return {Promise<Integer>} The number of destroyed rows
	 */
	Model.prototype.destroy = function(options) {
	  var self = this
	    , instances;

	  if (!options || !(options.where || options.truncate)) {
	    throw new Error('Missing where or truncate attribute in the options parameter of model.destroy.');
	  }

	  if (!options.truncate && !_.isPlainObject(options.where) && !_.isArray(options.where) && options.where._isSequelizeMethod !== true) {
	    throw new Error('Expected plain object, array or sequelize method in the options.where parameter of model.destroy.');
	  }

	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, {
	    hooks: true,
	    individualHooks: false,
	    force: false,
	    cascade: false,
	    restartIdentity: false
	  });

	  options.type = QueryTypes.BULKDELETE;
	  this.$injectScope(options);

	  Utils.mapOptionFieldNames(options, this);
	  options.model = self;

	  return Promise.try(function() {
	    // Run before hook
	    if (options.hooks) {
	      return self.runHooks('beforeBulkDestroy', options);
	    }
	  }).then(function() {
	    // Get daos and run beforeDestroy hook on each record individually
	    if (options.individualHooks) {
	      return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark}).map(function(instance) {
	        return self.runHooks('beforeDestroy', instance, options).then(function() {
	          return instance;
	        });
	      }).then(function(_instances) {
	        instances = _instances;
	      });
	    }
	  }).then(function() {

	    // Run delete query (or update if paranoid)
	    if (self._timestampAttributes.deletedAt && !options.force) {
	      // Set query type appropriately when running soft delete
	      options.type = QueryTypes.BULKUPDATE;

	      var attrValueHash = {}
	        , deletedAtAttribute = self.rawAttributes[self._timestampAttributes.deletedAt]
	        , field = self.rawAttributes[self._timestampAttributes.deletedAt].field
	        , where = {};

	      where[field] = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

	      attrValueHash[field] = Utils.now(self.modelManager.sequelize.options.dialect);
	      return self.QueryInterface.bulkUpdate(self.getTableName(options), attrValueHash, _.defaults(where, options.where), options, self.rawAttributes);
	    } else {
	      return self.QueryInterface.bulkDelete(self.getTableName(options), options.where, options, self);
	    }
	  }).tap(function() {
	    // Run afterDestroy hook on each record individually
	    if (options.individualHooks) {
	      return Promise.map(instances, function(instance) {
	        return self.runHooks('afterDestroy', instance, options);
	      });
	    }
	  }).tap(function() {
	    // Run after hook
	    if (options.hooks) {
	      return self.runHooks('afterBulkDestroy', options);
	    }
	  }).then(function(affectedRows) {
	    return affectedRows;
	  });
	};

	/**
	 * Restore multiple instances if `paranoid` is enabled.
	 *
	 * @param  {Object}       options
	 * @param  {Object}       [options.where]                 Filter the restore
	 * @param  {Boolean}      [options.hooks=true]            Run before / after bulk restore hooks?
	 * @param  {Boolean}      [options.individualHooks=false] If set to true, restore will find all records within the where parameter and will execute before / after bulkRestore hooks on each row
	 * @param  {Number}       [options.limit]                 How many rows to undelete
	 * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param  {Transaction}  [options.transaction] Transaction to run query under
	 *
	 * @return {Promise<undefined>}
	 */
	Model.prototype.restore = function(options) {
	  if (!this._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');

	  options = Utils._.extend({
	    hooks: true,
	    individualHooks: false
	  }, options || {});

	  options.type = QueryTypes.RAW;

	  // Expose model to global hooks
	  options.model = this;

	  var self = this
	    , instances;

	  Utils.mapOptionFieldNames(options, this);

	  return Promise.try(function() {
	    // Run before hook
	    if (options.hooks) {
	      return self.runHooks('beforeBulkRestore', options);
	    }
	  }).then(function() {
	    // Get daos and run beforeRestore hook on each record individually
	    if (options.individualHooks) {
	      return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark, paranoid: false}).map(function(instance) {
	        return self.runHooks('beforeRestore', instance, options).then(function() {
	          return instance;
	        });
	      }).then(function(_instances) {
	        instances = _instances;
	      });
	    }
	  }).then(function() {
	    // Run undelete query
	    var attrValueHash = {}
	      , deletedAtCol = self._timestampAttributes.deletedAt
	      , deletedAtAttribute = self.rawAttributes[deletedAtCol]
	      , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

	    attrValueHash[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;
	    options.omitNull = false;
	    return self.QueryInterface.bulkUpdate(self.getTableName(options), attrValueHash, options.where, options, self._timestampAttributes.deletedAt);
	  }).tap(function() {
	    // Run afterDestroy hook on each record individually
	    if (options.individualHooks) {
	      return Promise.map(instances, function(instance) {
	        return self.runHooks('afterRestore', instance, options);
	      });
	    }
	  }).tap(function() {
	    // Run after hook
	    if (options.hooks) {
	      return self.runHooks('afterBulkRestore', options);
	    }
	  }).then(function(affectedRows) {
	    return affectedRows;
	  });
	};

	/**
	 * Update multiple instances that match the where options. The promise returns an array with one or two elements. The first element is always the number
	 * of affected rows, while the second element is the actual affected rows (only supported in postgres with `options.returning` true.)
	 *
	 * @param  {Object}       values
	 * @param  {Object}       options
	 * @param  {Object}       options.where                   Options to describe the scope of the search.
	 * @param  {Array}        [options.fields]                Fields to update (defaults to all fields)
	 * @param  {Boolean}      [options.validate=true]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation
	 * @param  {Boolean}      [options.hooks=true]            Run before / after bulk update hooks?
	 * @param  {Boolean}      [options.sideEffects=true] Whether or not to update the side effects of any virtual setters.
	 * @param  {Boolean}      [options.individualHooks=false] Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks
	 * @param  {Boolean}      [options.returning=false]       Return the affected rows (only for postgres)
	 * @param  {Number}       [options.limit]                 How many rows to update (only for mysql and mariadb)
	 * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
	 * @param  {Transaction}  [options.transaction] Transaction to run query under
	 * @param  {Boolean}      [options.silent=false] If true, the updatedAt timestamp will not be updated.
	 *
	 * @return {Promise<Array<affectedCount,affectedRows>>}
	 */
	Model.prototype.update = function(values, options) {
	  var self = this;

	  if (!options || !options.where) {
	    throw new Error('Missing where attribute in the options parameter passed to update.');
	  }

	  if (!_.isPlainObject(options.where) && !_.isArray(options.where) && options.where._isSequelizeMethod !== true) {
	    throw new Error('Expected plain object, array or sequelize method in the options.where parameter of model.update.');
	  }

	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, {
	    validate: true,
	    hooks: true,
	    individualHooks: false,
	    returning: false,
	    force: false,
	    sideEffects: true
	  });

	  options.type = QueryTypes.BULKUPDATE;

	  // Expose model to global hooks
	  options.model = this;

	  this.$injectScope(options);

	  // Clone values so it doesn't get modified for caller scope
	  values = _.clone(values);

	  // Remove values that are not in the options.fields
	  if (options.fields && options.fields instanceof Array) {
	    Object.keys(values).forEach(function(key) {
	      if (options.fields.indexOf(key) < 0) {
	        delete values[key];
	      }
	    });
	  } else {
	    var updatedAtAttr = this._timestampAttributes.updatedAt;
	    options.fields = _.intersection(Object.keys(values), Object.keys(this.tableAttributes));
	    if (updatedAtAttr && options.fields.indexOf(updatedAtAttr) === -1) {
	      options.fields.push(updatedAtAttr);
	    }
	  }

	  if (this._timestampAttributes.updatedAt && !options.silent) {
	    values[this._timestampAttributes.updatedAt] = this.$getDefaultTimestamp(this._timestampAttributes.updatedAt) || Utils.now(this.sequelize.options.dialect);
	  }

	  var instances
	    , valuesUse;

	  return Promise.try(function() {
	    // Validate
	    if (options.validate) {
	      var build = self.build(values);
	      build.set(self._timestampAttributes.updatedAt, values[self._timestampAttributes.updatedAt], { raw: true });

	      if (options.sideEffects) {
	        values = Utils._.assign(values, Utils._.pick(build.get(), build.changed()));
	        options.fields = Utils._.union(options.fields, Object.keys(values));
	      }

	      // We want to skip validations for all other fields
	      options.skip = Utils._.difference(Object.keys(self.attributes), Object.keys(values));
	      return build.hookValidate(options).then(function(attributes) {
	        options.skip = undefined;
	        if (attributes && attributes.dataValues) {
	          values = Utils._.pick(attributes.dataValues, Object.keys(values));
	        }
	      });
	    }
	    return null;
	  }).then(function() {
	    // Run before hook
	    if (options.hooks) {
	      options.attributes = values;
	      return self.runHooks('beforeBulkUpdate', options).then(function() {
	        values = options.attributes;
	        delete options.attributes;
	      });
	    }
	    return null;
	  }).then(function() {
	    valuesUse = values;

	    // Get instances and run beforeUpdate hook on each record individually
	    if (options.individualHooks) {
	      return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark}).then(function(_instances) {
	        instances = _instances;
	        if (!instances.length) {
	          return [];
	        }

	        // Run beforeUpdate hooks on each record and check whether beforeUpdate hook changes values uniformly
	        // i.e. whether they change values for each record in the same way
	        var changedValues
	          , different = false;

	        return Promise.map(instances, function(instance) {
	          // Record updates in instances dataValues
	          Utils._.extend(instance.dataValues, values);
	          // Set the changed fields on the instance
	          Utils._.forIn(valuesUse, function(newValue, attr) {
	            if (newValue !== instance._previousDataValues[attr]) {
	              instance.setDataValue(attr, newValue);
	            }
	          });

	          // Run beforeUpdate hook
	          return self.runHooks('beforeUpdate', instance, options).then(function() {
	            if (!different) {
	              var thisChangedValues = {};
	              Utils._.forIn(instance.dataValues, function(newValue, attr) {
	                if (newValue !== instance._previousDataValues[attr]) {
	                  thisChangedValues[attr] = newValue;
	                }
	              });

	              if (!changedValues) {
	                changedValues = thisChangedValues;
	              } else {
	                different = !Utils._.isEqual(changedValues, thisChangedValues);
	              }
	            }

	            return instance;
	          });
	        }).then(function(_instances) {
	          instances = _instances;

	          if (!different) {
	            var keys = Object.keys(changedValues);
	            // Hooks do not change values or change them uniformly
	            if (keys.length) {
	              // Hooks change values - record changes in valuesUse so they are executed
	              valuesUse = changedValues;
	              options.fields = Utils._.union(options.fields, keys);
	            }
	            return;
	          } else {
	            // Hooks change values in a different way for each record
	            // Do not run original query but save each record individually
	            return Promise.map(instances, function(instance) {
	              var individualOptions = Utils._.clone(options);
	              delete individualOptions.individualHooks;
	              individualOptions.hooks = false;
	              individualOptions.validate = false;

	              return instance.save(individualOptions);
	            }).tap(function(_instances) {
	              instances = _instances;
	            });
	          }
	        });
	      });
	    }
	  }).then(function(results) {
	    if (results) {
	      // Update already done row-by-row - exit
	      return [results.length, results];
	    }

	    valuesUse = Utils.mapValueFieldNames(valuesUse, options.fields, self);
	    options = Utils.mapOptionFieldNames(options, self);
	    options.hasTrigger =  self.options ? self.options.hasTrigger : false;

	    // Run query to update all rows
	    return self.QueryInterface.bulkUpdate(self.getTableName(options), valuesUse, options.where, options, self.tableAttributes).then(function(affectedRows) {
	      if (options.returning) {
	        instances = affectedRows;
	        return [affectedRows.length, affectedRows];
	      }

	      return [affectedRows];
	    });
	  }).tap(function(result) {
	    if (options.individualHooks) {
	      return Promise.map(instances, function(instance) {
	        return self.runHooks('afterUpdate', instance, options);
	      }).then(function() {
	        result[1] = instances;
	      });
	    }
	  }).tap(function() {
	    // Run after hook
	    if (options.hooks) {
	      options.attributes = values;
	      return self.runHooks('afterBulkUpdate', options).then(function() {
	        delete options.attributes;
	      });
	    }
	  }).then(function(result) {
	    // Return result in form [affectedRows, instances] (instances missed off if options.individualHooks != true)
	    return result;
	  });
	};

	/**
	 * Run a describe query on the table. The result will be return to the listener as a hash of attributes and their types.
	 *
	 * @return {Promise}
	 */
	Model.prototype.describe = function(schema, options) {
	  return this.QueryInterface.describeTable(this.tableName, _.assign({schema: schema || this.$schema || undefined}, options));
	};

	Model.prototype.$getDefaultTimestamp = function(attr) {
	  if (!!this.rawAttributes[attr] && !!this.rawAttributes[attr].defaultValue) {
	    return Utils.toDefaultValue(this.rawAttributes[attr].defaultValue);
	  }
	  return undefined;
	};

	Model.prototype.$expandAttributes = function (options) {
	  if (_.isPlainObject(options.attributes)) {
	    var attributes = Object.keys(this.rawAttributes);

	    if (options.attributes.exclude) {
	      attributes = attributes.filter(function (elem) {
	        return options.attributes.exclude.indexOf(elem) === -1;
	      });
	    }
	    if (options.attributes.include) {
	      attributes = attributes.concat(options.attributes.include);
	    }

	    options.attributes = attributes;
	  }
	};

	// Inject $scope into options. Includes should have been conformed (conformOptions) before calling this
	Model.prototype.$injectScope = function (options) {
	  var self = this;
	  var scope = Utils.cloneDeep(this.$scope);

	  var filteredScope = _.omit(scope, 'include'); // Includes need special treatment

	  _.defaults(options, filteredScope);
	  _.defaults(options.where, filteredScope.where);

	  if (scope.include) {
	    options.include = options.include || [];

	    // Reverse so we consider the latest include first.
	    // This is used if several scopes specify the same include - the last scope should take precedence
	    scope.include.reverse().forEach(function (scopeInclude) {
	      if (scopeInclude.all || !options.include.some(function matchesModelAndAlias(item) {
	        var isSameModel = item.model && item.model.name === scopeInclude.model.name;
	        if (!isSameModel || !item.as) return isSameModel;

	        if (scopeInclude.as) {
	          return item.as === scopeInclude.as;
	        } else {
	          var association = scopeInclude.association || self.getAssociation(scopeInclude.model, scopeInclude.as);
	          return association ? item.as === association.as : false;
	        }
	      })) {
	        options.include.push(scopeInclude);
	      }
	    });
	  }
	};

	Model.prototype.inspect = function() {
	  return this.name;
	};

	Utils._.extend(Model.prototype, associationsMixin);
	Hooks.applyTo(Model);

	module.exports = Model;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var Utils = __webpack_require__(122)
	  , BelongsTo = __webpack_require__(339)
	  , BelongsToMany = __webpack_require__(343)
	  , InstanceValidator = __webpack_require__(347)
	  , QueryTypes = __webpack_require__(349)
	  , sequelizeErrors = __webpack_require__(130)
	  , Dottie = __webpack_require__(350)
	  , Promise = __webpack_require__(335)
	  , _ = __webpack_require__(127)
	  , defaultsOptions = { raw: true };

	// private
	var initValues = function(values, options) {
	  var defaults
	    , key;

	  values = values && _.clone(values) || {};

	  if (options.isNewRecord) {
	    defaults = {};

	    if (this.Model._hasDefaultValues) {
	      defaults = _.mapValues(this.Model._defaultValues, function(valueFn) {
	        var value = valueFn();
	        return (value && value._isSequelizeMethod) ? value : _.cloneDeep(value);
	      });
	    }

	    // set id to null if not passed as value, a newly created dao has no id
	    // removing this breaks bulkCreate
	    // do after default values since it might have UUID as a default value
	    if (!defaults.hasOwnProperty(this.Model.primaryKeyAttribute)) {
	      defaults[this.Model.primaryKeyAttribute] = null;
	    }

	    if (this.Model._timestampAttributes.createdAt && defaults[this.Model._timestampAttributes.createdAt]) {
	      this.dataValues[this.Model._timestampAttributes.createdAt] = Utils.toDefaultValue(defaults[this.Model._timestampAttributes.createdAt]);
	      delete defaults[this.Model._timestampAttributes.createdAt];
	    }

	    if (this.Model._timestampAttributes.updatedAt && defaults[this.Model._timestampAttributes.updatedAt]) {
	      this.dataValues[this.Model._timestampAttributes.updatedAt] = Utils.toDefaultValue(defaults[this.Model._timestampAttributes.updatedAt]);
	      delete defaults[this.Model._timestampAttributes.updatedAt];
	    }

	    if (this.Model._timestampAttributes.deletedAt && defaults[this.Model._timestampAttributes.deletedAt]) {
	      this.dataValues[this.Model._timestampAttributes.deletedAt] = Utils.toDefaultValue(defaults[this.Model._timestampAttributes.deletedAt]);
	      delete defaults[this.Model._timestampAttributes.deletedAt];
	    }

	    if (Object.keys(defaults).length) {
	      for (key in defaults) {
	        if (values[key] === undefined) {
	          this.set(key, Utils.toDefaultValue(defaults[key]), defaultsOptions);
	          delete values[key];
	        }
	      }
	    }
	  }

	  this.set(values, options);
	};

	/**
	 * This class represents an single instance, a database row. You might see it referred to as both Instance and instance. You should not
	 * instantiate the Instance class directly, instead you access it using the finder and creation methods on the model.
	 *
	 * Instance instances operate with the concept of a `dataValues` property, which stores the actual values represented by the instance.
	 * By default, the values from dataValues can also be accessed directly from the Instance, that is:
	 * ```js
	 * instance.field
	 * // is the same as
	 * instance.get('field')
	 * // is the same as
	 * instance.getDataValue('field')
	 * ```
	 * However, if getters and/or setters are defined for `field` they will be invoked, instead of returning the value from `dataValues`.
	 * Accessing properties directly or using `get` is preferred for regular use, `getDataValue` should only be used for custom getters.
	 *
	 * @see {Sequelize#define} for more information about getters and setters
	 * @class Instance
	 */
	var Instance = function(values, options) {
	  this.dataValues = {};
	  this._previousDataValues = {};
	  this._changed = {};
	  this.$modelOptions = this.Model.options;
	  this.$options = options || {};
	  this.hasPrimaryKeys = this.Model.options.hasPrimaryKeys;
	  this.__eagerlyLoadedAssociations = [];
	  /**
	   * Returns true if this instance has not yet been persisted to the database
	   * @property isNewRecord
	   * @return {Boolean}
	   */
	  this.isNewRecord = options.isNewRecord;

	  /**
	   * Returns the Model the instance was created from.
	   * @see {Model}
	   * @property Model
	   * @return {Model}
	   */

	  initValues.call(this, values, options);
	};

	/**
	 * A reference to the sequelize instance
	 * @see {Sequelize}
	 * @property sequelize
	 * @return {Sequelize}
	 */
	Object.defineProperty(Instance.prototype, 'sequelize', {
	  get: function() { return this.Model.modelManager.sequelize; }
	});

	/**
	 * Get an object representing the query for this instance, use with `options.where`
	 *
	 * @property where
	 * @return {Object}
	 */
	Instance.prototype.where = function() {
	  var where;

	  where = this.Model.primaryKeyAttributes.reduce(function (result, attribute) {
	    result[attribute] = this.get(attribute, {raw: true});
	    return result;
	  }.bind(this), {});

	  if (_.size(where) === 0) {
	    return this.$modelOptions.whereCollection;
	  }
	  return Utils.mapWhereFieldNames(where, this.$Model);
	};

	Instance.prototype.toString = function () {
	  return '[object SequelizeInstance:'+this.Model.name+']';
	};

	/**
	 * Get the value of the underlying data value
	 *
	 * @param {String} key
	 * @return {any}
	 */
	Instance.prototype.getDataValue = function(key) {
	  return this.dataValues[key];
	};

	/**
	 * Update the underlying data value
	 *
	 * @param {String} key
	 * @param {any} value
	 */
	Instance.prototype.setDataValue = function(key, value) {
	  var originalValue = this._previousDataValues[key];
	  if (!Utils.isPrimitive(value) || value !== originalValue) {
	    this.changed(key, true);
	  }

	  this.dataValues[key] = value;
	};

	/**
	 * If no key is given, returns all values of the instance, also invoking virtual getters.
	 *
	 * If key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.
	 *
	 * @param {String} [key]
	 * @param {Object} [options]
	 * @param {Boolean} [options.plain=false] If set to true, included instances will be returned as plain objects
	 * @return {Object|any}
	 */
	Instance.prototype.get = function(key, options) { // testhint options:none
	  if (options === undefined && typeof key === 'object') {
	    options = key;
	    key = undefined;
	  }

	  if (key) {
	    if (this._customGetters[key]) {
	      return this._customGetters[key].call(this, key);
	    }
	    if (options && options.plain && this.$options.include && this.$options.includeNames.indexOf(key) !== -1) {
	      if (Array.isArray(this.dataValues[key])) {
	        return this.dataValues[key].map(function (instance) {
	          return instance.get({plain: options.plain});
	        });
	      } else if (this.dataValues[key] instanceof Instance) {
	        return this.dataValues[key].get({plain: options.plain});
	      } else {
	        return this.dataValues[key];
	      }
	    }
			return this.dataValues[key];
	  }

	  if (this._hasCustomGetters || (options && options.plain && this.$options.include) || (options && options.clone)) {
	    var values = {}
	      , _key;

	    if (this._hasCustomGetters) {
	      for (_key in this._customGetters) {
	        if (this._customGetters.hasOwnProperty(_key)) {
	          values[_key] = this.get(_key, options);
	        }
	      }
	    }

	    for (_key in this.dataValues) {
	      if (!values.hasOwnProperty(_key) && this.dataValues.hasOwnProperty(_key)) {
	        values[_key] = this.get(_key, options);
	      }
	    }
	    return values;
	  }
	  return this.dataValues;
	};

	/**
	 * Set is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call `save`).
	 * In its most basic form `set` will update a value stored in the underlying `dataValues` object. However, if a custom setter function is defined for the key, that function
	 * will be called instead. To bypass the setter, you can pass `raw: true` in the options object.
	 *
	 * If set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be
	 * set directly to the object passed, or used to extend dataValues, if dataValues already contain values.
	 *
	 * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).
	 *
	 * Set can also be used to build instances for associations, if you have values for those.
	 * When using set with associations you need to make sure the property key matches the alias of the association
	 * while also making sure that the proper include options have been set (from .build() or .find())
	 *
	 * If called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.
	 *
	 * @see {Model#find} for more information about includes
	 * @param {String|Object} key
	 * @param {any} value
	 * @param {Object} [options]
	 * @param {Boolean} [options.raw=false] If set to true, field and virtual setters will be ignored
	 * @param {Boolean} [options.reset=false] Clear all previously set data values
	 * @alias setAttributes
	 */
	Instance.prototype.set = function(key, value, options) { // testhint options:none
	  var values
	    , originalValue
	    , keys
	    , i
	    , length;

	  if (typeof key === 'object' && key !== null) {
	    values = key;
	    options = value || {};

	    if (options.reset) {
	      this.dataValues = {};
	    }

	    // If raw, and we're not dealing with includes or special attributes, just set it straight on the dataValues object
	    if (options.raw && !(this.$options && this.$options.include) && !(options && options.attributes) && !this.Model._hasBooleanAttributes && !this.Model._hasDateAttributes) {
	      if (Object.keys(this.dataValues).length) {
	        this.dataValues = _.extend(this.dataValues, values);
	      } else {
	        this.dataValues = values;
	      }
	      // If raw, .changed() shouldn't be true
	      this._previousDataValues = _.clone(this.dataValues);
	    } else {
	      // Loop and call set

	      if (options.attributes) {
	        keys = options.attributes;
	        if (this.Model._hasVirtualAttributes) {
	          keys = keys.concat(this.Model._virtualAttributes);
	        }

	        if (this.$options.includeNames) {
	          keys = keys.concat(this.$options.includeNames);
	        }

	        for (i = 0, length = keys.length; i < length; i++) {
	          if (values[keys[i]] !== undefined) {
	            this.set(keys[i], values[keys[i]], options);
	          }
	        }
	      } else {
	        for (key in values) {
	          this.set(key, values[key], options);
	        }
	      }

	      if (options.raw) {
	        // If raw, .changed() shouldn't be true
	        this._previousDataValues = _.clone(this.dataValues);
	      }
	    }
	  } else {
	    if (!options)
	      options = {};
	    if (!options.raw) {
	      originalValue = this.dataValues[key];
	    }

	    // If not raw, and there's a customer setter
	    if (!options.raw && this._customSetters[key]) {
	      this._customSetters[key].call(this, value, key);
	    } else {
	      // Check if we have included models, and if this key matches the include model names/aliases

	      if (this.$options && this.$options.include && this.$options.includeNames.indexOf(key) !== -1) {
	        // Pass it on to the include handler
	        this._setInclude(key, value, options);
	        return this;
	      } else {
	        // Bunch of stuff we won't do when its raw
	        if (!options.raw) {
	          // If attribute is not in model definition, return
	          if (!this._isAttribute(key)) {
	            if (key.indexOf('.') > -1 && this.Model._isJsonAttribute(key.split('.')[0])) {
	              var previousDottieValue = Dottie.get(this.dataValues, key);
	              if (!_.isEqual(previousDottieValue, value)) {
	                Dottie.set(this.dataValues, key, value);
	                this.changed(key.split('.')[0], true);
	              }
	            }
	            return this;
	          }

	          // If attempting to set primary key and primary key is already defined, return
	          if (this.Model._hasPrimaryKeys && originalValue && this.Model._isPrimaryKey(key)) {
	            return this;
	          }

	          // If attempting to set read only attributes, return
	          if (!this.isNewRecord && this.Model._hasReadOnlyAttributes && this.Model._isReadOnlyAttribute(key)) {
	            return this;
	          }

	          // Convert date fields to real date objects
	          if (this.Model._hasDateAttributes && this.Model._isDateAttribute(key) && !!value && !value._isSequelizeMethod) {
	            if (!(value instanceof Date)) {
	              value = new Date(value);
	            }
	            if (originalValue) {
	              if (!(originalValue instanceof Date)) {
	                originalValue = new Date(originalValue);
	              }
	              if (value.getTime() === originalValue.getTime()) {
	                return this;
	              }
	            }
	          }
	        }

	        // Convert boolean-ish values to booleans
	        if (this.Model._hasBooleanAttributes && this.Model._isBooleanAttribute(key) && value !== null && value !== undefined && !value._isSequelizeMethod) {
	          if (Buffer.isBuffer(value) && value.length === 1) {
	            // Bit fields are returned as buffers
	            value = value[0];
	          }

	          if (_.isString(value)) {
	            // Only take action on valid boolean strings.
	            value = (value === 'true') ? true : (value === 'false') ? false : value;

	          } else if (_.isNumber(value)) {
	            // Only take action on valid boolean integers.
	            value = (value === 1) ? true : (value === 0) ? false : value;
	          }
	        }

	        if (!options.raw && ((!Utils.isPrimitive(value) && value !== null) || value !== originalValue)) {
	          this._previousDataValues[key] = originalValue;
	          this.changed(key, true);
	        }
	        this.dataValues[key] = value;
	      }
	    }
	  }

	  return this;
	};

	Instance.prototype.setAttributes = function(updates) {
	  return this.set(updates);
	};

	/**
	 * If changed is called with a string it will return a boolean indicating whether the value of that key in `dataValues` is different from the value in `_previousDataValues`.
	 *
	 * If changed is called without an argument, it will return an array of keys that have changed.
	 *
	 * If changed is called without an argument and no keys have changed, it will return `false`.
	 *
	 * @param {String} [key]
	 * @return {Boolean|Array}
	 */
	Instance.prototype.changed = function(key, value) {
	  if (key) {
	    if (value !== undefined) {
	      this._changed[key] = value;
	      return this;
	    }
	    return this._changed[key] || false;
	  }

	  var changed = Object.keys(this.dataValues).filter(function(key) {
	    return this.changed(key);
	  }.bind(this));

	  return changed.length ? changed : false;
	};

	/**
	 * Returns the previous value for key from `_previousDataValues`.
	 *
	 * If called without a key, returns the previous values for all values which have changed
	 *
	 * @param {String} [key]
	 * @return {any|Array<any>}
	 */
	Instance.prototype.previous = function(key) {
	  if (key) {
	    return this._previousDataValues[key];
	  }

	  return _.pickBy(this._previousDataValues, function(value, key) {
	    return this.changed(key);
	  }.bind(this));
	};

	Instance.prototype._setInclude = function(key, value, options) {
	  if (!Array.isArray(value)) value = [value];
	  if (value[0] instanceof Instance) {
	    value = value.map(function(instance) {
	      return instance.dataValues;
	    });
	  }

	  var include = this.$options.includeMap[key]
	    , association = include.association
	    , self = this
	    , accessor = key
	    , childOptions
	    , primaryKeyAttribute  = include.model.primaryKeyAttribute
	    , isEmpty;

	  if (!isEmpty) {
	    childOptions = {
	      isNewRecord: this.isNewRecord,
	      include: include.include,
	      includeNames: include.includeNames,
	      includeMap: include.includeMap,
	      includeValidated: true,
	      raw: options.raw,
	      attributes: include.originalAttributes
	    };
	  }
	  if (include.originalAttributes === undefined || include.originalAttributes.length) {
	    if (association.isSingleAssociation) {
	      if (Array.isArray(value)) {
	        value = value[0];
	      }

	      isEmpty = (value && value[primaryKeyAttribute] === null) || (value === null);
	      self[accessor] = self.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);
	    } else {
	      isEmpty = value[0] && value[0][primaryKeyAttribute] === null;
	      self[accessor] = self.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);
	    }
	  }
	};

	/**
	 * Validate this instance, and if the validation passes, persist it to the database. It will only save changed fields, and do nothing if no fields have changed.
	 *
	 * On success, the callback will be called with this instance. On validation error, the callback will be called with an instance of `Sequelize.ValidationError`.
	 * This error will have a property for each of the fields for which validation failed, with the error message for that field.
	 *
	 * @param {Object} [options]
	 * @param {string[]} [options.fields] An optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.
	 * @param {Boolean} [options.silent=false] If true, the updatedAt timestamp will not be updated.
	 * @param {Boolean} [options.validate=true] If false, validations won't be run.
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Transaction} [options.transaction]
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<this|Errors.ValidationError>}
	 */
	Instance.prototype.save = function(options) {
	  if (arguments.length > 1) {
	    throw new Error('The second argument was removed in favor of the options object.');
	  }

	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, {
	    hooks: true,
	    validate: true
	  });

	  if (!options.fields) {
	    if (this.isNewRecord) {
	      options.fields = Object.keys(this.Model.attributes);
	    } else {
	      options.fields = _.intersection(this.changed(), Object.keys(this.Model.attributes));
	    }

	    options.defaultFields = options.fields;
	  }

	  if (options.returning === undefined) {
	    if (options.association) {
	      options.returning = false;
	    } else if (this.isNewRecord) {
	      options.returning = true;
	    }
	  }

	  var self = this
	    , primaryKeyName = this.Model.primaryKeyAttribute
	    , primaryKeyAttribute = primaryKeyName && this.Model.rawAttributes[primaryKeyName]
	    , updatedAtAttr = this.Model._timestampAttributes.updatedAt
	    , createdAtAttr = this.Model._timestampAttributes.createdAt
	    , hook = self.isNewRecord ? 'Create' : 'Update'
	    , wasNewRecord = this.isNewRecord
	    , now = Utils.now(this.sequelize.options.dialect);

	  if (updatedAtAttr && options.fields.length >= 1 && options.fields.indexOf(updatedAtAttr) === -1) {
	    options.fields.push(updatedAtAttr);
	  }

	  if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, {raw: true}))) {
	    // UpdateAtAttr might have been added as a result of Object.keys(Model.attributes). In that case we have to remove it again
	    Utils._.remove(options.fields, function(val) {
	      return val === updatedAtAttr;
	    });
	    updatedAtAttr = false;
	  }

	  if (this.isNewRecord === true) {
	    if (createdAtAttr && options.fields.indexOf(createdAtAttr) === -1) {
	      options.fields.push(createdAtAttr);
	    }

	    if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && options.fields.indexOf(primaryKeyName) < 0) {
	      options.fields.unshift(primaryKeyName);
	    }
	  }

	  if (this.isNewRecord === false) {
	    if (primaryKeyName && this.get(primaryKeyName, {raw: true}) === undefined) {
	      throw new Error('You attempted to save an instance with no primary key, this is not allowed since it would result in a global update');
	    }
	  }

	  if (updatedAtAttr && !options.silent && options.fields.indexOf(updatedAtAttr) !== -1) {
	    this.dataValues[updatedAtAttr] = this.Model.$getDefaultTimestamp(updatedAtAttr) || now;
	  }

	  if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {
	    this.dataValues[createdAtAttr] = this.Model.$getDefaultTimestamp(createdAtAttr) || now;
	  }

	  return Promise.bind(this).then(function() {
	    // Validate
	    if (options.validate) {
	      return Promise.bind(this).then(function () {
	        // hookValidate rejects with errors, validate returns with errors
	        if (options.hooks) return this.hookValidate(options);

	        return this.validate(options).then(function (err) {
	          if (err) throw err;
	        });
	      });
	    }
	  }).then(function() {
	    return Promise.bind(this).then(function() {
	      // Run before hook
	      if (options.hooks) {
	        var beforeHookValues = _.pick(this.dataValues, options.fields)
	          , afterHookValues
	          , hookChanged
	          , ignoreChanged = _.difference(this.changed(), options.fields); // In case of update where it's only supposed to update the passed values and the hook values

	        if (updatedAtAttr && options.fields.indexOf(updatedAtAttr) !== -1) {
	          ignoreChanged = _.without(ignoreChanged, updatedAtAttr);
	        }

	        return this.Model.runHooks('before' + hook, this, options).bind(this).then(function() {
	          if (options.defaultFields && !this.isNewRecord) {
	            afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));

	            hookChanged = [];
	            Object.keys(afterHookValues).forEach(function (key) {
	              if (afterHookValues[key] !== beforeHookValues[key]) {
	                hookChanged.push(key);
	              }
	            });

	            options.fields = _.uniq(options.fields.concat(hookChanged));
	          }

	          if (hookChanged) {
	            if (options.validate) {
	              // Validate again

	              options.skip = _.difference(Object.keys(this.Model.rawAttributes), hookChanged);
	              return Promise.bind(this).then(function () {
	                // hookValidate rejects with errors, validate returns with errors
	                if (options.hooks) return this.hookValidate(options);

	                return this.validate(options).then(function (err) {
	                  if (err) throw err;
	                });
	              }).then(function() {
	                delete options.skip;
	              });
	            }
	          }
	        });
	      }
	    }).then(function() {
	      if (!options.fields.length) return this;
	      if (!this.isNewRecord) return this;
	      if (!this.$options.include || !this.$options.include.length) return this;

	      // Nested creation for BelongsTo relations
	      return Promise.map(this.$options.include.filter(function (include) {
	        return include.association instanceof BelongsTo;
	      }), function (include) {
	        var instance = self.get(include.as);
	        if (!instance) return Promise.resolve();

	        var includeOptions =  _(Utils.cloneDeep(include))
	          .omit(['association'])
	          .defaults({
	            transaction: options.transaction,
	            logging: options.logging,
	            parentRecord: self
	          }).value();

	        return instance.save(includeOptions).then(function () {
	          return self[include.association.accessors.set](instance, {save: false, logging: options.logging});
	        });
	      });
	    })
	    .then(function() {
	      if (!options.fields.length) return this;
	      if (!this.changed() && !this.isNewRecord) return this;

	      var values = Utils.mapValueFieldNames(this.dataValues, options.fields, this.Model)
	        , query = null
	        , args = [];

	      if (self.isNewRecord) {
	        query = 'insert';
	        args = [self, self.$Model.getTableName(options), values, options];
	      } else {
	        var where = this.where();

	        where = Utils.mapValueFieldNames(where, Object.keys(where), this.Model);

	        query = 'update';
	        args = [self, self.$Model.getTableName(options), values, where, options];
	      }

	      return self.sequelize.getQueryInterface()[query].apply(self.sequelize.getQueryInterface(), args)
	        .then(function(result) {
	          // Transfer database generated values (defaults, autoincrement, etc)
	          Object.keys(self.Model.rawAttributes).forEach(function (attr) {
	            if (self.Model.rawAttributes[attr].field &&
	                values[self.Model.rawAttributes[attr].field] !== undefined &&
	                self.Model.rawAttributes[attr].field !== attr
	            ) {
	              values[attr] = values[self.Model.rawAttributes[attr].field];
	              delete values[self.Model.rawAttributes[attr].field];
	            }
	          });
	          values = _.extend(values, result.dataValues);

	          result.dataValues = _.extend(result.dataValues, values);
	          return result;
	        })
	        .tap(function(result) {
	          // Run after hook
	          if (options.hooks) {
	            return self.Model.runHooks('after' + hook, result, options);
	          }
	        })
	        .then(function(result) {
	          options.fields.forEach(function (field) {
	            result._previousDataValues[field] = result.dataValues[field];
	            self.changed(field, false);
	          });
	          self.isNewRecord = false;
	          return result;
	        })
	        .tap(function() {
	          if (!wasNewRecord) return self;
	          if (!self.$options.include || !self.$options.include.length) return self;

	          // Nested creation for HasOne/HasMany/BelongsToMany relations
	          return Promise.map(self.$options.include.filter(function (include) {
	            return !(include.association instanceof BelongsTo);
	          }), function (include) {
	            var instances = self.get(include.as);

	            if (!instances) return Promise.resolve();
	            if (!Array.isArray(instances)) instances = [instances];
	            if (!instances.length) return Promise.resolve();

	            var includeOptions =  _(Utils.cloneDeep(include))
	              .omit(['association'])
	              .defaults({
	                transaction: options.transaction,
	                logging: options.logging,
	                parentRecord: self
	              }).value();

	            // Instances will be updated in place so we can safely treat HasOne like a HasMany
	            return Promise.map(instances, function (instance) {
	              if (include.association instanceof BelongsToMany) {
	                return instance.save(includeOptions).then(function () {
	                  var values = {};
	                  values[include.association.foreignKey] = self.get(self.Model.primaryKeyAttribute, {raw: true});
	                  values[include.association.otherKey] = instance.get(instance.Model.primaryKeyAttribute, {raw: true});
	                  return include.association.throughModel.create(values, includeOptions);
	                });
	              } else {
	                instance.set(include.association.foreignKey, self.get(self.Model.primaryKeyAttribute, {raw: true}));
	                return instance.save(includeOptions);
	              }
	            });
	          });
	        });
	    });
	  });
	};

	/*
	* Refresh the current instance in-place, i.e. update the object with current data from the DB and return the same object.
	* This is different from doing a `find(Instance.id)`, because that would create and return a new instance. With this method,
	* all references to the Instance are updated with the new data and no new objects are created.
	*
	* @see {Model#find}
	* @param {Object} [options] Options that are passed on to `Model.find`
	* @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	* @return {Promise<this>}
	*/
	Instance.prototype.reload = function(options) {
	  options = _.defaults({}, options, {
	    where: this.where(),
	    include: this.$options.include || null
	  });

	  return this.Model.findOne(options).bind(this)
	  .tap(function (reload) {
	    if (!reload) {
	      throw new sequelizeErrors.InstanceError(
	        'Instance could not be reloaded because it does not exist anymore (find call returned null)'
	      );
	    }
	  })
	  .then(function(reload) {
	    // update the internal options of the instance
	    this.$options = reload.$options;
	    // re-set instance values
	    this.set(reload.dataValues, {
	      raw: true,
	      reset: true && !options.attributes
	    });
	  }).return(this);
	};

	/*
	 * Validate the attribute of this instance according to validation rules set in the model definition.
	 *
	 * Emits null if and only if validation successful; otherwise an Error instance containing { field name : [error msgs] } entries.
	 *
	 * @param {Object} [options] Options that are passed to the validator
	 * @param {Array} [options.skip] An array of strings. All properties that are in this array will not be validated
	 * @see {InstanceValidator}
	 *
	 * @return {Promise<undefined|Errors.ValidationError>}
	 */
	Instance.prototype.validate = function(options) {
	  return new InstanceValidator(this, options).validate();
	};

	Instance.prototype.hookValidate = function(options) {
	  return new InstanceValidator(this, options).hookValidate();
	};

	/**
	 * This is the same as calling `set` and then calling `save` but it only saves the
	 * exact values passed to it, making it more atomic and safer.
	 *
	 * @see {Instance#set}
	 * @see {Instance#save}
	 * @param {Object} updates See `set`
	 * @param {Object} options See `save`
	 *
	 * @return {Promise<this>}
	 * @alias updateAttributes
	 */
	Instance.prototype.update = function(values, options) {
	  var changedBefore = this.changed() || []
	    , sideEffects
	    , fields
	    , setOptions;

	  options = options || {};
	  if (Array.isArray(options)) options = {fields: options};

	  options = Utils.cloneDeep(options);
	  setOptions = Utils.cloneDeep(options);
	  setOptions.attributes = options.fields;
	  this.set(values, setOptions);

	  // Now we need to figure out which fields were actually affected by the setter.
	  sideEffects = _.without.apply(this, [this.changed() || []].concat(changedBefore));
	  fields = _.union(Object.keys(values), sideEffects);

	  if (!options.fields) {
	    options.fields = _.intersection(fields, this.changed());
	    options.defaultFields = options.fields;
	  }

	  return this.save(options);
	};
	Instance.prototype.updateAttributes = Instance.prototype.update;

	/**
	 * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.
	 *
	 * @param {Object}      [options={}]
	 * @param {Boolean}     [options.force=false] If set to true, paranoid models will actually be deleted
	 * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Transaction} [options.transaction]
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<undefined>}
	 */

	Instance.prototype.destroy = function(options) {
	  options = Utils._.extend({
	    hooks: true,
	    force: false
	  }, options);

	  return Promise.bind(this).then(function() {
	    // Run before hook
	    if (options.hooks) {
	      return this.Model.runHooks('beforeDestroy', this, options);
	    }
	  }).then(function() {
	    var where = this.where();

	    if (this.Model._timestampAttributes.deletedAt && options.force === false) {
	      var attribute = this.Model.rawAttributes[this.Model._timestampAttributes.deletedAt]
	        , field = attribute.field || this.Model._timestampAttributes.deletedAt
	        , values = {};

	      values[field] = new Date();
	      where[field] = attribute.hasOwnProperty('defaultValue') ? attribute.defaultValue : null;

	      this.setDataValue(field, values[field]);

	      return this.sequelize.getQueryInterface().update(this, this.$Model.getTableName(options), values, where, _.defaults({ hooks: false }, options));
	    } else {
	      return this.sequelize.getQueryInterface().delete(this, this.$Model.getTableName(options), where, _.assign({ type: QueryTypes.DELETE, limit: null }, options));
	    }
	  }).tap(function() {
	    // Run after hook
	    if (options.hooks) {
	      return this.Model.runHooks('afterDestroy', this, options);
	    }
	  }).then(function(result) {
	    return result;
	  });
	};

	/**
	 * Restore the row corresponding to this instance. Only available for paranoid models.
	 *
	 * @param {Object}      [options={}]
	 * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Transaction} [options.transaction]
	 *
	 * @return {Promise<undefined>}
	 */
	Instance.prototype.restore = function(options) {
	  if (!this.Model._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');

	  options = Utils._.extend({
	    hooks: true,
	    force: false
	  }, options);

	  return Promise.bind(this).then(function() {
	    // Run before hook
	    if (options.hooks) {
	      return this.Model.runHooks('beforeRestore', this, options);
	    }
	  }).then(function() {
	    var deletedAtCol = this.Model._timestampAttributes.deletedAt
	      , deletedAtAttribute = this.Model.rawAttributes[deletedAtCol]
	      , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

	    this.setDataValue(deletedAtCol, deletedAtDefaultValue);
	    return this.save(_.extend({}, options, {hooks : false, omitNull : false}));
	  }).tap(function() {
	    // Run after hook
	    if (options.hooks) {
	      return this.Model.runHooks('afterRestore', this, options);
	    }
	  });
	};

	/**
	 * Increment the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a
	 * ```sql
	 * SET column = column + X
	 * ```
	 * query. To get the correct value after an increment into the Instance you should do a reload.
	 *
	 *```js
	 * instance.increment('number') // increment number by 1
	 * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2
	 * instance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.
	 *                                                        // `by` is ignored, since each column has its own value
	 * ```
	 *
	 * @see {Instance#reload}
	 * @param {String|Array|Object} fields If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.
	 * @param {Object} [options]
	 * @param {Integer} [options.by=1] The number to increment by
	 * @param {Boolean} [options.silent=false] If true, the updatedAt timestamp will not be updated.
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Transaction} [options.transaction]
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise<this>}
	 */
	Instance.prototype.increment = function(fields, options) {
	  var identifier = this.where()
	    , updatedAtAttr = this.Model._timestampAttributes.updatedAt
	    , values = {}
	    , where;

	  options = _.defaults({}, options, {
	    by: 1,
	    attributes: {},
	    where: {}
	  });

	  where = _.extend({}, options.where, identifier);

	  if (Utils._.isString(fields)) {
	    values[fields] = options.by;
	  } else if (Utils._.isArray(fields)) {
	    Utils._.each(fields, function(field) {
	      values[field] = options.by;
	    });
	  } else { // Assume fields is key-value pairs
	    values = fields;
	  }

	  if (!options.silent && updatedAtAttr && !values[updatedAtAttr]) {
	    options.attributes[updatedAtAttr] = this.Model.$getDefaultTimestamp(updatedAtAttr) || Utils.now(this.sequelize.options.dialect);
	  }

	  Object.keys(values).forEach(function(attr) {
	    // Field name mapping
	    if (this.Model.rawAttributes[attr] && this.Model.rawAttributes[attr].field && this.Model.rawAttributes[attr].field !== attr) {
	      values[this.Model.rawAttributes[attr].field] = values[attr];
	      delete values[attr];
	    }
	  }, this);

	  return this.sequelize.getQueryInterface().increment(this, this.$Model.getTableName(options), values, where, options).return(this);
	};

	/**
	 * Decrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a
	 * ```sql
	 * SET column = column - X
	 * ```
	 * query. To get the correct value after an decrement into the Instance you should do a reload.
	 *
	 * ```js
	 * instance.decrement('number') // decrement number by 1
	 * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2
	 * instance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.
	 *                                                        // `by` is ignored, since each column has its own value
	 * ```
	 *
	 * @see {Instance#reload}
	 * @param {String|Array|Object} fields If a string is provided, that column is decremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is decremented by the value given
	 * @param {Object} [options]
	 * @param {Integer} [options.by=1] The number to decrement by
	 * @param {Boolean} [options.silent=false] If true, the updatedAt timestamp will not be updated.
	 * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
	 * @param {Transaction} [options.transaction]
	 * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
	 *
	 * @return {Promise}
	 */
	Instance.prototype.decrement = function(fields, options) {
	  options = _.defaults({}, options, {
	    by: 1
	  });

	  if (!Utils._.isString(fields) && !Utils._.isArray(fields)) { // Assume fields is key-value pairs
	    Utils._.each(fields, function(value, field) {
	      fields[field] = -value;
	    });
	  }

	  options.by = 0 - options.by;

	  return this.increment(fields, options);
	};

	/**
	 * Check whether all values of this and `other` Instance are the same
	 *
	 * @param {Instance} other
	 * @return {Boolean}
	 */
	Instance.prototype.equals = function(other) {
	  var result = true;

	  if (!other || !other.dataValues) {
	    return false;
	  }

	  Utils._.each(this.dataValues, function(value, key) {
	    if (Utils._.isDate(value) && Utils._.isDate(other.dataValues[key])) {
	      result = result && (value.getTime() === other.dataValues[key].getTime());
	    } else {
	      result = result && (value === other.dataValues[key]);
	    }
	  });

	  return result;
	};

	/**
	 * Check if this is equal to one of `others` by calling equals
	 *
	 * @param {Array} others
	 * @return {Boolean}
	 */
	Instance.prototype.equalsOneOf = function(others) {
	  var self = this;

	  return _.some(others, function(other) {
	    return self.equals(other);
	  });
	};

	Instance.prototype.setValidators = function(attribute, validators) {
	  this.validators[attribute] = validators;
	};

	/**
	 * Convert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all values gotten from the DB, and apply all custom getters.
	 *
	 * @see {Instance#get}
	 * @return {object}
	 */
	Instance.prototype.toJSON = function() {
	  return this.get({
	    plain: true
	  });
	};

	module.exports = Instance;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Helpers = __webpack_require__(340)
	  , _ = __webpack_require__(127)
	  , Transaction = __webpack_require__(341)
	  , Association = __webpack_require__(342)
	  , util = __webpack_require__(124);

	/**
	 * One-to-one association
	 *
	 * In the API reference below, replace `Assocation` with the actual name of your association, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.
	 *
	 * @mixin BelongsTo
	 */
	var BelongsTo = function(source, target, options) {
	  Association.call(this);

	  this.associationType = 'BelongsTo';
	  this.source = source;
	  this.target = target;
	  this.options = options;
	  this.scope = options.scope;
	  this.isSingleAssociation = true;
	  this.isSelfAssociation = (this.source === this.target);
	  this.as = this.options.as;
	  this.foreignKeyAttribute = {};

	  if (this.as) {
	    this.isAliased = true;
	    this.options.name = {
	      singular: this.as
	    };
	  } else {
	    this.as = this.target.options.name.singular;
	    this.options.name = this.target.options.name;
	  }

	  if (_.isObject(this.options.foreignKey)) {
	    this.foreignKeyAttribute = this.options.foreignKey;
	    this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
	  } else if (this.options.foreignKey) {
	    this.foreignKey = this.options.foreignKey;
	  }

	  if (!this.foreignKey) {
	    this.foreignKey = Utils.camelizeIf(
	      [
	        Utils.underscoredIf(this.as, this.source.options.underscored),
	        this.target.primaryKeyAttribute
	      ].join('_'),
	      !this.source.options.underscored
	    );
	  }

	  this.identifier = this.foreignKey;

	  if (this.source.rawAttributes[this.identifier]) {
	    this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;
	  }

	  this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;
	  this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;
	  this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;

	  this.targetIdentifier = this.targetKey;
	  this.associationAccessor = this.as;
	  this.options.useHooks = options.useHooks;

	  // Get singular name, trying to uppercase the first letter, unless the model forbids it
	  var singular = Utils.uppercaseFirst(this.options.name.singular);

	  this.accessors = {
	    /**
	     * Get the associated instance.
	     *
	     * @param {Object} [options]
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.
	     * @param {String} [options.schema] Apply a schema on the related model
	     * @return {Promise<Instance>}
	     * @method getAssociation
	     */
	    get: 'get' + singular,
	    /**
	     * Set the associated model.
	     *
	     * @param {Instance|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.
	     * @param {Object} [options] Options passed to `this.save`
	     * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.
	     * @return {Promise}
	     * @method setAssociation
	     */
	    set: 'set' + singular,
	    /**
	     * Create a new instance of the associated model and associate it with this.
	     *
	     * @param {Object} [values]
	     * @param {Object} [options] Options passed to `target.create` and setAssociation.
	     * @return {Promise}
	     * @method createAssociation
	     */
	    create: 'create' + singular
	  };
	};

	util.inherits(BelongsTo, Association);

	// the id is in the source table
	BelongsTo.prototype.injectAttributes = function() {
	  var newAttributes = {};

	  newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {
	    type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,
	    allowNull : true
	  });

	  if (this.options.constraints !== false) {
	    var source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
	    this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');
	    this.options.onUpdate = this.options.onUpdate || 'CASCADE';
	  }

	  Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);
	  Utils.mergeDefaults(this.source.rawAttributes, newAttributes);

	  this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;

	  this.source.refreshAttributes();

	  Helpers.checkNamingCollision(this);

	  return this;
	};

	BelongsTo.prototype.mixin = function(obj) {
	  var association = this;

	  obj[this.accessors.get] = function(options) {
	    return association.get(this, options);
	  };

	  association.injectSetter(obj);
	  association.injectCreator(obj);
	};

	BelongsTo.prototype.get = function(instances, options) {
	  var association = this
	    , Target = association.target
	    , instance
	    , where = {};

	  options = Utils.cloneDeep(options);

	  if (options.hasOwnProperty('scope')) {
	    if (!options.scope) {
	      Target = Target.unscoped();
	    } else {
	      Target = Target.scope(options.scope);
	    }
	  }

	  if (options.hasOwnProperty('schema')) {
	    Target = Target.schema(options.schema, options.schemaDelimiter);
	  }

	  if (!Array.isArray(instances)) {
	    instance = instances;
	    instances = undefined;
	  }

	  if (instances) {
	    where[association.targetKey] = {
	      $in: instances.map(function (instance) {
	        return instance.get(association.foreignKey);
	      })
	    };
	  } else {
	    if (association.targetKeyIsPrimary && !options.where) {
	      return Target.findById(instance.get(association.foreignKey), options);
	    } else {
	      where[association.targetKey] = instance.get(association.foreignKey);
	      options.limit = null;
	    }
	  }

	  options.where = options.where ?
	                  {$and: [where, options.where]} :
	                  where;

	  if (instances) {
	    return Target.findAll(options).then(function (results) {
	      var result = {};
	      instances.forEach(function (instance) {
	        result[instance.get(association.foreignKey, {raw: true})] = null;
	      });

	      results.forEach(function (instance) {
	        result[instance.get(association.targetKey, {raw: true})] = instance;
	      });

	      return result;
	    });
	  }
	  return Target.findOne(options);
	};

	// Add setAssociaton method to the prototype of the model instance
	BelongsTo.prototype.injectSetter = function(instancePrototype) {
	  var association = this;

	  instancePrototype[this.accessors.set] = function(associatedInstance, options) {
	    options = options || {};

	    var value = associatedInstance;
	    if (associatedInstance instanceof association.target.Instance) {
	      value = associatedInstance[association.targetKey];
	    }

	    this.set(association.foreignKey, value);

	    if (options.save === false) return;

	    options = _.extend({
	      fields: [association.foreignKey],
	      allowNull: [association.foreignKey],
	      association: true
	    }, options);


	    // passes the changed field to save, so only that field get updated.
	    return this.save(options);
	  };

	  return this;
	};

	// Add createAssociation method to the prototype of the model instance
	BelongsTo.prototype.injectCreator = function(instancePrototype) {
	  var association = this;

	  instancePrototype[this.accessors.create] = function(values, fieldsOrOptions) {
	    var instance = this
	      , options = {};

	    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {
	      options.transaction = fieldsOrOptions.transaction;
	    }
	    options.logging = (fieldsOrOptions || {}).logging;

	    return association.target.create(values, fieldsOrOptions).then(function(newAssociatedObject) {
	      return instance[association.accessors.set](newAssociatedObject, options);
	    });
	  };

	  return this;
	};

	module.exports = BelongsTo;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122);

	function checkNamingCollision (association) {
	  if (association.source.rawAttributes.hasOwnProperty(association.as)) {
	    throw new Error(
	      'Naming collision between attribute \'' + association.as +
	      '\' and association \'' + association.as + '\' on model ' + association.source.name +
	      '. To remedy this, change either foreignKey or as in your association definition'
	    );
	  }
	}

	function addForeignKeyConstraints (newAttribute, source, target, options, key) {
	  // FK constraints are opt-in: users must either set `foreignKeyConstraints`
	  // on the association, or request an `onDelete` or `onUpdate` behaviour

	  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {

	    // Find primary keys: composite keys not supported with this approach
	    var primaryKeys = Utils._.chain(source.rawAttributes).keys()
	      .filter(function($key) { return source.rawAttributes[$key].primaryKey; })
	      .map(function($key) { return source.rawAttributes[$key].field || $key; }).value();

	    if (primaryKeys.length === 1) {
	      if (!!source.$schema) {
	        newAttribute.references = {
	          model: source.modelManager.sequelize.queryInterface.QueryGenerator.addSchema({
	            tableName: source.tableName,
	            $schema: source.$schema,
	            $schemaDelimiter: source.$schemaDelimiter
	          })
	        };
	      } else {
	        newAttribute.references = { model: source.tableName };
	      }

	      newAttribute.references.key = key || primaryKeys[0];
	      newAttribute.onDelete = options.onDelete;
	      newAttribute.onUpdate = options.onUpdate;
	    }
	  }
	}

	module.exports = {
	  checkNamingCollision: checkNamingCollision,
	  addForeignKeyConstraints: addForeignKeyConstraints
	};


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , uuid = __webpack_require__(333);

	/**
	 * The transaction object is used to identify a running transaction. It is created by calling `Sequelize.transaction()`.
	 *
	 * To run a query under a transaction, you should pass the transaction in the options object.
	 * @class Transaction
	 * @constructor
	 *
	 * @param {Sequelize} sequelize A configured sequelize Instance
	 * @param {Object} options An object with options
	 * @param {Boolean} options.autocommit=true Sets the autocommit property of the transaction.
	 * @param {String} options.type=true Sets the type of the transaction.
	 * @param {String} options.isolationLevel=true Sets the isolation level of the transaction.
	 * @param {String} options.deferrable Sets the constraints to be deferred or immediately checked.
	 */
	var Transaction = module.exports = function(sequelize, options) {
	  this.sequelize = sequelize;
	  this.savepoints = [];
	  this.options = Utils._.extend({
	    autocommit: true,
	    type: sequelize.options.transactionType,
	    isolationLevel: sequelize.options.isolationLevel
	  }, options || {});

	  this.parent = this.options.transaction;
	  this.id = this.parent ? this.parent.id : uuid.v4();

	  if (this.parent) {
	    this.id = this.parent.id;
	    this.parent.savepoints.push(this);
	    this.name = this.id + '-savepoint-' + this.parent.savepoints.length;
	  } else {
	    this.id = this.name = uuid.v4();
	  }

	  delete this.options.transaction;
	};

	/**
	 * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.
	 * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.
	 * Sqlite only.
	 *
	 * The possible types to use when starting a transaction:
	 *
	 * ```js
	 * {
	 *   DEFERRED: "DEFERRED",
	 *   IMMEDIATE: "IMMEDIATE",
	 *   EXCLUSIVE: "EXCLUSIVE"
	 * }
	 * ```
	 *
	 * Pass in the desired level as the first argument:
	 *
	 * ```js
	 * return sequelize.transaction({
	 *   type: Sequelize.Transaction.EXCLUSIVE
	 * }, function (t) {
	 *
	 *  // your transactions
	 *
	 * }).then(function(result) {
	 *   // transaction has been committed. Do something after the commit if required.
	 * }).catch(function(err) {
	 *   // do something with the err.
	 * });
	 * ```
	 *
	 * @property TYPES
	 */
	Transaction.TYPES = {
	  DEFERRED: 'DEFERRED',
	  IMMEDIATE: 'IMMEDIATE',
	  EXCLUSIVE: 'EXCLUSIVE'
	};


	/**
	 * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.
	 * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.
	 *
	 * The possible isolations levels to use when starting a transaction:
	 *
	 * ```js
	 * {
	 *   READ_UNCOMMITTED: "READ UNCOMMITTED",
	 *   READ_COMMITTED: "READ COMMITTED",
	 *   REPEATABLE_READ: "REPEATABLE READ",
	 *   SERIALIZABLE: "SERIALIZABLE"
	 * }
	 * ```
	 *
	 * Pass in the desired level as the first argument:
	 *
	 * ```js
	 * return sequelize.transaction({
	 *   isolationLevel: Sequelize.Transaction.SERIALIZABLE
	 * }, function (t) {
	 *
	 *  // your transactions
	 *
	 * }).then(function(result) {
	 *   // transaction has been committed. Do something after the commit if required.
	 * }).catch(function(err) {
	 *   // do something with the err.
	 * });
	 * ```
	 *
	 * @property ISOLATION_LEVELS
	 */
	Transaction.ISOLATION_LEVELS = {
	  READ_UNCOMMITTED: 'READ UNCOMMITTED',
	  READ_COMMITTED: 'READ COMMITTED',
	  REPEATABLE_READ: 'REPEATABLE READ',
	  SERIALIZABLE: 'SERIALIZABLE'
	};

	/**
	 * Possible options for row locking. Used in conjunction with `find` calls:
	 *
	 * ```js
	 * t1 // is a transaction
	 * t1.LOCK.UPDATE,
	 * t1.LOCK.SHARE,
	 * t1.LOCK.KEY_SHARE, // Postgres 9.3+ only
	 * t1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only
	 * ```
	 *
	 * Usage:
	 * ```js
	 * t1 // is a transaction
	 * Model.findAll({
	 *   where: ...,
	 *   transaction: t1,
	 *   lock: t1.LOCK...
	 * });
	 * ```
	 *
	 * Postgres also supports specific locks while eager loading by using OF:
	 * ```js
	 * UserModel.findAll({
	 *   where: ...,
	 *   include: [TaskModel, ...],
	 *   transaction: t1,
	 *   lock: {
	 *     level: t1.LOCK...,
	 *     of: UserModel
	 *   }
	 * });
	 * ```
	 * UserModel will be locked but TaskModel won't!
	 *
	 * @property LOCK
	 */
	Transaction.LOCK = Transaction.prototype.LOCK = {
	  UPDATE: 'UPDATE',
	  SHARE: 'SHARE',
	  KEY_SHARE: 'KEY SHARE',
	  NO_KEY_UPDATE: 'NO KEY UPDATE'
	};

	/**
	 * Commit the transaction
	 *
	 * @return {Promise}
	 */
	Transaction.prototype.commit = function() {
	  var self = this;

	  if (this.finished) {
	    throw new Error('Transaction cannot be committed because it has been finished with state: ' + self.finished);
	  }

	  this.$clearCls();

	  return this
	    .sequelize
	    .getQueryInterface()
	    .commitTransaction(this, this.options)
	    .finally(function() {
	      self.finished = 'commit';
	      if (!self.parent) {
	        return self.cleanup();
	      }
	      return null;
	    });
	};


	/**
	 * Rollback (abort) the transaction
	 *
	 * @return {Promise}
	 */
	Transaction.prototype.rollback = function() {
	  var self = this;

	  if (this.finished) {
	    throw new Error('Transaction cannot be rolled back because it has been finished with state: ' + self.finished);
	  }

	  this.$clearCls();

	  return this
	    .sequelize
	    .getQueryInterface()
	    .rollbackTransaction(this, this.options)
	    .finally(function() {
	      if (!self.parent) {
	        return self.cleanup();
	      }
	      return self;
	    });
	};

	Transaction.prototype.prepareEnvironment = function() {
	  var self = this;

	  return Utils.Promise.resolve(
	    self.parent ? self.parent.connection : self.sequelize.connectionManager.getConnection({ uuid: self.id })
	  ).then(function (connection) {
	    self.connection = connection;
	    self.connection.uuid = self.id;
	  }).then(function () {
	    return self.begin();
	  }).then(function () {
	    return self.setDeferrable();
	  }).then(function () {
	    return self.setIsolationLevel();
	  }).then(function () {
	    return self.setAutocommit();
	  }).catch(function (setupErr) {
	    return self.rollback().finally(function () {
	      throw setupErr;
	    });
	  }).tap(function () {
	    if (self.sequelize.constructor.cls) {
	      self.sequelize.constructor.cls.set('transaction', self);
	    }
	    return null;
	  });
	};

	Transaction.prototype.begin = function() {
	  return this
	    .sequelize
	    .getQueryInterface()
	    .startTransaction(this, this.options);
	};

	Transaction.prototype.setDeferrable = function () {
	  if (this.options.deferrable) {
	    return this
	      .sequelize
	      .getQueryInterface()
	      .deferConstraints(this, this.options);
	  }
	};

	Transaction.prototype.setAutocommit = function() {
	  return this
	    .sequelize
	    .getQueryInterface()
	    .setAutocommit(this, this.options.autocommit, this.options);
	};

	Transaction.prototype.setIsolationLevel = function() {
	  return this
	    .sequelize
	    .getQueryInterface()
	    .setIsolationLevel(this, this.options.isolationLevel, this.options);
	};

	Transaction.prototype.cleanup = function() {
	  var res = this.sequelize.connectionManager.releaseConnection(this.connection);
	  this.connection.uuid = undefined;
	  return res;
	};

	Transaction.prototype.$clearCls = function () {
	  var cls = this.sequelize.constructor.cls;

	  if (cls) {
	    if (cls.get('transaction') === this) {
	      cls.set('transaction', null);
	    }
	  }
	};


/***/ },
/* 342 */
/***/ function(module, exports) {

	'use strict';

	var Association = function() {};

	// Normalize input - may be array or single obj, instance or primary key - convert it to an array of built objects
	Association.prototype.toInstanceArray = function (objs) {
	  if (!Array.isArray(objs)) {
	    objs = [objs];
	  }
	  return objs.map(function(obj) {
	    if (!(obj instanceof this.target.Instance)) {
	      var tmpInstance = {};
	      tmpInstance[this.target.primaryKeyAttribute] = obj;
	      return this.target.build(tmpInstance, {
	        isNewRecord: false
	      });
	    }
	    return obj;
	  }, this);
	};

	Association.prototype.inspect = function() {
	  return this.as;
	};

	module.exports = Association;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Helpers = __webpack_require__(340)
	  , _ = __webpack_require__(127)
	  , Association = __webpack_require__(342)
	  , BelongsTo = __webpack_require__(339)
	  , HasMany = __webpack_require__(344)
	  , HasOne = __webpack_require__(346)
	  , CounterCache = __webpack_require__(345)
	  , util = __webpack_require__(124);

	/**
	 * Many-to-many association with a join table.
	 *
	 * When the join table has additional attributes, these can be passed in the options object:
	 *
	 * ```js
	 * UserProject = sequelize.define('user_project', {
	 *   role: Sequelize.STRING
	 * });
	 * User.belongsToMany(Project, { through: UserProject });
	 * Project.belongsToMany(User, { through: UserProject });
	 * // through is required!
	 *
	 * user.addProject(project, { role: 'manager', transaction: t });
	 * ```
	 *
	 * All methods allow you to pass either a persisted instance, its primary key, or a mixture:
	 *
	 * ```js
	 * Project.create({ id: 11 }).then(function (project) {
	 *   user.addProjects([project, 12]);
	 * });
	 * ```
	 *
	 * In the API reference below, replace `Assocation(s)` with the actual name of your association, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.
	 *
	 * @mixin BelongsToMany
	 */
	var BelongsToMany = function(source, target, options) {
	  Association.call(this);

	  options = options || {};

	  if (options.through === undefined || options.through === true || options.through === null) {
	    throw new Error('belongsToMany must be given a through option, either a string or a model');
	  }

	  if (!options.through.model) {
	    options.through = {
	      model: options.through
	    };
	  }

	  this.associationType = 'BelongsToMany';
	  this.source = source;
	  this.target = target;
	  this.targetAssociation = null;
	  this.options = options;
	  this.sequelize = source.modelManager.sequelize;
	  this.through = _.assign({}, options.through);
	  this.scope = options.scope;
	  this.isMultiAssociation = true;
	  this.isSelfAssociation = this.source === this.target;
	  this.doubleLinked = false;
	  this.as = this.options.as;

	  if (!this.as && this.isSelfAssociation) {
	    throw new Error('\'as\' must be defined for many-to-many self-associations');
	  }

	  if (this.as) {
	    this.isAliased = true;

	    if (Utils._.isPlainObject(this.as)) {
	      this.options.name = this.as;
	      this.as = this.as.plural;
	    } else {
	      this.options.name = {
	        plural: this.as,
	        singular: Utils.singularize(this.as)
	      };
	    }
	  } else {
	    this.as = this.target.options.name.plural;
	    this.options.name = this.target.options.name;
	  }

	  this.combinedTableName = Utils.combineTableNames(
	    this.source.tableName,
	    this.isSelfAssociation ? (this.as || this.target.tableName) : this.target.tableName
	  );

	  /*
	   * If self association, this is the target association - Unless we find a pairing association
	   */
	  if (this.isSelfAssociation) {
	    this.targetAssociation = this;
	  }

	  /*
	   * Default/generated foreign/other keys
	   */
	  if (_.isObject(this.options.foreignKey)) {
	    this.foreignKeyAttribute = this.options.foreignKey;
	    this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
	  } else {
	    if (!this.options.foreignKey) {
	      this.foreignKeyDefault = true;
	    }

	    this.foreignKeyAttribute = {};
	    this.foreignKey = this.options.foreignKey || Utils.camelizeIf(
	      [
	        Utils.underscoredIf(this.source.options.name.singular, this.source.options.underscored),
	        this.source.primaryKeyAttribute
	      ].join('_'),
	      !this.source.options.underscored
	    );
	  }

	  if (_.isObject(this.options.otherKey)) {
	    this.otherKeyAttribute = this.options.otherKey;
	    this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;
	  } else {
	    if (!this.options.otherKey) {
	      this.otherKeyDefault = true;
	    }

	    this.otherKeyAttribute = {};
	    this.otherKey = this.options.otherKey || Utils.camelizeIf(
	      [
	        Utils.underscoredIf(
	          this.isSelfAssociation ?
	            Utils.singularize(this.as) :
	            this.target.options.name.singular,
	          this.target.options.underscored
	        ),
	        this.target.primaryKeyAttribute
	      ].join('_'),
	      !this.target.options.underscored
	    );
	  }

	  /*
	   * Find paired association (if exists)
	   */
	  _.each(this.target.associations, function(association) {
	    if (association.associationType !== 'BelongsToMany') return;
	    if (association.target !== this.source) return;

	    if (this.options.through.model === association.options.through.model) {
	      this.paired = association;
	      association.paired = this;
	    }
	  }.bind(this));

	  if (typeof this.through.model === 'string') {
	    if (!this.sequelize.isDefined(this.through.model)) {
	      this.through.model = this.sequelize.define(this.through.model, {}, _.extend(this.options, {
	        tableName: this.through.model,
	        indexes: [], //we don't want indexes here (as referenced in #2416)
	        paranoid: false,  // A paranoid join table does not make sense
	        validate: {} // Don't propagate model-level validations
	      }));
	    } else {
	      this.through.model = this.sequelize.model(this.through.model);
	    }
	  }

	  this.options = _.assign(this.options, _.pick(this.through.model.options, [
	    'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'
	  ]));

	  if (this.paired) {
	    if (this.otherKeyDefault) {
	      this.otherKey = this.paired.foreignKey;
	    }
	    if (this.paired.otherKeyDefault) {
	      // If paired otherKey was inferred we should make sure to clean it up before adding a new one that matches the foreignKey
	      if (this.paired.otherKey !== this.foreignKey) {
	        delete this.through.model.rawAttributes[this.paired.otherKey];
	      }
	      this.paired.otherKey = this.foreignKey;
	      this.paired.foreignIdentifier = this.foreignKey;
	      delete this.paired.foreignIdentifierField;
	    }
	  }

	  if (this.through) {
	    this.throughModel = this.through.model;
	  }

	  this.options.tableName = this.combinedName = (this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model);

	  this.associationAccessor = this.as;

	  // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it
	  var plural = Utils.uppercaseFirst(this.options.name.plural)
	    , singular = Utils.uppercaseFirst(this.options.name.singular);

	  this.accessors = {
	    /**
	     * Get everything currently associated with this, using an optional where clause.
	     *
	     * @param {Object} [options]
	     * @param {Object} [options.where] An optional where clause to limit the associated models
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false
	     * @param {String} [options.schema] Apply a schema on the related model
	     * @return {Promise<Array<Instance>>}
	     * @method getAssociations
	     */
	    get: 'get' + plural,
	    /**
	     * Set the associated models by passing an array of instances or their primary keys. Everything that it not in the passed array will be un-associated.
	     *
	     * @param {Array<Instance|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.
	     * @param {Object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`. Can also hold additional attributes for the join table
	     * @param {Object} [options.validate] Run validation for the join model
	     * @return {Promise}
	     * @method setAssociations
	     */
	    set: 'set' + plural,
	    /**
	     * Associate several persisted instances with this.
	     *
	     * @param {Array<Instance|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this.
	     * @param {Object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`. Can also hold additional attributes for the join table.
	     * @param {Object} [options.validate] Run validation for the join model.
	     * @return {Promise}
	     * @method addAssociations
	     */
	    addMultiple: 'add' + plural,
	    /**
	     * Associate a persisted instance with this.
	     *
	     * @param {Instance|String|Number} [newAssociation] A persisted instance or primary key of instance to associate with this.
	     * @param {Object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`. Can also hold additional attributes for the join table.
	     * @param {Object} [options.validate] Run validation for the join model.
	     * @return {Promise}
	     * @method addAssociation
	     */
	    add: 'add' + singular,
	     /**
	     * Create a new instance of the associated model and associate it with this.
	     *
	     * @param {Object} [values]
	     * @param {Object} [options] Options passed to create and add. Can also hold additional attributes for the join table
	     * @return {Promise}
	     * @method createAssociation
	     */
	    create: 'create' + singular,
	    /**
	     * Un-associate the instance.
	     *
	     * @param {Instance|String|Number} [oldAssociated] Can be an Instance or its primary key
	     * @param {Object} [options] Options passed to `through.destroy`
	     * @return {Promise}
	     * @method removeAssociation
	     */
	    remove: 'remove' + singular,
	    /**
	     * Un-associate several instances.
	     *
	     * @param {Array<Instance|String|Number>} [oldAssociated] Can be an array of instances or their primary keys
	     * @param {Object} [options] Options passed to `through.destroy`
	     * @return {Promise}
	     * @method removeAssociations
	     */
	    removeMultiple: 'remove' + plural,
	    /**
	     * Check if an instance is associated with this.
	     *
	     * @param {Instance|String|Number} [instance] Can be an Instance or its primary key
	     * @param {Object} [options] Options passed to getAssociations
	     * @return {Promise}
	     * @method hasAssociation
	     */
	    hasSingle: 'has' + singular,
	    /**
	     * Check if all instances are associated with this.
	     *
	     * @param {Array<Instance|String|Number>} [instances] Can be an array of instances or their primary keys
	     * @param {Object} [options] Options passed to getAssociations
	     * @return {Promise}
	     * @method hasAssociations
	     */
	    hasAll: 'has' + plural,
	    /**
	     * Count everything currently associated with this, using an optional where clause.
	     *
	     * @param {Object} [options]
	     * @param {Object} [options.where] An optional where clause to limit the associated models
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false
	     * @return {Promise<Int>}
	     * @method countAssociations
	     */
	    count: 'count' + plural
	  };

	  if (this.options.counterCache) {
	    new CounterCache(this, this.options.counterCache !== true ? this.options.counterCache : {});
	  }
	};

	util.inherits(BelongsToMany, Association);

	// the id is in the target table
	// or in an extra table which connects two tables
	BelongsToMany.prototype.injectAttributes = function() {
	  var self = this;

	  this.identifier = this.foreignKey;
	  this.foreignIdentifier = this.otherKey;

	  // remove any PKs previously defined by sequelize
	  // but ignore any keys that are part of this association (#5865)
	  _.each(this.through.model.rawAttributes, function(attribute, attributeName) {
	    if (attribute.primaryKey === true && attribute._autoGenerated === true) {
	      if (attributeName === self.foreignKey || attributeName === self.otherKey) {
	        // this key is still needed as it's part of the association
	        // so just set primaryKey to false
	        attribute.primaryKey = false;
	      }
	      else {
	        delete self.through.model.rawAttributes[attributeName];
	      }
	      self.primaryKeyDeleted = true;
	    }
	  });

	  var sourceKey = this.source.rawAttributes[this.source.primaryKeyAttribute]
	    , sourceKeyType = sourceKey.type
	    , sourceKeyField = sourceKey.field || this.source.primaryKeyAttribute
	    , targetKey = this.target.rawAttributes[this.target.primaryKeyAttribute]
	    , targetKeyType = targetKey.type
	    , targetKeyField = targetKey.field || this.target.primaryKeyAttribute
	    , sourceAttribute = _.defaults({}, this.foreignKeyAttribute, { type: sourceKeyType })
	    , targetAttribute = _.defaults({}, this.otherKeyAttribute, { type: targetKeyType });

	  if (this.primaryKeyDeleted === true) {
	    targetAttribute.primaryKey = sourceAttribute.primaryKey = true;
	  } else if (this.through.unique !== false) {
	    var uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');
	    targetAttribute.unique = sourceAttribute.unique = uniqueKey;
	  }

	  if (!this.through.model.rawAttributes[this.foreignKey]) {
	    this.through.model.rawAttributes[this.foreignKey] = {
	      _autoGenerated: true
	    };
	  }

	  if (!this.through.model.rawAttributes[this.otherKey]) {
	    this.through.model.rawAttributes[this.otherKey] = {
	      _autoGenerated: true
	    };
	  }

	  if (this.options.constraints !== false) {
	    sourceAttribute.references = {
	      model: this.source.getTableName(),
	      key:   sourceKeyField
	    };
	    // For the source attribute the passed option is the priority
	    sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;
	    sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;

	    if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';
	    if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';

	    targetAttribute.references = {
	      model: this.target.getTableName(),
	      key:   targetKeyField
	    };
	    // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)
	    targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;
	    targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;

	    if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';
	    if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';
	  }

	  this.through.model.rawAttributes[this.foreignKey] = _.extend(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);
	  this.through.model.rawAttributes[this.otherKey] = _.extend(this.through.model.rawAttributes[this.otherKey], targetAttribute);

	  this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;
	  this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;

	  if (this.paired && !this.paired.foreignIdentifierField) {
	    this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;
	  }

	  this.through.model.refreshAttributes();

	  this.toSource = new BelongsTo(this.through.model, this.source, {
	    foreignKey: this.foreignKey
	  });
	  this.manyFromSource = new HasMany(this.source, this.through.model, {
	    foreignKey: this.foreignKey
	  });
	  this.oneFromSource = new HasOne(this.source, this.through.model, {
	    foreignKey: this.foreignKey,
	    as: this.through.model.name
	  });

	  this.toTarget = new BelongsTo(this.through.model, this.target, {
	    foreignKey: this.otherKey
	  });
	  this.manyFromTarget = new HasMany(this.target, this.through.model, {
	    foreignKey: this.otherKey
	  });
	  this.oneFromTarget = new HasOne(this.target, this.through.model, {
	    foreignKey: this.otherKey,
	    as: this.through.model.name
	  });

	  if (this.paired && this.paired.otherKeyDefault) {
	    this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {
	      foreignKey: this.paired.otherKey
	    });

	    this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {
	      foreignKey: this.paired.otherKey,
	      as: this.paired.through.model.name
	    });
	  }

	  Helpers.checkNamingCollision(this);

	  return this;
	};

	BelongsToMany.prototype.get = function(instance, options) {
	  options = Utils.cloneDeep(options) || {};

	  var association = this
	    , through = association.through
	    , scopeWhere
	    , throughWhere;

	  if (association.scope) {
	    scopeWhere = _.clone(association.scope);
	  }

	  options.where = {
	    $and: [
	      scopeWhere,
	      options.where
	    ]
	  };

	  if (Object(through.model) === through.model) {
	    throughWhere = {};
	    throughWhere[association.foreignKey] = instance.get(association.source.primaryKeyAttribute);

	    if (through.scope) {
	      _.assign(throughWhere, through.scope);
	    }

	    //If a user pass a where on the options through options, make an "and" with the current throughWhere
	    if (options.through && options.through.where) {
	      throughWhere = {
	        $and: [throughWhere, options.through.where]
	      };
	    }

	    options.include = options.include || [];
	    options.include.push({
	      association: association.oneFromTarget,
	      attributes: options.joinTableAttributes,
	      required: true,
	      where: throughWhere
	    });
	  }

	  var model = association.target;
	  if (options.hasOwnProperty('scope')) {
	    if (!options.scope) {
	      model = model.unscoped();
	    } else {
	      model = model.scope(options.scope);
	    }
	  }

	  if (options.hasOwnProperty('schema')) {
	    model = model.schema(options.schema, options.schemaDelimiter);
	  }

	  return model.findAll(options);
	};

	BelongsToMany.prototype.injectGetter = function(obj) {
	  var association = this;

	  obj[this.accessors.get] = function(options) {
	    return association.get(this, options);
	  };

	  obj[this.accessors.count] = function(options) {
	    var model = association.target
	      , sequelize = model.sequelize;

	    options = Utils.cloneDeep(options);
	    options.attributes = [
	      [sequelize.fn('COUNT', sequelize.col([association.target.name, model.primaryKeyAttribute].join('.'))), 'count']
	    ];
	    options.joinTableAttributes = [];
	    options.raw = true;
	    options.plain = true;

	    return obj[association.accessors.get].call(this, options).then(function (result) {
	      return parseInt(result.count, 10);
	    });
	  };

	  obj[this.accessors.hasSingle] = obj[this.accessors.hasAll] = function(instances, options) {
	    var where = {};

	    if (!Array.isArray(instances)) {
	      instances = [instances];
	    }

	    options = _.assign({
	      raw: true
	    }, options, {
	      scope: false
	    });

	    where.$or = instances.map(function (instance) {
	      if (instance instanceof association.target.Instance) {
	        return instance.where();
	      } else {
	        var $where = {};
	        $where[association.target.primaryKeyAttribute] = instance;
	        return $where;
	      }
	    });

	    options.where = {
	      $and: [
	        where,
	        options.where
	      ]
	    };

	    return this[association.accessors.get](options).then(function(associatedObjects) {
	      return associatedObjects.length === instances.length;
	    });
	  };

	  return this;
	};

	BelongsToMany.prototype.injectSetter = function(obj) {
	  var association = this;

	  obj[this.accessors.set] = function(newAssociatedObjects, options) {
	    options = options || {};
	    var instance = this
	      , sourceKey = association.source.primaryKeyAttribute
	      , targetKey = association.target.primaryKeyAttribute
	      , identifier = association.identifier
	      , foreignIdentifier = association.foreignIdentifier
	      , where = {};

	    if (newAssociatedObjects === null) {
	      newAssociatedObjects = [];
	    } else {
	      newAssociatedObjects = association.toInstanceArray(newAssociatedObjects);
	    }

	    where[identifier] = this.get(sourceKey);
	    return association.through.model.findAll(_.defaults({
	      where: where,
	      raw: true,
	    }, options)).then(function (currentRows) {
	      var obsoleteAssociations = []
	        , defaultAttributes = options
	        , promises = []
	        , unassociatedObjects;

	      // Don't try to insert the transaction as an attribute in the through table
	      defaultAttributes = _.omit(defaultAttributes, ['transaction', 'hooks', 'individualHooks', 'ignoreDuplicates', 'validate', 'fields', 'logging']);

	      unassociatedObjects = newAssociatedObjects.filter(function(obj) {
	        return !_.find(currentRows, function(currentRow) {
	          return currentRow[foreignIdentifier] === obj.get(targetKey);
	        });
	      });

	      currentRows.forEach(function(currentRow) {
	        var newObj = _.find(newAssociatedObjects, function(obj) {
	          return currentRow[foreignIdentifier] === obj.get(targetKey);
	        });

	        if (!newObj) {
	          obsoleteAssociations.push(currentRow);
	        } else {
	          var throughAttributes = newObj[association.through.model.name];
	          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)
	          if (throughAttributes instanceof association.through.model.Instance) {
	            throughAttributes = {};
	          }

	          var where = {}
	            , attributes = _.defaults({}, throughAttributes, defaultAttributes);

	          where[identifier] = instance.get(sourceKey);
	          where[foreignIdentifier] = newObj.get(targetKey);

	          if (Object.keys(attributes).length) {
	            promises.push(association.through.model.update(attributes, _.extend(options, {
	              where: where
	            })));
	          }
	        }
	      });

	      if (obsoleteAssociations.length > 0) {
	        var where = {};
	        where[identifier] = instance.get(sourceKey);
	        where[foreignIdentifier] = obsoleteAssociations.map(function(obsoleteAssociation) {
	          return obsoleteAssociation[foreignIdentifier];
	        });

	        promises.push(association.through.model.destroy(_.defaults({
	          where: where
	        }, options)));
	      }

	      if (unassociatedObjects.length > 0) {
	        var bulk = unassociatedObjects.map(function(unassociatedObject) {
	          var attributes = {};

	          attributes[identifier] = instance.get(sourceKey);
	          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);

	          attributes = _.defaults(attributes, unassociatedObject[association.through.model.name], defaultAttributes);

	          _.assign(attributes, association.through.scope);

	          return attributes;
	        }.bind(this));

	        promises.push(association.through.model.bulkCreate(bulk, _.assign({ validate: true }, options)));
	      }

	      return Utils.Promise.all(promises);
	    });
	  };

	  obj[this.accessors.addMultiple] = obj[this.accessors.add] = function(newInstances, additionalAttributes) {
	    // If newInstances is null or undefined, no-op
	    if (!newInstances) return Utils.Promise.resolve();

	    additionalAttributes = _.clone(additionalAttributes) || {};

	    var instance = this
	      , defaultAttributes = _.omit(additionalAttributes, ['transaction', 'hooks', 'individualHooks', 'ignoreDuplicates', 'validate', 'fields', 'logging'])
	      , sourceKey = association.source.primaryKeyAttribute
	      , targetKey = association.target.primaryKeyAttribute
	      , identifier = association.identifier
	      , foreignIdentifier = association.foreignIdentifier
	      , options = additionalAttributes;

	    newInstances = association.toInstanceArray(newInstances);

	    var where = {};
	    where[identifier] = instance.get(sourceKey);
	    where[foreignIdentifier] = newInstances.map(function (newInstance) { return newInstance.get(targetKey); });

	    _.assign(where, association.through.scope);

	    return association.through.model.findAll(_.defaults({
	      where: where,
	      raw: true,
	    }, options)).then(function (currentRows) {
	      var promises = [];

	      var unassociatedObjects = [], changedAssociations = [];
	      newInstances.forEach(function(obj) {
	        var existingAssociation = _.find(currentRows, function(current) {
	          return current[foreignIdentifier] === obj.get(targetKey);
	        });

	        if (!existingAssociation) {
	          unassociatedObjects.push(obj);
	        } else {
	          var throughAttributes = obj[association.through.model.name]
	            , attributes = _.defaults({}, throughAttributes, defaultAttributes);

	          if (_.some(Object.keys(attributes), function (attribute) {
	            return attributes[attribute] !== existingAssociation[attribute];
	          })) {
	            changedAssociations.push(obj);
	          }
	        }
	      });

	      if (unassociatedObjects.length > 0) {
	        var bulk = unassociatedObjects.map(function(unassociatedObject) {
	          var throughAttributes = unassociatedObject[association.through.model.name]
	            , attributes = _.defaults({}, throughAttributes, defaultAttributes);

	          attributes[identifier] = instance.get(sourceKey);
	          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);

	          _.assign(attributes, association.through.scope);

	          return attributes;
	        }.bind(this));

	        promises.push(association.through.model.bulkCreate(bulk, _.assign({ validate: true }, options)));
	      }

	      changedAssociations.forEach(function(assoc) {
	        var throughAttributes = assoc[association.through.model.name]
	          , attributes = _.defaults({}, throughAttributes, defaultAttributes)
	          , where = {};
	        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)
	        if (throughAttributes instanceof association.through.model.Instance) {
	          throughAttributes = {};
	        }

	        where[identifier] = instance.get(sourceKey);
	        where[foreignIdentifier] = assoc.get(targetKey);

	        promises.push(association.through.model.update(attributes, _.extend(options, {
	          where: where
	        })));
	      });

	      return Utils.Promise.all(promises);
	    });
	  };

	  obj[this.accessors.removeMultiple] = obj[this.accessors.remove] = function(oldAssociatedObjects, options) {
	    options = options || {};

	    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);

	    var where = {};
	    where[association.identifier] = this.get(association.source.primaryKeyAttribute);
	    where[association.foreignIdentifier] = oldAssociatedObjects.map(function (newInstance) { return newInstance.get(association.target.primaryKeyAttribute); });

	    return association.through.model.destroy(_.defaults({
	      where: where
	    }, options));
	  };

	  return this;
	};

	BelongsToMany.prototype.injectCreator = function(obj) {
	  var association = this;

	  obj[this.accessors.create] = function(values, options) {
	    var instance = this;
	    options = options || {};
	    values = values || {};

	    if (Array.isArray(options)) {
	      options = {
	        fields: options
	      };
	    }

	    if (association.scope) {
	      _.assign(values, association.scope);
	      if (options.fields) {
	        options.fields = options.fields.concat(Object.keys(association.scope));
	      }
	    }

	    // Create the related model instance
	    return association.target.create(values, options).then(function(newAssociatedObject) {
	      return instance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields'])).return(newAssociatedObject);
	    });
	  };

	  return this;
	};

	module.exports = BelongsToMany;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Helpers = __webpack_require__(340)
	  , _ = __webpack_require__(127)
	  , Association = __webpack_require__(342)
	  , CounterCache = __webpack_require__(345)
	  , util = __webpack_require__(124);

	/**
	 * One-to-many association
	 *
	 * In the API reference below, replace `Association(s)` with the actual name of your association, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.
	 *
	 * @mixin HasMany
	 */
	var HasMany = function(source, target, options) {
	  Association.call(this);

	  this.associationType = 'HasMany';
	  this.source = source;
	  this.target = target;
	  this.targetAssociation = null;
	  this.options = options || {};
	  this.sequelize = source.modelManager.sequelize;
	  this.through = options.through;
	  this.scope = options.scope;
	  this.isMultiAssociation = true;
	  this.isSelfAssociation = this.source === this.target;
	  this.as = this.options.as;
	  this.foreignKeyAttribute = {};

	  if (this.options.through) {
	    throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');
	  }


	  /*
	   * If self association, this is the target association
	   */
	  if (this.isSelfAssociation) {
	    this.targetAssociation = this;
	  }

	  if (this.as) {
	    this.isAliased = true;

	    if (_.isPlainObject(this.as)) {
	      this.options.name = this.as;
	      this.as = this.as.plural;
	    } else {
	      this.options.name = {
	        plural: this.as,
	        singular: Utils.singularize(this.as)
	      };
	    }
	  } else {
	    this.as = this.target.options.name.plural;
	    this.options.name = this.target.options.name;
	  }

	  /*
	   * Foreign key setup
	   */
	  if (_.isObject(this.options.foreignKey)) {
	    this.foreignKeyAttribute = this.options.foreignKey;
	    this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
	  } else if (this.options.foreignKey) {
	    this.foreignKey = this.options.foreignKey;
	  }

	  if (!this.foreignKey) {
	    this.foreignKey = Utils.camelizeIf(
	      [
	        Utils.underscoredIf(this.source.options.name.singular, this.source.options.underscored),
	        this.source.primaryKeyAttribute
	      ].join('_'),
	      !this.source.options.underscored
	    );
	  }

	  if (this.target.rawAttributes[this.foreignKey]) {
	    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
	    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
	  }

	  this.associationAccessor = this.as;

	  // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it
	  var plural = Utils.uppercaseFirst(this.options.name.plural)
	    , singular = Utils.uppercaseFirst(this.options.name.singular);

	  this.accessors = {
	    /**
	     * Get everything currently associated with this, using an optional where clause.
	     *
	     * @param {Object} [options]
	     * @param {Object} [options.where] An optional where clause to limit the associated models
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false
	     * @param {String} [options.schema] Apply a schema on the related model
	     * @return {Promise<Array<Instance>>}
	     * @method getAssociations
	     */
	    get: 'get' + plural,
	    /**
	     * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated
	     *
	     * @param {Array<Instance|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.
	     * @param {Object} [options] Options passed to `target.findAll` and `update`.
	     * @param {Object} [options.validate] Run validation for the join model
	     * @return {Promise}
	     * @method setAssociations
	     */
	    set: 'set' + plural,
	    /**
	     * Associate several persisted instances with this.
	     *
	     * @param {Array<Instance|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this.
	     * @param {Object} [options] Options passed to `target.update`.
	     * @param {Object} [options.validate] Run validation for the join model.
	     * @return {Promise}
	     * @method addAssociations
	     */
	    addMultiple: 'add' + plural,
	    /**
	     * Associate a persisted instance with this.
	     *
	     * @param {Instance|String|Number} [newAssociation] A persisted instance or primary key of instance to associate with this.
	     * @param {Object} [options] Options passed to `target.update`.
	     * @param {Object} [options.validate] Run validation for the join model.
	     * @return {Promise}
	     * @method addAssociation
	     */
	    add: 'add' + singular,
	    /**
	     * Create a new instance of the associated model and associate it with this.
	     *
	     * @param {Object} [values]
	     * @param {Object} [options] Options passed to `target.create`.
	     * @return {Promise}
	     * @method createAssociation
	     */
	    create: 'create' + singular,
	    /**
	     * Un-associate the instance.
	     *
	     * @param {Instance|String|Number} [oldAssociated] Can be an Instance or its primary key
	     * @param {Object} [options] Options passed to `target.update`
	     * @return {Promise}
	     * @method removeAssociation
	     */
	    remove: 'remove' + singular,
	    /**
	     * Un-associate several instances.
	     *
	     * @param {Array<Instance|String|Number>} [oldAssociatedArray] Can be an array of instances or their primary keys
	     * @param {Object} [options] Options passed to `through.destroy`
	     * @return {Promise}
	     * @method removeAssociations
	     */
	    removeMultiple: 'remove' + plural,
	    /**
	     * Check if an instance is associated with this.
	     *
	     * @param {Instance|String|Number} [instance] Can be an Instance or its primary key
	     * @param {Object} [options] Options passed to getAssociations
	     * @return {Promise}
	     * @method hasAssociation
	     */
	    hasSingle: 'has' + singular,
	    /**
	     * Check if all instances are associated with this.
	     *
	     * @param {Array<Instance|String|Number>} [instances] Can be an array of instances or their primary keys
	     * @param {Object} [options] Options passed to getAssociations
	     * @return {Promise}
	     * @method hasAssociations
	     */
	    hasAll: 'has' + plural,
	    /**
	     * Count everything currently associated with this, using an optional where clause.
	     *
	     * @param {Object} [options]
	     * @param {Object} [options.where] An optional where clause to limit the associated models
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false
	     * @return {Promise<Int>}
	     * @method countAssociations
	     */
	    count: 'count' + plural
	  };

	  if (this.options.counterCache) {
	    new CounterCache(this, this.options.counterCache !== true ? this.options.counterCache : {});
	    delete this.accessors.count;
	  }
	};

	util.inherits(HasMany, Association);

	// the id is in the target table
	// or in an extra table which connects two tables
	HasMany.prototype.injectAttributes = function() {
	  var newAttributes = {};
	  var constraintOptions = _.clone(this.options); // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m
	  newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {
	    type: this.options.keyType || this.source.rawAttributes[this.source.primaryKeyAttribute].type,
	    allowNull : true
	  });

	  if (this.options.constraints !== false) {
	    var target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
	    constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');
	    constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';
	  }
	  Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions);
	  Utils.mergeDefaults(this.target.rawAttributes, newAttributes);

	  this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
	  this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;

	  this.target.refreshAttributes();
	  this.source.refreshAttributes();

	  Helpers.checkNamingCollision(this);

	  return this;
	};

	HasMany.prototype.mixin = function(obj) {
	  var association = this;

	  obj[this.accessors.get] = function(options) {
	    return association.get(this, options);
	  };

	  if (this.accessors.count) {
	    obj[this.accessors.count] = function(options) {
	      return association.count(this, options);
	    };
	  }

	  obj[this.accessors.hasSingle] = obj[this.accessors.hasAll] = function(instances, options) {
	    return association.has(this, instances, options);
	  };

	  obj[this.accessors.set] = function(instances, options) {
	    return association.set(this, instances, options);
	  };

	  obj[this.accessors.add] = obj[this.accessors.addMultiple] = function(instances, options) {
	    return association.add(this, instances, options);
	  };

	  obj[this.accessors.remove] = obj[this.accessors.removeMultiple] = function(instances, options) {
	    return association.remove(this, instances, options);
	  };

	  obj[this.accessors.create] = function(values, options) {
	    return association.create(this, values, options);
	  };
	};

	HasMany.prototype.get = function(instances, options) {
	  var association = this
	    , where = {}
	    , Model = association.target
	    , instance
	    , values;

	  if (!Array.isArray(instances)) {
	    instance = instances;
	    instances = undefined;
	  }

	  options = Utils.cloneDeep(options) || {};

	  if (association.scope) {
	    _.assign(where, association.scope);
	  }

	  if (instances) {
	    values = instances.map(function (instance) {
	      return instance.get(association.source.primaryKeyAttribute, {raw: true});
	    });

	    if (options.limit && instances.length > 1) {
	      options.groupedLimit = {
	        limit: options.limit,
	        on: association.foreignKeyField,
	        values: values
	      };

	      delete options.limit;
	    } else {
	      where[association.foreignKey] = {
	        $in: values
	      };
	      delete options.groupedLimit;
	    }
	  } else {
	    where[association.foreignKey] = instance.get(association.source.primaryKeyAttribute, {raw: true});
	  }


	  options.where = options.where ?
	                  {$and: [where, options.where]} :
	                  where;

	  if (options.hasOwnProperty('scope')) {
	    if (!options.scope) {
	      Model = Model.unscoped();
	    } else {
	      Model = Model.scope(options.scope);
	    }
	  }

	  if (options.hasOwnProperty('schema')) {
	    Model = Model.schema(options.schema, options.schemaDelimiter);
	  }


	  return Model.findAll(options).then(function (results) {
	    if (instance) return results;

	    var result = {};
	    instances.forEach(function (instance) {
	      result[instance.get(association.source.primaryKeyAttribute, {raw: true})] = [];
	    });

	    results.forEach(function (instance) {
	      result[instance.get(association.foreignKey, {raw: true})].push(instance);
	    });

	    return result;
	  });
	};

	HasMany.prototype.count = function(instance, options) {
	  var association = this
	    , model = association.target
	    , sequelize = model.sequelize;

	  options = Utils.cloneDeep(options);
	  options.attributes = [
	    [sequelize.fn('COUNT', sequelize.col(model.primaryKeyField)), 'count']
	  ];
	  options.raw = true;
	  options.plain = true;

	  return this.get(instance, options).then(function (result) {
	    return parseInt(result.count, 10);
	  });
	};

	HasMany.prototype.has = function(sourceInstance, targetInstances, options) {
	  var association = this
	    , where = {};

	  if (!Array.isArray(targetInstances)) {
	    targetInstances = [targetInstances];
	  }

	  options = _.assign({}, options, {
	    scope: false,
	    raw: true
	  });

	  where.$or = targetInstances.map(function (instance) {
	    if (instance instanceof association.target.Instance) {
	      return instance.where();
	    } else {
	      var _where = {};
	      _where[association.target.primaryKeyAttribute] = instance;
	      return _where;
	    }
	  });

	  options.where = {
	    $and: [
	      where,
	      options.where
	    ]
	  };

	  return this.get(
	    sourceInstance,
	    options
	  ).then(function(associatedObjects) {
	    return associatedObjects.length === targetInstances.length;
	  });
	};

	HasMany.prototype.set = function(sourceInstance, targetInstances, options) {
	  var association = this;

	  if (targetInstances === null) {
	    targetInstances = [];
	  } else {
	    targetInstances = association.toInstanceArray(targetInstances);
	  }

	  return association.get(sourceInstance, _.defaults({
	    scope: false,
	    raw: true
	  }, options)).then(function(oldAssociations) {
	    var promises = []
	      , obsoleteAssociations = oldAssociations.filter(function(old) {
	          return !_.find(targetInstances, function(obj) {
	            return obj[association.target.primaryKeyAttribute] === old[association.target.primaryKeyAttribute];
	          });
	        })
	      , unassociatedObjects = targetInstances.filter(function(obj) {
	          return !_.find(oldAssociations, function(old) {
	            return obj[association.target.primaryKeyAttribute] === old[association.target.primaryKeyAttribute];
	          });
	        })
	      , updateWhere
	      , update;

	    if (obsoleteAssociations.length > 0) {
	      update = {};
	      update[association.foreignKey] = null;

	      updateWhere = {};

	      updateWhere[association.target.primaryKeyAttribute] = obsoleteAssociations.map(function(associatedObject) {
	        return associatedObject[association.target.primaryKeyAttribute];
	      });

	      promises.push(association.target.unscoped().update(
	        update,
	        _.defaults({
	          where: updateWhere
	        }, options)
	      ));
	    }

	    if (unassociatedObjects.length > 0) {
	      updateWhere = {};

	      update = {};
	      update[association.foreignKey] = sourceInstance.get(association.source.primaryKeyAttribute);

	      _.assign(update, association.scope);
	      updateWhere[association.target.primaryKeyAttribute] = unassociatedObjects.map(function(unassociatedObject) {
	        return unassociatedObject[association.target.primaryKeyAttribute];
	      });

	      promises.push(association.target.unscoped().update(
	        update,
	        _.defaults({
	          where: updateWhere
	        }, options)
	      ));
	    }

	    return Utils.Promise.all(promises).return(sourceInstance);
	  });
	};

	HasMany.prototype.add = function(sourceInstance, targetInstances, options) {
	  if (!targetInstances) return Utils.Promise.resolve();

	  var association = this
	    , update = {}
	    , where = {};

	  options = options || {};

	  targetInstances = association.toInstanceArray(targetInstances);

	  update[association.foreignKey] = sourceInstance.get(association.source.primaryKeyAttribute);
	  _.assign(update, association.scope);

	  where[association.target.primaryKeyAttribute] = targetInstances.map(function (unassociatedObject) {
	    return unassociatedObject.get(association.target.primaryKeyAttribute);
	  });

	  return association.target.unscoped().update(
	    update,
	    _.defaults({
	      where: where
	    }, options)
	  ).return(sourceInstance);
	};

	HasMany.prototype.remove = function(sourceInstance, targetInstances, options) {
	  var association = this
	    , update = {}
	    , where = {};

	  options = options || {};
	  targetInstances = association.toInstanceArray(targetInstances);

	  update[association.foreignKey] = null;

	  where[association.foreignKey] = sourceInstance.get(association.source.primaryKeyAttribute);
	  where[association.target.primaryKeyAttribute] = targetInstances.map(function (targetInstance) {
	    return targetInstance.get(association.target.primaryKeyAttribute);
	  });

	  return association.target.unscoped().update(
	    update,
	    _.defaults({
	      where: where
	    }, options)
	  ).return(this);
	};

	HasMany.prototype.create = function(sourceInstance, values, options) {
	  var association = this;

	  options = options || {};

	  if (Array.isArray(options)) {
	    options = {
	      fields: options
	    };
	  }

	  if (values === undefined) {
	    values = {};
	  }

	  if (association.scope) {
	    Object.keys(association.scope).forEach(function (attribute) {
	      values[attribute] = association.scope[attribute];
	      if (options.fields) options.fields.push(attribute);
	    });
	  }

	  values[association.foreignKey] = sourceInstance.get(association.source.primaryKeyAttribute);
	  if (options.fields) options.fields.push(association.foreignKey);
	  return association.target.create(values, options);
	};

	module.exports = HasMany;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Helpers = __webpack_require__(340)
	  , DataTypes = __webpack_require__(123)
	  , Promise = __webpack_require__(121);

	var CounterCache = function(association, options) {
	  this.association = association;
	  this.source = association.source;
	  this.target = association.target;
	  this.options = options || {};

	  this.sequelize = this.source.modelManager.sequelize;
	  this.as = this.options.as;

	  if (association.associationType !== 'HasMany') {
	    throw new Error('Can only have CounterCache on HasMany association');
	  }

	  if (this.as) {
	    this.isAliased = true;
	    this.columnName = this.as;
	  } else {
	    this.as = 'count_' + this.target.options.name.plural;
	    this.columnName = Utils.camelizeIf(
	      this.as,
	      !this.source.options.underscored
	    );
	  }

	  this.injectAttributes();
	  this.injectHooks();
	};

	// Add countAssociation attribute to source model
	CounterCache.prototype.injectAttributes = function() {
	  // Do not try to use a column that's already taken
	  Helpers.checkNamingCollision(this);

	  var newAttributes = {};

	  newAttributes[this.columnName] = {
	    type: DataTypes.INTEGER,
	    allowNull: false,
	    defaultValue: Utils._.partial(
	      Utils.toDefaultValue,
	      0
	    )
	  };

	  Utils.mergeDefaults(this.source.rawAttributes, newAttributes);

	  // Sync attributes and setters/getters to DAO prototype
	  this.source.refreshAttributes();
	};

	// Add setAssociaton method to the prototype of the model instance
	CounterCache.prototype.injectHooks = function() {
	  var association = this.association,
	    counterCacheInstance = this,
	    CounterUtil,
	    fullUpdateHook,
	    atomicHooks,
	    previousTargetId;

	  CounterUtil = {
	    update: function (targetId, options) {
	      var query = CounterUtil._targetQuery(targetId);

	      return association.target.count({ where: query, logging: options && options.logging }).then(function (count) {
	        var newValues = {};

	        query = CounterUtil._sourceQuery(targetId);

	        newValues[counterCacheInstance.columnName] = count;

	        return association.source.update(newValues, { where: query, logging: options && options.logging });
	      });
	    },
	    increment: function (targetId, options) {
	      var query = CounterUtil._sourceQuery(targetId);

	      return association.source.find({ where: query, logging: options && options.logging }).then(function (instance) {
	        return instance.increment(counterCacheInstance.columnName, { by: 1, logging: options && options.logging });
	      });
	    },
	    decrement: function (targetId, options) {
	      var query = CounterUtil._sourceQuery(targetId);

	      return association.source.find({ where: query, logging: options && options.logging }).then(function (instance) {
	        return instance.decrement(counterCacheInstance.columnName, { by: 1, logging: options && options.logging });
	      });
	    },
	    // helpers
	    _targetQuery: function (id) {
	      var query = {};

	      query[association.foreignKey] = id;

	      return query;
	    },
	    _sourceQuery: function (id) {
	      var query = {};

	      query[association.source.primaryKeyAttribute] = id;

	      return query;
	    }
	  };

	  fullUpdateHook = function (target, options) {
	    var targetId = target.get(association.foreignKey)
	      , promises = [];

	    if (targetId) {
	      promises.push(CounterUtil.update(targetId, options));
	    }

	    if (previousTargetId && previousTargetId !== targetId) {
	      promises.push(CounterUtil.update(previousTargetId, options));
	    }

	    return Promise.all(promises).return(undefined);
	  };

	  atomicHooks = {
	    create: function (target, options) {
	      var targetId = target.get(association.foreignKey);

	      if (targetId) {
	        return CounterUtil.increment(targetId, options);
	      }
	    },
	    update: function (target, options) {
	      var targetId = target.get(association.foreignKey)
	        , promises = [];

	      if (targetId && !previousTargetId) {
	        promises.push(CounterUtil.increment(targetId, options));
	      }
	      if (!targetId && previousTargetId) {
	        promises.push(CounterUtil.decrement(targetId, options));
	      }
	      if (previousTargetId && targetId && previousTargetId !== targetId) {
	        promises.push(CounterUtil.increment(targetId, options));
	        promises.push(CounterUtil.decrement(previousTargetId, options));
	      }

	      return Promise.all(promises);
	    },
	    destroy: function (target, options) {
	      var targetId = target.get(association.foreignKey);

	      if (targetId) {
	        return CounterUtil.decrement(targetId, options);
	      }
	    }
	  };

	  // previousDataValues are cleared before afterUpdate, so we need to save this here
	  association.target.addHook('beforeUpdate', function (target) {
	    previousTargetId = target.previous(association.foreignKey);
	  });

	  if (this.options.atomic === false) {
	    association.target.addHook('afterCreate', fullUpdateHook);
	    association.target.addHook('afterUpdate', fullUpdateHook);
	    association.target.addHook('afterDestroy', fullUpdateHook);
	  } else {
	    association.target.addHook('afterCreate', atomicHooks.create);
	    association.target.addHook('afterUpdate', atomicHooks.update);
	    association.target.addHook('afterDestroy', atomicHooks.destroy);
	  }
	};

	module.exports = CounterCache;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Helpers = __webpack_require__(340)
	  , _ = __webpack_require__(127)
	  , Association = __webpack_require__(342)
	  , util = __webpack_require__(124);

	/**
	 * One-to-one association
	 *
	 * In the API reference below, replace `Association` with the actual name of your association, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.
	 * This is almost the same as `belongsTo` with one exception. The foreign key will be defined on the target model.
	 *
	 * @mixin HasOne
	 */
	var HasOne = function(srcModel, targetModel, options) {
	  Association.call(this);

	  this.associationType = 'HasOne';
	  this.source = srcModel;
	  this.target = targetModel;
	  this.options = options;
	  this.scope = options.scope;
	  this.isSingleAssociation = true;
	  this.isSelfAssociation = (this.source === this.target);
	  this.as = this.options.as;
	  this.foreignKeyAttribute = {};

	  if (this.as) {
	    this.isAliased = true;
	    this.options.name = {
	      singular: this.as
	    };
	  } else {
	    this.as = this.target.options.name.singular;
	    this.options.name = this.target.options.name;
	  }

	  if (_.isObject(this.options.foreignKey)) {
	    this.foreignKeyAttribute = this.options.foreignKey;
	    this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
	  } else if (this.options.foreignKey) {
	    this.foreignKey = this.options.foreignKey;
	  }

	  if (!this.foreignKey) {
	    this.foreignKey = Utils.camelizeIf(
	      [
	        Utils.underscoredIf(Utils.singularize(this.source.name), this.target.options.underscored),
	        this.source.primaryKeyAttribute
	      ].join('_'),
	      !this.source.options.underscored
	    );
	  }

	  this.sourceIdentifier = this.source.primaryKeyAttribute;
	  this.sourceKey = this.source.primaryKeyAttribute;
	  this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;

	  this.associationAccessor = this.as;
	  this.options.useHooks = options.useHooks;

	  if (this.target.rawAttributes[this.foreignKey]) {
	    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
	  }

	  // Get singular name, trying to uppercase the first letter, unless the model forbids it
	  var singular = Utils.uppercaseFirst(this.options.name.singular);

	  this.accessors = {
	    /**
	     * Get the associated instance.
	     *
	     * @param {Object} [options]
	     * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false
	     * @param {String} [options.schema] Apply a schema on the related model
	     * @return {Promise<Instance>}
	     * @method getAssociation
	     */
	    get: 'get' + singular,
	    /**
	     * Set the associated model.
	     *
	     * @param {Instance|String|Number} [newAssociation] An persisted instance or the primary key of a persisted instance to associate with this. Pass `null` or `undefined` to remove the association.
	     * @param {Object} [options] Options passed to getAssociation and `target.save`
	     * @return {Promise}
	     * @method setAssociation
	     */
	    set: 'set' + singular,
	    /**
	     * Create a new instance of the associated model and associate it with this.
	     *
	     * @param {Object} [values]
	     * @param {Object} [options] Options passed to `target.create` and setAssociation.
	     * @return {Promise}
	     * @method createAssociation
	     */
	    create: 'create' + singular
	  };
	};

	util.inherits(HasOne, Association);

	// the id is in the target table
	HasOne.prototype.injectAttributes = function() {
	  var newAttributes = {}
	    , keyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type;

	  newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {
	    type: this.options.keyType || keyType,
	    allowNull : true
	  });
	  Utils.mergeDefaults(this.target.rawAttributes, newAttributes);

	  this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;

	  if (this.options.constraints !== false) {
	    var target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
	    this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');
	    this.options.onUpdate = this.options.onUpdate || 'CASCADE';
	  }

	  Helpers.addForeignKeyConstraints(this.target.rawAttributes[this.foreignKey], this.source, this.target, this.options);

	  // Sync attributes and setters/getters to Model prototype
	  this.target.refreshAttributes();

	  Helpers.checkNamingCollision(this);

	  return this;
	};

	HasOne.prototype.mixin = function(obj) {
	  var association = this;

	  obj[this.accessors.get] = function(options) {
	    return association.get(this, options);
	  };

	  association.injectSetter(obj);
	  association.injectCreator(obj);
	};

	HasOne.prototype.get = function(instances, options) {
	  var association = this
	    , Target = association.target
	    , instance
	    , where = {};

	  options = Utils.cloneDeep(options);

	  if (options.hasOwnProperty('scope')) {
	    if (!options.scope) {
	      Target = Target.unscoped();
	    } else {
	      Target = Target.scope(options.scope);
	    }
	  }

	  if (options.hasOwnProperty('schema')) {
	    Target = Target.schema(options.schema, options.schemaDelimiter);
	  }

	  if (!Array.isArray(instances)) {
	    instance = instances;
	    instances = undefined;
	  }

	  if (instances) {
	    where[association.foreignKey] = {
	      $in: instances.map(function (instance) {
	        return instance.get(association.sourceKey);
	      })
	    };
	  } else {
	    where[association.foreignKey] = instance.get(association.sourceKey);
	  }

	  if (association.scope) {
	    _.assign(where, association.scope);
	  }

	  options.where = options.where ?
	                  {$and: [where, options.where]} :
	                  where;

	  if (instances) {
	    return Target.findAll(options).then(function (results) {
	      var result = {};
	      instances.forEach(function (instance) {
	        result[instance.get(association.sourceKey, {raw: true})] = null;
	      });

	      results.forEach(function (instance) {
	        result[instance.get(association.foreignKey, {raw: true})] = instance;
	      });

	      return result;
	    });
	  }
	  return Target.findOne(options);
	};

	HasOne.prototype.injectSetter = function(instancePrototype) {
	  var association = this;

	  instancePrototype[this.accessors.set] = function(associatedInstance, options) {
	    var instance = this,
	      alreadyAssociated;

	    options = _.assign({}, options, {
	      scope: false
	    });
	    return instance[association.accessors.get](options).then(function(oldInstance) {
	      // TODO Use equals method once #5605 is resolved
	      alreadyAssociated = oldInstance && associatedInstance && _.every(association.target.primaryKeyAttributes, function(attribute) {
	        return oldInstance.get(attribute, {raw: true}) === associatedInstance.get(attribute, {raw: true});
	      });

	      if (oldInstance && !alreadyAssociated) {
	        oldInstance[association.foreignKey] = null;
	        return oldInstance.save(_.extend({}, options, {
	          fields: [association.foreignKey],
	          allowNull: [association.foreignKey],
	          association: true
	        }));
	      }
	    }).then(function() {
	      if (associatedInstance && !alreadyAssociated) {
	        if (!(associatedInstance instanceof association.target.Instance)) {
	          var tmpInstance = {};
	          tmpInstance[association.target.primaryKeyAttribute] = associatedInstance;
	          associatedInstance = association.target.build(tmpInstance, {
	            isNewRecord: false
	          });
	        }

	        _.assign(associatedInstance, association.scope);
	        associatedInstance.set(association.foreignKey, instance.get(association.sourceIdentifier));

	        return associatedInstance.save(options);
	      }
	      return null;
	    });
	  };

	  return this;
	};

	HasOne.prototype.injectCreator = function(instancePrototype) {
	  var association = this;

	  instancePrototype[this.accessors.create] = function(values, options) {
	    var instance = this;
	    values = values || {};
	    options = options || {};

	    if (association.scope) {
	      Object.keys(association.scope).forEach(function (attribute) {
	        values[attribute] = association.scope[attribute];
	        if (options.fields) options.fields.push(attribute);
	      });
	    }

	    values[association.foreignKey] = instance.get(association.sourceIdentifier);
	    if (options.fields) options.fields.push(association.foreignKey);
	    return association.target.create(values, options);
	  };

	  return this;
	};

	module.exports = HasOne;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var validator = __webpack_require__(348).validator
	  , extendModelValidations = __webpack_require__(348).extendModelValidations
	  , Utils = __webpack_require__(122)
	  , sequelizeError = __webpack_require__(130)
	  , Promise = __webpack_require__(335)
	  , DataTypes = __webpack_require__(123)
	  , _ = __webpack_require__(127);

	/**
	 * The Main Instance Validator.
	 *
	 * @param {Instance} modelInstance The model instance.
	 * @param {Object} options A dict with options.
	 * @constructor
	 */
	var InstanceValidator = module.exports = function(modelInstance, options) {
	  options = _.clone(options) || {};

	  if (options.fields && !options.skip) {
	    options.skip = Utils._.difference(Object.keys(modelInstance.Model.attributes), options.fields);
	  }

	  // assign defined and default options
	  this.options = Utils._.defaults(options, {
	    skip: []
	  });

	  this.modelInstance = modelInstance;

	  /**
	   * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`
	   * @name validator
	   */
	  this.validator = validator;

	  /**
	   *  All errors will be stored here from the validations.
	   *
	   * @type {Array} Will contain keys that correspond to attributes which will
	   *   be Arrays of Errors.
	   */
	  this.errors = [];

	  /** @type {boolean} Indicates if validations are in progress */
	  this.inProgress = false;

	  extendModelValidations(modelInstance);
	};

	/** @define {string} The error key for arguments as passed by custom validators */
	InstanceValidator.RAW_KEY_NAME = '__raw';

	/**
	 * The main entry point for the Validation module, invoke to start the dance.
	 *
	 * @return {Promise}
	 */
	InstanceValidator.prototype.validate = function() {
	  if (this.inProgress) {
	    throw new Error('Validations already in progress.');
	  }
	  this.inProgress = true;

	  var self = this;
	  return Promise.all([
	    self._builtinValidators(),
	    self._customValidators()
	  ].map(function(promise) {
	    return promise.reflect();
	  })).then(function() {
	    if (self.errors.length) {
	      return new sequelizeError.ValidationError(null, self.errors);
	    } else {
	      return null;
	    }
	  });
	};

	/**
	 * Invoke the Validation sequence:
	 *   - Before Validation Model Hooks
	 *   - Validation
	 *   - On validation success: After Validation Model Hooks
	 *   - On validation failure: Validation Failed Model Hooks
	 *
	 * @return {Promise}
	 */
	InstanceValidator.prototype.hookValidate = function() {
	  var self = this;
	  return self.modelInstance.Model.runHooks('beforeValidate', self.modelInstance, self.options).then(function() {
	    return self.validate().then(function(error) {
	      if (error) {
	        return self.modelInstance.Model.runHooks('validationFailed', self.modelInstance, self.options, error).then(function(newError) {
	          throw newError || error;
	        });
	      }
	    });
	  }).then(function() {
	    return self.modelInstance.Model.runHooks('afterValidate', self.modelInstance, self.options);
	  }).return(self.modelInstance);
	};

	/**
	 * Will run all the built-in validators.
	 *
	 * @return {Promise(Array.<Promise.PromiseInspection>)} A promise from .reflect().
	 * @private
	 */
	InstanceValidator.prototype._builtinValidators = function() {
	  var self = this;

	  // promisify all attribute invocations
	  var validators = [];
	  Utils._.forIn(this.modelInstance.rawAttributes, function(rawAttribute, field) {
	    if (self.options.skip.indexOf(field) >= 0) {
	      return;
	    }

	    var value = self.modelInstance.dataValues[field];

	    if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {
	      // perform validations based on schema
	      self._validateSchema(rawAttribute, field, value);
	    }

	    if (self.modelInstance.validators.hasOwnProperty(field)) {
	      validators.push(self._builtinAttrValidate.call(self, value, field).reflect());
	    }
	  });

	  return Promise.all(validators);
	};

	/**
	 * Will run all the custom validators.
	 *
	 * @return {Promise(Array.<Promise.PromiseInspection>)} A promise from .reflect().
	 * @private
	 */
	InstanceValidator.prototype._customValidators = function() {
	  var validators = [];
	  var self = this;
	  Utils._.each(this.modelInstance.$modelOptions.validate, function(validator, validatorType) {
	    if (self.options.skip.indexOf(validatorType) >= 0) {
	      return;
	    }

	    var valprom = self._invokeCustomValidator(validator, validatorType)
	      // errors are handled in settling, stub this
	      .catch(function() {})
	      .reflect();

	    validators.push(valprom);
	  });

	  return Promise.all(validators);
	};

	/**
	 * Validate a single attribute with all the defined built-in validators.
	 *
	 * @param {*} value Anything.
	 * @param {string} field The field name.
	 * @return {Promise} A promise, will always resolve,
	 *   auto populates error on this.error local object.
	 * @private
	 */
	InstanceValidator.prototype._builtinAttrValidate = function(value, field) {
	  var self = this;
	  // check if value is null (if null not allowed the Schema pass will capture it)
	  if (value === null || typeof value === 'undefined') {
	    return Promise.resolve();
	  }

	  // Promisify each validator
	  var validators = [];
	  Utils._.forIn(this.modelInstance.validators[field], function(test,
	    validatorType) {

	    if (['isUrl', 'isURL', 'isEmail'].indexOf(validatorType) !== -1) {
	      // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object
	      if (typeof test === 'object' && test !== null && test.msg) {
	        test = {
	          msg: test.msg
	        };
	      } else if (test === true) {
	        test = {};
	      }
	    }

	    // Check for custom validator.
	    if (typeof test === 'function') {
	      return validators.push(self._invokeCustomValidator(test, validatorType, true, value, field).reflect());
	    }

	    var validatorPromise = self._invokeBuiltinValidator(value, test, validatorType, field);
	    // errors are handled in settling, stub this
	    validatorPromise.catch(function() {});
	    validators.push(validatorPromise.reflect());
	  });

	  return Promise.all(validators).then(this._handleReflectedResult.bind(this, field));
	};

	/**
	 * Prepare and invoke a custom validator.
	 *
	 * @param {Function} validator The custom validator.
	 * @param {string} validatorType the custom validator type (name).
	 * @param {boolean=} optAttrDefined Set to true if custom validator was defined
	 *   from the Attribute
	 * @return {Promise} A promise.
	 * @private
	 */
	InstanceValidator.prototype._invokeCustomValidator = Promise.method(function(validator, validatorType, optAttrDefined, optValue, optField) {
	  var validatorFunction = null;  // the validation function to call
	  var isAsync = false;

	  var validatorArity = validator.length;
	  // check if validator is async and requires a callback
	  var asyncArity = 1;
	  var errorKey = validatorType;
	  var invokeArgs;
	  if (optAttrDefined) {
	    asyncArity = 2;
	    invokeArgs = optValue;
	    errorKey = optField;
	  }
	  if (validatorArity === asyncArity) {
	    isAsync = true;
	  }

	  if (isAsync) {
	    if (optAttrDefined) {
	      validatorFunction = Promise.promisify(validator.bind(this.modelInstance, invokeArgs));
	    } else {
	      validatorFunction = Promise.promisify(validator.bind(this.modelInstance));
	    }
	    return validatorFunction().catch(this._pushError.bind(this, false, errorKey));
	  } else {
	    return Promise.try(validator.bind(this.modelInstance, invokeArgs)).catch(this._pushError.bind(this, false, errorKey));
	  }
	});

	/**
	 * Prepare and invoke a build-in validator.
	 *
	 * @param {*} value Anything.
	 * @param {*} test The test case.
	 * @param {string} validatorType One of known to Sequelize validators.
	 * @param {string} field The field that is being validated
	 * @return {Object} An object with specific keys to invoke the validator.
	 * @private
	 */
	InstanceValidator.prototype._invokeBuiltinValidator = Promise.method(function(value, test, validatorType, field) {
	  var self = this;
	  // Cast value as string to pass new Validator.js string requirement
	  var valueString = String(value);
	  // check if Validator knows that kind of validation test
	  if (typeof validator[validatorType] !== 'function') {
	    throw new Error('Invalid validator function: ' + validatorType);
	  }
	  var validatorArgs = self._extractValidatorArgs(test, validatorType, field);
	  if (!validator[validatorType].apply(validator, [valueString].concat(validatorArgs))) {
	  // extract the error msg
	    throw new Error(test.msg || 'Validation ' + validatorType + ' failed');
	  }
	});

	/**
	 * Will extract arguments for the validator.
	 *
	 * @param {*} test The test case.
	 * @param {string} validatorType One of known to Sequelize validators.
	 * @param {string} field The field that is being validated.
	 * @private
	 */
	InstanceValidator.prototype._extractValidatorArgs = function(test, validatorType, field) {
	  var validatorArgs = test.args || test;
	  var isLocalizedValidator = typeof(validatorArgs) !== 'string' && (validatorType === 'isAlpha' || validatorType === 'isAlphanumeric' || validatorType === 'isMobilePhone');

	  if (!Array.isArray(validatorArgs)) {
	    if (validatorType === 'isImmutable') {
	      validatorArgs = [validatorArgs, field];
	    } else if (isLocalizedValidator || validatorType === 'isIP') {
	      validatorArgs = [];
	    } else {
	      validatorArgs = [validatorArgs];
	    }
	  } else {
	    validatorArgs = validatorArgs.slice(0);
	  }
	  return validatorArgs;
	};

	/**
	 * Will validate a single field against its schema definition (isnull).
	 *
	 * @param {Object} rawAttribute As defined in the Schema.
	 * @param {string} field The field name.
	 * @param {*} value anything.
	 * @private
	 */
	InstanceValidator.prototype._validateSchema = function(rawAttribute, field, value) {
	  var error;

	  if (rawAttribute.allowNull === false && ((value === null) || (value === undefined))) {
	    error = new sequelizeError.ValidationErrorItem(field + ' cannot be null', 'notNull Violation', field, value);
	    this.errors.push(error);
	  }

	  if (rawAttribute.type === DataTypes.STRING || rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type === DataTypes.TEXT || rawAttribute.type instanceof DataTypes.TEXT) {
	    if (Array.isArray(value) || (_.isObject(value) && !value._isSequelizeMethod) && !Buffer.isBuffer(value)) {
	      error = new sequelizeError.ValidationErrorItem(field + ' cannot be an array or an object', 'string violation', field, value);
	      this.errors.push(error);
	    }
	  }
	};


	/**
	 * Handles the returned result of a Promise.reflect.
	 *
	 * If errors are found it populates this.error.
	 *
	 * @param {string} field The attribute name.
	 * @param {Array.<Promise.PromiseInspection>} Promise inspection objects.
	 * @private
	 */
	InstanceValidator.prototype._handleReflectedResult = function(field, promiseInspections) {
	  var self = this;
	  promiseInspections.forEach(function(promiseInspection) {
	    if (promiseInspection.isRejected()) {
	      var rejection = promiseInspection.error();
	      self._pushError(true, field, rejection);
	    }
	  });
	};

	/**
	 * Signs all errors retaining the original.
	 *
	 * @param {boolean} isBuiltin Determines if error is from builtin validator.
	 * @param {string} errorKey The error key to assign on this.errors object.
	 * @param {Error|string} rawError The original error.
	 * @private
	 */
	InstanceValidator.prototype._pushError = function(isBuiltin, errorKey, rawError) {
	  var message = rawError.message || rawError || 'Validation error';
	  var error = new sequelizeError.ValidationErrorItem(message, 'Validation error', errorKey, rawError);
	  error[InstanceValidator.RAW_KEY_NAME] = rawError;

	  this.errors.push(error);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var validator = __webpack_require__(131)
	  , _ = __webpack_require__(127);

	var extensions = {
	  extend: function(name, fn) {
	    this[name] = fn;

	    return this;
	  },
	  notEmpty: function(str) {
	    return !str.match(/^[\s\t\r\n]*$/);
	  },
	  len: function(str, min, max) {
	    return this.isLength(str, min, max);
	  },
	  isUrl: function(str) {
	    return this.isURL(str);
	  },
	  isIPv6: function(str) {
	    return this.isIP(str, 6);
	  },
	  isIPv4: function(str) {
	    return this.isIP(str, 4);
	  },
	  notIn: function(str, values) {
	    return !this.isIn(str, values);
	  },
	  regex: function(str, pattern, modifiers) {
	    str += '';
	    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {
	      pattern = new RegExp(pattern, modifiers);
	    }
	    return str.match(pattern);
	  },
	  notRegex: function(str, pattern, modifiers) {
	    return !this.regex(str, pattern, modifiers);
	  },
	  isDecimal: function(str) {
	    return str !== '' && str.match(/^(?:-?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/);
	  },
	  min: function(str, val) {
	    var number = parseFloat(str);
	    return isNaN(number) || number >= val;
	  },
	  max: function(str, val) {
	    var number = parseFloat(str);
	    return isNaN(number) || number <= val;
	  },
	  not: function(str, pattern, modifiers) {
	    return this.notRegex(str, pattern, modifiers);
	  },
	  contains: function(str, elem) {
	    return str.indexOf(elem) >= 0 && !!elem;
	  },
	  notContains: function(str, elem) {
	    return !this.contains(str, elem);
	  },
	  is: function(str, pattern, modifiers) {
	    return this.regex(str, pattern, modifiers);
	  },
	};
	var extendModelValidations = function(modelInstance) {
	  var extensions = {
	        isImmutable: function(str, param, field) {
	          return (modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field]);
	        },
	      };

	  _.forEach(extensions, function(extend, key) {
	    validator[key] = extend;
	  });
	};

	// Deprecate this.
	validator.notNull = function() {
	  throw new Error('Warning "notNull" validation has been deprecated in favor of Schema based "allowNull"');
	};

	// https://github.com/chriso/validator.js/blob/1.5.0/lib/validators.js
	_.forEach(extensions, function(extend, key) {
	  validator[key] = extend;
	});

	module.exports = {
	  extensions: extensions,
	  extendModelValidations: extendModelValidations,
	  validator: validator,
	};


/***/ },
/* 349 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  SELECT: 'SELECT',
	  INSERT: 'INSERT',
	  UPDATE: 'UPDATE',
	  BULKUPDATE: 'BULKUPDATE',
	  BULKDELETE: 'BULKDELETE',
	  DELETE: 'DELETE',
	  UPSERT: 'UPSERT',
	  VERSION: 'VERSION',
	  SHOWTABLES: 'SHOWTABLES',
	  SHOWINDEXES: 'SHOWINDEXES',
	  DESCRIBE: 'DESCRIBE',
	  RAW: 'RAW',
	  FOREIGNKEYS: 'FOREIGNKEYS',
	};


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(undefined) {
	  var root = this;

	  // Weird IE shit, objects do not have hasOwn, but the prototype does...
	  var hasOwnProp = Object.prototype.hasOwnProperty;

	  // Object cloning function, uses jQuery/Underscore/Object.create depending on what's available

	  var clone = function (object) {
	    if (typeof Object.hasOwnProperty !== 'undefined') {
	      var target = {};
	      for (var i in object) {
	        if (hasOwnProp.call(object, i)) {
	          target[i] = object[i];
	        }
	      }
	      return target;
	    }
	    if (typeof jQuery !== 'undefined') {
	      return jQuery.extend({}, object);
	    }
	    if (typeof _ !== 'undefined') {
	      return _.extend({}, object);
	    }
	  };

	  var reverseDupArray = function (array) {
	    var result = new Array(array.length);
	    var index  = array.length;
	    var arrayMaxIndex = index - 1;

	    while (index--) {
	      result[arrayMaxIndex - index] = array[index];
	    }

	    return result;
	  };

	  var Dottie = function() {
	    var args = Array.prototype.slice.call(arguments);

	    if (args.length == 2) {
	      return Dottie.find.apply(this, args);
	    }
	    return Dottie.transform.apply(this, args);
	  };

	  // Legacy syntax, changed syntax to have get/set be similar in arg order
	  Dottie.find = function(path, object) {
	    return Dottie.get(object, path);
	  };

	  // Dottie memoization flag
	  Dottie.memoizePath = true;
	  var memoized = {};

	  // Traverse object according to path, return value if found - Return undefined if destination is unreachable
	  Dottie.get = function(object, path, defaultVal) {
	    if ((object === undefined) || (object === null)) return defaultVal;

	    var names;

	    if (typeof path === "string") {
	      if (Dottie.memoizePath) {
	        if (memoized[path]) {
	          names = memoized[path].slice(0);
	        } else {
	          names = path.split('.').reverse();
	          memoized[path] = names.slice(0);
	        }
	      } else {
	        names = path.split('.').reverse();
	      }
	    } else if (Array.isArray(path)) {
	      names = reverseDupArray(path);
	    }

	    while (names.length && (object = object[names.pop()]) !== undefined && object !== null);

	    // Handle cases where accessing a childprop of a null value
	    if (object === null && names.length) object = undefined;

	    return (object === undefined ? defaultVal : object);
	  };

	  Dottie.exists = function(object, path) {
	    return Dottie.get(object, path) !== undefined;
	  };

	  // Set nested value
	  Dottie.set = function(object, path, value, options) {
	    var pieces = Array.isArray(path) ? path : path.split('.'), current = object, piece, length = pieces.length;

	    if (typeof current !== 'object') {
	        throw new Error('Parent is not an object.');
	    }

	    for (var index = 0; index < length; index++) {
	      piece = pieces[index];

	      // Create namespace (object) where none exists.
	      // If `force === true`, bruteforce the path without throwing errors.
	      if (!hasOwnProp.call(current, piece) || current[piece] === undefined || (typeof current[piece] !== 'object' && options && options.force === true)) {
	        current[piece] = {};
	      }

	      if (index == (length - 1)) {
	        // Set final value
	        current[piece] = value;
	      } else {
	        // We do not overwrite existing path pieces by default
	        if (typeof current[piece] !== 'object') {
	          throw new Error('Target key "' + piece + '" is not suitable for a nested value. (It is in use as non-object. Set `force` to `true` to override.)');
	        }

	        // Traverse next in path
	        current = current[piece];
	      }
	    }

	    // Is there any case when this is relevant? It's also the last line in the above for-loop
	    current[piece] = value;
	  };

	  // Set default nested value
	  Dottie['default'] = function(object, path, value) {
	    if (Dottie.get(object, path) === undefined) {
	      Dottie.set(object, path, value);
	    }
	  };

	  // Transform unnested object with .-seperated keys into a nested object.
	  Dottie.transform = function Dottie$transformfunction(object, options) {
	    if (Array.isArray(object)) {
	      return object.map(function(o) {
	        return Dottie.transform(o, options);
	      });
	    }

	    options = options || {};
	    options.delimiter = options.delimiter || '.';

	    var pieces
	      , piecesLength
	      , piece
	      , current
	      , transformed = {}
	      , key
	      , keys = Object.keys(object)
	      , length = keys.length
	      , i;

	    for (i = 0; i < length; i++) {
	      key = keys[i];

	      if (key.indexOf(options.delimiter) !== -1) {
	        pieces = key.split(options.delimiter);
	        piecesLength = pieces.length;
	        current = transformed;

	        for (var index = 0; index < piecesLength; index++) {
	          piece = pieces[index];
	          if (index != (piecesLength - 1) && !current.hasOwnProperty(piece)) {
	            current[piece] = {};
	          }

	          if (index == (piecesLength - 1)) {
	            current[piece] = object[key];
	          }

	          current = current[piece];
	          if (current === null) {
	            break;
	          }
	        }
	      } else {
	        transformed[key] = object[key];
	      }
	    }

	    return transformed;
	  };

	  Dottie.flatten = function(object, seperator) {
	    if (typeof seperator === "undefined") seperator = '.';
	    var flattened = {}
	      , current
	      , nested;

	    for (var key in object) {
	      if (hasOwnProp.call(object, key)) {
	        current = object[key];
	        if (Object.prototype.toString.call(current) === "[object Object]") {
	          nested = Dottie.flatten(current, seperator);

	          for (var _key in nested) {
	            flattened[key+seperator+_key] = nested[_key];
	          }
	        } else {
	          flattened[key] = current;
	        }
	      }
	    }

	    return flattened;
	  };

	  Dottie.paths = function(object, prefixes) {
	    var paths = [];
	    var value;
	    var key;

	    prefixes = prefixes || [];

	    if (typeof object === 'object') {
	      for (key in object) {
	        value = object[key];

	        if (typeof value === 'object') {
	          paths = paths.concat(Dottie.paths(value, prefixes.concat([key])));
	        } else {
	          paths.push(prefixes.concat(key).join('.'));
	        }
	      }
	    } else {
	      throw new Error('Paths was called with non-object argument.');
	    }

	    return paths;
	  };

	  if (typeof module !== 'undefined' && module.exports) {
	    exports = module.exports = Dottie;
	  } else {
	    root['Dottie'] = Dottie;
	    root['Dot'] = Dottie; //BC

	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return Dottie; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	  }
	})();


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335);

	/**
	 * Hooks are function that are called before and after  (bulk-) creation/updating/deletion and validation. Hooks can be added to you models in three ways:
	 *
	 * 1. By specifying them as options in `sequelize.define`
	 * 2. By calling `hook()` with a string and your hook handler function
	 * 3. By calling the function with the same name as the hook you want

	 * ```js
	 * // Method 1
	 * sequelize.define(name, { attributes }, {
	 *   hooks: {
	 *     beforeBulkCreate: function () {
	 *       // can be a single function
	 *     },
	 *     beforeValidate: [
	 *       function () {},
	 *       function() {} // Or an array of several
	 *     ]
	 *   }
	 * })
	 *
	 * // Method 2
	 * Model.hook('afterDestroy', function () {})
	 *
	 * // Method 3
	 * Model.afterBulkUpdate(function () {})
	 * ```
	 *
	 * @see {Sequelize#define}
	 * @mixin Hooks
	 * @name Hooks
	 */

	var hookTypes = {
	  beforeValidate: {params: 2},
	  afterValidate: {params: 2},
	  validationFailed: {params: 3},
	  beforeCreate: {params: 2},
	  afterCreate: {params: 2},
	  beforeDestroy: {params: 2},
	  afterDestroy: {params: 2},
	  beforeRestore: {params: 2},
	  afterRestore: {params: 2},
	  beforeUpdate: {params: 2},
	  afterUpdate: {params: 2},
	  beforeBulkCreate: {params: 2},
	  afterBulkCreate: {params: 2},
	  beforeBulkDestroy: {params: 1},
	  afterBulkDestroy: {params: 1},
	  beforeBulkRestore: {params: 1},
	  afterBulkRestore: {params: 1},
	  beforeBulkUpdate: {params: 1},
	  afterBulkUpdate: {params: 1},
	  beforeFind: {params: 1},
	  beforeFindAfterExpandIncludeAll: {params: 1},
	  beforeFindAfterOptions: {params: 1},
	  afterFind: {params: 2},
	  beforeCount: {params: 1},
	  beforeDefine: {params: 2, sync: true},
	  afterDefine: {params: 1, sync: true},
	  beforeInit: {params: 2, sync: true},
	  afterInit: {params: 1, sync: true},
	  beforeConnect: {params: 1},
	  afterConnect: {params: 2},
	  beforeSync: {params: 1},
	  afterSync: {params: 1},
	  beforeBulkSync: {params: 1},
	  afterBulkSync: {params: 1}
	};

	var hookAliases = {
	  beforeDelete: 'beforeDestroy',
	  afterDelete: 'afterDestroy',
	  beforeBulkDelete: 'beforeBulkDestroy',
	  afterBulkDelete: 'afterBulkDestroy',
	  beforeConnection: 'beforeConnect'
	};

	var Hooks = {
	  replaceHookAliases: function(hooks) {
	    var realHookName;

	    Utils._.each(hooks, function(hooksArray, name) {
	      // Does an alias for this hook name exist?
	      if (realHookName = hookAliases[name]) {
	        // Add the hooks to the actual hook
	        hooks[realHookName] = (hooks[realHookName] || []).concat(hooksArray);

	        // Delete the alias
	        delete hooks[name];
	      }
	    });

	    return hooks;
	  },

	  runHooks: function(hooks) {
	    var self = this
	      , fn
	      , fnArgs = Utils.sliceArgs(arguments, 1)
	      , hookType;

	    if (typeof fnArgs[fnArgs.length - 1] === 'function') {
	      fn = fnArgs.pop();
	    }

	    if (typeof hooks === 'string') {
	      hookType = hooks;
	      hooks = this.options.hooks[hookType] || [];
	      if (!Array.isArray(hooks)) hooks = hooks === undefined ? [] : [hooks];
	      if (this.sequelize) hooks = hooks.concat(this.sequelize.options.hooks[hookType] || []);
	    }

	    if (!Array.isArray(hooks)) {
	      hooks = hooks === undefined ? [] : [hooks];
	    }

	    // run hooks as sync functions if flagged as sync
	    if (hookTypes[hookType] && hookTypes[hookType].sync) {
	      hooks.forEach(function(hook) {
	        if (typeof hook === 'object') hook = hook.fn;
	        return hook.apply(self, fnArgs);
	      });
	      return;
	    }

	    // run hooks async
	    var promise = Promise.each(hooks, function (hook) {
	      if (typeof hook === 'object') {
	        hook = hook.fn;
	      }

	      if (hookType && hook.length > hookTypes[hookType].params) {
	        hook = Promise.promisify(hook, self);
	      }

	      return hook.apply(self, fnArgs);
	    }).return();

	    if (fn) {
	      return promise.nodeify(fn);
	    }

	    return promise;
	  },

	  hook: function() {
	    return Hooks.addHook.apply(this, arguments);
	  },

	  /**
	   * Add a hook to the model
	   *
	   * @param {String}    hooktype
	   * @param {String}    [name]    Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.
	   * @param {Function}  fn        The hook function
	   *
	   * @alias hook
	   */
	  addHook: function(hookType, name, fn) {
	    if (typeof name === 'function') {
	      fn = name;
	      name = null;
	    }

	    hookType = hookAliases[hookType] || hookType;

	    this.options.hooks[hookType] = this.options.hooks[hookType] || [];
	    this.options.hooks[hookType].push(!!name ? {name: name, fn: fn} : fn);
	    return this;
	  },

	  /**
	   * Remove hook from the model
	   *
	   * @param {String} hookType
	   * @param {String} name
	   */
	  removeHook: function(hookType, name) {
	    hookType = hookAliases[hookType] || hookType;

	    if (!this.hasHook(hookType)) {
	      return this;
	    }

	    this.options.hooks[hookType] = this.options.hooks[hookType].filter(function (hook) {
	      // don't remove unnamed hooks
	      if (typeof hook === 'function') {
	        return true;
	      }

	      return typeof hook === 'object' && hook.name !== name;
	    });

	    return this;
	  },

	  /*
	   * Check whether the mode has any hooks of this type
	   *
	   * @param {String}  hookType
	   *
	   * @alias hasHooks
	   */
	  hasHook: function(hookType) {
	    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;
	  },
	};

	Hooks.hasHooks = Hooks.hasHook;

	/**
	 * A hook that is run before validation
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 * @name beforeValidate
	 */

	/**
	 * A hook that is run after validation
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 * @name afterValidate
	 */

	/**
	 * A hook that is run when validation fails
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options, error. Error is the
	 * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.
	 * @name validationFailed
	 */

	/**
	 * A hook that is run before creating a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with attributes, options
	 * @name beforeCreate
	 */

	/**
	 * A hook that is run after creating a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with attributes, options
	 * @name afterCreate
	 */

	/**
	 * A hook that is run before destroying a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 *
	 * @name beforeDestroy
	 * @alias beforeDelete
	 */

	/**
	 * A hook that is run after destroying a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 *
	 * @name afterDestroy
	 * @alias afterDelete
	 */

	/**
	 * A hook that is run before restoring a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 *
	 * @name beforeRestore
	 */

	/**
	 * A hook that is run after restoring a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 *
	 * @name afterRestore
	 */

	/**
	 * A hook that is run before updating a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 * @name beforeUpdate
	 */

	/**
	 * A hook that is run after updating a single instance
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance, options
	 * @name afterUpdate
	 */

	/**
	 * A hook that is run before creating instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instances, options
	 * @name beforeBulkCreate
	 */

	/**
	 * A hook that is run after creating instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instances, options
	 * @name afterBulkCreate
	 */

	/**
	 * A hook that is run before destroying instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 *
	 * @name beforeBulkDestroy
	 * @alias beforeBulkDelete
	 */

	/**
	 * A hook that is run after destroying instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 *
	 * @name afterBulkDestroy
	 * @alias afterBulkDelete
	 */

	/**
	 * A hook that is run before restoring instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 *
	 * @name beforeBulkRestore
	 */

	/**
	 * A hook that is run after restoring instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 *
	 * @name afterBulkRestore
	 */

	/**
	 * A hook that is run before updating instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name beforeBulkUpdate
	 */

	/**
	 * A hook that is run after updating instances in bulk
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name afterBulkUpdate
	 */

	/**
	 * A hook that is run before a find (select) query
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name beforeFind
	 */

	/**
	 * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name beforeFindAfterExpandIncludeAll
	 */

	/**
	 * A hook that is run before a find (select) query, after all option parsing is complete
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name beforeFindAfterOptions
	 */

	/**
	 * A hook that is run after a find (select) query
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with instance(s), options
	 * @name afterFind
	 */

	/**
	 * A hook that is run before a count query
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options
	 * @name beforeCount
	 */

	/**
	 * A hook that is run before a define call
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with attributes, options
	 * @name beforeDefine
	 */

	/**
	 * A hook that is run after a define call
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with factory
	 * @name afterDefine
	 */

	/**
	 * A hook that is run before Sequelize() call
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with config, options
	 * @name beforeInit
	 */

	/**
	 * A hook that is run after Sequelize() call
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with sequelize
	 * @name afterInit
	 * @memberOf Sequelize
	 */

	/**
	 * A hook that is run before a connection is created
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with config passed to connection
	 * @name beforeConnect
	 * @memberOf Sequelize
	 */

	/**
	 * A hook that is run after a connection is created
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection
	 * @name afterConnect
	 * @memberOf Sequelize
	 */

	/**
	 * A hook that is run before Model.sync call
	 * @param {String}   name
	 * @param {Function} fn   A callback function that is called with options passed to Model.sync
	 * @name beforeSync
	 * @memberOf Sequelize
	 */

	 /**
	  * A hook that is run before a connection is created
	  * @param {String}   name
	  * @param {Function} fn   A callback function that is called with config passed to connection
	  * @name beforeConnect
	  */

	 /**
	  * A hook that is run before Model.sync call
	  * @param {String}   name
	  * @param {Function} fn   A callback function that is called with options passed to Model.sync
	  * @name beforeSync
	  */

	 /**
	  * A hook that is run after Model.sync call
	  * @param {String}   name
	  * @param {Function} fn   A callback function that is called with options passed to Model.sync
	  * @name afterSync
	  */

	  /**
	   * A hook that is run before sequelize.sync call
	   * @param {String}   name
	   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
	   * @name beforeBulkSync
	   */

	  /**
	   * A hook that is run after sequelize.sync call
	   * @param {String}   name
	   * @param {Function} fn   A callback function that is called with options passed to sequelize.sync
	   * @name afterBulkSync
	   */

	module.exports = {
	  hooks: hookTypes,
	  hookAliases: hookAliases,

	  applyTo: function(Model) {
	    Utils._.mixin(Model, Hooks);
	    Utils._.mixin(Model.prototype, Hooks);

	    var allHooks = Object.keys(hookTypes).concat(Object.keys(hookAliases));
	    allHooks.forEach(function(hook) {
	      Model.prototype[hook] = function(name, callback) {
	        return this.addHook(hook, name, callback);
	      };
	    });
	  }
	};


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , _ = __webpack_require__(127)
	  , HasOne = __webpack_require__(346)
	  , HasMany = __webpack_require__(344)
	  , BelongsToMany = __webpack_require__(343)
	  , BelongsTo = __webpack_require__(339);

	/**
	 * Creating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target).
	 *
	 * * hasOne - adds a foreign key to the target and singular association mixins to the source.
	 * * belongsTo - add a foreign key and singular association mixins to the source.
	 * * hasMany - adds a foreign key to target and plural association mixins to the source.
	 * * belongsToMany - creates an N:M association with a join table and adds plural association mixins to the source. The junction table is created with sourceId and targetId.
	 *
	 * Creating an association will add a foreign key constraint to the attributes. All associations use `CASCADE` on update and `SET NULL` on delete, except for n:m, which also uses `CASCADE` on delete.
	 *
	 * When creating associations, you can provide an alias, via the `as` option. This is useful if the same model is associated twice, or you want your association to be called something other than the name of the target model.
	 *
	 * As an example, consider the case where users have many pictures, one of which is their profile picture. All pictures have a `userId`, but in addition the user model also has a `profilePictureId`, to be able to easily load the user's profile picture.
	 *
	 * ```js
	 * User.hasMany(Picture)
	 * User.belongsTo(Picture, { as: 'ProfilePicture', constraints: false })
	 *
	 * user.getPictures() // gets you all pictures
	 * user.getProfilePicture() // gets you only the profile picture
	 *
	 * User.findAll({
	 *   where: ...,
	 *   include: [
	 *     { model: Picture }, // load all pictures
	 *     { model: Picture, as: 'ProfilePicture' }, // load the profile picture. Notice that the spelling must be the exact same as the one in the association
	 *   ]
	 * })
	 * ```
	 * To get full control over the foreign key column added by sequelize, you can use the `foreignKey` option. It can either be a string, that specifies the name, or and object type definition,
	 * equivalent to those passed to `sequelize.define`.
	 *
	 * ```js
	 * User.hasMany(Picture, { foreignKey: 'uid' })
	 * ```
	 *
	 * The foreign key column in Picture will now be called `uid` instead of the default `userId`.
	 *
	 * ```js
	 * User.hasMany(Picture, {
	 *   foreignKey: {
	 *     name: 'uid',
	 *     allowNull: false
	 *   }
	 * })
	 * ```
	 *
	 * This specifies that the `uid` column cannot be null. In most cases this will already be covered by the foreign key constraints, which sequelize creates automatically, but can be useful in case where the foreign keys are disabled, e.g. due to circular references (see `constraints: false` below).
	 *
	 * When fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to `find`/`findAll`. To only get pictures in JPG, you can do:
	 *
	 * ```js
	 * user.getPictures({
	 *   where: {
	 *     format: 'jpg'
	 *   }
	 * })
	 * ```
	 *
	 * There are several ways to update and add new associations. Continuing with our example of users and pictures:
	 * ```js
	 * user.addPicture(p) // Add a single picture
	 * user.setPictures([p1, p2]) // Associate user with ONLY these two picture, all other associations will be deleted
	 * user.addPictures([p1, p2]) // Associate user with these two pictures, but don't touch any current associations
	 * ```
	 *
	 * You don't have to pass in a complete object to the association functions, if your associated model has a single primary key:
	 *
	 * ```js
	 * user.addPicture(req.query.pid) // Here pid is just an integer, representing the primary key of the picture
	 * ```
	 *
	 * In the example above we have specified that a user belongs to his profile picture. Conceptually, this might not make sense, but since we want to add the foreign key to the user model this is the way to do it.
	 *
	 * Note how we also specified `constraints: false` for profile picture. This is because we add a foreign key from user to picture (profilePictureId), and from picture to user (userId). If we were to add foreign keys to both, it would create a cyclic dependency, and sequelize would not know which table to create first, since user depends on picture, and picture depends on user. These kinds of problems are detected by sequelize before the models are synced to the database, and you will get an error along the lines of `Error: Cyclic dependency found. 'users' is dependent of itself`. If you encounter this, you should either disable some constraints, or rethink your associations completely.
	 *
	 * @mixin Associations
	 * @name Associations
	 */
	var Mixin = module.exports = function() {};

	// The logic for hasOne and belongsTo is exactly the same
	var singleLinked = function (Type) {
	  return function(target, options) { // testhint options:none
	    if (!(target instanceof this.sequelize.Model)) {
	      throw new Error(this.name + '.' + Utils.lowercaseFirst(Type.toString()) + ' called with something that\'s not an instance of Sequelize.Model');
	    }

	    var source = this;

	    // Since this is a mixin, we'll need a unique variable name for hooks (since Model will override our hooks option)
	    options = options || {};
	    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);
	    options.useHooks = options.hooks;

	    // the id is in the foreign table
	    var association = new Type(source, target, _.extend(options, source.options));
	    source.associations[association.associationAccessor] = association.injectAttributes();

	    if (association.mixin) {
	      association.mixin(source.Instance.prototype);
	    } else {
	      association.injectGetter(source.Instance.prototype);
	      association.injectSetter(source.Instance.prototype);
	      association.injectCreator(source.Instance.prototype);
	    }

	    return association;
	  };
	};
	/**
	 * Creates an association between this (the source) and the provided target. The foreign key is added on the target.
	 *
	 * Example: `User.hasOne(Profile)`. This will add userId to the profile table.
	 *
	 * @method hasOne
	 * @param {Model}           target
	 * @param {object}          [options]
	 * @param {boolean}         [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks
	 * @param {string}          [options.as] The alias of this model, in singular form. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target
	 * @param {string|object}   [options.foreignKey] The name of the foreign key in the target table or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source
	 * @param {string}          [options.onDelete='SET&nbsp;NULL|CASCADE'] SET NULL if foreignKey allows nulls, CASCADE if otherwise
	 * @param {string}          [options.onUpdate='CASCADE']
	 * @param {boolean}         [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.
	 */
	Mixin.hasOne = singleLinked(HasOne);

	/**
	 * Creates an association between this (the source) and the provided target. The foreign key is added on the source.
	 *
	 * Example: `Profile.belongsTo(User)`. This will add userId to the profile table.
	 *
	 * @method belongsTo
	 * @param {Model}           target
	 * @param {object}          [options]
	 * @param {boolean}         [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks
	 * @param {string}          [options.as] The alias of this model, in singular form. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the singularized name of target
	 * @param {string|object}   [options.foreignKey] The name of the foreign key in the source table or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of target + primary key of target
	 * @param {string}          [options.targetKey] The name of the field to use as the key for the association in the target table. Defaults to the primary key of the target table
	 * @param {string}          [options.onDelete='SET&nbsp;NULL|NO&nbsp;ACTION'] SET NULL if foreignKey allows nulls, NO ACTION if otherwise
	 * @param {string}          [options.onUpdate='CASCADE']
	 * @param {boolean}         [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.
	 */
	Mixin.belongsTo = singleLinked(BelongsTo);

	/**
	 * Creates a 1:m association between this (the source) and the provided target. The foreign key is added on the target.
	 *
	 * Example: `User.hasMany(Profile)`. This will add userId to the profile table.
	 *
	 * @param {Model}               target
	 * @param {object}              [options]
	 * @param {boolean}             [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks
	 * @param {string|object}       [options.as] The alias of this model. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with `plural` and `singular` keys. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target
	 * @param {string|object}       [options.foreignKey] The name of the foreign key in the target table or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source
	 * @param {object}              [options.scope] A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)
	 * @param {string}              [options.onDelete='SET&nbsp;NULL|CASCADE'] SET NULL if foreignKey allows nulls, CASCADE if otherwise
	 * @param {string}              [options.onUpdate='CASCADE']
	 * @param {boolean}             [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.
	 */
	Mixin.hasMany = function(target, options) { // testhint options:none
	  if (!(target instanceof this.sequelize.Model)) {
	    throw new Error(this.name + '.hasMany called with something that\'s not an instance of Sequelize.Model');
	  }

	  var source = this;

	  // Since this is a mixin, we'll need a unique variable name for hooks (since Model will override our hooks option)
	  options = options || {};
	  options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);
	  options.useHooks = options.hooks;

	  options = _.extend(options, _.omit(source.options, ['hooks']));

	  // the id is in the foreign table or in a connecting table
	  var association = new HasMany(source, target, options);
	  source.associations[association.associationAccessor] = association;

	  association.injectAttributes();
	  association.mixin(source.Instance.prototype);

	  return association;
	};

	/**
	 * Create an N:M association with a join table.
	 *
	 * ```js
	 * User.belongsToMany(Project, { through: 'UserProjects' })
	 * Project.belongsToMany(User, { through: 'UserProjects' })
	 * ```
	 * Defining `through` is required. Sequelize would previously attempt to auto generate names but that would not always lead to the most logical setups.
	 *
	 * If you define a through model with custom attributes, these attributes can be set when adding / setting new associations in two ways. Consider users and projects from before with a join table that stores whether the project has been started yet:
	 * ```js
	 * var UserProjects = sequelize.define('UserProjects', {
	 *   started: Sequelize.BOOLEAN
	 * })
	 * User.belongsToMany(Project, { through: UserProjects })
	 * Project.belongsToMany(User, { through: UserProjects })
	 * ```
	 * ```js
	 * jan.addProject(homework, { started: false }) // The homework project is not started yet
	 * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started
	 * ```
	 *
	 * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:
	 *
	 * ```js
	 * p1.UserProjects = {
	 *   started: true
	 * }
	 * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.
	 * ```
	 *
	 * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.
	 * ```js
	 * user.getProjects().then(function (projects) {
	 *   var p1 = projects[0]
	 *   p1.UserProjects.started // Is this project started yet?
	 * })
	 * ```
	 *
	 * @param {Model}               target
	 * @param {object}              [options]
	 * @param {boolean}             [options.hooks=false] Set to true to run before-/afterDestroy hooks when an associated model is deleted because of a cascade. For example if `User.hasOne(Profile, {onDelete: 'cascade', hooks:true})`, the before-/afterDestroy hooks for profile will be called when a user is deleted. Otherwise the profile will be deleted without invoking any hooks
	 * @param {Model|string|object} [options.through] The name of the table that is used to join source and target in n:m associations. Can also be a sequelize model if you want to define the junction table yourself and add extra attributes to it.
	 * @param {Model}               [options.through.model] The model used to join both sides of the N:M association.
	 * @param {object}              [options.through.scope] A key/value set that will be used for association create and find defaults on the through model. (Remember to add the attributes to the through model)
	 * @param {boolean}             [options.through.unique=true] If true a unique key will be generated from the foreign keys used (might want to turn this off and create specific unique keys when using scopes)
	 * @param {string|object}       [options.as] The alias of this association. If you provide a string, it should be plural, and will be singularized using node.inflection. If you want to control the singular version yourself, provide an object with `plural` and `singular` keys. See also the `name` option passed to `sequelize.define`. If you create multiple associations between the same tables, you should provide an alias to be able to distinguish between them. If you provide an alias when creating the association, you should provide the same alias when eager loading and when getting associated models. Defaults to the pluralized name of target
	 * @param {string|object}       [options.foreignKey] The name of the foreign key in the join table (representing the source model) or an object representing the type definition for the foreign column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of source + primary key of source
	 * @param {string|object}       [options.otherKey] The name of the foreign key in the join table (representing the target model) or an object representing the type definition for the other column (see `Sequelize.define` for syntax). When using an object, you can add a `name` property to set the name of the column. Defaults to the name of target + primary key of target
	 * @param {object}              [options.scope] A key/value set that will be used for association create and find defaults on the target. (sqlite not supported for N:M)
	 * @param {boolean}             [options.timestamps=sequelize.options.timestamps] Should the join model have timestamps
	 * @param {string}              [options.onDelete='SET&nbsp;NULL|CASCADE'] Cascade if this is a n:m, and set null if it is a 1:m
	 * @param {string}              [options.onUpdate='CASCADE']
	 * @param {boolean}             [options.constraints=true] Should on update and on delete constraints be enabled on the foreign key.
	 */
	Mixin.belongsToMany = function(targetModel, options) { // testhint options:none
	  if (!(targetModel instanceof this.sequelize.Model)) {
	    throw new Error(this.name + '.belongsToMany called with something that\'s not an instance of Sequelize.Model');
	  }

	  var sourceModel = this;

	  // Since this is a mixin, we'll need a unique variable name for hooks (since Model will override our hooks option)
	  options = options || {};
	  options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);
	  options.useHooks = options.hooks;
	  options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;
	  options = _.extend(options, _.omit(sourceModel.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));

	  // the id is in the foreign table or in a connecting table
	  var association = new BelongsToMany(sourceModel, targetModel, options);
	  sourceModel.associations[association.associationAccessor] = association.injectAttributes();

	  association.injectGetter(sourceModel.Instance.prototype);
	  association.injectSetter(sourceModel.Instance.prototype);
	  association.injectCreator(sourceModel.Instance.prototype);

	  return association;
	};

	Mixin.getAssociation = function(target, alias) {
	  for (var associationName in this.associations) {
	    if (this.associations.hasOwnProperty(associationName)) {
	      var association = this.associations[associationName];

	      if (association.target.name === target.name && (alias === undefined ? !association.isAliased : association.as === alias)) {
	        return association;
	      }
	    }
	  }

	  return null;
	};


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(124);


	/**
	 * A collection of properties related to deferrable constraints. It can be used to
	 * make foreign key constraints deferrable and to set the constraints within a
	 * transaction. This is only supported in PostgreSQL.
	 *
	 * The foreign keys can be configured like this. It will create a foreign key
	 * that will check the constraints immediately when the data was inserted.
	 *
	 * ```js
	 * sequelize.define('Model', {
	 *   foreign_id: {
	 *     type: Sequelize.INTEGER,
	 *     references: {
	 *       model: OtherModel,
	 *       key: 'id',
	 *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
	 *     }
	 *   }
	 * });
	 * ```
	 *
	 * The constraints can be configured in a transaction like this. It will
	 * trigger a query once the transaction has been started and set the constraints
	 * to be checked at the very end of the transaction.
	 *
	 * ```js
	 * sequelize.transaction({
	 *   deferrable: Sequelize.Deferrable.SET_DEFERRED
	 * });
	 * ```
	 *
	 * @return {object}
	 */
	var Deferrable = module.exports = {
	  INITIALLY_DEFERRED: INITIALLY_DEFERRED,
	  INITIALLY_IMMEDIATE: INITIALLY_IMMEDIATE,
	  NOT: NOT,
	  SET_DEFERRED: SET_DEFERRED,
	  SET_IMMEDIATE: SET_IMMEDIATE
	};

	function ABSTRACT () {}

	ABSTRACT.prototype.toString = function () {
	  return this.toSql.apply(this, arguments);
	};


	/**
	 * A property that will defer constraints checks to the end of transactions.
	 *
	 * @property INITIALLY_DEFERRED
	 */
	function INITIALLY_DEFERRED () {
	  if (!(this instanceof INITIALLY_DEFERRED)) {
	    return new INITIALLY_DEFERRED();
	  }
	}
	util.inherits(INITIALLY_DEFERRED, ABSTRACT);

	INITIALLY_DEFERRED.prototype.toSql = function () {
	  return 'DEFERRABLE INITIALLY DEFERRED';
	};


	/**
	 * A property that will trigger the constraint checks immediately
	 *
	 * @property INITIALLY_IMMEDIATE
	 */
	function INITIALLY_IMMEDIATE () {
	  if (!(this instanceof INITIALLY_IMMEDIATE)) {
	    return new INITIALLY_IMMEDIATE();
	  }
	}
	util.inherits(INITIALLY_IMMEDIATE, ABSTRACT);

	INITIALLY_IMMEDIATE.prototype.toSql = function () {
	  return 'DEFERRABLE INITIALLY IMMEDIATE';
	};


	/**
	 * A property that will set the constraints to not deferred. This is
	 * the default in PostgreSQL and it make it impossible to dynamically
	 * defer the constraints within a transaction.
	 *
	 * @property NOT
	 */
	function NOT () {
	  if (!(this instanceof NOT)) {
	    return new NOT();
	  }
	}
	util.inherits(NOT, ABSTRACT);

	NOT.prototype.toSql = function () {
	  return 'NOT DEFERRABLE';
	};


	/**
	 * A property that will trigger an additional query at the beginning of a
	 * transaction which sets the constraints to deferred.
	 *
	 * @param  {Array} constraints An array of constraint names. Will defer all constraints by default.
	 * @property SET_DEFERRED
	 */
	function SET_DEFERRED (constraints) {
	  if (!(this instanceof SET_DEFERRED)) {
	    return new SET_DEFERRED(constraints);
	  }

	  this.constraints = constraints;
	}
	util.inherits(SET_DEFERRED, ABSTRACT);

	SET_DEFERRED.prototype.toSql = function (queryGenerator) {
	  return queryGenerator.setDeferredQuery(this.constraints);
	};


	/**
	 * A property that will trigger an additional query at the beginning of a
	 * transaction which sets the constraints to immediately.
	 *
	 * @param  {Array} constraints An array of constraint names. Will defer all constraints by default.
	 * @property SET_IMMEDIATE
	 */
	function SET_IMMEDIATE (constraints) {
	  if (!(this instanceof SET_IMMEDIATE)) {
	    return new SET_IMMEDIATE(constraints);
	  }

	  this.constraints = constraints;
	}
	util.inherits(SET_IMMEDIATE, ABSTRACT);

	SET_IMMEDIATE.prototype.toSql = function (queryGenerator) {
	  return queryGenerator.setImmediateQuery(this.constraints);
	};

	Object.keys(Deferrable).forEach(function (key) {
	  var DeferrableType = Deferrable[key];

	  DeferrableType.toString = function () {
	    var instance = new DeferrableType();
	    return instance.toString.apply(instance, arguments);
	  };
	});


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Toposort = __webpack_require__(355)
	  , Utils = __webpack_require__(122)
	  , _ = __webpack_require__(127);

	var ModelManager = function(sequelize) {
	  this.models = [];
	  this.sequelize = sequelize;
	};

	ModelManager.prototype.addModel = function(model) {
	  this.models.push(model);
	  this.sequelize.models[model.name] = model;

	  return model;
	};

	ModelManager.prototype.removeModel = function(model) {
	  this.models = this.models.filter(function($model) {
	    return $model.name !== model.name;
	  });

	  delete this.sequelize.models[model.name];
	};

	ModelManager.prototype.getModel = function(against, options) {
	  options = _.defaults(options || {}, {
	    attribute: 'name'
	  });

	  var model = this.models.filter(function(model) {
	    return model[options.attribute] === against;
	  });

	  return !!model ? model[0] : null;
	};

	ModelManager.prototype.__defineGetter__('all', function() {
	  return this.models;
	});

	/**
	 * Iterate over Models in an order suitable for e.g. creating tables. Will
	 * take foreign key constraints into account so that dependencies are visited
	 * before dependents.
	 */
	ModelManager.prototype.forEachModel = function(iterator, options) {
	  var models = {}
	    , sorter = new Toposort()
	    , sorted
	    , dep;

	  options = _.defaults(options || {}, {
	    reverse: true
	  });

	  this.models.forEach(function(model) {
	    var deps = []
	      , tableName = model.getTableName();

	    if (_.isObject(tableName)) {
	      tableName = tableName.schema + '.' + tableName.tableName;
	    }

	    models[tableName] = model;

	    for (var attrName in model.rawAttributes) {
	      if (model.rawAttributes.hasOwnProperty(attrName)) {
	        var attribute = model.rawAttributes[attrName];

	        if (attribute.references) {
	          attribute = Utils.formatReferences(attribute);
	          dep       = attribute.references.model;

	          if (_.isObject(dep)) {
	            dep = dep.schema + '.' + dep.tableName;
	          }

	          deps.push(dep);
	        }
	      }
	    }

	    deps = deps.filter(function(dep) {
	      return tableName !== dep;
	    });

	    sorter.add(tableName, deps);
	  });

	  sorted = sorter.sort();
	  if (options.reverse) {
	    sorted = sorted.reverse();
	  }
	  sorted.forEach(function(name) {
	    iterator(models[name], name);
	  });
	};

	module.exports = ModelManager;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__( 356 );


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/****
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2015 Gustavo Henke and Aaron Trent
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 ****/
	(function( global, factory ) {
	    if( true ) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if( typeof exports !== "undefined" && typeof module !== "undefined" ) {
	        factory( exports, module );
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory( mod.exports, mod );
	        global.Toposort = mod.exports;
	    }
	})( this, function( exports, module ) {
	    "use strict";

	    function _classCallCheck( instance, Constructor ) {
	        if( !(instance instanceof Constructor) ) {
	            throw new TypeError( "Cannot call a class as a function" );
	        }
	    }

	    var Toposort = (function() {
	        function Toposort() {
	            _classCallCheck( this, Toposort );

	            this.edges = [];
	            this.Toposort = Toposort;
	        }

	        /**
	         * Adds dependency edges.
	         *
	         * @since   0.1.0
	         * @param   {String} item               An dependent name. Must be an string and not empty
	         * @param   {String[]|String} [deps]    An dependency or array of dependencies
	         * @returns {Toposort}                  The Toposort instance
	         */

	        Toposort.prototype.add = function add( item, deps ) {
	            if( typeof item !== "string" || !item ) {
	                throw new TypeError( "Dependent name must be given as a not empty string" );
	            }

	            deps = Array.isArray( deps ) ? deps : [deps];

	            if( deps.length > 0 ) {
	                for( var _iterator = deps, _isArray = Array.isArray( _iterator ), _i = 0, _iterator = _isArray ?
	                                                                                                      _iterator :
	                                                                                                      _iterator[Symbol.iterator](); ; ) {
	                    var _ref;

	                    if( _isArray ) {
	                        if( _i >= _iterator.length ) {
	                            break;
	                        }
	                        _ref = _iterator[_i++];
	                    } else {
	                        _i = _iterator.next();
	                        if( _i.done ) {
	                            break;
	                        }
	                        _ref = _i.value;
	                    }

	                    var dep = _ref;

	                    if( typeof dep !== "string" || !dep ) {
	                        throw new TypeError( "Dependency name must be given as a not empty string" );
	                    }

	                    this.edges.push( [item, dep] );
	                }
	            } else {
	                this.edges.push( [item] );
	            }

	            return this;
	        };

	        /**
	         * Runs the toposorting and return an ordered array of strings
	         *
	         * @since   0.1.0
	         * @returns {String[]}  The list of items topologically sorted.
	         */

	        Toposort.prototype.sort = function sort() {
	            var _this = this;

	            var nodes = [];

	            //accumulate unique nodes into a large list
	            for( var _iterator2 = this.edges, _isArray2 = Array.isArray( _iterator2 ), _i2 = 0, _iterator2 = _isArray2 ?
	                                                                                                             _iterator2 :
	                                                                                                             _iterator2[Symbol.iterator](); ; ) {
	                var _ref2;

	                if( _isArray2 ) {
	                    if( _i2 >= _iterator2.length ) {
	                        break;
	                    }
	                    _ref2 = _iterator2[_i2++];
	                } else {
	                    _i2 = _iterator2.next();
	                    if( _i2.done ) {
	                        break;
	                    }
	                    _ref2 = _i2.value;
	                }

	                var edge = _ref2;

	                for( var _iterator3 = edge, _isArray3 = Array.isArray( _iterator3 ), _i3 = 0, _iterator3 = _isArray3 ?
	                                                                                                           _iterator3 :
	                                                                                                           _iterator3[Symbol.iterator](); ; ) {
	                    var _ref3;

	                    if( _isArray3 ) {
	                        if( _i3 >= _iterator3.length ) {
	                            break;
	                        }
	                        _ref3 = _iterator3[_i3++];
	                    } else {
	                        _i3 = _iterator3.next();
	                        if( _i3.done ) {
	                            break;
	                        }
	                        _ref3 = _i3.value;
	                    }

	                    var node = _ref3;

	                    if( nodes.indexOf( node ) === -1 ) {
	                        nodes.push( node );
	                    }
	                }
	            }

	            //initialize the placement of nodes into the sorted array at the end
	            var place = nodes.length;

	            //initialize the sorted array with the same length as the unique nodes array
	            var sorted = new Array( nodes.length );

	            //define a visitor function that recursively traverses dependencies.
	            var visit = function visit( node, predecessors ) {
	                //check if a node is dependent of itself
	                if( predecessors.length !== 0 && predecessors.indexOf( node ) !== -1 ) {
	                    throw new Error( "Cyclic dependency found. " + node + " is dependent of itself.\nDependency chain: "
	                                     + predecessors.join( " -> " ) + " => " + node );
	                }

	                var index = nodes.indexOf( node );

	                //if the node still exists, traverse its dependencies
	                if( index !== -1 ) {
	                    var copy = false;

	                    //mark the node as false to exclude it from future iterations
	                    nodes[index] = false;

	                    //loop through all edges and follow dependencies of the current node
	                    for( var _iterator4 = _this.edges, _isArray4 = Array.isArray( _iterator4 ), _i4 = 0, _iterator4 = _isArray4 ?
	                                                                                                                      _iterator4 :
	                                                                                                                      _iterator4[Symbol.iterator](); ; ) {
	                        var _ref4;

	                        if( _isArray4 ) {
	                            if( _i4 >= _iterator4.length ) {
	                                break;
	                            }
	                            _ref4 = _iterator4[_i4++];
	                        } else {
	                            _i4 = _iterator4.next();
	                            if( _i4.done ) {
	                                break;
	                            }
	                            _ref4 = _i4.value;
	                        }

	                        var edge = _ref4;

	                        if( edge[0] === node ) {
	                            //lazily create a copy of predecessors with the current node concatenated onto it
	                            copy = copy || predecessors.concat( [node] );

	                            //recurse to node dependencies
	                            visit( edge[1], copy );
	                        }
	                    }

	                    //add the node to the next place in the sorted array
	                    sorted[--place] = node;
	                }
	            };

	            for( var i = 0; i < nodes.length; i++ ) {
	                var node = nodes[i];

	                //ignore nodes that have been excluded
	                if( node !== false ) {
	                    //mark the node as false to exclude it from future iterations
	                    nodes[i] = false;

	                    //loop through all edges and follow dependencies of the current node
	                    for( var _iterator5 = this.edges, _isArray5 = Array.isArray( _iterator5 ), _i5 = 0, _iterator5 = _isArray5 ?
	                                                                                                                     _iterator5 :
	                                                                                                                     _iterator5[Symbol.iterator](); ; ) {
	                        var _ref5;

	                        if( _isArray5 ) {
	                            if( _i5 >= _iterator5.length ) {
	                                break;
	                            }
	                            _ref5 = _iterator5[_i5++];
	                        } else {
	                            _i5 = _iterator5.next();
	                            if( _i5.done ) {
	                                break;
	                            }
	                            _ref5 = _i5.value;
	                        }

	                        var edge = _ref5;

	                        if( edge[0] === node ) {
	                            //recurse to node dependencies
	                            visit( edge[1], [node] );
	                        }
	                    }

	                    //add the node to the next place in the sorted array
	                    sorted[--place] = node;
	                }
	            }

	            return sorted;
	        };

	        /**
	         * Clears edges
	         *
	         * @since   0.4.0
	         * @returns {Toposort}                  The Toposort instance
	         */

	        Toposort.prototype.clear = function clear() {
	            this.edges = [];

	            return this;
	        };

	        return Toposort;
	    })();

	    module.exports = Toposort;
	} );


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , _ = __webpack_require__(127)
	  , DataTypes = __webpack_require__(123)
	  , SQLiteQueryInterface = __webpack_require__(358)
	  , MSSSQLQueryInterface = __webpack_require__(359)
	  , MySQLQueryInterface = __webpack_require__(360)
	  , Transaction = __webpack_require__(341)
	  , Promise = __webpack_require__(335)
	  , QueryTypes = __webpack_require__(349);

	/*
	 * The interface that Sequelize uses to talk to all databases
	 * @class QueryInterface
	**/
	var QueryInterface = function(sequelize) {
	  this.sequelize = sequelize;
	  this.QueryGenerator = this.sequelize.dialect.QueryGenerator;
	};

	QueryInterface.prototype.createSchema = function(schema, options) {
	  options = options || {};
	  var sql = this.QueryGenerator.createSchema(schema);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.dropSchema = function(schema, options) {
	  options = options || {};
	  var sql = this.QueryGenerator.dropSchema(schema);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.dropAllSchemas = function(options) {
	  options = options || {};

	  var self = this;
	  if (!this.QueryGenerator._dialect.supports.schemas) {
	    return this.sequelize.drop(options);
	  } else {
	    return this.showAllSchemas(options).map(function(schemaName) {
	      return self.dropSchema(schemaName, options);
	    });
	  }
	};

	QueryInterface.prototype.showAllSchemas = function(options) {
	  var self = this;

	  options = _.assign({}, options, {
	    raw: true,
	    type: this.sequelize.QueryTypes.SELECT
	  });

	  var showSchemasSql = self.QueryGenerator.showSchemasQuery();

	  return this.sequelize.query(showSchemasSql, options).then(function(schemaNames) {
	    return Utils._.flatten(
	      Utils._.map(schemaNames, function(value) {
	        return (!!value.schema_name ? value.schema_name : value);
	      })
	    );
	  });
	};

	QueryInterface.prototype.databaseVersion = function(options) {
	  return this.sequelize.query(
	    this.QueryGenerator.versionQuery(),
	    _.assign({}, options, { type: QueryTypes.VERSION })
	  );
	};

	QueryInterface.prototype.createTable = function(tableName, attributes, options, model) {
	  var keys = Object.keys(attributes)
	    , keyLen = keys.length
	    , self = this
	    , sql = ''
	    , i = 0;

	  options = _.clone(options) || {};

	  attributes = Utils._.mapValues(attributes, function(attribute) {
	    if (!Utils._.isPlainObject(attribute)) {
	      attribute = { type: attribute, allowNull: true };
	    }

	    attribute = self.sequelize.normalizeAttribute(attribute);

	    return attribute;
	  });

	  // Postgres requires a special SQL command for enums
	  if (self.sequelize.options.dialect === 'postgres') {
	    var promises = [];

	    for (i = 0; i < keyLen; i++) {
	      if (attributes[keys[i]].type instanceof DataTypes.ENUM) {
	        sql = self.QueryGenerator.pgListEnums(tableName, attributes[keys[i]].field || keys[i], options);
	        promises.push(self.sequelize.query(
	          sql,
	          _.assign({}, options, { plain: true, raw: true, type: QueryTypes.SELECT })
	        ));
	      }
	    }

	    return Promise.all(promises).then(function(results) {
	      var promises = []
	        , enumIdx = 0;

	      for (i = 0; i < keyLen; i++) {
	        if (attributes[keys[i]].type instanceof DataTypes.ENUM) {
	          // If the enum type doesn't exist then create it
	          if (!results[enumIdx]) {
	            sql = self.QueryGenerator.pgEnum(tableName, attributes[keys[i]].field || keys[i], attributes[keys[i]], options);
	            promises.push(self.sequelize.query(
	              sql,
	              _.assign({}, options, { raw: true })
	            ));
	          } else if (!!results[enumIdx] && !!model) {
	            var enumVals = self.QueryGenerator.fromArray(results[enumIdx].enum_value)
	              , vals = model.rawAttributes[keys[i]].values;

	            vals.forEach(function(value, idx) {
	              // reset out after/before options since it's for every enum value
	              var valueOptions = _.clone(options);
	              valueOptions.before = null;
	              valueOptions.after = null;

	              if (enumVals.indexOf(value) === -1) {
	                if (!!vals[idx + 1]) {
	                  valueOptions.before = vals[idx + 1];
	                }
	                else if (!!vals[idx - 1]) {
	                  valueOptions.after = vals[idx - 1];
	                }
	                valueOptions.supportsSearchPath = false;
	                promises.push(self.sequelize.query(self.QueryGenerator.pgEnumAdd(tableName, keys[i], value, valueOptions), valueOptions));
	              }
	            });
	            enumIdx++;
	          }
	        }
	      }

	      if (!tableName.schema &&
	        (options.schema || (!!model && model.$schema))) {
	        tableName = self.QueryGenerator.addSchema({
	          tableName: tableName,
	          $schema: (!!model && model.$schema) || options.schema
	        });
	      }

	      attributes = self.QueryGenerator.attributesToSQL(attributes, {
	        context: 'createTable'
	      });
	      sql = self.QueryGenerator.createTableQuery(tableName, attributes, options);

	      return Promise.all(promises).then(function() {
	        return self.sequelize.query(sql, options);
	      });
	    });
	  } else {
	    if (!tableName.schema &&
	      (options.schema || (!!model && model.$schema))) {
	      tableName = self.QueryGenerator.addSchema({
	        tableName: tableName,
	        $schema: (!!model && model.$schema) || options.schema
	      });
	    }

	    attributes = self.QueryGenerator.attributesToSQL(attributes, {
	      context: 'createTable'
	    });
	    sql = self.QueryGenerator.createTableQuery(tableName, attributes, options);

	    return self.sequelize.query(sql, options);
	  }
	};

	QueryInterface.prototype.dropTable = function(tableName, options) {
	  // if we're forcing we should be cascading unless explicitly stated otherwise
	  options = _.clone(options) || {};
	  options.cascade = options.cascade || options.force || false;

	  var sql = this.QueryGenerator.dropTableQuery(tableName, options)
	    , self = this;

	  return this.sequelize.query(sql, options).then(function() {
	    var promises = [];

	    // Since postgres has a special case for enums, we should drop the related
	    // enum type within the table and attribute
	    if (self.sequelize.options.dialect === 'postgres') {
	      var instanceTable = self.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });

	      if (!!instanceTable) {
	        var getTableName = (!options || !options.schema || options.schema === 'public' ? '' : options.schema + '_') + tableName;

	        var keys = Object.keys(instanceTable.rawAttributes)
	          , keyLen = keys.length
	          , i = 0;

	        for (i = 0; i < keyLen; i++) {
	          if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {
	            sql = self.QueryGenerator.pgEnumDrop(getTableName, keys[i]);
	            options.supportsSearchPath = false;
	            promises.push(self.sequelize.query(sql, _.assign({}, options, { raw: true })));
	          }
	        }
	      }
	    }

	    return Promise.all(promises).get(0);
	  });
	};

	QueryInterface.prototype.dropAllTables = function(options) {
	  var self = this
	    , skip;

	  options = options || {};
	  skip = options.skip || [];

	  var dropAllTables = function(tableNames) {
	    return Promise.each(tableNames, function(tableName) {
	      // if tableName is not in the Array of tables names then dont drop it
	      if (skip.indexOf(tableName.tableName || tableName) === -1) {
	        return self.dropTable(tableName, _.assign({}, options, { cascade: true }) );
	      }
	    });
	  };

	  return self.showAllTables(options).then(function(tableNames) {
	    if (self.sequelize.options.dialect === 'sqlite') {
	      return self.sequelize.query('PRAGMA foreign_keys;', options).then(function(result) {
	        var foreignKeysAreEnabled = result.foreign_keys === 1;

	        if (foreignKeysAreEnabled) {
	          return self.sequelize.query('PRAGMA foreign_keys = OFF', options).then(function() {
	            return dropAllTables(tableNames).then(function() {
	              return self.sequelize.query('PRAGMA foreign_keys = ON', options);
	            });
	          });
	        } else {
	          return dropAllTables(tableNames);
	        }
	      });
	    } else {
	      return self.getForeignKeysForTables(tableNames, options).then(function(foreignKeys) {
	        var promises = [];

	        tableNames.forEach(function(tableName) {
	          var normalizedTableName = tableName;
	          if (Utils._.isObject(tableName)) {
	             normalizedTableName = tableName.schema + '.' + tableName.tableName;
	          }

	          foreignKeys[normalizedTableName].forEach(function(foreignKey) {
	            var sql = self.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey);
	            promises.push(self.sequelize.query(sql, options));
	          });
	        });

	        return Promise.all(promises).then(function() {
	          return dropAllTables(tableNames);
	        });
	      });
	    }
	  });
	};

	QueryInterface.prototype.dropAllEnums = function(options) {
	  if (this.sequelize.getDialect() !== 'postgres') {
	    return Promise.resolve();
	  }

	  options = options || {};

	  var self = this;

	  return this.pgListEnums(null, options).map(function(result) {
	    return self.sequelize.query(
	      self.QueryGenerator.pgEnumDrop(null, null, self.QueryGenerator.pgEscapeAndQuote(result.enum_name)),
	      _.assign({}, options, { raw: true })
	    );
	  });
	};

	QueryInterface.prototype.pgListEnums = function (tableName, options) {
	  options = options || {};
	  var sql = this.QueryGenerator.pgListEnums(tableName);
	  return this.sequelize.query(sql, _.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));
	};

	QueryInterface.prototype.renameTable = function(before, after, options) {
	  options = options || {};
	  var sql = this.QueryGenerator.renameTableQuery(before, after);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.showAllTables = function(options) {
	  var self = this;
	  options = _.assign({}, options, {
	    raw: true,
	    type: QueryTypes.SHOWTABLES
	  });

	  var showTablesSql = self.QueryGenerator.showTablesQuery();
	  return self.sequelize.query(showTablesSql, options).then(function(tableNames) {
	    return Utils._.flatten(tableNames);
	  });
	};

	QueryInterface.prototype.describeTable = function(tableName, options) {
	  var schema = null
	    , schemaDelimiter = null;

	  if (typeof options === 'string') {
	    schema = options;
	  } else if (typeof options === 'object' && options !== null) {
	    schema = options.schema || null;
	    schemaDelimiter = options.schemaDelimiter || null;
	  }

	  if (typeof tableName === 'object' && tableName !== null) {
	    schema = tableName.schema;
	    tableName = tableName.tableName;
	  }

	  var sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);

	  return this.sequelize.query(
	    sql,
	    _.assign({}, options, { type: QueryTypes.DESCRIBE })
	  ).then(function(data) {
	    // If no data is returned from the query, then the table name may be wrong.
	    // Query generators that use information_schema for retrieving table info will just return an empty result set,
	    // it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).
	    if (Utils._.isEmpty(data)) {
	      return Promise.reject('No description found for "' + tableName + '" table. Check the table name and schema; remember, they _are_ case sensitive.');
	    } else {
	      return Promise.resolve(data);
	    }
	  });
	};

	QueryInterface.prototype.addColumn = function(table, key, attribute, options) {
	  if (!table || !key || !attribute) {
	    throw new Error('addColumn takes atleast 3 arguments (table, attribute name, attribute definition)');
	  }

	  options = options || {};
	  attribute = this.sequelize.normalizeAttribute(attribute);
	  return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);
	};

	QueryInterface.prototype.removeColumn = function(tableName, attributeName, options) {
	  options = options || {};
	  switch (this.sequelize.options.dialect) {
	    case 'sqlite':
	      // sqlite needs some special treatment as it cannot drop a column
	      return SQLiteQueryInterface.removeColumn.call(this, tableName, attributeName, options);
	    case 'mssql':
	      // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint
	      return MSSSQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);
	    case 'mysql':
	    case 'mariadb':
	      // mysql/maria needs special treatment as it cannot drop a column with a foreign key constraint
	      return MySQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);
	    default:
	        var sql = this.QueryGenerator.removeColumnQuery(tableName, attributeName);
	        return this.sequelize.query(sql, options);
	  }
	};

	QueryInterface.prototype.changeColumn = function(tableName, attributeName, dataTypeOrOptions, options) {
	  var attributes = {};
	  options = options || {};

	  if (Utils._.values(DataTypes).indexOf(dataTypeOrOptions) > -1) {
	    attributes[attributeName] = { type: dataTypeOrOptions, allowNull: true };
	  } else {
	    attributes[attributeName] = dataTypeOrOptions;
	  }

	  attributes[attributeName].type = this.sequelize.normalizeDataType(attributes[attributeName].type);

	  if (this.sequelize.options.dialect === 'sqlite') {
	    // sqlite needs some special treatment as it cannot change a column
	    return SQLiteQueryInterface.changeColumn.call(this, tableName, attributes, options);
	  } else {
	    var query = this.QueryGenerator.attributesToSQL(attributes)
	      , sql = this.QueryGenerator.changeColumnQuery(tableName, query);

	    return this.sequelize.query(sql, options);
	  }
	};

	QueryInterface.prototype.renameColumn = function(tableName, attrNameBefore, attrNameAfter, options) {
	  options = options || {};
	  return this.describeTable(tableName, options).then(function(data) {
	    data = data[attrNameBefore] || {};

	    var _options = {};

	    _options[attrNameAfter] = {
	      attribute: attrNameAfter,
	      type: data.type,
	      allowNull: data.allowNull,
	      defaultValue: data.defaultValue
	    };

	    // fix: a not-null column cannot have null as default value
	    if (data.defaultValue === null && !data.allowNull) {
	      delete _options[attrNameAfter].defaultValue;
	    }

	    if (this.sequelize.options.dialect === 'sqlite') {
	      // sqlite needs some special treatment as it cannot rename a column
	      return SQLiteQueryInterface.renameColumn.call(this, tableName, attrNameBefore, attrNameAfter, options);
	    } else {
	      var sql = this.QueryGenerator.renameColumnQuery(
	        tableName,
	        attrNameBefore,
	        this.QueryGenerator.attributesToSQL(_options)
	      );
	      return this.sequelize.query(sql, options);
	    }
	  }.bind(this));
	};

	QueryInterface.prototype.addIndex = function(tableName, attributes, options, rawTablename) {
	  // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)
	  if (!Array.isArray(attributes)) {
	    rawTablename = options;
	    options = attributes;
	    attributes = options.fields;
	  }
	  // testhint argsConform.end

	  if (!rawTablename) {
	    // Map for backwards compat
	    rawTablename = tableName;
	  }

	  options = Utils.cloneDeep(options);
	  options.fields = attributes;
	  var sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);
	  return this.sequelize.query(sql, _.assign({}, options, { supportsSearchPath: false }));
	};

	QueryInterface.prototype.showIndex = function(tableName, options) {
	  var sql = this.QueryGenerator.showIndexesQuery(tableName, options);
	  return this.sequelize.query(sql, _.assign({}, options, { type: QueryTypes.SHOWINDEXES }));
	};

	QueryInterface.prototype.nameIndexes = function(indexes, rawTablename) {
	  return this.QueryGenerator.nameIndexes(indexes, rawTablename);
	};

	QueryInterface.prototype.getForeignKeysForTables = function(tableNames, options) {
	  var self = this;
	  options = options || {};

	  if (tableNames.length === 0) {
	    return Promise.resolve({});
	  }

	  return Promise.map(tableNames, function(tableName) {
	    return self.sequelize.query(self.QueryGenerator.getForeignKeysQuery(tableName, self.sequelize.config.database), options).get(0);
	  }).then(function(results) {
	    var result = {};

	    tableNames.forEach(function(tableName, i) {
	      if (Utils._.isObject(tableName)) {
	        tableName = tableName.schema + '.' + tableName.tableName;
	      }

	      result[tableName] = Utils._.compact(results[i]).map(function(r) {
	        return r.constraint_name;
	      });
	    });

	    return result;
	  });
	};

	QueryInterface.prototype.removeIndex = function(tableName, indexNameOrAttributes, options) {
	  options = options || {};
	  var sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.insert = function(instance, tableName, values, options) {
	  options = Utils.cloneDeep(options);
	  options.hasTrigger = instance && instance.Model.options.hasTrigger;
	  var sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.Model.rawAttributes, options);

	  options.type = QueryTypes.INSERT;
	  options.instance = instance;

	  return this.sequelize.query(sql, options).then(function(result) {
	    if (instance) result.isNewRecord = false;
	    return result;
	  });
	};

	QueryInterface.prototype.upsert = function(tableName, valuesByField, updateValues, where, model, options) {
	  var wheres = []
	    , indexFields
	    , indexes = []
	    , attributes = Object.keys(valuesByField);

	  options = _.clone(options);

	  if (!Utils._.isEmpty(where)) {
	    wheres.push(where);
	  }

	  // Lets combine uniquekeys and indexes into one
	  indexes = Utils._.map(model.options.uniqueKeys, function (value) {
	    return value.fields;
	  });

	  Utils._.each(model.options.indexes, function (value) {
	    if (value.unique === true) {
	      // fields in the index may both the strings or objects with an attribute property - lets sanitize that
	      indexFields = Utils._.map(value.fields, function (field) {
	        if (Utils._.isPlainObject(field)) {
	          return field.attribute;
	        }
	        return field;
	      });
	      indexes.push(indexFields);
	    }
	  });

	  indexes.forEach(function (index) {
	    if (Utils._.intersection(attributes, index).length === index.length) {
	      where = {};
	      index.forEach(function (field) {
	        where[field] = valuesByField[field];
	      });
	      wheres.push(where);
	    }
	  });

	  where = { $or: wheres };

	  options.type = QueryTypes.UPSERT;
	  options.raw = true;

	  var sql = this.QueryGenerator.upsertQuery(tableName, valuesByField, updateValues, where, model.rawAttributes, options);
	  return this.sequelize.query(sql, options).then(function (rowCount) {
	    if (rowCount === undefined) {
	      return rowCount;
	    }

	    // MySQL returns 1 for inserted, 2 for updated http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html. Postgres has been modded to do the same

	    return rowCount === 1;
	  });
	};

	QueryInterface.prototype.bulkInsert = function(tableName, records, options, attributes) {
	  options = _.clone(options) || {};
	  options.type = QueryTypes.INSERT;
	  var sql = this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.update = function(instance, tableName, values, identifier, options) {
	  options = _.clone(options || {});
	  options.hasTrigger = !!(instance && instance.$modelOptions && instance.$modelOptions.hasTrigger);


	  var self = this
	    , restrict = false
	    , sql = self.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.Model.rawAttributes);


	  options.type = QueryTypes.UPDATE;

	  // Check for a restrict field
	  if (!!instance.Model && !!instance.Model.associations) {
	    var keys = Object.keys(instance.Model.associations)
	      , length = keys.length;

	    for (var i = 0; i < length; i++) {
	      if (instance.Model.associations[keys[i]].options && instance.Model.associations[keys[i]].options.onUpdate && instance.Model.associations[keys[i]].options.onUpdate === 'restrict') {
	        restrict = true;
	      }
	    }
	  }

	  options.instance = instance;
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.bulkUpdate = function(tableName, values, identifier, options, attributes) {
	  options = Utils.cloneDeep(options);
	  if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);

	  var sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes)
	    , table = Utils._.isObject(tableName) ? tableName : { tableName: tableName }
	    , model = Utils._.find(this.sequelize.modelManager.models, { tableName: table.tableName });

	  options.model = model;
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.delete = function(instance, tableName, identifier, options) {
	  var self = this
	    , cascades = []
	    , sql = self.QueryGenerator.deleteQuery(tableName, identifier, null, instance.Model);

	  options = _.clone(options) || {};

	  // Check for a restrict field
	  if (!!instance.Model && !!instance.Model.associations) {
	    var keys = Object.keys(instance.Model.associations)
	      , length = keys.length
	      , association;

	    for (var i = 0; i < length; i++) {
	      association = instance.Model.associations[keys[i]];
	      if (association.options && association.options.onDelete &&
	        association.options.onDelete.toLowerCase() === 'cascade' &&
	        association.options.useHooks === true) {
	        cascades.push(association.accessors.get);
	      }
	    }
	  }

	  return Promise.each(cascades, function (cascade) {
	    return instance[cascade](options).then(function (instances) {
	      // Check for hasOne relationship with non-existing associate ("has zero")
	      if (!instances) {
	        return Promise.resolve();
	      }

	      if (!Array.isArray(instances)) instances = [instances];

	      return Promise.each(instances, function (instance) {
	        return instance.destroy(options);
	      });
	    });
	  }).then(function () {
	    options.instance = instance;
	    return self.sequelize.query(sql, options);
	  });
	};

	QueryInterface.prototype.bulkDelete = function(tableName, identifier, options, model) {
	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, {limit: null});
	  if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);

	  var sql = this.QueryGenerator.deleteQuery(tableName, identifier, options, model);
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.select = function(model, tableName, options) {
	  options = Utils.cloneDeep(options);
	  options.type = QueryTypes.SELECT;
	  options.model = model;

	  return this.sequelize.query(
	    this.QueryGenerator.selectQuery(tableName, options, model),
	    options
	  );
	};

	QueryInterface.prototype.increment = function(instance, tableName, values, identifier, options) {
	  var sql = this.QueryGenerator.incrementQuery(tableName, values, identifier, options.attributes);

	  options = _.clone(options) || {};

	  options.type = QueryTypes.UPDATE;
	  options.instance = instance;
	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.rawSelect = function(tableName, options, attributeSelector, Model) {
	  if (options.schema) {
	    tableName = this.QueryGenerator.addSchema({
	      tableName: tableName,
	      $schema: options.schema
	    });
	  }

	  options = Utils.cloneDeep(options);
	  options = _.defaults(options, {
	    raw: true,
	    plain: true,
	    type: QueryTypes.SELECT
	  });

	  var sql = this.QueryGenerator.selectQuery(tableName, options, Model);

	  if (attributeSelector === undefined) {
	    throw new Error('Please pass an attribute selector!');
	  }

	  return this.sequelize.query(sql, options).then(function(data) {
	    if (!options.plain) {
	      return data;
	    }

	    var result = data ? data[attributeSelector] : null;

	    if (options && options.dataType) {
	      var dataType = options.dataType;

	      if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {
	        result = parseFloat(result);
	      } else if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {
	        result = parseInt(result, 10);
	      } else if (dataType instanceof DataTypes.DATE) {
	        if (!Utils._.isNull(result) && !Utils._.isDate(result)) {
	          result = new Date(result);
	        }
	      } else if (dataType instanceof DataTypes.STRING) {
	        // Nothing to do, result is already a string.
	      }
	    }

	    return result;
	  });
	};

	QueryInterface.prototype.createTrigger = function(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {
	  var sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);
	  options = options || {};
	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	QueryInterface.prototype.dropTrigger = function(tableName, triggerName, options) {
	  var sql = this.QueryGenerator.dropTrigger(tableName, triggerName);
	  options = options || {};

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	QueryInterface.prototype.renameTrigger = function(tableName, oldTriggerName, newTriggerName, options) {
	  var sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);
	  options = options || {};

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	QueryInterface.prototype.createFunction = function(functionName, params, returnType, language, body, options) {
	  var sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, options);
	  options = options || {};

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	QueryInterface.prototype.dropFunction = function(functionName, params, options) {
	  var sql = this.QueryGenerator.dropFunction(functionName, params);
	  options = options || {};

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	QueryInterface.prototype.renameFunction = function(oldFunctionName, params, newFunctionName, options) {
	  var sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);
	  options = options || {};

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  } else {
	    return Promise.resolve();
	  }
	};

	// Helper methods useful for querying

	/**
	 * Escape an identifier (e.g. a table or attribute name). If force is true,
	 * the identifier will be quoted even if the `quoteIdentifiers` option is
	 * false.
	 */
	QueryInterface.prototype.quoteIdentifier = function(identifier, force) {
	  return this.QueryGenerator.quoteIdentifier(identifier, force);
	};

	QueryInterface.prototype.quoteTable = function(identifier) {
	  return this.QueryGenerator.quoteTable(identifier);
	};

	/**
	 * Split an identifier into .-separated tokens and quote each part.
	 * If force is true, the identifier will be quoted even if the
	 * `quoteIdentifiers` option is false.
	 */
	QueryInterface.prototype.quoteIdentifiers = function(identifiers, force) {
	  return this.QueryGenerator.quoteIdentifiers(identifiers, force);
	};

	/**
	 * Escape a value (e.g. a string, number or date)
	 */
	QueryInterface.prototype.escape = function(value) {
	  return this.QueryGenerator.escape(value);
	};

	QueryInterface.prototype.setAutocommit = function(transaction, value, options) {
	  if (!transaction || !(transaction instanceof Transaction)) {
	    throw new Error('Unable to set autocommit for a transaction without transaction object!');
	  }
	  if (transaction.parent) {
	    // Not possible to set a seperate isolation level for savepoints
	    return Promise.resolve();
	  }

	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction
	  });

	  var sql = this.QueryGenerator.setAutocommitQuery(value, {
	    parent: transaction.parent
	  });

	  if (!sql) return Promise.resolve();

	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.setIsolationLevel = function(transaction, value, options) {
	  if (!transaction || !(transaction instanceof Transaction)) {
	    throw new Error('Unable to set isolation level for a transaction without transaction object!');
	  }
	  if (transaction.parent) {
	    // Not possible to set a seperate isolation level for savepoints
	    return Promise.resolve();
	  }

	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction
	  });

	  var sql = this.QueryGenerator.setIsolationLevelQuery(value, {
	    parent: transaction.parent
	  });

	  if (!sql) return Promise.resolve();

	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.startTransaction = function(transaction, options) {
	  if (!transaction || !(transaction instanceof Transaction)) {
	    throw new Error('Unable to start a transaction without transaction object!');
	  }

	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction
	  });

	  var sql = this.QueryGenerator.startTransactionQuery(transaction);

	  return this.sequelize.query(sql, options);
	};

	QueryInterface.prototype.deferConstraints = function (transaction, options) {
	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction
	  });

	  var sql = this.QueryGenerator.deferConstraintsQuery(options);

	  if (sql) {
	    return this.sequelize.query(sql, options);
	  }

	  return Promise.resolve();
	};

	QueryInterface.prototype.commitTransaction = function(transaction, options) {
	  if (!transaction || !(transaction instanceof Transaction)) {
	    throw new Error('Unable to commit a transaction without transaction object!');
	  }
	  if (transaction.parent) {
	    // Savepoints cannot be committed
	    return Promise.resolve();
	  }

	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction,
	    supportsSearchPath: false
	  });

	  var sql = this.QueryGenerator.commitTransactionQuery(transaction);
	  var promise = this.sequelize.query(sql, options);

	  transaction.finished = 'commit';

	  return promise;
	};

	QueryInterface.prototype.rollbackTransaction = function(transaction, options) {
	  if (!transaction || !(transaction instanceof Transaction)) {
	    throw new Error('Unable to rollback a transaction without transaction object!');
	  }

	  options = _.assign({}, options, {
	    transaction: transaction.parent || transaction,
	    supportsSearchPath: false
	  });

	  var sql = this.QueryGenerator.rollbackTransactionQuery(transaction);
	  var promise = this.sequelize.query(sql, options);

	  transaction.finished = 'rollback';

	  return promise;
	};

	module.exports = QueryInterface;


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335);

	/**
	 Returns an object that treats SQLite's inabilities to do certain queries.

	 @class QueryInterface
	 @static
	 */

	/**
	  A wrapper that fixes SQLite's inability to remove columns from existing tables.
	  It will create a backup of the table, drop the table afterwards and create a
	  new table with the same name but without the obsolete column.

	  @method removeColumn
	  @for    QueryInterface

	  @param  {String} tableName     The name of the table.
	  @param  {String} attributeName The name of the attribute that we want to remove.
	  @param  {Object} options
	  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries

	  @since 1.6.0
	 */
	var removeColumn = function(tableName, attributeName, options) {
	  var self = this;
	  options = options || {};

	  return this.describeTable(tableName, options).then(function(fields) {
	    delete fields[attributeName];

	    var sql = self.QueryGenerator.removeColumnQuery(tableName, fields)
	      , subQueries = sql.split(';').filter(function(q) { return q !== ''; });

	    return Promise.each(subQueries, function(subQuery) {
	      return self.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options));
	    });
	  });
	};

	/**
	  A wrapper that fixes SQLite's inability to change columns from existing tables.
	  It will create a backup of the table, drop the table afterwards and create a
	  new table with the same name but with a modified version of the respective column.

	  @method changeColumn
	  @for    QueryInterface

	  @param  {String} tableName The name of the table.
	  @param  {Object} attributes An object with the attribute's name as key and it's options as value object.
	  @param  {Object} options
	  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries

	  @since 1.6.0
	 */
	var changeColumn = function(tableName, attributes, options) {
	  var attributeName = Utils._.keys(attributes)[0]
	    , self = this;
	  options = options || {};

	  return this.describeTable(tableName, options).then(function(fields) {
	    fields[attributeName] = attributes[attributeName];

	    var sql = self.QueryGenerator.removeColumnQuery(tableName, fields)
	      , subQueries = sql.split(';').filter(function(q) { return q !== ''; });

	    return Promise.each(subQueries, function(subQuery) {
	      return self.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options));
	    });
	  });
	};

	/**
	  A wrapper that fixes SQLite's inability to rename columns from existing tables.
	  It will create a backup of the table, drop the table afterwards and create a
	  new table with the same name but with a renamed version of the respective column.

	  @method renameColumn
	  @for    QueryInterface

	  @param  {String} tableName The name of the table.
	  @param  {String} attrNameBefore The name of the attribute before it was renamed.
	  @param  {String} attrNameAfter The name of the attribute after it was renamed.
	  @param  {Object} options
	  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries

	  @since 1.6.0
	 */
	var renameColumn = function(tableName, attrNameBefore, attrNameAfter, options) {
	  var self = this;
	  options = options || {};

	  return this.describeTable(tableName, options).then(function(fields) {
	    fields[attrNameAfter] = Utils._.clone(fields[attrNameBefore]);
	    delete fields[attrNameBefore];

	    var sql = self.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields)
	      , subQueries = sql.split(';').filter(function(q) { return q !== ''; });

	    return Promise.each(subQueries, function(subQuery) {
	      return self.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options));
	    });
	  });
	};

	module.exports = {
	  removeColumn: removeColumn,
	  changeColumn: changeColumn,
	  renameColumn: renameColumn
	};


/***/ },
/* 359 */
/***/ function(module, exports) {

	'use strict';

	/**
	 Returns an object that treats MSSQL's inabilities to do certain queries.

	 @class QueryInterface
	 @static
	 */

	/**
	  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.

	  @method removeColumn
	  @for    QueryInterface

	  @param  {String} tableName     The name of the table.
	  @param  {String} attributeName The name of the attribute that we want to remove.
	  @param  {Object} options
	  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries
	 */
	var removeColumn = function (tableName, attributeName, options) {
	  var self = this;
	  options = options || {};

	  var findConstraintSql = self.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);
	  return self.sequelize.query(findConstraintSql, { raw: true, logging: options.logging})
	    .spread(function (results) {
	      if (!results.length) {
	        // No default constraint found -- we can cleanly remove the column
	        return;
	      }
	      var dropConstraintSql = self.QueryGenerator.dropConstraintQuery(tableName, results[0].name);
	      return self.sequelize.query(dropConstraintSql, { raw: true, logging: options.logging});
	    })
	    .then(function () {
	      var findForeignKeySql = self.QueryGenerator.getForeignKeyQuery(tableName, attributeName);
	      return self.sequelize.query(findForeignKeySql , { raw: true, logging: options.logging});
	    })
	    .spread(function (results) {
	      if (!results.length) {
	        // No foreign key constraints found, so we can remove the column
	        return;
	      }
	      var dropForeignKeySql = self.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);
	      return self.sequelize.query(dropForeignKeySql , { raw: true, logging: options.logging});
	    })
	    .then(function () {
	      var removeSql = self.QueryGenerator.removeColumnQuery(tableName, attributeName);
	      return self.sequelize.query(removeSql, { raw: true, logging: options.logging});
	    });
	};

	module.exports = {
	  removeColumn: removeColumn
	};


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 Returns an object that treats MySQL's inabilities to do certain queries.

	 @class QueryInterface
	 @static
	 */

	var _ = __webpack_require__(127);

	/**
	  A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.

	  @method removeColumn
	  @for    QueryInterface

	  @param  {String} tableName     The name of the table.
	  @param  {String} columnName    The name of the attribute that we want to remove.
	  @param  {Object} options
	 */
	var removeColumn = function (tableName, columnName, options) {
	  var self = this;
	  options = options || {};

	  return self.sequelize.query(
	      self.QueryGenerator.getForeignKeyQuery(tableName, columnName),
	      _.assign({ raw: true }, options)
	    )
	    .spread(function (results) {
	      if (!results.length) {
	        // No foreign key constraints found, so we can remove the column
	        return;
	      }
	      return self.sequelize.query(
	          self.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name),
	          _.assign({ raw: true }, options)
	        );
	    })
	    .then(function () {
	      return self.sequelize.query(
	          self.QueryGenerator.removeColumnQuery(tableName, columnName),
	          _.assign({ raw: true }, options)
	        );
	    });
	};

	module.exports = {
	  removeColumn: removeColumn
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Association = __webpack_require__(342);
	Association.BelongsTo = __webpack_require__(339);
	Association.HasOne = __webpack_require__(346);
	Association.HasMany = __webpack_require__(344);
	Association.BelongsToMany = __webpack_require__(343);

	module.exports = Association;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var MySQLDialect = __webpack_require__(363)
	  , util = __webpack_require__(124);

	var MariaDialect = function(sequelize) {
	  MySQLDialect.call(this, sequelize);
	};

	util.inherits(MariaDialect, MySQLDialect);
	MariaDialect.prototype.name = 'mariadb';

	module.exports = MariaDialect;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127)
	  , Abstract = __webpack_require__(364)
	  , ConnectionManager = __webpack_require__(365)
	  , Query = __webpack_require__(370)
	  , QueryGenerator = __webpack_require__(372)
	  , DataTypes = __webpack_require__(123).mysql;

	var MysqlDialect = function(sequelize) {
	  this.sequelize = sequelize;
	  this.connectionManager = new ConnectionManager(this, sequelize);
	  this.connectionManager.initPools();
	  this.QueryGenerator = _.extend({}, QueryGenerator, {
	    options: sequelize.options,
	    _dialect: this,
	    sequelize: sequelize
	  });
	};

	MysqlDialect.prototype.supports = _.merge(_.cloneDeep(Abstract.prototype.supports), {
	  'VALUES ()': true,
	  'LIMIT ON UPDATE': true,
	  'IGNORE': ' IGNORE',
	  lock: true,
	  forShare: 'LOCK IN SHARE MODE',
	  index: {
	    collate: false,
	    length: true,
	    parser: true,
	    type: true,
	    using: 1,
	  },
	  ignoreDuplicates: ' IGNORE',
	  updateOnDuplicate: true,
	  indexViaAlter: true,
	  NUMERIC: true,
	  GEOMETRY: true
	});

	ConnectionManager.prototype.defaultVersion = '5.6.0';
	MysqlDialect.prototype.Query = Query;
	MysqlDialect.prototype.QueryGenerator = QueryGenerator;
	MysqlDialect.prototype.DataTypes = DataTypes;
	MysqlDialect.prototype.name = 'mysql';
	MysqlDialect.prototype.TICK_CHAR = '`';
	MysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;
	MysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;

	module.exports = MysqlDialect;


/***/ },
/* 364 */
/***/ function(module, exports) {

	'use strict';

	var AbstractDialect = function() {

	};

	AbstractDialect.prototype.supports = {
	  'DEFAULT': true,
	  'DEFAULT VALUES': false,
	  'VALUES ()': false,
	  'LIMIT ON UPDATE': false,
	  'ON DUPLICATE KEY': true,
	  'ORDER NULLS': false,
	  'UNION': true,
	  'UNION ALL': true,
	  /* What is the dialect's keyword for INSERT IGNORE */
	  'IGNORE': '',

	  /* does the dialect support returning values for inserted/updated fields */
	  returnValues: false,

	  /* features specific to autoIncrement values */
	  autoIncrement: {
	    /* does the dialect require modification of insert queries when inserting auto increment fields */
	    identityInsert: false,

	    /* does the dialect support inserting default/null values for autoincrement fields */
	    defaultValue: true,

	    /* does the dialect support updating autoincrement fields */
	    update: true
	  },
	  /* Do we need to say DEFAULT for bulk insert */
	  bulkDefault: false,
	  /* The dialect's words for INSERT IGNORE */
	  ignoreDuplicates: '',
	  /* Does the dialect support ON DUPLICATE KEY UPDATE */
	  updateOnDuplicate: false,
	  schemas: false,
	  transactions: true,
	  transactionOptions: {
	    type: false
	  },
	  migrations: true,
	  upserts: true,
	  constraints: {
	    restrict: true
	  },
	  index: {
	    collate: true,
	    length: false,
	    parser: false,
	    concurrently: false,
	    type: false,
	    using: true,
	  },
	  joinTableDependent: true,
	  groupedLimit: true,
	  indexViaAlter: false,
	  JSON: false,
	  deferrableConstraints: false
	};

	module.exports = AbstractDialect;


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AbstractConnectionManager = __webpack_require__(366)
	  , ConnectionManager
	  , Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335)
	  , sequelizeErrors = __webpack_require__(130)
	  , dataTypes = __webpack_require__(123).mysql
	  , parserMap = {};

	ConnectionManager = function(dialect, sequelize) {
	  AbstractConnectionManager.call(this, dialect, sequelize);

	  this.sequelize = sequelize;
	  this.sequelize.config.port = this.sequelize.config.port || 3306;
	  try {
	    if (sequelize.config.dialectModulePath) {
	      this.lib = __webpack_require__(369)(sequelize.config.dialectModulePath);
	    } else {
	      this.lib = __webpack_require__(374);
	    }
	  } catch (err) {
	    if (err.code === 'MODULE_NOT_FOUND') {
	      throw new Error('Please install mysql package manually');
	    }
	    throw err;
	  }

	  this.refreshTypeParser(dataTypes);
	};

	Utils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);

	// Expose this as a method so that the parsing may be updated when the user has added additional, custom types
	ConnectionManager.prototype.$refreshTypeParser = function (dataType) {
	  dataType.types.mysql.forEach(function (type) {
	    parserMap[type] = dataType.parse;
	  });
	};

	ConnectionManager.prototype.$clearTypeParser = function () {
	  parserMap = {};
	};

	ConnectionManager.$typecast = function (field, next) {
	  if (parserMap[field.type]) {
	    return parserMap[field.type](field, this.sequelize.options);
	  }

	  return next();
	};

	ConnectionManager.prototype.connect = function(config) {
	  var self = this;
	  return new Promise(function (resolve, reject) {
	    var connectionConfig = {
	      host: config.host,
	      port: config.port,
	      user: config.username,
	      flags: '-FOUND_ROWS',
	      password: config.password,
	      database: config.database,
	      timezone: self.sequelize.options.timezone,
	      typeCast: ConnectionManager.$typecast.bind(self)
	    };

	    if (config.dialectOptions) {
	      Object.keys(config.dialectOptions).forEach(function(key) {
	        connectionConfig[key] = config.dialectOptions[key];
	      });
	    }

	    var connection = self.lib.createConnection(connectionConfig);

	    connection.connect(function(err) {
	      if (err) {
	        if (err.code) {
	          switch (err.code) {
	          case 'ECONNREFUSED':
	            reject(new sequelizeErrors.ConnectionRefusedError(err));
	            break;
	          case 'ER_ACCESS_DENIED_ERROR':
	            reject(new sequelizeErrors.AccessDeniedError(err));
	            break;
	          case 'ENOTFOUND':
	            reject(new sequelizeErrors.HostNotFoundError(err));
	            break;
	          case 'EHOSTUNREACH':
	            reject(new sequelizeErrors.HostNotReachableError(err));
	            break;
	          case 'EINVAL':
	            reject(new sequelizeErrors.InvalidConnectionError(err));
	            break;
	          default:
	            reject(new sequelizeErrors.ConnectionError(err));
	            break;
	          }
	        } else {
	          reject(new sequelizeErrors.ConnectionError(err));
	        }

	        return;
	      }

	      if (config.pool.handleDisconnects) {
	        // Connection to the MySQL server is usually
	        // lost due to either server restart, or a
	        // connnection idle timeout (the wait_timeout
	        // server variable configures this)
	        //
	        // See [stackoverflow answer](http://stackoverflow.com/questions/20210522/nodejs-mysql-error-connection-lost-the-server-closed-the-connection)
	        connection.on('error', function (err) {
	          if (err.code === 'PROTOCOL_CONNECTION_LOST') {
	            // Remove it from read/write pool
	            self.pool.destroy(connection);
	          }
	        });
	      }
	      resolve(connection);
	    });

	  }).tap(function (connection) {
	    connection.query("SET time_zone = '" + self.sequelize.options.timezone + "'"); /* jshint ignore: line */
	  });
	};
	ConnectionManager.prototype.disconnect = function(connection) {

	  // Dont disconnect connections with an ended protocol
	  // That wil trigger a connection error
	  if (connection._protocol._ended) {
	    return Promise.resolve();
	  }

	  return new Promise(function (resolve, reject) {
	    connection.end(function(err) {
	      if (err) return reject(new sequelizeErrors.ConnectionError(err));
	      resolve();
	    });
	  });
	};
	ConnectionManager.prototype.validate = function(connection) {
	  return connection && ['disconnected', 'protocol_error'].indexOf(connection.state) === -1;
	};

	module.exports = ConnectionManager;


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var Pooling = __webpack_require__(367)
	  , Promise = __webpack_require__(335)
	  , _ = __webpack_require__(127)
	  , semver = __webpack_require__(368)
	  , defaultPoolingConfig = {
	    max: 5,
	    min: 0,
	    idle: 10000,
	    handleDisconnects: true
	  }
	  , ConnectionManager;

	ConnectionManager = function(dialect, sequelize) {
	  var config = _.cloneDeep(sequelize.config);

	  this.sequelize = sequelize;
	  this.config = config;
	  this.dialect = dialect;
	  this.versionPromise = null;
	  this.dialectName = this.sequelize.options.dialect;

	  if (config.pool) {
	    config.pool = _.clone(config.pool); // Make sure we don't modify the existing config object (user might re-use it)
	    config.pool =_.defaults(config.pool, defaultPoolingConfig, {
	      validate: this.$validate.bind(this)
	    }) ;
	  } else {
	    // If the user has turned off pooling we provide a 0/1 pool for backwards compat
	    config.pool = _.defaults({
	      max: 1,
	      min: 0
	    }, defaultPoolingConfig, {
	      validate: this.$validate.bind(this)
	    });
	  }

	  // Map old names
	  if (config.pool.maxIdleTime) config.pool.idle = config.pool.maxIdleTime;
	  if (config.pool.maxConnections) config.pool.max = config.pool.maxConnections;
	  if (config.pool.minConnections) config.pool.min = config.pool.minConnections;

	  this.onProcessExit = this.onProcessExit.bind(this); // Save a reference to the bound version so we can remove it with removeListener
	  process.on('exit', this.onProcessExit);
	};

	ConnectionManager.prototype.refreshTypeParser = function(dataTypes) {
	  _.each(dataTypes, function (dataType, key) {
	    if (dataType.hasOwnProperty('parse')) {
	      var dialectName = this.dialectName;
	      if (dialectName === 'mariadb') {
	        dialectName = 'mysql';
	      }

	      if (dataType.types[dialectName]) {
	        this.$refreshTypeParser(dataType);
	      } else {
	        throw new Error('Parse function not supported for type ' + dataType.key + ' in dialect ' + this.dialectName);
	      }
	    }
	  }.bind(this));
	};

	ConnectionManager.prototype.onProcessExit = function() {
	  var self = this;

	  if (this.pool) {
	    this.pool.drain(function() {
	      self.pool.destroyAllNow();
	    });
	  }
	};

	ConnectionManager.prototype.close = function () {
	  this.onProcessExit();
	  process.removeListener('exit', this.onProcessExit); // Remove the listener, so all references to this instance can be garbage collected.

	  this.getConnection = function () {
	    return Promise.reject(new Error('ConnectionManager.getConnection was called after the connection manager was closed!'));
	  };
	};

	// This cannot happen in the constructor because the user can specify a min. number of connections to have in the pool
	// If he does this, generic-pool will try to call connect before the dialect-specific connection manager has been correctly set up
	ConnectionManager.prototype.initPools = function () {
	  var self = this
	    , config = this.config;

	  if (!config.replication) {
	    this.pool = Pooling.Pool({
	      name: 'sequelize-connection',
	      create: function(callback) {
	        self.$connect(config).nodeify(function (err, connection) {
	          callback(err, connection); // For some reason this is needed, else generic-pool things err is a connection or some shit
	        });
	      },
	      destroy: function(connection) {
	        self.$disconnect(connection);
	        return null;
	      },
	      max: config.pool.max,
	      min: config.pool.min,
	      validate: config.pool.validate,
	      idleTimeoutMillis: config.pool.idle
	    });
	    return;
	  }

	  var reads = 0;

	  if (!Array.isArray(config.replication.read)) {
	    config.replication.read = [config.replication.read];
	  }

	  // Map main connection config
	  config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));

	  // Apply defaults to each read config
	  config.replication.read = _.map(config.replication.read, function(readConfig) {
	    return _.defaults(readConfig, _.omit(self.config, 'replication'));
	  });

	  // I'll make my own pool, with blackjack and hookers! (original credit goes to @janzeh)
	  this.pool = {
	    release: function(client) {
	      if (client.queryType === 'read') {
	        return self.pool.read.release(client);
	      } else {
	        return self.pool.write.release(client);
	      }
	    },
	    acquire: function(callback, priority, queryType, useMaster) {
	      useMaster = _.isUndefined(useMaster) ? false : useMaster;
	      if (queryType === 'SELECT' && !useMaster) {
	        self.pool.read.acquire(callback, priority);
	      } else {
	        self.pool.write.acquire(callback, priority);
	      }
	    },
	    destroy: function(connection) {
	      return self.pool[connection.queryType].destroy(connection);
	    },
	    destroyAllNow: function() {
	      self.pool.read.destroyAllNow();
	      self.pool.write.destroyAllNow();
	    },
	    drain: function(cb) {
	      self.pool.write.drain(function() {
	        self.pool.read.drain(cb);
	      });
	    },
	    read: Pooling.Pool({
	      name: 'sequelize-connection-read',
	      create: function(callback) {
	        // Simple round robin config
	        var nextRead = reads++ % config.replication.read.length;
	        self.$connect(config.replication.read[nextRead]).tap(function (connection) {
	          connection.queryType = 'read';
	        }).nodeify(function (err, connection) {
	          callback(err, connection); // For some reason this is needed, else generic-pool things err is a connection or some shit
	        });
	      },
	      destroy: function(connection) {
	        self.$disconnect(connection);
	        return null;
	      },
	      validate: config.pool.validate,
	      max: config.pool.max,
	      min: config.pool.min,
	      idleTimeoutMillis: config.pool.idle
	    }),
	    write: Pooling.Pool({
	      name: 'sequelize-connection-write',
	      create: function(callback) {
	        self.$connect(config.replication.write).tap(function (connection) {
	          connection.queryType = 'write';
	        }).nodeify(function (err, connection) {
	          callback(err, connection); // For some reason this is needed, else generic-pool things err is a connection or some shit
	        });
	      },
	      destroy: function(connection) {
	        self.$disconnect(connection);
	        return null;
	      },
	      validate: config.pool.validate,
	      max: config.pool.max,
	      min: config.pool.min,
	      idleTimeoutMillis: config.pool.idle
	    })
	  };
	};

	ConnectionManager.prototype.getConnection = function(options) {
	  var self = this;
	  options = options || {};

	  var promise;
	  if (this.sequelize.options.databaseVersion === 0) {
	    if (this.versionPromise) {
	      promise = this.versionPromise;
	    } else {
	      promise = this.versionPromise = self.$connect(self.config.replication.write || self.config).then(function (connection) {
	        var _options = {};
	        _options.transaction = { connection: connection }; // Cheat .query to use our private connection
	        _options.logging = function () {};
	        _options.logging.__testLoggingFn = true;

	        return self.sequelize.databaseVersion(_options).then(function (version) {
	          self.sequelize.options.databaseVersion = semver.valid(version) ? version : self.defaultVersion;

	          self.versionPromise = null;

	          self.$disconnect(connection);
	          return null;
	        });
	      }).catch(function (err) {
	        self.versionPromise = null;
	        throw err;
	      });
	    }
	  } else {
	    promise = Promise.resolve();
	  }

	  return promise.then(function () {
	    return new Promise(function (resolve, reject) {
	      self.pool.acquire(function(err, connection) {
	        if (err) return reject(err);
	        resolve(connection);
	      }, options.priority, options.type, options.useMaster);
	    });
	  });
	};

	ConnectionManager.prototype.releaseConnection = function(connection) {
	  var self = this;

	  return new Promise(function (resolve, reject) {
	    self.pool.release(connection);
	    resolve();
	  });
	};

	ConnectionManager.prototype.$connect = function(config) {
	  return this.sequelize.runHooks('beforeConnect', config).bind(this).then(function () {
	    return this.dialect.connectionManager.connect(config);
	  }).then(function(connection) {
	    return this.sequelize.runHooks('afterConnect', connection, config).return(connection);
	  });
	};
	ConnectionManager.prototype.$disconnect = function(connection) {
	  return this.dialect.connectionManager.disconnect(connection);
	};

	ConnectionManager.prototype.$validate = function(connection) {
	  if (!this.dialect.connectionManager.validate) return true;
	  return this.dialect.connectionManager.validate(connection);
	};

	module.exports = ConnectionManager;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * @class
	 * @private
	 */
	function PriorityQueue (size) {
	  if (!(this instanceof PriorityQueue)) {
	    return new PriorityQueue()
	  }

	  this._size = size
	  this._slots = null
	  this._total = null

	  // initialize arrays to hold queue elements
	  size = Math.max(+size | 0, 1)
	  this._slots = []
	  for (var i = 0; i < size; i += 1) {
	    this._slots.push([])
	  }
	}

	PriorityQueue.prototype.size = function size () {
	  if (this._total === null) {
	    this._total = 0
	    for (var i = 0; i < this._size; i += 1) {
	      this._total += this._slots[i].length
	    }
	  }
	  return this._total
	}

	PriorityQueue.prototype.enqueue = function enqueue (obj, priority) {
	  var priorityOrig

	  // Convert to integer with a default value of 0.
	  priority = priority && +priority | 0 || 0

	  // Clear cache for total.
	  this._total = null
	  if (priority) {
	    priorityOrig = priority
	    if (priority < 0 || priority >= this._size) {
	      priority = (this._size - 1)
	      // put obj at the end of the line
	      console.error('invalid priority: ' + priorityOrig + ' must be between 0 and ' + priority)
	    }
	  }

	  this._slots[priority].push(obj)
	}

	PriorityQueue.prototype.dequeue = function dequeue (callback) {
	  var obj = null
	  // Clear cache for total.
	  this._total = null
	  for (var i = 0, sl = this._slots.length; i < sl; i += 1) {
	    if (this._slots[i].length) {
	      obj = this._slots[i].shift()
	      break
	    }
	  }
	  return obj
	}

	function doWhileAsync (conditionFn, iterateFn, callbackFn) {
	  var next = function () {
	    if (conditionFn()) {
	      iterateFn(next)
	    } else {
	      callbackFn()
	    }
	  }
	  next()
	}

	/**
	 * Generate an Object pool with a specified `factory`.
	 *
	 * @class
	 * @param {Object} factory
	 *   Factory to be used for generating and destorying the items.
	 * @param {String} factory.name
	 *   Name of the factory. Serves only logging purposes.
	 * @param {Function} factory.create
	 *   Should create the item to be acquired,
	 *   and call it's first callback argument with the generated item as it's argument.
	 * @param {Function} factory.destroy
	 *   Should gently close any resources that the item is using.
	 *   Called before the items is destroyed.
	 * @param {Function} factory.validate
	 *   Should return true if connection is still valid and false
	 *   If it should be removed from pool. Called before item is
	 *   acquired from pool.
	 * @param {Function} factory.validateAsync
	 *   Asynchronous validate function. Receives a callback function
	 *   as its second argument, that should be called with a single
	 *   boolean argument being true if the item is still valid and false
	 *   if it should be removed from pool. Called before item is
	 *   acquired from pool. Only one of validate/validateAsync may be specified
	 * @param {Number} factory.max
	 *   Maximum number of items that can exist at the same time.  Default: 1.
	 *   Any further acquire requests will be pushed to the waiting list.
	 * @param {Number} factory.min
	 *   Minimum number of items in pool (including in-use). Default: 0.
	 *   When the pool is created, or a resource destroyed, this minimum will
	 *   be checked. If the pool resource count is below the minimum, a new
	 *   resource will be created and added to the pool.
	 * @param {Number} factory.idleTimeoutMillis
	 *   Delay in milliseconds after the idle items in the pool will be destroyed.
	 *   And idle item is that is not acquired yet. Waiting items doesn't count here.
	 * @param {Number} factory.reapIntervalMillis
	 *   Cleanup is scheduled in every `factory.reapIntervalMillis` milliseconds.
	 * @param {Boolean|Function} factory.log
	 *   Whether the pool should log activity. If function is specified,
	 *   that will be used instead. The function expects the arguments msg, loglevel
	 * @param {Number} factory.priorityRange
	 *   The range from 1 to be treated as a valid priority
	 * @param {RefreshIdle} factory.refreshIdle
	 *   Should idle resources be destroyed and recreated every idleTimeoutMillis? Default: true.
	 * @param {Bool} [factory.returnToHead=false]
	 *   Returns released object to head of available objects list
	 */
	function Pool (factory) {
	  if (!(this instanceof Pool)) {
	    return new Pool(factory)
	  }

	  if (factory.validate && factory.validateAsync) {
	    throw new Error('Only one of validate or validateAsync may be specified')
	  }

	  // defaults
	  factory.idleTimeoutMillis = factory.idleTimeoutMillis || 30000
	  factory.returnToHead = factory.returnToHead || false
	  factory.refreshIdle = ('refreshIdle' in factory) ? factory.refreshIdle : true
	  factory.reapInterval = factory.reapIntervalMillis || 1000
	  factory.priorityRange = factory.priorityRange || 1
	  factory.validate = factory.validate || function () { return true }

	  factory.max = parseInt(factory.max, 10)
	  factory.min = parseInt(factory.min, 10)

	  factory.max = Math.max(isNaN(factory.max) ? 1 : factory.max, 1)
	  factory.min = Math.min(isNaN(factory.min) ? 0 : factory.min, factory.max - 1)

	  this._factory = factory
	  this._inUseObjects = []
	  this._draining = false
	  this._waitingClients = new PriorityQueue(factory.priorityRange)
	  this._availableObjects = []
	  this._count = 0
	  this._removeIdleTimer = null
	  this._removeIdleScheduled = false

	  // create initial resources (if factory.min > 0)
	  this._ensureMinimum()
	}

	/**
	 * logs to console or user defined log function
	 * @private
	 * @param {string} str
	 * @param {string} level
	 */
	Pool.prototype._log = function log (str, level) {
	  if (typeof this._factory.log === 'function') {
	    this._factory.log(str, level)
	  } else if (this._factory.log) {
	    console.log(level.toUpperCase() + ' pool ' + this._factory.name + ' - ' + str)
	  }
	}

	/**
	 * Request the client to be destroyed. The factory's destroy handler
	 * will also be called.
	 *
	 * This should be called within an acquire() block as an alternative to release().
	 *
	 * @param {Object} obj
	 *   The acquired item to be destoyed.
	 */
	Pool.prototype.destroy = function destroy (obj) {
	  this._count -= 1
	  if (this._count < 0) this._count = 0
	  this._availableObjects = this._availableObjects.filter(function (objWithTimeout) {
	    return (objWithTimeout.obj !== obj)
	  })

	  this._inUseObjects = this._inUseObjects.filter(function (objInUse) {
	    return (objInUse !== obj)
	  })

	  this._factory.destroy(obj)

	  this._ensureMinimum()
	}

	/**
	 * Checks and removes the available (idle) clients that have timed out.
	 * @private
	 */
	Pool.prototype._removeIdle = function removeIdle () {
	  var toRemove = []
	  var now = new Date().getTime()
	  var i
	  var al
	  var tr
	  var timeout

	  this._removeIdleScheduled = false

	  // Go through the available (idle) items,
	  // check if they have timed out
	  for (i = 0, al = this._availableObjects.length; i < al && (this._factory.refreshIdle && (this._count - this._factory.min > toRemove.length)); i += 1) {
	    timeout = this._availableObjects[i].timeout
	    if (now >= timeout) {
	      // Client timed out, so destroy it.
	      this._log('removeIdle() destroying obj - now:' + now + ' timeout:' + timeout, 'verbose')
	      toRemove.push(this._availableObjects[i].obj)
	    }
	  }

	  for (i = 0, tr = toRemove.length; i < tr; i += 1) {
	    this.destroy(toRemove[i])
	  }

	  // Replace the available items with the ones to keep.
	  al = this._availableObjects.length

	  if (al > 0) {
	    this._log('this._availableObjects.length=' + al, 'verbose')
	    this._scheduleRemoveIdle()
	  } else {
	    this._log('removeIdle() all objects removed', 'verbose')
	  }
	}

	/**
	 * Schedule removal of idle items in the pool.
	 *
	 * More schedules cannot run concurrently.
	 */
	Pool.prototype._scheduleRemoveIdle = function scheduleRemoveIdle () {
	  var self = this
	  if (!this._removeIdleScheduled) {
	    this._removeIdleScheduled = true
	    this._removeIdleTimer = setTimeout(function () {
	      self._removeIdle()
	    }, this._factory.reapInterval)
	  }
	}

	/**
	 * Try to get a new client to work, and clean up pool unused (idle) items.
	 *
	 *  - If there are available clients waiting, shift the first one out (LIFO),
	 *    and call its callback.
	 *  - If there are no waiting clients, try to create one if it won't exceed
	 *    the maximum number of clients.
	 *  - If creating a new client would exceed the maximum, add the client to
	 *    the wait list.
	 * @private
	 */
	Pool.prototype._dispense = function dispense () {
	  var self = this
	  var objWithTimeout = null
	  var err = null
	  var clientCb = null
	  var waitingCount = this._waitingClients.size()

	  this._log('dispense() clients=' + waitingCount + ' available=' + this._availableObjects.length, 'info')
	  if (waitingCount > 0) {
	    if (this._factory.validateAsync) {
	      doWhileAsync(function () {
	        return self._availableObjects.length > 0
	      }, function (next) {
	        self._log('dispense() - reusing obj', 'verbose')
	        objWithTimeout = self._availableObjects[0]

	        self._factory.validateAsync(objWithTimeout.obj, function (valid) {
	          if (!valid) {
	            self.destroy(objWithTimeout.obj)
	            next()
	          } else {
	            self._availableObjects.shift()
	            self._inUseObjects.push(objWithTimeout.obj)
	            clientCb = self._waitingClients.dequeue()
	            clientCb(err, objWithTimeout.obj)
	          }
	        })
	      }, function () {
	        if (self._count < self._factory.max) {
	          self._createResource()
	        }
	      })

	      return
	    }

	    while (this._availableObjects.length > 0) {
	      this._log('dispense() - reusing obj', 'verbose')
	      objWithTimeout = this._availableObjects[0]
	      if (!this._factory.validate(objWithTimeout.obj)) {
	        this.destroy(objWithTimeout.obj)
	        continue
	      }
	      this._availableObjects.shift()
	      this._inUseObjects.push(objWithTimeout.obj)
	      clientCb = this._waitingClients.dequeue()
	      return clientCb(err, objWithTimeout.obj)
	    }
	    if (this._count < this._factory.max) {
	      this._createResource()
	    }
	  }
	}

	/**
	 * @private
	 */
	Pool.prototype._createResource = function _createResource () {
	  this._count += 1
	  this._log('createResource() - creating obj - count=' + this._count + ' min=' + this._factory.min + ' max=' + this._factory.max, 'verbose')
	  var self = this
	  this._factory.create(function () {
	    var err, obj
	    var clientCb = self._waitingClients.dequeue()
	    if (arguments.length > 1) {
	      err = arguments[0]
	      obj = arguments[1]
	    } else {
	      err = (arguments[0] instanceof Error) ? arguments[0] : null
	      obj = (arguments[0] instanceof Error) ? null : arguments[0]
	    }
	    if (err) {
	      self._count -= 1
	      if (self._count < 0) self._count = 0
	      if (clientCb) {
	        clientCb(err, obj)
	      }
	      process.nextTick(function () {
	        self._dispense()
	      })
	    } else {
	      self._inUseObjects.push(obj)
	      if (clientCb) {
	        clientCb(err, obj)
	      } else {
	        self.release(obj)
	      }
	    }
	  })
	}

	/**
	 * @private
	 */
	Pool.prototype._ensureMinimum = function _ensureMinimum () {
	  var i, diff
	  if (!this._draining && (this._count < this._factory.min)) {
	    diff = this._factory.min - this._count
	    for (i = 0; i < diff; i++) {
	      this._createResource()
	    }
	  }
	}

	/**
	 * Request a new client. The callback will be called,
	 * when a new client will be availabe, passing the client to it.
	 *
	 * @param {Function} callback
	 *   Callback function to be called after the acquire is successful.
	 *   The function will receive the acquired item as the first parameter.
	 *
	 * @param {Number} priority
	 *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority
	 *   of the caller if there are no available resources.  Lower numbers mean higher
	 *   priority.
	 *
	 * @returns {boolean} `true` if the pool is not fully utilized, `false` otherwise.
	 */
	Pool.prototype.acquire = function acquire (callback, priority) {
	  if (this._draining) {
	    throw new Error('pool is draining and cannot accept work')
	  }
	  this._waitingClients.enqueue(callback, priority)
	  this._dispense()
	  return (this._count < this._factory.max)
	}

	/**
	 * @deprecated
	 */
	Pool.prototype.borrow = function borrow (callback, priority) {
	  this._log('borrow() is deprecated. use acquire() instead', 'warn')
	  this.acquire(callback, priority)
	}

	/**
	 * Return the client to the pool, in case it is no longer required.
	 *
	 * @param {Object} obj
	 *   The acquired object to be put back to the pool.
	 */
	Pool.prototype.release = function release (obj) {
	  // check to see if this object has already been released (i.e., is back in the pool of this._availableObjects)
	  if (this._availableObjects.some(function (objWithTimeout) { return (objWithTimeout.obj === obj) })) {
	    this._log('release called twice for the same resource: ' + (new Error().stack), 'error')
	    return
	  }

	  // check to see if this object exists in the `in use` list and remove it
	  var index = this._inUseObjects.indexOf(obj)
	  if (index < 0) {
	    this._log('attempt to release an invalid resource: ' + (new Error().stack), 'error')
	    return
	  }

	  // this._log("return to pool")
	  this._inUseObjects.splice(index, 1)
	  var objWithTimeout = { obj: obj, timeout: (new Date().getTime() + this._factory.idleTimeoutMillis) }
	  if (this._factory.returnToHead) {
	    this._availableObjects.splice(0, 0, objWithTimeout)
	  } else {
	    this._availableObjects.push(objWithTimeout)
	  }
	  this._log('timeout: ' + objWithTimeout.timeout, 'verbose')
	  this._dispense()
	  this._scheduleRemoveIdle()
	}

	/**
	 * @deprecated
	 */
	Pool.prototype.returnToPool = function returnToPool (obj) {
	  this._log('returnToPool() is deprecated. use release() instead', 'warn')
	  this.release(obj)
	}

	/**
	 * Disallow any new requests and let the request backlog dissapate.
	 *
	 * @param {Function} callback
	 *   Optional. Callback invoked when all work is done and all clients have been
	 *   released.
	 */
	Pool.prototype.drain = function drain (callback) {
	  this._log('draining', 'info')

	  // disable the ability to put more work on the queue.
	  this._draining = true

	  var self = this
	  var check = function () {
	    if (self._waitingClients.size() > 0) {
	      // wait until all client requests have been satisfied.
	      setTimeout(check, 100)
	    } else if (self._availableObjects.length !== self._count) {
	      // wait until all objects have been released.
	      setTimeout(check, 100)
	    } else if (callback) {
	      callback()
	    }
	  }
	  check()
	}

	/**
	 * Forcibly destroys all clients regardless of timeout.  Intended to be
	 * invoked as part of a drain.  Does not prevent the creation of new
	 * clients as a result of subsequent calls to acquire.
	 *
	 * Note that if factory.min > 0, the pool will destroy all idle resources
	 * in the pool, but replace them with newly created resources up to the
	 * specified factory.min value.  If this is not desired, set factory.min
	 * to zero before calling destroyAllNow()
	 *
	 * @param {Function} callback
	 *   Optional. Callback invoked after all existing clients are destroyed.
	 */
	Pool.prototype.destroyAllNow = function destroyAllNow (callback) {
	  this._log('force destroying all objects', 'info')
	  var willDie = this._availableObjects
	  this._availableObjects = []
	  var obj = willDie.shift()
	  while (obj !== null && obj !== undefined) {
	    this.destroy(obj.obj)
	    obj = willDie.shift()
	  }
	  this._removeIdleScheduled = false
	  clearTimeout(this._removeIdleTimer)
	  if (callback) {
	    callback()
	  }
	}

	/**
	 * Decorates a function to use a acquired client from the object pool when called.
	 *
	 * @param {Function} decorated
	 *   The decorated function, accepting a client as the first argument and
	 *   (optionally) a callback as the final argument.
	 *
	 * @param {Number} priority
	 *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority
	 *   of the caller if there are no available resources.  Lower numbers mean higher
	 *   priority.
	 */
	Pool.prototype.pooled = function pooled (decorated, priority) {
	  var self = this
	  return function () {
	    var callerArgs = arguments
	    var callerCallback = callerArgs[callerArgs.length - 1]
	    var callerHasCallback = typeof callerCallback === 'function'
	    self.acquire(function (err, client) {
	      if (err) {
	        if (callerHasCallback) {
	          callerCallback(err)
	        }
	        return
	      }

	      var args = [client].concat(Array.prototype.slice.call(callerArgs, 0, callerHasCallback ? -1 : undefined))
	      args.push(function () {
	        self.release(client)
	        if (callerHasCallback) {
	          callerCallback.apply(null, arguments)
	        }
	      })

	      decorated.apply(null, args)
	    }, priority)
	  }
	}

	Pool.prototype.getPoolSize = function getPoolSize () {
	  return this._count
	}

	Pool.prototype.getName = function getName () {
	  return this._factory.name
	}

	Pool.prototype.availableObjectsCount = function availableObjectsCount () {
	  return this._availableObjects.length
	}

	Pool.prototype.inUseObjectsCount = function inUseObjectsCount () {
	  return this._inUseObjects.length
	}

	Pool.prototype.waitingClientsCount = function waitingClientsCount () {
	  return this._waitingClients.size()
	}

	Pool.prototype.getMaxPoolSize = function getMaxPoolSize () {
	  return this._factory.max
	}

	Pool.prototype.getMinPoolSize = function getMinPoolSize () {
	  return this._factory.min
	}

	exports.Pool = Pool

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;

	// The debug function is excluded entirely from the minified version.
	/* nomin */ var debug;
	/* nomin */ if (typeof process === 'object' &&
	    /* nomin */ process.env &&
	    /* nomin */ process.env.NODE_DEBUG &&
	    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
	  /* nomin */ debug = function() {
	    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
	    /* nomin */ args.unshift('SEMVER');
	    /* nomin */ console.log.apply(console, args);
	    /* nomin */ };
	/* nomin */ else
	  /* nomin */ debug = function() {};

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';


	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i])
	    re[i] = new RegExp(src[i]);
	}

	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer)
	    return version;

	  if (typeof version !== 'string')
	    return null;

	  if (version.length > MAX_LENGTH)
	    return null;

	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version))
	    return null;

	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}

	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}


	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}

	exports.SemVer = SemVer;

	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose)
	      return version;
	    else
	      version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }

	  if (version.length > MAX_LENGTH)
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

	  if (!(this instanceof SemVer))
	    return new SemVer(version, loose);

	  debug('SemVer', version, loose);
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

	  if (!m)
	    throw new TypeError('Invalid Version: ' + version);

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
	    throw new TypeError('Invalid major version')

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
	    throw new TypeError('Invalid minor version')

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
	    throw new TypeError('Invalid patch version')

	  // numberify any prerelease numeric ids
	  if (!m[4])
	    this.prerelease = [];
	  else
	    this.prerelease = m[4].split('.').map(function(id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER)
	          return num;
	      }
	      return id;
	    });

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function() {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length)
	    this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};

	SemVer.prototype.toString = function() {
	  return this.version;
	};

	SemVer.prototype.compare = function(other) {
	  debug('SemVer.compare', this.version, this.loose, other);
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return this.compareMain(other) || this.comparePre(other);
	};

	SemVer.prototype.compareMain = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch);
	};

	SemVer.prototype.comparePre = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length)
	    return -1;
	  else if (!this.prerelease.length && other.prerelease.length)
	    return 1;
	  else if (!this.prerelease.length && !other.prerelease.length)
	    return 0;

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined)
	      return 0;
	    else if (b === undefined)
	      return 1;
	    else if (a === undefined)
	      return -1;
	    else if (a === b)
	      continue;
	    else
	      return compareIdentifiers(a, b);
	  } while (++i);
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function(release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0)
	        this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
	        this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0)
	        this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0)
	        this.patch++;
	      this.prerelease = [];
	      break;
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0)
	        this.prerelease = [0];
	      else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) // didn't increment anything
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1]))
	            this.prerelease = [identifier, 0];
	        } else
	          this.prerelease = [identifier, 0];
	      }
	      break;

	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  this.raw = this.version;
	  return this;
	};

	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof(loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}

	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre'+key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return (anum && !bnum) ? -1 :
	         (bnum && !anum) ? 1 :
	         a < b ? -1 :
	         a > b ? 1 :
	         0;
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}

	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}

	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}

	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}

	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(b);
	}

	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}

	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}

	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.compare(a, b, loose);
	  });
	}

	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}

	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}

	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}

	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}

	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}

	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}

	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}

	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '': case '=': case '==': ret = eq(a, b, loose); break;
	    case '!=': ret = neq(a, b, loose); break;
	    case '>': ret = gt(a, b, loose); break;
	    case '>=': ret = gte(a, b, loose); break;
	    case '<': ret = lt(a, b, loose); break;
	    case '<=': ret = lte(a, b, loose); break;
	    default: throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}

	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose)
	      return comp;
	    else
	      comp = comp.value;
	  }

	  if (!(this instanceof Comparator))
	    return new Comparator(comp, loose);

	  debug('comparator', comp, loose);
	  this.loose = loose;
	  this.parse(comp);

	  if (this.semver === ANY)
	    this.value = '';
	  else
	    this.value = this.operator + this.semver.version;

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function(comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m)
	    throw new TypeError('Invalid comparator: ' + comp);

	  this.operator = m[1];
	  if (this.operator === '=')
	    this.operator = '';

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2])
	    this.semver = ANY;
	  else
	    this.semver = new SemVer(m[2], this.loose);
	};

	Comparator.prototype.toString = function() {
	  return this.value;
	};

	Comparator.prototype.test = function(version) {
	  debug('Comparator.test', version, this.loose);

	  if (this.semver === ANY)
	    return true;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  return cmp(version, this.operator, this.semver, this.loose);
	};


	exports.Range = Range;
	function Range(range, loose) {
	  if ((range instanceof Range) && range.loose === loose)
	    return range;

	  if (!(this instanceof Range))
	    return new Range(range, loose);

	  this.loose = loose;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function(c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length;
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }

	  this.format();
	}

	Range.prototype.format = function() {
	  this.range = this.set.map(function(comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};

	Range.prototype.toString = function() {
	  return this.range;
	};

	Range.prototype.parseRange = function(range) {
	  var loose = this.loose;
	  range = range.trim();
	  debug('range', range, loose);
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function(comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function(comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function(comp) {
	    return new Comparator(comp, loose);
	  });

	  return set;
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function(comp) {
	    return comp.map(function(c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator(comp, loose) {
	  debug('comp', comp);
	  comp = replaceCarets(comp, loose);
	  debug('caret', comp);
	  comp = replaceTildes(comp, loose);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, loose);
	  debug('xrange', comp);
	  comp = replaceStars(comp, loose);
	  debug('stars', comp);
	  return comp;
	}

	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}

	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p))
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    else if (pr) {
	      debug('replaceTilde pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';

	    debug('tilde return', ret);
	    return ret;
	  });
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}

	function replaceCaret(comp, loose) {
	  debug('caret', comp, loose);
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p)) {
	      if (M === '0')
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      else
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p + pr +
	              ' <' + (+M + 1) + '.0.0';
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	    }

	    debug('caret return', ret);
	    return ret;
	  });
	}

	function replaceXRanges(comp, loose) {
	  debug('replaceXRanges', comp, loose);
	  return comp.split(/\s+/).map(function(comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}

	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX)
	      gtlt = '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // replace X with 0
	      if (xm)
	        m = 0;
	      if (xp)
	        p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm)
	          M = +M + 1;
	        else
	          m = +m + 1;
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('xRange return', ret);

	    return ret;
	  });
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars(comp, loose) {
	  debug('replaceStars', comp, loose);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '');
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace($0,
	                       from, fM, fm, fp, fpr, fb,
	                       to, tM, tm, tp, tpr, tb) {

	  if (isX(fM))
	    from = '';
	  else if (isX(fm))
	    from = '>=' + fM + '.0.0';
	  else if (isX(fp))
	    from = '>=' + fM + '.' + fm + '.0';
	  else
	    from = '>=' + from;

	  if (isX(tM))
	    to = '';
	  else if (isX(tm))
	    to = '<' + (+tM + 1) + '.0.0';
	  else if (isX(tp))
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  else if (tpr)
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  else
	    to = '<=' + to;

	  return (from + ' ' + to).trim();
	}


	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function(version) {
	  if (!version)
	    return false;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version))
	      return true;
	  }
	  return false;
	};

	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version))
	      return false;
	  }

	  if (version.prerelease.length) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (var i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY)
	        continue;

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch)
	          return true;
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false;
	  }

	  return true;
	}

	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return rcompare(a, b, loose);
	  })[0] || null;
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return compare(a, b, loose);
	  })[0] || null;
	}

	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}

	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, loose)) {
	    return false;
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function(comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0')
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}

	exports.prerelease = prerelease;
	function prerelease(version, loose) {
	  var parsed = parse(version, loose);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./connection-manager": 365,
		"./connection-manager.js": 365,
		"./data-types": 327,
		"./data-types.js": 327,
		"./index": 363,
		"./index.js": 363,
		"./query": 370,
		"./query-generator": 372,
		"./query-generator.js": 372,
		"./query-interface": 360,
		"./query-interface.js": 360,
		"./query.js": 370
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 369;


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , AbstractQuery = __webpack_require__(371)
	  , uuid = __webpack_require__(333)
	  , sequelizeErrors = __webpack_require__(130)
	  , _ = __webpack_require__(127);

	var Query = function(connection, sequelize, options) {
	  this.connection = connection;
	  this.instance = options.instance;
	  this.model = options.model;
	  this.sequelize = sequelize;
	  this.uuid = uuid.v4();
	  this.options = Utils._.extend({
	    logging: console.log,
	    plain: false,
	    raw: false
	  }, options || {});

	  this.checkLoggingOption();
	};

	Utils.inherit(Query, AbstractQuery);
	Query.formatBindParameters = AbstractQuery.formatBindParameters;
	Query.prototype.run = function(sql, parameters) {
	  var self = this;
	  this.sql = sql;

	  //do we need benchmark for this query execution
	  var benchmark = this.sequelize.options.benchmark || this.options.benchmark;

	  if (benchmark) {
	    var queryBegin = Date.now();
	  } else {
	    this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);
	  }

	  var promise = new Utils.Promise(function(resolve, reject) {
	    self.connection.query(self.sql, function(err, results) {

	      if (benchmark) {
	        self.sequelize.log('Executed (' + (self.connection.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);
	      }

	      if (err) {
	        err.sql = sql;

	        reject(self.formatError(err));
	      } else {
	        resolve(self.formatResults(results));
	      }
	    }).setMaxListeners(100);
	  });

	  return promise;
	};

	  /**
	 * High level function that handles the results of a query execution.
	 *
	 *
	 * Example:
	 *  query.formatResults([
	 *    {
	 *      id: 1,              // this is from the main table
	 *      attr2: 'snafu',     // this is from the main table
	 *      Tasks.id: 1,        // this is from the associated table
	 *      Tasks.title: 'task' // this is from the associated table
	 *    }
	 *  ])
	 *
	 * @param {Array} data - The result of the query execution.
	 */
	Query.prototype.formatResults = function(data) {
	  var result = this.instance;

	  if (this.isInsertQuery(data)) {
	    this.handleInsertQuery(data);

	    if (!this.instance) {
	      result = data[this.getInsertIdField()];
	    }
	  }

	  if (this.isSelectQuery()) {
	    result = this.handleSelectQuery(data);
	  } else if (this.isShowTablesQuery()) {
	    result = this.handleShowTablesQuery(data);
	  } else if (this.isDescribeQuery()) {
	    result = {};

	    data.forEach(function(_result) {
	      var enumRegex = /^enum/i;
	      result[_result.Field] = {
	        type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),
	        allowNull: (_result.Null === 'YES'),
	        defaultValue: _result.Default,
	        primaryKey: _result.Key === 'PRI'
	      };
	    });
	  } else if (this.isShowIndexesQuery()) {
	    result = this.handleShowIndexesQuery(data);

	  } else if (this.isCallQuery()) {
	    result = data[0];
	  } else if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {
	    result = data.affectedRows;
	  } else if (this.isVersionQuery()) {
	    result = data[0].version;
	  } else if (this.isForeignKeysQuery()) {
	    result = data;
	  } else if (this.isRawQuery()) {
	    // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta
	    result = [data, data];
	  }

	  return result;
	};


	Query.prototype.formatError = function (err) {
	  var match;

	  switch (err.errno || err.code) {
	    case 1062:
	      match = err.message.match(/Duplicate entry '(.*)' for key '?((.|\s)*?)'?$/);

	      var values = match ? match[1].split('-') : undefined
	        , fields = {}
	        , message = 'Validation error'
	        , uniqueKey = this.model && this.model.uniqueKeys[match[2]];

	      if (!!uniqueKey) {
	        if (!!uniqueKey.msg) message = uniqueKey.msg;
	        fields = Utils._.zipObject(uniqueKey.fields, values);
	      } else {
	        fields[match[2]] = match[1];
	      }

	      var errors = [];
	      var self = this;
	      Utils._.forOwn(fields, function(value, field) {
	        errors.push(new sequelizeErrors.ValidationErrorItem(
	          self.getUniqueConstraintErrorMessage(field),
	          'unique violation', field, value));
	      });

	      return new sequelizeErrors.UniqueConstraintError({
	        message: message,
	        errors: errors,
	        parent: err,
	        fields: fields
	      });

	    case 1451:
	      match = err.message.match(/FOREIGN KEY \(`(.*)`\) REFERENCES `(.*)` \(`(.*)`\)(?: ON .*)?\)$/);

	      return new sequelizeErrors.ForeignKeyConstraintError({
	        fields: null,
	        index: match ? match[3] : undefined,
	        parent: err
	      });

	    case 1452:
	      match = err.message.match(/FOREIGN KEY \(`(.*)`\) REFERENCES `(.*)` \(`(.*)`\)(.*)\)$/);

	      return new sequelizeErrors.ForeignKeyConstraintError({
	        fields: null,
	        index: match ? match[1] : undefined,
	        parent: err
	      });

	    default:
	      return new sequelizeErrors.DatabaseError(err);
	  }
	};

	Query.prototype.handleShowIndexesQuery = function (data) {
	  // Group by index name, and collect all fields
	  data = _.reduce(data, function (acc, item) {
	    if (!(item.Key_name in acc)) {
	      acc[item.Key_name] = item;
	      item.fields = [];
	    }

	    acc[item.Key_name].fields[item.Seq_in_index - 1] = {
	      attribute: item.Column_name,
	      length: item.Sub_part || undefined,
	      order: item.Collation === 'A' ? 'ASC' : undefined
	    };
	    delete item.column_name;

	    return acc;
	  }, {});

	  return Utils._.map(data, function(item) {
	    return {
	      primary: item.Key_name === 'PRIMARY',
	      fields: item.fields,
	      name: item.Key_name,
	      tableName: item.Table,
	      unique: (item.Non_unique !== 1),
	      type: item.Index_type,
	    };
	  });
	};

	module.exports = Query;


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , SqlString = __webpack_require__(330)
	  , Dot = __webpack_require__(350)
	  , QueryTypes = __webpack_require__(349);

	var AbstractQuery = function(database, sequelize, options) {};

	/**
	  The function takes the result of the query execution and groups
	  the associated data by the callee.

	  Example:
	    groupJoinData([
	      {
	        some: 'data',
	        id: 1,
	        association: { foo: 'bar', id: 1 }
	      }, {
	        some: 'data',
	        id: 1,
	        association: { foo: 'bar', id: 2 }
	      }, {
	        some: 'data',
	        id: 1,
	        association: { foo: 'bar', id: 3 }
	      }
	    ])

	  Result:
	    Something like this:

	    [
	      {
	        some: 'data',
	        id: 1,
	        association: [
	          { foo: 'bar', id: 1 },
	          { foo: 'bar', id: 2 },
	          { foo: 'bar', id: 3 }
	        ]
	      }
	    ]
	*/
	/*
	 * Assumptions
	 * ID is not necessarily the first field
	 * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)
	 * Parent keys will be seen before any include/child keys
	 * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)
	 */

	 /*
	 * Author (MH) comment: This code is an unreadable mess, but its performant.
	 * groupJoinData is a performance critical function so we prioritize perf over readability.
	 */

	var groupJoinData = function(rows, includeOptions, options) {
	  if (!rows.length) {
	    return [];
	  }

	  var
	    // Generic looping
	    i
	    , length
	    , $i
	    , $length
	    // Row specific looping
	    , rowsI
	    , rowsLength = rows.length
	    , row
	    // Key specific looping
	    , keys
	    , key
	    , keyI
	    , keyLength
	    , prevKey
	    , values
	    , topValues
	    , topExists
	    , checkExisting = options.checkExisting
	    // If we don't have to deduplicate we can pre-allocate the resulting array
	    , results = checkExisting ? [] : new Array(rowsLength)
	    , resultMap = {}
	    , includeMap = {}
	    , itemHash
	    , parentHash
	    , topHash
	    // Result variables for the respective functions
	    , $keyPrefix
	    , $keyPrefixString
	    , $prevKeyPrefixString
	    , $prevKeyPrefix
	    , $lastKeyPrefix
	    , $current
	    , $parent
	    // Map each key to an include option
	    , previousPiece
	    , buildIncludeMap = function (piece) {
	      if ($current.includeMap[piece]) {
	        includeMap[key] = $current = $current.includeMap[piece];
	        if (previousPiece) {
	          previousPiece = previousPiece+'.'+piece;
	        } else {
	          previousPiece = piece;
	        }
	        includeMap[previousPiece] = $current;
	      }
	    }
	    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')
	    , keyPrefixStringMemo = {}
	    , keyPrefixString = function (key, memo) {
	      if (!memo[key]) {
	        memo[key] = key.substr(0, key.lastIndexOf('.'));
	      }
	      return memo[key];
	    }
	    // Removes the prefix from a key ('id' for 'User.Results.id')
	    , removeKeyPrefixMemo = {}
	    , removeKeyPrefix = function (key) {
	      if (!removeKeyPrefixMemo[key]) {
	        var index = key.lastIndexOf('.');
	        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);
	      }
	      return removeKeyPrefixMemo[key];
	    }
	    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')
	    , keyPrefixMemo = {}
	    , keyPrefix = function (key) {
	      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values
	      if (!keyPrefixMemo[key]) {
	        var prefixString = keyPrefixString(key, keyPrefixStringMemo);
	        if (!keyPrefixMemo[prefixString]) {
	          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];
	        }
	        keyPrefixMemo[key] = keyPrefixMemo[prefixString];
	      }
	      return keyPrefixMemo[key];
	    }
	    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')
	    , lastKeyPrefixMemo = {}
	    , lastKeyPrefix = function (key) {
	      if (!lastKeyPrefixMemo[key]) {
	        var prefix = keyPrefix(key)
	          , length = prefix.length;

	        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];
	      }
	      return lastKeyPrefixMemo[key];
	    }
	    , getUniqueKeyAttributes = function (model) {
	        var uniqueKeyAttributes = Utils._.chain(model.uniqueKeys);
	        uniqueKeyAttributes = uniqueKeyAttributes
	        .result(uniqueKeyAttributes.findKey() + '.fields')
	        .map(function(field){
	          return Utils._.findKey(model.attributes, function(chr) {
	            return chr.field === field;
	          });
	        })
	        .value();

	        return uniqueKeyAttributes;
	    }
	    , primaryKeyAttributes
	    , uniqueKeyAttributes
	    , prefix;

	  for (rowsI = 0; rowsI < rowsLength; rowsI++) {
	    row = rows[rowsI];

	    // Keys are the same for all rows, so only need to compute them on the first row
	    if (rowsI === 0) {
	      keys = Object.keys(row);
	      keyLength = keys.length;
	    }

	    if (checkExisting) {
	      topExists = false;

	      // Compute top level hash key (this is usually just the primary key values)
	      $length = includeOptions.model.primaryKeyAttributes.length;
	      topHash = '';
	      if ($length === 1) {
	        topHash = row[includeOptions.model.primaryKeyAttributes[0]];
	      }
	      else if ($length > 1) {
	        for ($i = 0; $i < $length; $i++) {
	          topHash += row[includeOptions.model.primaryKeyAttributes[$i]];
	        }
	      }
	      else if (!Utils._.isEmpty(includeOptions.model.uniqueKeys)) {
	        uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);
	        for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
	          topHash += row[uniqueKeyAttributes[$i]];
	        }
	      }
	    }

	    topValues = values = {};
	    $prevKeyPrefix = undefined;
	    for (keyI = 0; keyI < keyLength; keyI++) {
	      key = keys[keyI];

	      // The string prefix isn't actualy needed
	      // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix
	      // TODO: Find a better way?
	      $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);
	      $keyPrefix = keyPrefix(key);

	      // On the first row we compute the includeMap
	      if (rowsI === 0 && includeMap[key] === undefined) {
	        if (!$keyPrefix.length) {
	          includeMap[key] = includeMap[''] = includeOptions;
	        } else {
	          $current = includeOptions;
	          previousPiece = undefined;
	          $keyPrefix.forEach(buildIncludeMap);
	        }
	      }
	      // End of key set
	      if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {
	        if (checkExisting) {
	          // Compute hash key for this set instance
	          // TODO: Optimize
	          length = $prevKeyPrefix.length;
	          $parent = null;
	          parentHash = null;

	          if (length) {
	            for (i = 0; i < length; i++) {
	              prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];
	              primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
	              $length = primaryKeyAttributes.length;
	              itemHash = prefix;
	              if ($length === 1) {
	                itemHash += row[prefix+'.'+primaryKeyAttributes[0]];
	              }
	              else if ($length > 1) {
	                for ($i = 0; $i < $length; $i++) {
	                  itemHash += row[prefix+'.'+primaryKeyAttributes[$i]];
	                }
	              }
	              else if (!Utils._.isEmpty(includeMap[prefix].model.uniqueKeys)) {
	                uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
	                for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
	                  itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];
	                }
	              }
	              if (!parentHash) {
	                parentHash = topHash;
	              }

	              itemHash = parentHash + itemHash;
	              $parent = prefix;
	              if (i < length - 1) {
	                parentHash = itemHash;
	              }
	            }
	          } else {
	            itemHash = topHash;
	          }

	          if (itemHash === topHash) {
	            if (!resultMap[itemHash]) {
	              resultMap[itemHash] = values;
	            } else {
	              topExists = true;
	            }
	          } else {
	            if (!resultMap[itemHash] && ($parent = resultMap[parentHash])) {
	              $lastKeyPrefix = lastKeyPrefix(prevKey);

	              if (includeMap[prevKey].association.isSingleAssociation) {
	                $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
	              } else {
	                if (!$parent[$lastKeyPrefix]) {
	                  $parent[$lastKeyPrefix] = [];
	                }
	                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
	              }
	            }
	          }

	          // Reset values
	          values = {};
	        } else {
	          // If checkExisting is false it's because there's only 1:1 associations in this query
	          // However we still need to map onto the appropriate parent
	          // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop
	          $current = topValues;
	          length = $keyPrefix.length;
	          if (length) {
	            for (i = 0; i < length; i++) {
	              if (i === length -1) {
	                values = $current[$keyPrefix[i]] = {};
	              }
	              $current = $current[$keyPrefix[i]];
	            }
	          }
	        }
	      }

	      // End of iteration, set value and set prev values (for next iteration)
	      values[removeKeyPrefix(key)] = row[key];
	      prevKey = key;
	      $prevKeyPrefix = $keyPrefix;
	      $prevKeyPrefixString = $keyPrefixString;
	    }

	    if (checkExisting) {
	      length = $prevKeyPrefix.length;
	      $parent = null;
	      parentHash = null;

	      if (length) {
	        for (i = 0; i < length; i++) {
	          prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];
	          primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
	          $length = primaryKeyAttributes.length;
	          itemHash = prefix;
	          if ($length === 1) {
	            itemHash += row[prefix+'.'+primaryKeyAttributes[0]];
	          }
	          else if ($length > 0) {
	            for ($i = 0; $i < $length; $i++) {
	              itemHash += row[prefix+'.'+primaryKeyAttributes[$i]];
	            }
	          }
	          else if (!Utils._.isEmpty(includeMap[prefix].model.uniqueKeys)) {
	            uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
	            for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
	              itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];
	            }
	          }
	          if (!parentHash) {
	            parentHash = topHash;
	          }

	          itemHash = parentHash + itemHash;
	          $parent = prefix;
	          if (i < length - 1) {
	            parentHash = itemHash;
	          }
	        }
	      } else {
	        itemHash = topHash;
	      }

	      if (itemHash === topHash) {
	        if (!resultMap[itemHash]) {
	          resultMap[itemHash] = values;
	        } else {
	          topExists = true;
	        }
	      } else {
	        if (!resultMap[itemHash] && ($parent = resultMap[parentHash])) {
	          $lastKeyPrefix = lastKeyPrefix(prevKey);

	          if (includeMap[prevKey].association.isSingleAssociation) {
	            $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
	          } else {
	            if (!$parent[$lastKeyPrefix]) {
	              $parent[$lastKeyPrefix] = [];
	            }
	            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
	          }
	        }
	      }
	      if (!topExists) {
	        results.push(topValues);
	      }
	    } else {
	      results[rowsI] = topValues;
	    }
	  }

	  return results;
	};

	/**
	 * rewrite query with parameters
	 *
	 * Examples:
	 *
	 *   query.formatBindParameters('select $1 as foo', ['fooval']);
	 *
	 *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });
	 *
	 * Options
	 *   skipUnescape: bool, skip unescaping $$
	 *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available
	 */
	AbstractQuery.formatBindParameters = function(sql, values, dialect, replacementFunc, options) {
	  if (!values) {
	    return [sql, []];
	  }

	  options = options || {};
	  if (typeof replacementFunc !== 'function') {
	    options = replacementFunc || {};
	    replacementFunc = undefined;
	  }

	  if (!replacementFunc) {
	    if (options.skipValueReplace) {
	      replacementFunc = function(match, key, values, timeZone, dialect, options) {
	        if (values[key] !== undefined) {
	          return match;
	        }
	        return undefined;
	      };
	    } else {
	      replacementFunc = function(match, key, values, timeZone, dialect, options) {
	        if (values[key] !== undefined) {
	          return SqlString.escape(values[key], false, timeZone, dialect);
	        }
	        return undefined;
	      };
	    }
	  } else {
	    if (options.skipValueReplace) {
	      var origReplacementFunc = replacementFunc;
	      replacementFunc = function(match, key, values, timeZone, dialect, options) {
	        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {
	          return match;
	        }
	        return undefined;
	      };
	    }
	  }

	  var timeZone = null;
	  var list = Array.isArray(values);

	  sql = sql.replace(/\$(\$|\w+)/g, function(match, key) {
	    if ('$' === key) {
	      return options.skipUnescape ? match : key;
	    }

	    var replVal;
	    if (list) {
	      if (key.match(/^[1-9]\d*$/)) {
	        key = key - 1;
	        replVal = replacementFunc(match, key, values, timeZone, dialect, options);
	      }
	    } else {
	      if (!key.match(/^\d*$/)) {
	        replVal = replacementFunc(match, key, values, timeZone, dialect, options);
	      }
	    }
	    if (replVal === undefined) {
	      throw new Error('Named bind parameter "' + match + '" has no value in the given object.');
	    }
	    return replVal;
	  });
	  return [sql, []];
	};

	/**
	 * Execute the passed sql query.
	 *
	 * Examples:
	 *
	 *     query.run('SELECT 1')
	 *
	 * @param {String} sql - The SQL query which should be executed.
	 * @api public
	 */
	AbstractQuery.prototype.run = function() {
	  throw new Error('The run method wasn\'t overwritten!');
	};

	/**
	 * Check the logging option of the instance and print deprecation warnings.
	 *
	 * @return {void}
	 */
	AbstractQuery.prototype.checkLoggingOption = function() {
	  if (this.options.logging === true) {
	    console.log('DEPRECATION WARNING: The logging-option should be either a function or false. Default: console.log');
	    this.options.logging = console.log;
	  }
	};

	/**
	 * Get the attributes of an insert query, which contains the just inserted id.
	 *
	 * @return {String} The field name.
	 */
	AbstractQuery.prototype.getInsertIdField = function() {
	  return 'insertId';
	};

	/**
	 * Iterate over all known tables and search their names inside the sql query.
	 * This method will also check association aliases ('as' option).
	 *
	 * @param  {String} attribute An attribute of a SQL query. (?)
	 * @return {String}           The found tableName / alias.
	 */
	AbstractQuery.prototype.findTableNameInAttribute = function(attribute) {
	  if (!this.options.include) {
	    return null;
	  }
	  if (!this.options.includeNames) {
	    this.options.includeNames = this.options.include.map(function(include) {
	      return include.as;
	    });
	  }

	  var tableNames = this.options.includeNames.filter(function(include) {
	    return attribute.indexOf(include + '.') === 0;
	  });

	  if (tableNames.length === 1) {
	    return tableNames[0];
	  } else {
	    return null;
	  }
	};

	AbstractQuery.prototype.getUniqueConstraintErrorMessage = function(field) {
	  var message = field + ' must be unique';
	  var self = this;

	  if (self.model) {
	    Object.keys(self.model.uniqueKeys).forEach(function(key) {
	      if (self.model.uniqueKeys[key].fields.indexOf(field.replace(/"/g, '')) >= 0) {
	        if (self.model.uniqueKeys[key].msg) {
	          message = self.model.uniqueKeys[key].msg;
	        }
	      }
	    });
	  }
	  return message;
	};

	AbstractQuery.prototype.isRawQuery = function () {
	  return this.options.type === QueryTypes.RAW;
	};

	AbstractQuery.prototype.isVersionQuery = function () {
	  return this.options.type === QueryTypes.VERSION;
	};

	AbstractQuery.prototype.isUpsertQuery = function () {
	  return this.options.type === QueryTypes.UPSERT;
	};

	AbstractQuery.prototype.isInsertQuery = function(results, metaData) {
	  var result = true;

	  if (this.options.type === QueryTypes.INSERT) {
	    return true;
	  }

	  // is insert query if sql contains insert into
	  result = result && (this.sql.toLowerCase().indexOf('insert into') === 0);

	  // is insert query if no results are passed or if the result has the inserted id
	  result = result && (!results || results.hasOwnProperty(this.getInsertIdField()));

	  // is insert query if no metadata are passed or if the metadata has the inserted id
	  result = result && (!metaData || metaData.hasOwnProperty(this.getInsertIdField()));

	  return result;
	};

	AbstractQuery.prototype.handleInsertQuery = function(results, metaData) {
	  if (this.instance) {
	    // add the inserted row id to the instance
	    var autoIncrementField = this.model.autoIncrementField
	      , id = null;

	    id = id || (results && results[this.getInsertIdField()]);
	    id = id || (metaData && metaData[this.getInsertIdField()]);

	    this.instance[autoIncrementField] = id;
	  }
	};

	AbstractQuery.prototype.isShowTablesQuery = function() {
	  return this.options.type === QueryTypes.SHOWTABLES;
	};

	AbstractQuery.prototype.handleShowTablesQuery = function(results) {
	  return Utils._.flatten(results.map(function(resultSet) {
	    return Utils._.values(resultSet);
	  }));
	};

	AbstractQuery.prototype.isShowIndexesQuery = function () {
	  return this.options.type === QueryTypes.SHOWINDEXES;
	};

	AbstractQuery.prototype.isDescribeQuery = function () {
	  return this.options.type === QueryTypes.DESCRIBE;
	};

	AbstractQuery.prototype.isSelectQuery = function() {
	  return this.options.type === QueryTypes.SELECT;
	};

	AbstractQuery.prototype.isBulkUpdateQuery = function() {
	  return this.options.type === QueryTypes.BULKUPDATE;
	};

	AbstractQuery.prototype.isBulkDeleteQuery = function() {
	  return this.options.type === QueryTypes.BULKDELETE;
	};

	AbstractQuery.prototype.isForeignKeysQuery = function() {
	  return this.options.type === QueryTypes.FOREIGNKEYS;
	};

	AbstractQuery.prototype.isUpdateQuery = function() {
	  return this.options.type === QueryTypes.UPDATE;
	};

	AbstractQuery.prototype.handleSelectQuery = function(results) {
	  var result = null;
	  // Map raw fields to names if a mapping is provided
	  if (this.options.fieldMap) {
	    var fieldMap = this.options.fieldMap;
	    results = Utils._.map(results, function(result) {
	      return Utils._.reduce(fieldMap, function(result, name, field) {
	        if (result[field] !== undefined) {
	          result[name] = result[field];
	          delete result[field];
	        }
	        return result;
	      }, result);
	    });
	  }
	  // Raw queries
	  if (this.options.raw) {
	    result = results.map(function(result) {
	      var o = {};

	      for (var key in result) {
	        if (result.hasOwnProperty(key)) {
	          o[key] = result[key];
	        }
	      }

	      if (this.options.nest) {
	        o = Dot.transform(o);
	      }

	      return o;
	    }, this);
	  // Queries with include
	  } else if (this.options.hasJoin === true) {
	    results = groupJoinData(results, {
	      model: this.model,
	      includeMap: this.options.includeMap,
	      includeNames: this.options.includeNames
	    }, {
	      checkExisting: this.options.hasMultiAssociation
	    });

	    result = this.model.bulkBuild(results, {
	      isNewRecord: false,
	      include: this.options.include,
	      includeNames: this.options.includeNames,
	      includeMap: this.options.includeMap,
	      includeValidated: true,
	      attributes: this.options.originalAttributes || this.options.attributes,
	      raw: true
	    });
	  // Regular queries
	  } else {
	    result = this.model.bulkBuild(results, {
	      isNewRecord: false,
	      raw: true,
	      attributes: this.options.attributes
	    });
	  }

	  // return the first real model instance if options.plain is set (e.g. Model.find)
	  if (this.options.plain) {
	    result = (result.length === 0) ? null : result[0];
	  }
	  return result;
	};

	AbstractQuery.prototype.isShowOrDescribeQuery = function() {
	  var result = false;

	  result = result || (this.sql.toLowerCase().indexOf('show') === 0);
	  result = result || (this.sql.toLowerCase().indexOf('describe') === 0);

	  return result;
	};

	AbstractQuery.prototype.isCallQuery = function() {
	  var result = false;

	  result = result || (this.sql.toLowerCase().indexOf('call') === 0);

	  return result;
	};

	AbstractQuery.$groupJoinData = groupJoinData;

	module.exports = AbstractQuery;


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122);

	var QueryGenerator = {
	  dialect: 'mysql',

	  createSchema: function() {
	    var query = 'SHOW TABLES';
	    return Utils._.template(query)({});
	  },

	  showSchemasQuery: function() {
	    return 'SHOW TABLES';
	  },

	  versionQuery: function() {
	    return 'SELECT VERSION() as `version`';
	  },

	  createTableQuery: function(tableName, attributes, options) {
	    options = Utils._.extend({
	      engine: 'InnoDB',
	      charset: null
	    }, options || {});

	    var self = this;

	    var query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>) ENGINE=<%= engine %><%= comment %><%= charset %><%= collation %><%= initialAutoIncrement %>'
	      , primaryKeys = []
	      , foreignKeys = {}
	      , attrStr = [];

	    for (var attr in attributes) {
	      if (attributes.hasOwnProperty(attr)) {
	        var dataType = attributes[attr]
	          , match;

	        if (Utils._.includes(dataType, 'PRIMARY KEY')) {
	          primaryKeys.push(attr);

	          if (Utils._.includes(dataType, 'REFERENCES')) {
	             // MySQL doesn't support inline REFERENCES declarations: move to the end
	            match = dataType.match(/^(.+) (REFERENCES.*)$/);
	            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));
	            foreignKeys[attr] = match[2];
	          } else {
	            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));
	          }
	        } else if (Utils._.includes(dataType, 'REFERENCES')) {
	          // MySQL doesn't support inline REFERENCES declarations: move to the end
	          match = dataType.match(/^(.+) (REFERENCES.*)$/);
	          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);
	          foreignKeys[attr] = match[2];
	        } else {
	          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);
	        }
	      }
	    }

	    var values = {
	      table: this.quoteTable(tableName),
	      attributes: attrStr.join(', '),
	      comment: options.comment && Utils._.isString(options.comment) ? ' COMMENT ' + this.escape(options.comment) : '',
	      engine: options.engine,
	      charset: (options.charset ? ' DEFAULT CHARSET=' + options.charset : ''),
	      collation: (options.collate ? ' COLLATE ' + options.collate : ''),
	      initialAutoIncrement: (options.initialAutoIncrement ? ' AUTO_INCREMENT=' + options.initialAutoIncrement : '')
	    }
	    , pkString = primaryKeys.map(function(pk) { return this.quoteIdentifier(pk); }.bind(this)).join(', ');

	    if (!!options.uniqueKeys) {
	      Utils._.each(options.uniqueKeys, function(columns, indexName) {
	        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index
	          if (!Utils._.isString(indexName)) {
	            indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');
	          }
	          values.attributes += ', UNIQUE ' + self.quoteIdentifier(indexName) + ' (' + Utils._.map(columns.fields, self.quoteIdentifier).join(', ') + ')';
	        }
	      });
	    }

	    if (pkString.length > 0) {
	      values.attributes += ', PRIMARY KEY (' + pkString + ')';
	    }

	    for (var fkey in foreignKeys) {
	      if (foreignKeys.hasOwnProperty(fkey)) {
	        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];
	      }
	    }

	    return Utils._.template(query)(values).trim() + ';';
	  },

	  showTablesQuery: function() {
	    return 'SHOW TABLES;';
	  },

	  addColumnQuery: function(table, key, dataType) {
	    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
	      , attribute = Utils._.template('<%= key %> <%= definition %>')({
	        key: this.quoteIdentifier(key),
	        definition: this.attributeToSQL(dataType, {
	          context: 'addColumn',
	          foreignKey: key
	        })
	      });

	    return Utils._.template(query)({
	      table: this.quoteTable(table),
	      attribute: attribute
	    });
	  },

	  removeColumnQuery: function(tableName, attributeName) {
	    var query = 'ALTER TABLE <%= tableName %> DROP <%= attributeName %>;';
	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      attributeName: this.quoteIdentifier(attributeName)
	    });
	  },

	  changeColumnQuery: function(tableName, attributes) {
	    var query = 'ALTER TABLE <%= tableName %> <%= query %>;';
	    var attrString = [], constraintString = [];

	    for (var attributeName in attributes) {
	      var definition = attributes[attributeName];
	      if (definition.match(/REFERENCES/)) {
	        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({
	          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),
	          attrName: this.quoteIdentifier(attributeName),
	          definition: definition.replace(/.+?(?=REFERENCES)/,'')
	        }));
	      } else {
	        attrString.push(Utils._.template('`<%= attrName %>` `<%= attrName %>` <%= definition %>')({
	          attrName: attributeName,
	          definition: definition
	        }));
	      }
	    }

	    var finalQuery = '';
	    if (attrString.length) {
	      finalQuery += 'CHANGE ' + attrString.join(', ');
	      finalQuery += constraintString.length ? ' ' : '';
	    }
	    if (constraintString.length) {
	      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');
	    }

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      query: finalQuery
	    });
	  },

	  renameColumnQuery: function(tableName, attrBefore, attributes) {
	    var query = 'ALTER TABLE <%= tableName %> CHANGE <%= attributes %>;';
	    var attrString = [];

	    for (var attrName in attributes) {
	      var definition = attributes[attrName];

	      attrString.push(Utils._.template('`<%= before %>` `<%= after %>` <%= definition %>')({
	        before: attrBefore,
	        after: attrName,
	        definition: definition
	      }));
	    }

	    return Utils._.template(query)({ tableName: this.quoteTable(tableName), attributes: attrString.join(', ') });
	  },

	  upsertQuery: function (tableName, insertValues, updateValues, where, rawAttributes, options) {
	    options.onDuplicate = 'UPDATE ';

	    options.onDuplicate += Object.keys(updateValues).map(function (key) {
	      key = this.quoteIdentifier(key);
	      return key + '=VALUES(' + key +')';
	    }, this).join(', ');

	    return this.insertQuery(tableName, insertValues, rawAttributes, options);
	  },

	  deleteQuery: function(tableName, where, options) {
	    options = options || {};

	    var table = this.quoteTable(tableName);
	    if (options.truncate === true) {
	      // Truncate does not allow LIMIT and WHERE
	      return 'TRUNCATE ' + table;
	    }

	    where = this.getWhereConditions(where);
	    var limit = '';

	    if (Utils._.isUndefined(options.limit)) {
	      options.limit = 1;
	    }

	    if (!!options.limit) {
	      limit = ' LIMIT ' + this.escape(options.limit);
	    }

	    var query = 'DELETE FROM ' + table;
	    if (where) query += ' WHERE ' + where;
	    query += limit;

	    return query;
	  },

	  showIndexesQuery: function(tableName, options) {
	    var sql = 'SHOW INDEX FROM <%= tableName %><%= options %>';
	    return Utils._.template(sql)({
	      tableName: this.quoteTable(tableName),
	      options: (options || {}).database ? ' FROM `' + options.database + '`' : ''
	    });
	  },

	  removeIndexQuery: function(tableName, indexNameOrAttributes) {
	    var sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>'
	      , indexName = indexNameOrAttributes;

	    if (typeof indexName !== 'string') {
	      indexName = Utils.inflection.underscore(tableName + '_' + indexNameOrAttributes.join('_'));
	    }

	    return Utils._.template(sql)({ tableName: this.quoteIdentifiers(tableName), indexName: indexName });
	  },

	  attributeToSQL: function(attribute, options) {
	    if (!Utils._.isPlainObject(attribute)) {
	      attribute = {
	        type: attribute
	      };
	    }

	    var template = attribute.type.toString({ escape: this.escape.bind(this) });

	    if (attribute.allowNull === false) {
	      template += ' NOT NULL';
	    }

	    if (attribute.autoIncrement) {
	      template += ' auto_increment';
	    }

	    // Blobs/texts cannot have a defaultValue
	    if (attribute.type !== 'TEXT' && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {
	      template += ' DEFAULT ' + this.escape(attribute.defaultValue);
	    }

	    if (attribute.unique === true) {
	      template += ' UNIQUE';
	    }

	    if (attribute.primaryKey) {
	      template += ' PRIMARY KEY';
	    }

	    if (attribute.after) {
	      template += ' AFTER ' + this.quoteIdentifier(attribute.after);
	    }

	    if (attribute.references) {
	      attribute = Utils.formatReferences(attribute);

	      if (options && options.context === 'addColumn' && options.foreignKey) {
	        var attrName = options.foreignKey;

	        template += Utils._.template(', ADD CONSTRAINT <%= fkName %> FOREIGN KEY (<%= attrName %>)')({
	          fkName: this.quoteIdentifier(attrName + '_foreign_idx'),
	          attrName: this.quoteIdentifier(attrName)
	        });
	      }

	      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);

	      if (attribute.references.key) {
	        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';
	      } else {
	        template += ' (' + this.quoteIdentifier('id') + ')';
	      }

	      if (attribute.onDelete) {
	        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();
	      }

	      if (attribute.onUpdate) {
	        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();
	      }
	    }

	    return template;
	  },

	  attributesToSQL: function(attributes, options) {
	    var result = {}
	      , key
	      , attribute;

	    for (key in attributes) {
	      attribute = attributes[key];
	      result[attribute.field || key] = this.attributeToSQL(attribute, options);
	    }

	    return result;
	  },

	  findAutoIncrementField: function(factory) {
	    var fields = [];

	    for (var name in factory.attributes) {
	      if (factory.attributes.hasOwnProperty(name)) {
	        var definition = factory.attributes[name];

	        if (definition && definition.autoIncrement) {
	          fields.push(name);
	        }
	      }
	    }

	    return fields;
	  },

	  quoteIdentifier: function(identifier) {
	    if (identifier === '*') return identifier;
	    return Utils.addTicks(identifier, '`');
	  },

	  /**
	   * Generates an SQL query that returns all foreign keys of a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} schemaName The name of the schema.
	   * @return {String}            The generated sql query.
	   */
	  getForeignKeysQuery: function(tableName, schemaName) {
	    return "SELECT CONSTRAINT_NAME as constraint_name FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '" + tableName + /* jshint ignore: line */
	      "' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='" + schemaName + "' AND REFERENCED_TABLE_NAME IS NOT NULL;"; /* jshint ignore: line */
	  },

	  /**
	   * Generates an SQL query that returns the foreign key constraint of a given column.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} columnName The name of the column.
	   * @return {String}            The generated sql query.
	   */
	  getForeignKeyQuery: function(table, columnName) {
	    var tableName = table.tableName || table;
	    if (table.schema) {
	        tableName = table.schema + '.' + tableName;
	    }
	    return [
	      'SELECT CONSTRAINT_NAME as constraint_name',
	      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',
	      'WHERE (REFERENCED_TABLE_NAME = ' + wrapSingleQuote(tableName),
	        'AND REFERENCED_COLUMN_NAME = ' + wrapSingleQuote(columnName),
	        ') OR (TABLE_NAME = ' + wrapSingleQuote(tableName),
	        'AND COLUMN_NAME = ' + wrapSingleQuote(columnName),
	        ')',
	    ].join(' ');
	  },

	  /**
	   * Generates an SQL query that removes a foreign key from a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} foreignKey The name of the foreign key constraint.
	   * @return {String}            The generated sql query.
	   */
	  dropForeignKeyQuery: function(tableName, foreignKey) {
	    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP FOREIGN KEY ' + this.quoteIdentifier(foreignKey) + ';';
	  }
	};

	// private methods
	function wrapSingleQuote(identifier){
	  return Utils.addTicks(identifier, '\'');
	}

	module.exports = Utils._.extend(Utils._.clone(__webpack_require__(373)), QueryGenerator);


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {  'use strict';

	var Utils = __webpack_require__(122)
	  , SqlString = __webpack_require__(330)
	  , Model = __webpack_require__(337)
	  , DataTypes = __webpack_require__(123)
	  , _ = __webpack_require__(127)
	  , util = __webpack_require__(124)
	  , Dottie = __webpack_require__(350)
	  , BelongsTo = __webpack_require__(339)
	  , BelongsToMany = __webpack_require__(343)
	  , HasMany = __webpack_require__(344)
	  , uuid = __webpack_require__(333)
	  , semver = __webpack_require__(368);

	/* istanbul ignore next */
	var throwMethodUndefined = function(methodName) {
	  throw new Error('The method "' + methodName + '" is not defined! Please add it to your sql dialect.');
	};

	var QueryGenerator = {
	  options: {},

	  extractTableDetails: function(tableName, options) {
	    options = options || {};
	    tableName = tableName || {};
	    return {
	      schema: tableName.schema || options.schema || 'public',
	      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,
	      delimiter: tableName.delimiter || options.delimiter || '.'
	    };
	  },

	  addSchema: function(param) {
	    var self = this;

	    if (!param.$schema) return param.tableName || param;

	    return {
	      tableName: param.tableName || param,
	      table: param.tableName || param,
	      name: param.name || param,
	      schema: param.$schema,
	      delimiter: param.$schemaDelimiter || '.',
	      toString: function() {
	        return self.quoteTable(this);
	      }
	    };
	  },

	  /*
	    Returns a query for dropping a schema
	  */
	  dropSchema: function(tableName, options) {
	    return this.dropTableQuery(tableName, options);
	  },

	  /*
	    Returns a query for creating a table.
	    Parameters:
	      - tableName: Name of the new table.
	      - attributes: An object with containing attribute-attributeType-pairs.
	                    Attributes should have the format:
	                    {attributeName: type, attr2: type2}
	                    --> e.g. {title: 'VARCHAR(255)'}
	      - options: An object with options.
	                 Defaults: { engine: 'InnoDB', charset: null }
	  */
	  /* istanbul ignore next */
	  createTableQuery: function(tableName, attributes, options) {
	    throwMethodUndefined('createTableQuery');
	  },

	  versionQuery: function(tableName, attributes, options) {
	    throwMethodUndefined('versionQuery');
	  },

	  describeTableQuery: function(tableName, schema, schemaDelimiter) {
	    var table = this.quoteTable(
	      this.addSchema({
	        tableName: tableName,
	        $schema: schema,
	        $schemaDelimiter: schemaDelimiter
	      })
	    );

	    return 'DESCRIBE ' + table + ';';
	  },

	  /*
	    Returns a query for dropping a table.
	  */
	  dropTableQuery: function(tableName, options) {
	    options = options || {};

	    var query = 'DROP TABLE IF EXISTS <%= table %>;';

	    return Utils._.template(query)({
	      table: this.quoteTable(tableName)
	    });
	  },

	  /*
	    Returns a rename table query.
	    Parameters:
	      - originalTableName: Name of the table before execution.
	      - futureTableName: Name of the table after execution.
	  */
	  renameTableQuery: function(before, after) {
	    var query = 'ALTER TABLE <%= before %> RENAME TO <%= after %>;';
	    return Utils._.template(query)({
	      before: this.quoteTable(before),
	      after: this.quoteTable(after)
	    });
	  },

	  /*
	    Returns a query, which gets all available table names in the database.
	  */
	  /* istanbul ignore next */
	  showTablesQuery: function() {
	    throwMethodUndefined('showTablesQuery');
	  },

	  /*
	    Returns a query, which adds an attribute to an existing table.
	    Parameters:
	      - tableName: Name of the existing table.
	      - attributes: A hash with attribute-attributeOptions-pairs.
	        - key: attributeName
	        - value: A hash with attribute specific options:
	          - type: DataType
	          - defaultValue: A String with the default value
	          - allowNull: Boolean
	  */
	  /* istanbul ignore next */
	  addColumnQuery: function(tableName, attributes) {
	    throwMethodUndefined('addColumnQuery');
	  },

	  /*
	    Returns a query, which removes an attribute from an existing table.
	    Parameters:
	      - tableName: Name of the existing table
	      - attributeName: Name of the obsolete attribute.
	  */
	  /* istanbul ignore next */
	  removeColumnQuery: function(tableName, attributeName) {
	    throwMethodUndefined('removeColumnQuery');
	  },

	  /*
	    Returns a query, which modifies an existing attribute from a table.
	    Parameters:
	      - tableName: Name of the existing table.
	      - attributes: A hash with attribute-attributeOptions-pairs.
	        - key: attributeName
	        - value: A hash with attribute specific options:
	          - type: DataType
	          - defaultValue: A String with the default value
	          - allowNull: Boolean
	  */
	  /* istanbul ignore next */
	  changeColumnQuery: function(tableName, attributes) {
	    throwMethodUndefined('changeColumnQuery');
	  },

	  /*
	    Returns a query, which renames an existing attribute.
	    Parameters:
	      - tableName: Name of an existing table.
	      - attrNameBefore: The name of the attribute, which shall be renamed.
	      - attrNameAfter: The name of the attribute, after renaming.
	  */
	  /* istanbul ignore next */
	  renameColumnQuery: function(tableName, attrNameBefore, attrNameAfter) {
	    throwMethodUndefined('renameColumnQuery');
	  },

	  /*
	    Returns an insert into command. Parameters: table name + hash of attribute-value-pairs.
	  */
	  insertQuery: function(table, valueHash, modelAttributes, options) {
	    options = options || {};
	    _.defaults(options, this.options);

	    var query
	      , valueQuery = '<%= tmpTable %>INSERT<%= ignore %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)'
	      , emptyQuery = '<%= tmpTable %>INSERT<%= ignore %> INTO <%= table %><%= output %>'
	      , outputFragment
	      , fields = []
	      , values = []
	      , key
	      , value
	      , identityWrapperRequired = false
	      , modelAttributeMap = {}
	      , tmpTable = ''         //tmpTable declaration for trigger
	      , selectFromTmp = ''    //Select statement for trigger
	      , tmpColumns = ''       //Columns for temp table for trigger
	      , outputColumns = ''    //Columns to capture into temp table for trigger
	      , attribute             //Model attribute holder
	      , modelKey;             //key for model

	    if (modelAttributes) {
	      Utils._.each(modelAttributes, function(attribute, key) {
	        modelAttributeMap[key] = attribute;
	        if (attribute.field) {
	          modelAttributeMap[attribute.field] = attribute;
	        }
	      });
	    }

	    if (this._dialect.supports['DEFAULT VALUES']) {
	      emptyQuery += ' DEFAULT VALUES';
	    } else if (this._dialect.supports['VALUES ()']) {
	      emptyQuery += ' VALUES ()';
	    }

	    if (this._dialect.supports.returnValues && options.returning) {
	      if (!!this._dialect.supports.returnValues.returning) {
	        valueQuery += ' RETURNING *';
	        emptyQuery += ' RETURNING *';
	      } else if (!!this._dialect.supports.returnValues.output) {
	        outputFragment = ' OUTPUT INSERTED.*';

	        //To capture output rows when there is a trigger on MSSQL DB
	        if (modelAttributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {
	            tmpTable = 'declare @tmp table (<%= columns %>); ';

	            for (modelKey in modelAttributes){
	              attribute = modelAttributes[modelKey];
	              if(!(attribute.type instanceof DataTypes.VIRTUAL)){
	                if (tmpColumns.length > 0){
	                  tmpColumns += ',';
	                  outputColumns += ',';
	                }

	                tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();
	                outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);
	              }
	            }

	            var replacement ={
	              columns : tmpColumns
	            };

	            tmpTable = Utils._.template(tmpTable)(replacement).trim();
	            outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';
	            selectFromTmp = ';select * from @tmp';

	            valueQuery += selectFromTmp;
	            emptyQuery += selectFromTmp;
	        }
	      }
	    }

	    if (this._dialect.supports.EXCEPTION && options.exception) {
	      // Mostly for internal use, so we expect the user to know what he's doing!
	      // pg_temp functions are private per connection, so we never risk this function interfering with another one.
	      if (semver.gte(this.sequelize.options.databaseVersion, '9.2.0')) {
	        // >= 9.2 - Use a UUID but prefix with 'func_' (numbers first not allowed)
	        var delimiter = '$func_' + uuid.v4().replace(/-/g, '') + '$';

	        options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';
	        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response <%= table %>, OUT sequelize_caught_exception text) RETURNS RECORD AS ' + delimiter +
	          ' BEGIN ' + valueQuery + ' INTO response; EXCEPTION ' + options.exception + ' END ' + delimiter +
	          ' LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()';
	      } else {
	        options.exception = 'WHEN unique_violation THEN NULL;';
	        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';
	      }
	    }

	    if (this._dialect.supports['ON DUPLICATE KEY'] && options.onDuplicate) {
	      valueQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;
	      emptyQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;
	    }

	    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);
	    for (key in valueHash) {
	      if (valueHash.hasOwnProperty(key)) {
	        value = valueHash[key];
	        fields.push(this.quoteIdentifier(key));

	        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported
	        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !value) {
	          if (!this._dialect.supports.autoIncrement.defaultValue) {
	            fields.splice(-1,1);
	          } else if (this._dialect.supports.DEFAULT) {
	            values.push('DEFAULT');
	          } else {
	            values.push(this.escape(null));
	          }
	        } else {
	          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {
	            identityWrapperRequired = true;
	          }

	          values.push(this.escape(value, (modelAttributeMap && modelAttributeMap[key]) || undefined, { context: 'INSERT' }));
	        }
	      }
	    }

	    var replacements = {
	      ignore: options.ignore ? this._dialect.supports.IGNORE : '',
	      table: this.quoteTable(table),
	      attributes: fields.join(','),
	      output: outputFragment,
	      values: values.join(','),
	      tmpTable: tmpTable
	    };

	    query = (replacements.attributes.length ? valueQuery : emptyQuery) + ';';
	    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {
	      query = [
	        'SET IDENTITY_INSERT', this.quoteTable(table), 'ON;',
	        query,
	        'SET IDENTITY_INSERT', this.quoteTable(table), 'OFF;',
	      ].join(' ');
	    }

	    return Utils._.template(query)(replacements);
	  },

	  /*
	    Returns an insert into command for multiple values.
	    Parameters: table name + list of hashes of attribute-value-pairs.
	  */
	  bulkInsertQuery: function(tableName, attrValueHashes, options, rawAttributes) {
	    options = options || {};
	    rawAttributes = rawAttributes || {};

	    var query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= returning %>;'
	      , tuples = []
	      , serials = []
	      , allAttributes = []
	      , onDuplicateKeyUpdate = '';

	    attrValueHashes.forEach(function(attrValueHash) {
	      _.forOwn(attrValueHash, function(value, key) {
	        if (allAttributes.indexOf(key) === -1) {
	          allAttributes.push(key);
	        }

	        if (rawAttributes[key] && rawAttributes[key].autoIncrement === true) {
	          serials.push(key);
	        }
	      });
	    });

	    attrValueHashes.forEach(function(attrValueHash) {
	      tuples.push('(' +
	        allAttributes.map(function(key) {
	          if (this._dialect.supports.bulkDefault && serials.indexOf(key) !== -1) {
	            return attrValueHash[key] || 'DEFAULT';
	          }
	          return this.escape(attrValueHash[key], rawAttributes[key], { context: 'INSERT' });
	        }, this).join(',') +
	        ')');
	    }, this);

	    if (this._dialect.supports.updateOnDuplicate && options.updateOnDuplicate) {
	      onDuplicateKeyUpdate += ' ON DUPLICATE KEY UPDATE ' + options.updateOnDuplicate.map(function(attr) {
	        var field = rawAttributes && rawAttributes[attr] && rawAttributes[attr].field || attr;
	        var key = this.quoteIdentifier(field);
	        return key + '=VALUES(' + key + ')';
	      }, this).join(',');
	    }

	    var replacements = {
	      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.ignoreDuplicates : '',
	      table: this.quoteTable(tableName),
	      attributes: allAttributes.map(function(attr) {
	        return this.quoteIdentifier(attr);
	      }, this).join(','),
	      tuples: tuples.join(','),
	      onDuplicateKeyUpdate: onDuplicateKeyUpdate,
	      returning: this._dialect.supports.returnValues && options.returning ? ' RETURNING *' : ''
	    };

	    return _.template(query)(replacements);
	  },

	  /*
	    Returns an update query.
	    Parameters:
	      - tableName -> Name of the table
	      - values -> A hash with attribute-value-pairs
	      - where -> A hash with conditions (e.g. {name: 'foo'})
	                 OR an ID as integer
	                 OR a string with conditions (e.g. 'name="foo"').
	                 If you use a string, you have to escape it on your own.
	  */
	  updateQuery: function(tableName, attrValueHash, where, options, attributes) {
	    options = options || {};
	    _.defaults(options, this.options);

	    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);

	    var query
	      , values = []
	      , outputFragment
	      , modelAttributeMap = {}
	      , tmpTable = ''         //tmpTable declaration for trigger
	      , selectFromTmp = ''    //Select statement for trigger
	      , tmpColumns = ''       //Columns for temp table for trigger
	      , outputColumns = ''    //Columns to capture into temp table for trigger
	      , attribute             //Model attribute holder
	      , modelKey;             //key for model

	    query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';

	    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {
	      query += ' LIMIT ' + this.escape(options.limit) + ' ';
	    }

	    if (this._dialect.supports.returnValues) {
	      if (!!this._dialect.supports.returnValues.output) {
	        // we always need this for mssql
	        outputFragment = ' OUTPUT INSERTED.*';

	        //To capture output rows when there is a trigger on MSSQL DB
	        if (attributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {
	            tmpTable = 'declare @tmp table (<%= columns %>); ';

	            for (modelKey in attributes){
	              attribute = attributes[modelKey];
	              if(!(attribute.type instanceof DataTypes.VIRTUAL)){
	                if (tmpColumns.length > 0){
	                  tmpColumns += ',';
	                  outputColumns += ',';
	                }

	                tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();
	                outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);
	              }
	            }

	            var replacement ={
	              columns : tmpColumns
	            };

	            tmpTable = Utils._.template(tmpTable)(replacement).trim();
	            outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';
	            selectFromTmp = ';select * from @tmp';

	            query += selectFromTmp;
	        }
	      } else if (this._dialect.supports.returnValues && options.returning) {
	        // ensure that the return output is properly mapped to model fields.
	        options.mapToModel = true;
	        query += ' RETURNING *';
	      }
	    }

	    if (attributes) {
	      Utils._.each(attributes, function(attribute, key) {
	        modelAttributeMap[key] = attribute;
	        if (attribute.field) {
	          modelAttributeMap[attribute.field] = attribute;
	        }
	      });
	    }

	    for (var key in attrValueHash) {
	      if (modelAttributeMap && modelAttributeMap[key] &&
	          modelAttributeMap[key].autoIncrement === true &&
	          !this._dialect.supports.autoIncrement.update) {
	        // not allowed to update identity column
	        continue;
	      }

	      var value = attrValueHash[key];
	      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, (modelAttributeMap && modelAttributeMap[key] || undefined), { context: 'UPDATE' }));
	    }

	    var replacements = {
	      table: this.quoteTable(tableName),
	      values: values.join(','),
	      output: outputFragment,
	      where: this.whereQuery(where),
	      tmpTable: tmpTable
	    };

	    if (values.length === 0) {
	      return '';
	    }

	    return Utils._.template(query)(replacements).trim();
	  },

	  /*
	    Returns an upsert query.
	  */
	  upsertQuery: function (tableName, insertValues, updateValues, where, rawAttributes, options) {
	    throwMethodUndefined('upsertQuery');
	  },

	  /*
	    Returns a deletion query.
	    Parameters:
	      - tableName -> Name of the table
	      - where -> A hash with conditions (e.g. {name: 'foo'})
	                 OR an ID as integer
	                 OR a string with conditions (e.g. 'name="foo"').
	                 If you use a string, you have to escape it on your own.
	    Options:
	      - limit -> Maximaum count of lines to delete
	      - truncate -> boolean - whether to use an 'optimized' mechanism (i.e. TRUNCATE) if available,
	                              note that this should not be the default behaviour because TRUNCATE does not
	                              always play nicely (e.g. InnoDB tables with FK constraints)
	                              (@see http://dev.mysql.com/doc/refman/5.6/en/truncate-table.html).
	                              Note that truncate must ignore limit and where
	  */
	  /* istanbul ignore next */
	  deleteQuery: function(tableName, where, options) {
	    throwMethodUndefined('deleteQuery');
	  },

	  /*
	    Returns an update query.
	    Parameters:
	      - tableName -> Name of the table
	      - values -> A hash with attribute-value-pairs
	      - where -> A hash with conditions (e.g. {name: 'foo'})
	                 OR an ID as integer
	                 OR a string with conditions (e.g. 'name="foo"').
	                 If you use a string, you have to escape it on your own.
	  */
	  incrementQuery: function(tableName, attrValueHash, where, options) {
	    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, this.options.omitNull);

	    var query
	      , key
	      , value
	      , values = []
	      , outputFragment;

	    query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';
	    if (this._dialect.supports.returnValues) {
	      if (!!this._dialect.supports.returnValues.returning) {
	        query += ' RETURNING *';
	      } else if (!!this._dialect.supports.returnValues.output) {
	        outputFragment = ' OUTPUT INSERTED.*';
	      }
	    }

	    for (key in attrValueHash) {
	      value = attrValueHash[key];
	      values.push(this.quoteIdentifier(key) + '=' + this.quoteIdentifier(key) + ' + ' + this.escape(value));
	    }

	    options = options || {};
	    for (key in options) {
	      value = options[key];
	      values.push(this.quoteIdentifier(key) + '=' + this.escape(value));
	    }

	    var replacements = {
	      table: this.quoteTable(tableName),
	      values: values.join(','),
	      output: outputFragment,
	      where: this.whereQuery(where)
	    };

	    return Utils._.template(query)(replacements);
	  },

	  nameIndexes: function (indexes, rawTablename) {
	    return Utils._.map(indexes, function (index) {
	      if (!index.hasOwnProperty('name')) {
	        var onlyAttributeNames = index.fields.map(function(field) {
	          return (typeof field === 'string') ? field : (field.name || field.attribute);
	        }.bind(this));

	        index.name = Utils.inflection.underscore(rawTablename + '_' + onlyAttributeNames.join('_'));
	      }

	      return index;
	    });
	  },

	  /*
	    Returns an add index query.
	    Parameters:
	      - tableName -> Name of an existing table, possibly with schema.
	      - options:
	        - type: UNIQUE|FULLTEXT|SPATIAL
	        - name: The name of the index. Default is <table>_<attr1>_<attr2>
	        - fields: An array of attributes as string or as hash.
	                  If the attribute is a hash, it must have the following content:
	                  - name: The name of the attribute/column
	                  - length: An integer. Optional
	                  - order: 'ASC' or 'DESC'. Optional
	        - parser
	      - rawTablename, the name of the table, without schema. Used to create the name of the index
	  */
	  addIndexQuery: function(tableName, attributes, options, rawTablename) {
	    var fieldsSql;
	    options = options || {};

	    if (!Array.isArray(attributes)) {
	      options = attributes;
	      attributes = undefined;
	    } else {
	      options.fields = attributes;
	    }

	    // Backwards compatability
	    if (options.indexName) {
	      options.name = options.indexName;
	    }
	    if (options.indicesType) {
	      options.type = options.indicesType;
	    }
	    if (options.indexType || options.method) {
	      options.using = options.indexType || options.method;
	    }

	    options.prefix = options.prefix || rawTablename || tableName;
	    if (options.prefix && _.isString(options.prefix)) {
	      options.prefix = options.prefix.replace(/\./g, '_');
	      options.prefix = options.prefix.replace(/(\"|\')/g, '');
	    }

	    fieldsSql = options.fields.map(function(field) {
	      if (typeof field === 'string') {
	        return this.quoteIdentifier(field);
	      } else if (field._isSequelizeMethod) {
	        return this.handleSequelizeMethod(field);
	      } else {
	        var result = '';

	        if (field.attribute) {
	          field.name = field.attribute;
	        }

	        if (!field.name) {
	          throw new Error('The following index field has no name: ' + util.inspect(field));
	        }

	        result += this.quoteIdentifier(field.name);

	        if (this._dialect.supports.index.collate && field.collate) {
	          result += ' COLLATE ' + this.quoteIdentifier(field.collate);
	        }

	        if (this._dialect.supports.index.length && field.length) {
	          result += '(' + field.length + ')';
	        }

	        if (field.order) {
	          result += ' ' + field.order;
	        }

	        return result;
	      }
	    }.bind(this));

	    if (!options.name) {
	      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)
	      // All calls that go through sequelize should already have a name
	      options = this.nameIndexes([options], options.prefix)[0];
	    }

	    options = Model.prototype.$conformIndex(options);

	    if (!this._dialect.supports.index.type) {
	      delete options.type;
	    }

	    if (options.where) {
	      options.where = this.whereQuery(options.where);
	    }

	    if (_.isString(tableName)) {
	      tableName = this.quoteIdentifiers(tableName);
	    } else {
	      tableName = this.quoteTable(tableName);
	    }

	    var concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined
	      , ind;
	    if (this._dialect.supports.indexViaAlter) {
	      ind = [
	        'ALTER TABLE',
	        tableName,
	        concurrently,
	        'ADD'
	      ];
	    } else {
	      ind = ['CREATE'];
	    }

	    ind = ind.concat(
	      options.unique ? 'UNIQUE' : '',
	      options.type, 'INDEX',
	      !this._dialect.supports.indexViaAlter ? concurrently : undefined,
	      this.quoteIdentifiers(options.name),
	      this._dialect.supports.index.using === 1 && options.using ? 'USING ' + options.using : '',
	      !this._dialect.supports.indexViaAlter ? 'ON ' + tableName : undefined,
	      this._dialect.supports.index.using === 2 && options.using ? 'USING ' + options.using : '',
	      '(' + fieldsSql.join(', ') + (options.operator ? ' '+options.operator : '') + ')',
	      (this._dialect.supports.index.parser && options.parser ? 'WITH PARSER ' + options.parser : undefined),
	      (this._dialect.supports.index.where && options.where ? options.where : undefined)
	    );

	    return Utils._.compact(ind).join(' ');
	  },

	  /*
	    Returns a query listing indexes for a given table.
	    Parameters:
	      - tableName: Name of an existing table.
	      - options:
	        - database: Name of the database.
	  */
	  /* istanbul ignore next */
	  showIndexesQuery: function(tableName, options) {
	    throwMethodUndefined('showIndexesQuery');
	  },

	  /*
	    Returns a remove index query.
	    Parameters:
	      - tableName: Name of an existing table.
	      - indexNameOrAttributes: The name of the index as string or an array of attribute names.
	  */
	  /* istanbul ignore next */
	  removeIndexQuery: function(tableName, indexNameOrAttributes) {
	    throwMethodUndefined('removeIndexQuery');
	  },

	  /*
	    This method transforms an array of attribute hashes into equivalent
	    sql attribute definition.
	  */
	  /* istanbul ignore next */
	  attributesToSQL: function(attributes) {
	    throwMethodUndefined('attributesToSQL');
	  },

	  /*
	    Returns all auto increment fields of a factory.
	  */
	  /* istanbul ignore next */
	  findAutoIncrementField: function(factory) {
	    throwMethodUndefined('findAutoIncrementField');
	  },


	  quoteTable: function(param, as) {
	    var table = '';

	    if (as === true) {
	      as = param.as || param.name || param;
	    }

	    if (_.isObject(param)) {
	      if (this._dialect.supports.schemas) {
	        if (param.schema) {
	          table += this.quoteIdentifier(param.schema) + '.';
	        }

	        table += this.quoteIdentifier(param.tableName);
	      } else {
	        if (param.schema) {
	          table += param.schema + (param.delimiter || '.');
	        }

	        table += param.tableName;
	        table = this.quoteIdentifier(table);
	      }


	    } else {
	      table = this.quoteIdentifier(param);
	    }

	    if (as) {
	      table += ' AS ' + this.quoteIdentifier(as);
	    }
	    return table;
	  },

	  /*
	    Quote an object based on its type. This is a more general version of quoteIdentifiers
	    Strings: should proxy to quoteIdentifiers
	    Arrays:
	      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]
	        Each <model> can be a model or an object {model: Model, as: String}, matching include
	      * Zero or more models can be included in the array and are used to trace a path through the tree of
	        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL
	        and quotes it.
	      * If a single string is appended to end of array, it is quoted.
	        If two strings appended, the 1st string is quoted, the 2nd string unquoted.
	    Objects:
	      * If raw is set, that value should be returned verbatim, without quoting
	      * If fn is set, the string should start with the value of fn, starting paren, followed by
	        the values of cols (which is assumed to be an array), quoted and joined with ', ',
	        unless they are themselves objects
	      * If direction is set, should be prepended

	    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could
	    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)
	  */
	  quote: function(obj, parent, force) {
	    if (Utils._.isString(obj)) {
	      return this.quoteIdentifiers(obj, force);
	    } else if (Array.isArray(obj)) {
	      // loop through array, adding table names of models to quoted
	      // (checking associations to see if names should be singularised or not)
	      var tableNames = []
	        , parentAssociation
	        , len = obj.length
	        , item
	        , model
	        , as
	        , association;

	      for (var i = 0; i < len - 1; i++) {
	        item = obj[i];
	        if (item._modelAttribute || Utils._.isString(item) || item._isSequelizeMethod || 'raw' in item) {
	          break;
	        }

	        if (item instanceof Model) {
	          model = item;
	          as = undefined;
	        } else {
	          model = item.model;
	          as = item.as;
	        }

	        // check if model provided is through table
	        if (!as && parentAssociation && parentAssociation.through && parentAssociation.through.model === model) {
	          association = {as: model.name};
	        } else {
	          // find applicable association for linking parent to this model
	          association = parent.getAssociation(model, as);
	        }

	        if (association) {
	          tableNames[i] = association.as;
	          parent = model;
	          parentAssociation = association;
	        } else {
	          tableNames[i] = model.tableName;
	          throw new Error('\'' + tableNames.join('.') + '\' in order / group clause is not valid association');
	        }
	      }

	      // add 1st string as quoted, 2nd as unquoted raw
	      var sql = (i > 0 ? this.quoteIdentifier(tableNames.join('.')) + '.' : (Utils._.isString(obj[0]) && parent ? this.quoteIdentifier(parent.name) + '.' : '')) + this.quote(obj[i], parent, force);
	      if (i < len - 1) {
	        if (obj[i + 1]._isSequelizeMethod) {
	          sql += this.handleSequelizeMethod(obj[i + 1]);
	        } else {
	          sql += ' ' + obj[i + 1];
	        }
	      }
	      return sql;
	    } else if (obj._modelAttribute) {
	      return this.quoteTable(obj.Model.name) + '.' + obj.fieldName;
	    } else if (obj._isSequelizeMethod) {
	      return this.handleSequelizeMethod(obj);
	    } else if (Utils._.isObject(obj) && 'raw' in obj) {
	      return obj.raw;
	    } else {
	      throw new Error('Unknown structure passed to order / group: ' + JSON.stringify(obj));
	    }
	  },

	  /*
	   Create a trigger
	   */
	  /* istanbul ignore next */
	  createTrigger: function(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray) {
	    throwMethodUndefined('createTrigger');
	  },

	  /*
	   Drop a trigger
	   */
	  /* istanbul ignore next */
	  dropTrigger: function(tableName, triggerName) {
	    throwMethodUndefined('dropTrigger');
	  },

	  /*
	   Rename a trigger
	  */
	  /* istanbul ignore next */
	  renameTrigger: function(tableName, oldTriggerName, newTriggerName) {
	    throwMethodUndefined('renameTrigger');
	  },

	  /*
	   Create a function
	   */
	  /* istanbul ignore next */
	  createFunction: function(functionName, params, returnType, language, body, options) {
	    throwMethodUndefined('createFunction');
	  },

	  /*
	   Drop a function
	   */
	  /* istanbul ignore next */
	  dropFunction: function(functionName, params) {
	    throwMethodUndefined('dropFunction');
	  },

	  /*
	   Rename a function
	   */
	  /* istanbul ignore next */
	  renameFunction: function(oldFunctionName, params, newFunctionName) {
	    throwMethodUndefined('renameFunction');
	  },

	  /*
	    Escape an identifier (e.g. a table or attribute name)
	  */
	  /* istanbul ignore next */
	  quoteIdentifier: function(identifier, force) {
	    throwMethodUndefined('quoteIdentifier');
	  },

	  /*
	    Split an identifier into .-separated tokens and quote each part
	  */
	  quoteIdentifiers: function(identifiers, force) {
	    if (identifiers.indexOf('.') !== -1) {
	      identifiers = identifiers.split('.');
	      return this.quoteIdentifier(identifiers.slice(0, identifiers.length - 1).join('.')) + '.' + this.quoteIdentifier(identifiers[identifiers.length - 1]);
	    } else {
	      return this.quoteIdentifier(identifiers);
	    }
	  },

	  /*
	    Escape a value (e.g. a string, number or date)
	  */
	  escape: function(value, field, options) {
	    options = options || {};

	    if (value !== null && value !== undefined) {
	      if (value._isSequelizeMethod) {
	        return this.handleSequelizeMethod(value);
	      } else {
	        if (field && field.type) {
	          if (this.typeValidation && field.type.validate && value) {
	            if (options.isList && Array.isArray(value)) {
	              _.forEach(value, function(item) {
	                field.type.validate(item, options);
	              });
	            } else {
	              field.type.validate(value, options);
	            }
	          }

	          if (field.type.stringify) {
	            // Users shouldn't have to worry about these args - just give them a function that takes a single arg
	            var simpleEscape = _.partialRight(SqlString.escape, this.options.timezone, this.dialect);

	            value = field.type.stringify(value, { escape: simpleEscape, field: field, timezone: this.options.timezone });

	            if (field.type.escape === false) {
	              // The data-type already did the required escaping
	              return value;
	            }
	          }
	        }
	      }
	    }

	    return SqlString.escape(value, this.options.timezone, this.dialect);
	  },

	  /**
	   * Generates an SQL query that returns all foreign keys of a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} schemaName The name of the schema.
	   * @return {String}            The generated sql query.
	   */
	  /* istanbul ignore next */
	  getForeignKeysQuery: function(tableName, schemaName) {
	    throwMethodUndefined('getForeignKeysQuery');
	  },

	  /**
	   * Generates an SQL query that removes a foreign key from a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} foreignKey The name of the foreign key constraint.
	   * @return {String}            The generated sql query.
	   */
	  /* istanbul ignore next */
	  dropForeignKeyQuery: function(tableName, foreignKey) {
	    throwMethodUndefined('dropForeignKeyQuery');
	  },


	  /*
	    Returns a query for selecting elements in the table <tableName>.
	    Options:
	      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *
	      - where -> A hash with conditions (e.g. {name: 'foo'})
	                 OR an ID as integer
	                 OR a string with conditions (e.g. 'name="foo"').
	                 If you use a string, you have to escape it on your own.
	      - order -> e.g. 'id DESC'
	      - group
	      - limit -> The maximum count you want to get.
	      - offset -> An offset value to start from. Only useable with limit!
	  */

	  selectQuery: function(tableName, options, model) {
	    // Enter and change at your own peril -- Mick Hansen

	    options = options || {};

	    var table = null
	      , self = this
	      , query
	      , limit = options.limit
	      , mainModel = model
	      , mainQueryItems = []
	      , mainAttributes = options.attributes && options.attributes.slice()
	      , mainJoinQueries = []
	      // We'll use a subquery if we have a hasMany association and a limit
	      , subQuery = options.subQuery === undefined ?
	                   limit && options.hasMultiAssociation :
	                   options.subQuery
	      , subQueryItems = []
	      , subQueryAttributes = null
	      , subJoinQueries = []
	      , mainTableAs = null;

	    if (options.tableAs) {
	      mainTableAs = this.quoteTable(options.tableAs);
	    } else if (!Array.isArray(tableName) && model) {
	      mainTableAs = this.quoteTable(model.name);
	    }

	    table = !Array.isArray(tableName) ? this.quoteTable(tableName) : tableName.map(function(t) {
	      if (Array.isArray(t)) {
	        return this.quoteTable(t[0], t[1]);
	      }
	      return this.quoteTable(t, true);
	    }.bind(this)).join(', ');

	    if (subQuery && mainAttributes) {
	      model.primaryKeyAttributes.forEach(function(keyAtt) {
	        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field
	        if (!_.find(mainAttributes, function (attr) {
	          return keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1];
	        })) {
	          mainAttributes.push(model.rawAttributes[keyAtt].field ? [keyAtt, model.rawAttributes[keyAtt].field] : keyAtt);
	        }
	      });
	    }

	    // Escape attributes
	    mainAttributes = mainAttributes && mainAttributes.map(function(attr) {
	      var addTable = true;

	      if (attr._isSequelizeMethod) {
	        return self.handleSequelizeMethod(attr);
	      }

	      if (Array.isArray(attr) && attr.length === 2) {
	        attr = attr.slice();

	        if (attr[0]._isSequelizeMethod) {
	          attr[0] = self.handleSequelizeMethod(attr[0]);
	          addTable = false;
	        } else if (attr[0].indexOf('(') === -1 && attr[0].indexOf(')') === -1) {
	            attr[0] = self.quoteIdentifier(attr[0]);
	        }
	        attr = [attr[0], self.quoteIdentifier(attr[1])].join(' AS ');
	      } else {
	        attr = attr.indexOf(Utils.TICK_CHAR) < 0 && attr.indexOf('"') < 0 ? self.quoteIdentifiers(attr) : attr;
	      }

	      if (options.include && attr.indexOf('.') === -1 && addTable) {
	        attr = mainTableAs + '.' + attr;
	      }
	      return attr;
	    });

	    // If no attributes specified, use *
	    mainAttributes = mainAttributes || (options.include ? [mainTableAs + '.*'] : ['*']);

	    // If subquery, we ad the mainAttributes to the subQuery and set the mainAttributes to select * from subquery
	    if (subQuery || options.groupedLimit) {
	      // We need primary keys
	      subQueryAttributes = mainAttributes;
	      mainAttributes = [(mainTableAs || table) + '.*'];
	    }

	    if (options.include) {
	      var generateJoinQueries = function(include, parentTable) {
	        var table = include.model.getTableName()
	          , as = include.as
	          , joinQueryItem = ''
	          , joinQueries = {
	            mainQuery: [],
	            subQuery: []
	          }
	          , attributes
	          , association = include.association
	          , through = include.through
	          , joinType = include.required ? ' INNER JOIN ' : ' LEFT OUTER JOIN '
	          , parentIsTop = !include.parent.association && include.parent.model.name === options.model.name
	          , whereOptions = Utils._.clone(options)
	          , targetWhere;

	        whereOptions.keysEscaped = true;

	        if (tableName !== parentTable && mainTableAs !== parentTable) {
	          as = parentTable + '.' + include.as;
	        }

	        // includeIgnoreAttributes is used by aggregate functions
	        if (options.includeIgnoreAttributes !== false) {
	          attributes = include.attributes.map(function(attr) {
	            var attrAs = attr,
	                verbatim = false;

	            if (Array.isArray(attr) && attr.length === 2) {
	              if (attr[0]._isSequelizeMethod) {
	                if (attr[0] instanceof Utils.literal ||
	                  attr[0] instanceof Utils.cast ||
	                  attr[0] instanceof Utils.fn
	                ) {
	                  verbatim = true;
	                }
	              }

	              attr = attr.map(function($attr) {
	                return $attr._isSequelizeMethod ? self.handleSequelizeMethod($attr) : $attr;
	              });

	              attrAs = attr[1];
	              attr = attr[0];
	            } else if (attr instanceof Utils.literal) {
	              return attr.val; // We trust the user to rename the field correctly
	            } else if (attr instanceof Utils.cast ||
	              attr instanceof Utils.fn
	            ) {
	              throw new Error(
	                'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +
	                'This means the attribute will not be added to the returned instance'
	              );
	            }

	            var prefix;
	            if (verbatim === true) {
	              prefix = attr;
	            } else {
	              prefix = self.quoteIdentifier(as) + '.' + self.quoteIdentifier(attr);
	            }
	            return prefix + ' AS ' + self.quoteIdentifier(as + '.' + attrAs, true);
	          });
	          if (include.subQuery && subQuery) {
	            subQueryAttributes = subQueryAttributes.concat(attributes);
	          } else {
	            mainAttributes = mainAttributes.concat(attributes);
	          }
	        }

	        if (through) {
	          var throughTable = through.model.getTableName()
	            , throughAs = as + '.' + through.as
	            , throughAttributes = through.attributes.map(function(attr) {
	              return self.quoteIdentifier(throughAs) + '.' + self.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr) +
	                     ' AS ' +
	                     self.quoteIdentifier(throughAs + '.' + (Array.isArray(attr) ? attr[1] : attr));
	            })
	            , primaryKeysSource = association.source.primaryKeyAttributes
	            , tableSource = parentTable
	            , identSource = association.identifierField
	            , attrSource = primaryKeysSource[0]
	            , primaryKeysTarget = association.target.primaryKeyAttributes
	            , tableTarget = as
	            , identTarget = association.foreignIdentifierField
	            , attrTarget = association.target.rawAttributes[primaryKeysTarget[0]].field || primaryKeysTarget[0]

	            , sourceJoinOn
	            , targetJoinOn

	            , throughWhere;

	          if (options.includeIgnoreAttributes !== false) {
	            // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)
	            mainAttributes = mainAttributes.concat(throughAttributes);
	          }

	          // Figure out if we need to use field or attribute
	          if (!subQuery) {
	            attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;
	          }
	          if (subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== mainModel) {
	            attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;
	          }

	          // Filter statement for left side of through
	          // Used by both join and subquery where

	          // If parent include was in a subquery need to join on the aliased attribute

	          if (subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {
	            sourceJoinOn = self.quoteIdentifier(tableSource + '.' + attrSource) + ' = ';
	          } else {
	            sourceJoinOn = self.quoteTable(tableSource) + '.' + self.quoteIdentifier(attrSource) + ' = ';
	          }
	          sourceJoinOn += self.quoteIdentifier(throughAs) + '.' + self.quoteIdentifier(identSource);

	          // Filter statement for right side of through
	          // Used by both join and subquery where
	          targetJoinOn = self.quoteIdentifier(tableTarget) + '.' + self.quoteIdentifier(attrTarget) + ' = ';
	          targetJoinOn += self.quoteIdentifier(throughAs) + '.' + self.quoteIdentifier(identTarget);

	          if (include.through.where) {
	            throughWhere = self.getWhereConditions(include.through.where, self.sequelize.literal(self.quoteIdentifier(throughAs)), include.through.model);
	          }

	          if (self._dialect.supports.joinTableDependent) {
	            // Generate a wrapped join so that the through table join can be dependent on the target join
	            joinQueryItem += joinType + '(';
	            joinQueryItem += self.quoteTable(throughTable, throughAs);
	            joinQueryItem += ' INNER JOIN ' + self.quoteTable(table, as) + ' ON ';
	            joinQueryItem += targetJoinOn;

	            if (throughWhere) {
	              joinQueryItem += ' AND ' + throughWhere;
	            }

	            joinQueryItem += ') ON '+sourceJoinOn;
	          } else {
	            // Generate join SQL for left side of through
	            joinQueryItem += joinType + self.quoteTable(throughTable, throughAs)  + ' ON ';
	            joinQueryItem += sourceJoinOn;

	            // Generate join SQL for right side of through
	            joinQueryItem += joinType + self.quoteTable(table, as) + ' ON ';
	            joinQueryItem += targetJoinOn;

	            if (throughWhere) {
	              joinQueryItem += ' AND ' + throughWhere;
	            }

	          }

	          if (include.where || include.through.where) {
	            if (include.where) {
	              targetWhere = self.getWhereConditions(include.where, self.sequelize.literal(self.quoteIdentifier(as)), include.model, whereOptions);
	              if (targetWhere) {
	                joinQueryItem += ' AND ' + targetWhere;
	              }
	            }
	            if (subQuery && include.required) {
	              if (!options.where) options.where = {};
	              (function (include) {
	                // Closure to use sane local variables

	                var parent = include
	                  , child = include
	                  , nestedIncludes = []
	                  , topParent
	                  , topInclude
	                  , $query;

	                while (parent = parent.parent) {
	                  nestedIncludes = [_.extend({}, child, {include: nestedIncludes})];
	                  child = parent;
	                }

	                topInclude = nestedIncludes[0];
	                topParent = topInclude.parent;

	                if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {
	                  $query = self.selectQuery(topInclude.through.model.getTableName(), {
	                    attributes: [topInclude.through.model.primaryKeyField],
	                    include: Model.$validateIncludedElements({
	                      model: topInclude.through.model,
	                      include: [{
	                        association: topInclude.association.toTarget,
	                        required: true
	                      }]
	                    }).include,
	                    model: topInclude.through.model,
	                    where: { $and: [
	                      self.sequelize.asIs([
	                        self.quoteTable(topParent.model.name) + '.' + self.quoteIdentifier(topParent.model.primaryKeyField),
	                        self.quoteIdentifier(topInclude.through.model.name) + '.' + self.quoteIdentifier(topInclude.association.identifierField)
	                      ].join(' = ')),
	                      topInclude.through.where
	                    ]},
	                    limit: 1,
	                    includeIgnoreAttributes: false
	                  }, topInclude.through.model);
	                } else {
	                  var isBelongsTo = topInclude.association.associationType === 'BelongsTo';
	                  var join = [
	                    self.quoteTable(topParent.model.name) + '.' + self.quoteIdentifier(isBelongsTo ? topInclude.association.identifierField : topParent.model.primaryKeyAttributes[0]),
	                    self.quoteIdentifier(topInclude.model.name) + '.' + self.quoteIdentifier(isBelongsTo ? topInclude.model.primaryKeyAttributes[0] : topInclude.association.identifierField)
	                  ].join(' = ');
	                  $query = self.selectQuery(topInclude.model.tableName, {
	                    attributes: [topInclude.model.primaryKeyAttributes[0]],
	                    include: topInclude.include,
	                    where: {
	                      $join: self.sequelize.asIs(join)
	                    },
	                    limit: 1,
	                    includeIgnoreAttributes: false
	                  }, topInclude.model);
	                }

	                options.where['__' + throughAs] = self.sequelize.asIs([
	                  '(',
	                    $query.replace(/\;$/, ''),
	                  ')',
	                  'IS NOT NULL'
	                ].join(' '));
	              })(include);
	            }
	          }
	        } else {
	          if (subQuery && include.subQueryFilter) {
	            var associationWhere = {}
	              , $query
	              , subQueryWhere;

	            associationWhere[association.identifierField] = {
	              $raw: self.quoteTable(parentTable) + '.' + self.quoteIdentifier(association.source.primaryKeyField)
	            };

	            if (!options.where) options.where = {};

	            // Creating the as-is where for the subQuery, checks that the required association exists
	            $query = self.selectQuery(include.model.getTableName(), {
	              attributes: [association.identifierField],
	              where: {
	                $and: [
	                  associationWhere,
	                  include.where || {}
	                ]
	              },
	              limit: 1
	            }, include.model);

	            subQueryWhere = self.sequelize.asIs([
	              '(',
	                $query.replace(/\;$/, ''),
	              ')',
	              'IS NOT NULL'
	            ].join(' '));

	            if (Utils._.isPlainObject(options.where)) {
	              options.where['__' + as] = subQueryWhere;
	            } else {
	              options.where = { $and: [options.where, subQueryWhere] };
	            }
	          }

	          joinQueryItem = ' ' + self.joinIncludeQuery({
	            model: mainModel,
	            subQuery: options.subQuery,
	            include: include,
	            groupedLimit: options.groupedLimit
	          });
	        }

	        if (include.subQuery && subQuery) {
	          joinQueries.subQuery.push(joinQueryItem);
	        } else {
	          joinQueries.mainQuery.push(joinQueryItem);
	        }

	        if (include.include) {
	          include.include.filter(function (include) {
	            return !include.separate;
	          }).forEach(function(childInclude) {
	            if (childInclude._pseudo) return;
	            var childJoinQueries = generateJoinQueries(childInclude, as);

	            if (childInclude.subQuery && subQuery) {
	              joinQueries.subQuery = joinQueries.subQuery.concat(childJoinQueries.subQuery);
	            }
	            if (childJoinQueries.mainQuery) {
	              joinQueries.mainQuery = joinQueries.mainQuery.concat(childJoinQueries.mainQuery);
	            }

	          }.bind(this));
	        }

	        return joinQueries;
	      };

	      // Loop through includes and generate subqueries
	      options.include.filter(function (include) {
	        return !include.separate;
	      }).forEach(function(include) {
	        var joinQueries = generateJoinQueries(include, mainTableAs);

	        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);
	        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);

	      }.bind(this));
	    }

	    // If using subQuery select defined subQuery attributes and join subJoinQueries
	    if (subQuery) {
	      subQueryItems.push(this.selectFromTableFragment(options, model, subQueryAttributes, table, mainTableAs));
	      subQueryItems.push(subJoinQueries.join(''));

	    // Else do it the reguar way
	    } else {
	      if (options.groupedLimit) {
	        if (!mainTableAs) {
	          mainTableAs = table;
	        }

	        var groupedLimitOrder
	          , where = _.assign({}, options.where)
	          , whereKey
	          , include
	          , groupedTableName = mainTableAs;

	        if (typeof options.groupedLimit.on === 'string') {
	          whereKey = options.groupedLimit.on;
	        } else if (options.groupedLimit.on instanceof HasMany) {
	          whereKey = options.groupedLimit.on.foreignKeyField;
	        }

	        if (options.groupedLimit.on instanceof BelongsToMany) {
	          // BTM includes needs to join the through table on to check ID
	          groupedTableName = options.groupedLimit.on.manyFromSource.as;
	          var groupedLimitOptions = Model.$validateIncludedElements({
	            include: [{
	              association: options.groupedLimit.on.manyFromSource,
	              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot
	              required: true,
	              where: _.assign({
	                '$$PLACEHOLDER$$': true
	              }, options.groupedLimit.through && options.groupedLimit.through.where)
	            }],
	            model: model
	          });
	          // Make sure attributes from the join table are mapped back to models
	          options.hasJoin = true;
	          options.hasMultiAssociation = true;
	          options.includeMap = _.assign(groupedLimitOptions.includeMap, options.includeMap);
	          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);
	          include = groupedLimitOptions.include;

	          if (Array.isArray(options.order)) {
	            // We need to make sure the order by attributes are available to the parent query
	            options.order.forEach(function(order, i) {
	              if (Array.isArray(order)) {
	                order = order[0];
	              }

	              var alias = 'subquery_order_' +i;
	              options.attributes.push([order, alias]);

	              // We don't want to prepend model name when we alias the attributes, so quote them here
	              alias = this.sequelize.literal(this.quote(alias));

	              if (Array.isArray(options.order[i])) {
	                options.order[i][0] = alias;
	              } else {
	                options.order[i] = alias;
	              }
	            }, this);
	            groupedLimitOrder = options.order;
	          }
	        } else {
	          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed
	          groupedLimitOrder = options.order;
	          delete options.order;
	          where.$$PLACEHOLDER$$ = true;
	        }

	        // Caching the base query and splicing the where part into it is consistently > twice
	        // as fast than generating from scratch each time for values.length >= 5
	        var baseQuery = '('+this.selectQuery(
	          tableName,
	          {
	            attributes: options.attributes,
	            limit: options.groupedLimit.limit,
	            order: groupedLimitOrder,
	            where: where,
	            include: include,
	            model: model
	          },
	          model
	        ).replace(/;$/, '')+')';
	        var placeHolder = this.whereItemQuery('$$PLACEHOLDER$$', true, { model: model })
	          , splicePos = baseQuery.indexOf(placeHolder);

	        mainQueryItems.push(this.selectFromTableFragment(options, model, mainAttributes, '('+
	          options.groupedLimit.values.map(function (value) {
	            var groupWhere = {};
	            if (whereKey) {
	              groupWhere[whereKey] = value;
	            }
	            if (include) {
	              groupWhere[options.groupedLimit.on.foreignIdentifierField] = value;
	            }

	            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));
	          }, this).join(
	            self._dialect.supports['UNION ALL'] ?' UNION ALL ' : ' UNION '
	          )
	        +')', mainTableAs));
	      } else {
	        mainQueryItems.push(this.selectFromTableFragment(options, model, mainAttributes, table, mainTableAs));
	      }
	      mainQueryItems.push(mainJoinQueries.join(''));
	    }

	    // Add WHERE to sub or main query
	    if (options.hasOwnProperty('where') && !options.groupedLimit) {
	      options.where = this.getWhereConditions(options.where, mainTableAs || tableName, model, options);
	      if (options.where) {
	        if (subQuery) {
	          subQueryItems.push(' WHERE ' + options.where);
	        } else {
	          mainQueryItems.push(' WHERE ' + options.where);
	          // Walk the main query to update all selects
	          _.each(mainQueryItems, function(value, key) {
	            if(value.match(/^SELECT/)) {
	              mainQueryItems[key] = this.selectFromTableFragment(options, model, mainAttributes, table, mainTableAs, options.where);
	            }
	          }.bind(this));
	        }
	      }
	    }

	    // Add GROUP BY to sub or main query
	    if (options.group) {
	      options.group = Array.isArray(options.group) ? options.group.map(function(t) { return this.quote(t, model); }.bind(this)).join(', ') : options.group;
	      if (subQuery) {
	        subQueryItems.push(' GROUP BY ' + options.group);
	      } else {
	        mainQueryItems.push(' GROUP BY ' + options.group);
	      }
	    }

	    // Add HAVING to sub or main query
	    if (options.hasOwnProperty('having')) {
	      options.having = this.getWhereConditions(options.having, tableName, model, options, false);
	      if (subQuery) {
	        subQueryItems.push(' HAVING ' + options.having);
	      } else {
	        mainQueryItems.push(' HAVING ' + options.having);
	      }
	    }
	    // Add ORDER to sub or main query
	    if (options.order) {
	      var orders = this.getQueryOrders(options, model, subQuery);

	      if (orders.mainQueryOrder.length) {
	        mainQueryItems.push(' ORDER BY ' + orders.mainQueryOrder.join(', '));
	      }
	      if (orders.subQueryOrder.length) {
	        subQueryItems.push(' ORDER BY ' + orders.subQueryOrder.join(', '));
	      }
	    }

	    // Add LIMIT, OFFSET to sub or main query
	    var limitOrder = this.addLimitAndOffset(options, model);
	    if (limitOrder && !options.groupedLimit) {
	      if (subQuery) {
	        subQueryItems.push(limitOrder);
	      } else {
	        mainQueryItems.push(limitOrder);
	      }
	    }

	    // If using subQuery, select attributes from wrapped subQuery and join out join tables
	    if (subQuery) {
	      query = 'SELECT ' + mainAttributes.join(', ') + ' FROM (';
	      query += subQueryItems.join('');
	      query += ') AS ' + mainTableAs;
	      query += mainJoinQueries.join('');
	      query += mainQueryItems.join('');
	    } else {
	      query = mainQueryItems.join('');
	    }

	    if (options.lock && this._dialect.supports.lock) {
	      var lock = options.lock;
	      if (typeof options.lock === 'object') {
	        lock = options.lock.level;
	      }
	      if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {
	        query += ' FOR ' + lock;
	      } else if (lock === 'SHARE') {
	        query += ' ' + this._dialect.supports.forShare;
	      } else {
	        query += ' FOR UPDATE';
	      }
	      if (this._dialect.supports.lockOf && options.lock.of instanceof Model) {
	        query += ' OF ' + this.quoteTable(options.lock.of.name);
	      }
	    }

	    query += ';';

	    return query;
	  },

	  getQueryOrders: function(options, model, subQuery) {
	    var mainQueryOrder = [];
	    var subQueryOrder = [];

	    var validateOrder = function(order) {
	      if (order instanceof Utils.literal) return;

	      if (!_.includes([
	        'ASC',
	        'DESC',
	        'ASC NULLS LAST',
	        'DESC NULLS LAST',
	        'ASC NULLS FIRST',
	        'DESC NULLS FIRST',
	        'NULLS FIRST',
	        'NULLS LAST'
	      ], order.toUpperCase())) {
	        throw new Error(util.format('Order must be \'ASC\' or \'DESC\', \'%s\' given', order));
	      }
	    };

	    if (Array.isArray(options.order)) {
	      options.order.forEach(function(t) {
	        if (Array.isArray(t) && _.size(t) > 1) {
	          if (t[0] instanceof Model || t[0].model instanceof Model) {
	            if (typeof t[t.length - 2] === 'string') {
	              validateOrder(_.last(t));
	            }
	          } else {
	            validateOrder(_.last(t));
	          }
	        }

	        var hadSubquery = false;

	        if (subQuery && (Array.isArray(t) && !(t[0] instanceof Model) && !(t[0].model instanceof Model))) {
	          subQueryOrder.push(this.quote(t, model));
	          hadSubquery = true;
	        }

	        if (hadSubquery) {
	          for (var name in model.attributes) {
	            var attribute = model.attributes[name];
	            if (attribute.field && attribute.field === t[0]) {
	              t[0] = attribute.fieldName;
	            }
	          }
	        }

	        mainQueryOrder.push(this.quote(t, model));
	      }.bind(this));
	    } else {
	      var sql = this.quote(typeof options.order === 'string' ? new Utils.literal(options.order) : options.order, model);
	      if (subQuery) {
	        subQueryOrder.push(sql);
	      }
	      mainQueryOrder.push(sql);
	    }

	    return {
	      mainQueryOrder: mainQueryOrder,
	      subQueryOrder: subQueryOrder
	    };
	  },

	  selectFromTableFragment: function(options, model, attributes, tables, mainTableAs, whereClause) {
	    var fragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;

	    if(mainTableAs) {
	      fragment += ' AS ' + mainTableAs;
	    }

	    return fragment;
	  },

	  joinIncludeQuery: function(options) {
	    var subQuery = options.subQuery
	      , include = options.include
	      , association = include.association
	      , parent = include.parent
	      , parentIsTop = !include.parent.association && include.parent.model.name === options.model.name
	      , $parent
	      , joinType = include.required ? 'INNER JOIN ' : 'LEFT OUTER JOIN '
	      , joinOn
	      , joinWhere

	      /* Attributes for the left side */
	      , left = association.source
	      , asLeft
	      , attrLeft = association instanceof BelongsTo ?
	                   association.identifier :
	                   left.primaryKeyAttribute
	      , fieldLeft = association instanceof BelongsTo ?
	                   association.identifierField :
	                   left.rawAttributes[left.primaryKeyAttribute].field

	      /* Attributes for the right side */
	      , right = include.model
	      , asRight = include.as
	      , tableRight = right.getTableName()
	      , fieldRight = association instanceof BelongsTo ?
	                     right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :
	                     association.identifierField;

	    while (($parent = ($parent && $parent.parent || include.parent)) && $parent.association) {
	      if (asLeft) {
	        asLeft = [$parent.as, asLeft].join('.');
	      } else {
	        asLeft = $parent.as;
	      }
	    }

	    if (!asLeft) asLeft = parent.as || parent.model.name;
	    else asRight = [asLeft, asRight].join('.');

	    joinOn = [
	      this.quoteTable(asLeft),
	      this.quoteIdentifier(fieldLeft)
	    ].join('.');

	    if ((options.groupedLimit && parentIsTop) || (subQuery && include.parent.subQuery && !include.subQuery)) {
	      if (parentIsTop) {
	        // The main model attributes is not aliased to a prefix
	        joinOn = [
	          this.quoteTable(parent.as || parent.model.name),
	          this.quoteIdentifier(attrLeft)
	        ].join('.');
	      } else {
	        joinOn = this.quoteIdentifier(asLeft + '.' + attrLeft);
	      }
	    }

	    joinOn += ' = ' + this.quoteIdentifier(asRight) + '.' + this.quoteIdentifier(fieldRight);

	    if (include.on) {
	      joinOn = this.whereItemsQuery(include.on, {
	        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),
	        model: include.model
	      });
	    }

	    if (include.where) {
	      joinWhere = this.whereItemsQuery(include.where, {
	        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),
	        model: include.model
	      });
	      if (joinWhere) {
	        if (include.or) {
	          joinOn += ' OR ' + joinWhere;
	        } else {
	          joinOn += ' AND ' + joinWhere;
	        }
	      }
	    }

	    return joinType + this.quoteTable(tableRight, asRight) + ' ON ' + joinOn;
	  },

	  /**
	   * Returns a query that starts a transaction.
	   *
	   * @param  {Boolean} value   A boolean that states whether autocommit shall be done or not.
	   * @param  {Object}  options An object with options.
	   * @return {String}          The generated sql query.
	   */
	  setAutocommitQuery: function(value, options) {
	    if (options.parent) {
	      return;
	    }

	    return 'SET autocommit = ' + (!!value ? 1 : 0) + ';';
	  },

	  /**
	   * Returns a query that sets the transaction isolation level.
	   *
	   * @param  {String} value   The isolation level.
	   * @param  {Object} options An object with options.
	   * @return {String}         The generated sql query.
	   */
	  setIsolationLevelQuery: function(value, options) {
	    if (options.parent) {
	      return;
	    }

	    return 'SET SESSION TRANSACTION ISOLATION LEVEL ' + value + ';';
	  },

	  /**
	   * Returns a query that starts a transaction.
	   *
	   * @param  {Transaction} transaction
	   * @param  {Object} options An object with options.
	   * @return {String}         The generated sql query.
	   */
	  startTransactionQuery: function(transaction) {
	    if (transaction.parent) {
	      // force quoting of savepoint identifiers for postgres
	      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';
	    }

	    return 'START TRANSACTION;';
	  },

	  /**
	   * Returns a query that defers the constraints. Only works for postgres.
	   *
	   * @param  {Transaction} transaction
	   * @param  {Object} options An object with options.
	   * @return {String}         The generated sql query.
	   */
	  deferConstraintsQuery: function () {},

	  setConstraintQuery: function () {},
	  setDeferredQuery: function () {},
	  setImmediateQuery: function () {},

	  /**
	   * Returns a query that commits a transaction.
	   *
	   * @param  {Object} options An object with options.
	   * @return {String}         The generated sql query.
	   */
	  commitTransactionQuery: function(transaction) {
	    if (transaction.parent) {
	      return;
	    }

	    return 'COMMIT;';
	  },

	  /**
	   * Returns a query that rollbacks a transaction.
	   *
	   * @param  {Transaction} transaction
	   * @param  {Object} options An object with options.
	   * @return {String}         The generated sql query.
	   */
	  rollbackTransactionQuery: function(transaction) {
	    if (transaction.parent) {
	      // force quoting of savepoint identifiers for postgres
	      return 'ROLLBACK TO SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';
	    }

	    return 'ROLLBACK;';
	  },

	  /**
	   * Returns an SQL fragment for adding result constraints
	   *
	   * @param  {Object} options An object with selectQuery options.
	   * @param  {Object} options The model passed to the selectQuery.
	   * @return {String}         The generated sql query.
	   */
	  addLimitAndOffset: function(options, model) {
	    var fragment = '';

	    /*jshint eqeqeq:false*/
	    if (options.offset != null && options.limit == null) {
	      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;
	    } else if (options.limit != null) {
	      if (options.offset != null) {
	        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);
	      } else {
	        fragment += ' LIMIT ' + this.escape(options.limit);
	      }
	    }

	    return fragment;
	  },

	  handleSequelizeMethod: function (smth, tableName, factory, options, prepend) {
	    var self = this
	      , result;

	    if (smth instanceof Utils.where) {
	      var value = smth.logic
	        , key;

	      if (smth.attribute._isSequelizeMethod) {
	        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);
	      } else {
	        key = this.quoteTable(smth.attribute.Model.name) + '.' + this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName);
	      }

	      if (value && value._isSequelizeMethod) {
	        value = this.getWhereConditions(value, tableName, factory, options, prepend);

	        result = (value === 'NULL') ? key + ' IS NULL' : [key, value].join(smth.comparator);
	      } else if (_.isPlainObject(value)) {
	        result = this.whereItemQuery(smth.attribute, value, {
	          model: factory
	        });
	      } else {
	        if (typeof value === 'boolean') {
	          value = this.booleanValue(value);
	        } else {
	          value = this.escape(value);
	        }

	        result = (value === 'NULL') ? key + ' IS NULL' : [key, value].join(' ' + smth.comparator + ' ');
	      }
	    } else if (smth instanceof Utils.literal) {
	      result = smth.val;
	    } else if (smth instanceof Utils.cast) {
	      if (smth.val._isSequelizeMethod) {
	        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);
	      } else if (_.isPlainObject(smth.val)) {
	        result = this.whereItemsQuery(smth.val);
	      } else {
	        result = this.escape(smth.val);
	      }

	      result = 'CAST(' + result + ' AS ' + smth.type.toUpperCase() + ')';
	    } else if (smth instanceof Utils.fn) {
	      result = smth.fn + '(' + smth.args.map(function(arg) {
	        if (arg._isSequelizeMethod) {
	          return self.handleSequelizeMethod(arg, tableName, factory, options, prepend);
	        } else if (_.isPlainObject(arg)) {
	          return self.whereItemsQuery(arg);
	        } else {
	          return self.escape(arg);
	        }
	      }).join(', ') + ')';
	    } else if (smth instanceof Utils.col) {
	      if (Array.isArray(smth.col)) {
	        if (!factory) {
	          throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');
	        }
	      } else if (smth.col.indexOf('*') === 0) {
	        return '*';
	      }
	      return this.quote(smth.col, factory);
	    } else {
	      result = smth.toString(this, factory);
	    }

	    return result;
	  },

	  whereQuery: function(where, options) {
	    var query = this.whereItemsQuery(where, options);
	    if (query && query.length) {
	      return 'WHERE '+query;
	    }
	    return '';
	  },
	  whereItemsQuery: function(where, options, binding) {
	    if (
	      (Array.isArray(where) && where.length === 0) ||
	      (_.isPlainObject(where) && _.isEmpty(where)) ||
	      where === null ||
	      where === undefined
	    ) {
	      // NO OP
	      return '';
	    }

	    if (_.isString(where)) {
	      throw new Error('where: "raw query" has been removed, please use where ["raw query", [replacements]]');
	    }

	    var self = this
	      , items = [];

	    binding = binding || 'AND';
	    if (binding.substr(0, 1) !== ' ') binding = ' '+binding+' ';

	    if (_.isPlainObject(where)) {
	      _.forOwn(where, function (value, key) {
	        items.push(self.whereItemQuery(key, value, options));
	      });
	    } else {
	      items.push(self.whereItemQuery(undefined, where, options));
	    }

	    return items.length && items.filter(function (item) {
	      return item && item.length;
	    }).join(binding) || '';
	  },
	  whereItemQuery: function(key, value, options) {
	    options = options || {};

	    var self = this
	      , binding
	      , outerBinding
	      , comparatorMap
	      , aliasMap
	      , comparator = '='
	      , field = options.field || options.model && options.model.rawAttributes && options.model.rawAttributes[key] || options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]
	      , fieldType = options.type || (field && field.type)
	      , tmp;

	    if (key && typeof key === 'string' && key.indexOf('.') !== -1 && options.model) {
	      if (options.model.rawAttributes[key.split('.')[0]] && options.model.rawAttributes[key.split('.')[0]].type instanceof DataTypes.JSON) {
	        field = options.model.rawAttributes[key.split('.')[0]];
	        fieldType = field.type;
	        tmp = value;
	        value = {};

	        Dottie.set(value, key.split('.').slice(1), tmp);
	        key = field.field || key.split('.')[0];
	      }
	    }

	    comparatorMap = {
	      $eq: '=',
	      $ne: '!=',
	      $gte: '>=',
	      $gt: '>',
	      $lte: '<=',
	      $lt: '<',
	      $not: 'IS NOT',
	      $is: 'IS',
	      $like: 'LIKE',
	      $notLike: 'NOT LIKE',
	      $iLike: 'ILIKE',
	      $notILike: 'NOT ILIKE',
	      $between: 'BETWEEN',
	      $notBetween: 'NOT BETWEEN',
	      $overlap: '&&',
	      $contains: '@>',
	      $contained: '<@'
	    };

	    // Maintain BC
	    aliasMap = {
	      'ne': '$ne',
	      'in': '$in',
	      'not': '$not',
	      'notIn': '$notIn',
	      'gte': '$gte',
	      'gt': '$gt',
	      'lte': '$lte',
	      'lt': '$lt',
	      'like': '$like',
	      'ilike': '$iLike',
	      '$ilike': '$iLike',
	      'nlike': '$notLike',
	      '$notlike': '$notLike',
	      'notilike': '$notILike',
	      '..': '$between',
	      'between': '$between',
	      '!..': '$notBetween',
	      'notbetween': '$notBetween',
	      'nbetween': '$notBetween',
	      'overlap': '$overlap',
	      '&&': '$overlap',
	      '@>': '$contains',
	      '<@': '$contained'
	    };

	    key = aliasMap[key] || key;
	    if (_.isPlainObject(value)) {
	      _.forOwn(value, function (item, key) {
	        if (aliasMap[key]) {
	          value[aliasMap[key]] = item;
	          delete value[key];
	        }
	      });
	    }

	    if (key === undefined) {
	      if (typeof value === 'string') {
	        return value;
	      }

	      if (_.isPlainObject(value) && _.size(value) === 1) {
	        key = Object.keys(value)[0];
	        value = _.values(value)[0];
	      }
	    }

	    if (value && value._isSequelizeMethod && !(key !== undefined && value instanceof Utils.fn)) {
	      return this.handleSequelizeMethod(value);
	    }

	    // Convert where: [] to $and if possible, else treat as literal/replacements
	    if (key === undefined && Array.isArray(value)) {
	      if (Utils.canTreatArrayAsAnd(value)) {
	        key = '$and';
	      } else {
	        return Utils.format(value, this.dialect);
	      }
	    }
	    // OR/AND/NOT grouping logic
	    if (key === '$or' || key === '$and' || key === '$not') {
	      binding = (key === '$or') ?' OR ' : ' AND ';
	      outerBinding = '';
	      if (key === '$not') outerBinding = 'NOT ';

	      if (Array.isArray(value)) {
	        value = value.map(function (item) {
	          var itemQuery = self.whereItemsQuery(item, options, ' AND ');
	          if ((Array.isArray(item) || _.isPlainObject(item)) && _.size(item) > 1) {
	            itemQuery = '('+itemQuery+')';
	          }
	          return itemQuery;
	        }).filter(function (item) {
	          return item && item.length;
	        });

	        // $or: [] should return no data.
	        // $not of no restriction should also return no data
	        if ((key === '$or' || key === '$not') && value.length === 0) {
	          return '0 = 1';
	        }

	        return value.length ? outerBinding + '('+value.join(binding)+')' : undefined;
	      } else {
	        value = self.whereItemsQuery(value, options, binding);

	        if ((key === '$or' || key === '$not') && !value) {
	          return '0 = 1';
	        }

	        return value ? outerBinding + '('+value+')' : undefined;
	      }
	    }

	    if (value && (value.$or || value.$and)) {
	      binding = value.$or ? ' OR ' : ' AND ';
	      value = value.$or || value.$and;

	      if (_.isPlainObject(value)) {
	        value = _.reduce(value, function (result, _value, key) {
	          result.push(_.zipObject([key], [_value]));
	          return result;
	        }, []);
	      }

	      value = value.map(function (_value) {
	        return self.whereItemQuery(key, _value, options);
	      }).filter(function (item) {
	        return item && item.length;
	      });

	      return value.length ? '('+value.join(binding)+')' : undefined;
	    }

	    if (_.isPlainObject(value) && fieldType instanceof DataTypes.JSON && options.json !== false) {
	      return (function () {
	        var $items = []
	          , result
	          , traverse;

	        traverse = function (prop, item, path) {
	          var $where = {}
	            , $key
	            , $cast
	            , $baseKey
	            , $tmp
	            , castKey;

	          if (path[path.length - 1].indexOf('::') > -1) {
	            $tmp = path[path.length - 1].split('::');
	            $cast = $tmp[1];
	            path[path.length - 1] = $tmp[0];
	          }

	          $baseKey = self.quoteIdentifier(key)+'#>>\'{'+path.join(', ')+'}\'';

	          if (options.prefix) {
	            if (options.prefix instanceof Utils.literal) {
	              $baseKey = self.handleSequelizeMethod(options.prefix)+'.'+$baseKey;
	            } else {
	              $baseKey = self.quoteTable(options.prefix)+'.'+$baseKey;
	            }
	          }

	          $baseKey = '('+$baseKey+')';

	          castKey = function ($item) {
	            var key = $baseKey;

	            if (!$cast) {
	              if (typeof $item === 'number') {
	                $cast = 'double precision';
	              } else if ($item instanceof Date) {
	                $cast = 'timestamptz';
	              } else if (typeof $item === 'boolean') {
	                $cast = 'boolean';
	              }
	            }

	            if ($cast) {
	              key += '::'+$cast;
	            }

	            return key;
	          };

	          if (_.isPlainObject(item)) {
	            _.forOwn(item, function ($item, $prop) {
	              if ($prop.indexOf('$') === 0) {
	                $where[$prop] = $item;
	                $key = castKey($item);

	                $items.push(self.whereItemQuery(new Utils.literal($key), $where/*, _.pick(options, 'prefix')*/));
	              } else {
	                traverse($prop, $item, path.concat([$prop]));
	              }
	            });
	          } else {
	            $where.$eq = item;
	            $key = castKey(item);

	            $items.push(self.whereItemQuery(new Utils.literal($key), $where/*, _.pick(options, 'prefix')*/));
	          }
	        };

	        _.forOwn(value, function (item, prop) {
	          if (prop.indexOf('$') === 0) {
	            var $where = {};
	            $where[prop] = item;
	            $items.push(self.whereItemQuery(key, $where, _.assign({}, options, {json: false})));
	            return;
	          }

	          traverse(prop, item, [prop]);
	        });

	        result = $items.join(' AND ');
	        return $items.length > 1 ? '('+result+')' : result;
	      })();
	    }

	    // If multiple keys we combine the different logic conditions
	    if (_.isPlainObject(value) && Object.keys(value).length > 1) {
	      return (function () {
	        var $items = [];
	        _.forOwn(value, function (item, logic) {
	          var $where = {};
	          $where[logic] = item;
	          $items.push(self.whereItemQuery(key, $where, options));
	        });

	        return '('+$items.join(' AND ')+')';
	      })();
	    }

	    // Do [] to $in/$notIn normalization
	    if (value && (!fieldType || !(fieldType instanceof DataTypes.ARRAY))) {
	      if (Array.isArray(value)) {
	        value = {
	          $in: value
	        };
	      } else if (value && Array.isArray(value.$not)) {
	        value.$notIn = value.$not;
	        delete value.$not;
	      }
	    }

	    // normalize $not: non-bool|non-null to $ne
	    if (value && typeof value.$not !== 'undefined' && [null, true, false].indexOf(value.$not) < 0) {
	      value.$ne = value.$not;
	      delete value.$not;
	    }

	    // Setup keys and comparators
	    if (Array.isArray(value) && fieldType instanceof DataTypes.ARRAY) {
	      value = this.escape(value, field);
	    } else if (value && (value.$in || value.$notIn)) {
	      comparator = 'IN';
	      if (value.$notIn) comparator = 'NOT IN';

	      if ((value.$in || value.$notIn) instanceof Utils.literal) {
	        value = (value.$in || value.$notIn).val;
	      } else if ((value.$in || value.$notIn).length) {
	        value = '('+(value.$in || value.$notIn).map(function (item) {
	          return self.escape(item);
	        }).join(', ')+')';
	      } else {
	        value = '(NULL)';
	      }
	    } else if (value && (value.$any || value.$all)) {
	      comparator = value.$any ? '= ANY' : '= ALL';
	      if (value.$any && value.$any.$values || value.$all && value.$all.$values) {
	        value = '(VALUES '+(value.$any && value.$any.$values || value.$all && value.$all.$values).map(function (value) {
	          return '('+this.escape(value)+')';
	        }.bind(this)).join(', ')+')';
	      } else {
	        value = '('+this.escape(value.$any || value.$all, field)+')';
	      }
	    } else if (value && (value.$between || value.$notBetween)) {
	      comparator = 'BETWEEN';
	      if (value.$notBetween) comparator = 'NOT BETWEEN';

	      value = (value.$between || value.$notBetween).map(function (item) {
	        return self.escape(item);
	      }).join(' AND ');
	    } else if (value && value.$raw) {
	      value = value.$raw;
	    } else if (value && value.$col) {
	      value = value.$col.split('.');

	      if (value.length > 2) {
	        value = [
	          value.slice(0, -1).join('.'),
	          value[value.length - 1]
	        ];
	      }

	      value = value.map(this.quoteIdentifier.bind(this)).join('.');
	    } else {
	      var escapeValue = true;
	      var escapeOptions = {};

	      if (_.isPlainObject(value)) {
	        _.forOwn(value, function (item, key) {
	          if (comparatorMap[key]) {
	            comparator = comparatorMap[key];
	            value = item;

	            if (_.isPlainObject(value) && value.$any) {
	              comparator += ' ANY';
	              escapeOptions.isList = true;
	              value = value.$any;
	            } else if (_.isPlainObject(value) && value.$all) {
	              comparator += ' ALL';
	              escapeOptions.isList = true;
	              value = value.$all;
	            } else if (value && value.$col) {
	              escapeValue = false;
	              value = this.whereItemQuery(null, value);
	            }
	          }
	        }.bind(this));
	      }

	      if (comparator === '=' && value === null) {
	        comparator = 'IS';
	      } else if (comparator === '!=' && value === null) {
	        comparator = 'IS NOT';
	      }

	      escapeOptions.acceptStrings = comparator.indexOf('LIKE') !== -1;

	      if (escapeValue) {
	        value = this.escape(value, field, escapeOptions);

	        //if ANY is used with like, add parentheses to generate correct query
	        if (escapeOptions.acceptStrings && (comparator.indexOf('ANY') > comparator.indexOf('LIKE'))) {
	         value = '(' + value + ')';
	        }
	      }
	    }

	    if (key) {
	      var prefix = true;
	      if (key._isSequelizeMethod) {
	        key = this.handleSequelizeMethod(key);
	      } else if (Utils.isColString(key)) {
	        key = key.substr(1, key.length - 2).split('.');

	        if (key.length > 2) {
	          key = [
	            key.slice(0, -1).join('.'),
	            key[key.length - 1]
	          ];
	        }

	        key = key.map(this.quoteIdentifier.bind(this)).join('.');
	        prefix = false;
	      } else {
	        key = this.quoteIdentifier(key);
	      }

	      if (options.prefix && prefix) {
	        if (options.prefix instanceof Utils.literal) {
	          key = [this.handleSequelizeMethod(options.prefix), key].join('.');
	        } else {
	          key = [this.quoteTable(options.prefix), key].join('.');
	        }
	      }
	      return [key, value].join(' '+comparator+' ');
	    }
	    return value;
	  },

	  /*
	    Takes something and transforms it into values of a where condition.
	  */
	  getWhereConditions: function(smth, tableName, factory, options, prepend) {
	    var result = null
	      , where = {}
	      , self = this;

	    if (Array.isArray(tableName)) {
	      tableName = tableName[0];
	      if (Array.isArray(tableName)) {
	        tableName = tableName[1];
	      }
	    }

	    options = options || {};

	    if (typeof prepend === 'undefined') {
	      prepend = true;
	    }

	    if (smth && smth._isSequelizeMethod === true) { // Checking a property is cheaper than a lot of instanceof calls
	      result = this.handleSequelizeMethod(smth, tableName, factory, options, prepend);
	    } else if (Utils._.isPlainObject(smth)) {
	      return self.whereItemsQuery(smth, {
	        model: factory,
	        prefix: prepend && tableName
	      });
	    } else if (typeof smth === 'number') {
	      var primaryKeys = !!factory ? Object.keys(factory.primaryKeys) : [];

	      if (primaryKeys.length > 0) {
	        // Since we're just a number, assume only the first key
	        primaryKeys = primaryKeys[0];
	      } else {
	        primaryKeys = 'id';
	      }

	      where[primaryKeys] = smth;

	      return self.whereItemsQuery(where, {
	        model: factory,
	        prefix: prepend && tableName
	      });
	    } else if (typeof smth === 'string') {
	      return self.whereItemsQuery(smth, {
	        model: factory,
	        prefix: prepend && tableName
	      });
	    } else if (Buffer.isBuffer(smth)) {
	      result = this.escape(smth);
	    } else if (Array.isArray(smth)) {
	      if (smth.length === 0) return '1=1';
	      if (Utils.canTreatArrayAsAnd(smth)) {
	        var _smth = { $and: smth };
	        result = self.getWhereConditions(_smth, tableName, factory, options, prepend);
	      } else {
	        result = Utils.format(smth, this.dialect);
	      }
	    } else if (smth === null) {
	      return self.whereItemsQuery(smth, {
	        model: factory,
	        prefix: prepend && tableName
	      });
	    }

	    return result ? result : '1=1';
	  },

	  booleanValue: function(value) {
	    return value;
	  }
	};

	module.exports = QueryGenerator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var Classes = Object.create(null);

	/**
	 * Create a new Connection instance.
	 * @param {object} config
	 * @public
	 */
	exports.createConnection = function createConnection(config) {
	  var Connection       = loadClass('Connection');
	  var ConnectionConfig = loadClass('ConnectionConfig');

	  return new Connection({config: new ConnectionConfig(config)});
	};

	/**
	 * Create a new Pool instance.
	 * @param {object} config
	 * @public
	 */
	exports.createPool = function createPool(config) {
	  var Pool       = loadClass('Pool');
	  var PoolConfig = loadClass('PoolConfig');

	  return new Pool({config: new PoolConfig(config)});
	};

	/**
	 * Create a new PoolCluster instance.
	 * @param {object} config
	 * @public
	 */
	exports.createPoolCluster = function createPoolCluster(config) {
	  var PoolCluster = loadClass('PoolCluster');

	  return new PoolCluster(config);
	};

	/**
	 * Create a new Query instance.
	 * @public
	 */
	exports.createQuery = function createQuery(sql, values, callback) {
	  var Connection = loadClass('Connection');

	  return Connection.createQuery(sql, values, callback);
	};

	/**
	 * Escape a value for SQL.
	 * @param {*} value
	 * @param {boolean} [stringifyObjects=false]
	 * @param {string} [timeZone=local]
	 * @public
	 */
	exports.escape = function escape(value, stringifyObjects, timeZone) {
	  var SqlString = loadClass('SqlString');

	  return SqlString.escape(value, stringifyObjects, timeZone);
	};

	/**
	 * Escape an identifier for SQL.
	 * @param {*} value
	 * @param {boolean} [forbidQualified]
	 * @public
	 */
	exports.escapeId = function escapeId(value, forbidQualified) {
	  var SqlString = loadClass('SqlString');

	  return SqlString.escapeId(value, forbidQualified);
	};

	/**
	 * Format SQL and replacement values into a SQL string.
	 * @param {string} sql
	 * @param {array} [values]
	 * @param {boolean} [stringifyObjects=false]
	 * @param {string} [timeZone=local]
	 * @public
	 */
	exports.format = function format(sql, values, stringifyObjects, timeZone) {
	  var SqlString = loadClass('SqlString');

	  return SqlString.format(sql, values, stringifyObjects, timeZone);
	};

	/**
	 * The type constants.
	 * @public
	 */
	Object.defineProperty(exports, 'Types', {
	  get: loadClass.bind(null, 'Types')
	});

	/**
	 * Load the given class.
	 * @private
	 */
	function loadClass(className) {
	  var Class = Classes[className];

	  if (Class !== undefined) {
	    return Class;
	  }

	  // This uses a switch for static require analysis
	  switch (className) {
	    case 'Connection':
	      Class = __webpack_require__(375);
	      break;
	    case 'ConnectionConfig':
	      Class = __webpack_require__(376);
	      break;
	    case 'Pool':
	      Class = __webpack_require__(431);
	      break;
	    case 'PoolCluster':
	      Class = __webpack_require__(433);
	      break;
	    case 'PoolConfig':
	      Class = __webpack_require__(434);
	      break;
	    case 'SqlString':
	      Class = __webpack_require__(430);
	      break;
	    case 'Types':
	      Class = __webpack_require__(398);
	      break;
	    default:
	      throw new Error('Cannot find class \'' + className + '\'');
	  }

	  // Store to prevent invoking require()
	  Classes[className] = Class;

	  return Class;
	}


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Crypto           = __webpack_require__(37);
	var Net              = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var tls              = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var ConnectionConfig = __webpack_require__(376);
	var Protocol         = __webpack_require__(380);
	var SqlString        = __webpack_require__(430);
	var Query            = __webpack_require__(413);
	var EventEmitter     = __webpack_require__(64).EventEmitter;
	var Util             = __webpack_require__(124);

	module.exports = Connection;
	Util.inherits(Connection, EventEmitter);
	function Connection(options) {
	  EventEmitter.call(this);

	  this.config = options.config;

	  this._socket        = options.socket;
	  this._protocol      = new Protocol({config: this.config, connection: this});
	  this._connectCalled = false;
	  this.state          = "disconnected";
	  this.threadId       = null;
	}

	function bindToCurrentDomain(callback) {
	  if (!callback) return;

	  var domain = process.domain;

	  return domain
	    ? domain.bind(callback)
	    : callback;
	}

	Connection.createQuery = function createQuery(sql, values, callback) {
	  if (sql instanceof Query) {
	    return sql;
	  }

	  var cb      = bindToCurrentDomain(callback);
	  var options = {};

	  if (typeof sql === 'function') {
	    cb = bindToCurrentDomain(sql);
	    return new Query(options, cb);
	  }

	  if (typeof sql === 'object') {
	    for (var prop in sql) {
	      options[prop] = sql[prop];
	    }

	    if (typeof values === 'function') {
	      cb = bindToCurrentDomain(values);
	    } else if (values !== undefined) {
	      options.values = values;
	    }

	    return new Query(options, cb);
	  }

	  options.sql    = sql;
	  options.values = values;

	  if (typeof values === 'function') {
	    cb = bindToCurrentDomain(values);
	    options.values = undefined;
	  }

	  if (cb === undefined && callback !== undefined) {
	    throw new TypeError('argument callback must be a function when provided');
	  }

	  return new Query(options, cb);
	};

	Connection.prototype.connect = function connect(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  if (!this._connectCalled) {
	    this._connectCalled = true;

	    // Connect either via a UNIX domain socket or a TCP socket.
	    this._socket = (this.config.socketPath)
	      ? Net.createConnection(this.config.socketPath)
	      : Net.createConnection(this.config.port, this.config.host);

	    var connection = this;
	    this._protocol.on('data', function(data) {
	       connection._socket.write(data);
	    });
	    this._socket.on('data', function(data) {
	      connection._protocol.write(data);
	    });
	    this._protocol.on('end', function() {
	       connection._socket.end();
	    });
	    this._socket.on('end', function(err) {
	      connection._protocol.end();
	    });

	    this._socket.on('error', this._handleNetworkError.bind(this));
	    this._socket.on('connect', this._handleProtocolConnect.bind(this));
	    this._protocol.on('handshake', this._handleProtocolHandshake.bind(this));
	    this._protocol.on('unhandledError', this._handleProtocolError.bind(this));
	    this._protocol.on('drain', this._handleProtocolDrain.bind(this));
	    this._protocol.on('end', this._handleProtocolEnd.bind(this));
	    this._protocol.on('enqueue', this._handleProtocolEnqueue.bind(this));

	    if (this.config.connectTimeout) {
	      var handleConnectTimeout = this._handleConnectTimeout.bind(this);

	      this._socket.setTimeout(this.config.connectTimeout, handleConnectTimeout);
	      this._socket.once('connect', function() {
	        this.setTimeout(0, handleConnectTimeout);
	      });
	    }
	  }

	  this._protocol.handshake(options, bindToCurrentDomain(callback));
	};

	Connection.prototype.changeUser = function changeUser(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  this._implyConnect();

	  var charsetNumber = (options.charset)
	    ? ConnectionConfig.getCharsetNumber(options.charset)
	    : this.config.charsetNumber;

	  return this._protocol.changeUser({
	    user          : options.user || this.config.user,
	    password      : options.password || this.config.password,
	    database      : options.database || this.config.database,
	    timeout       : options.timeout,
	    charsetNumber : charsetNumber,
	    currentConfig : this.config
	  }, bindToCurrentDomain(callback));
	};

	Connection.prototype.beginTransaction = function beginTransaction(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || {};
	  options.sql = 'START TRANSACTION';
	  options.values = null;

	  return this.query(options, callback);
	};

	Connection.prototype.commit = function commit(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || {};
	  options.sql = 'COMMIT';
	  options.values = null;

	  return this.query(options, callback);
	};

	Connection.prototype.rollback = function rollback(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || {};
	  options.sql = 'ROLLBACK';
	  options.values = null;

	  return this.query(options, callback);
	};

	Connection.prototype.query = function query(sql, values, cb) {
	  var query = Connection.createQuery(sql, values, cb);
	  query._connection = this;

	  if (!(typeof sql == 'object' && 'typeCast' in sql)) {
	    query.typeCast = this.config.typeCast;
	  }

	  if (query.sql) {
	    query.sql = this.format(query.sql, query.values);
	  }

	  this._implyConnect();

	  return this._protocol._enqueue(query);
	};

	Connection.prototype.ping = function ping(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  this._implyConnect();
	  this._protocol.ping(options, bindToCurrentDomain(callback));
	};

	Connection.prototype.statistics = function statistics(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  this._implyConnect();
	  this._protocol.stats(options, bindToCurrentDomain(callback));
	};

	Connection.prototype.end = function end(options, callback) {
	  var cb   = callback;
	  var opts = options;

	  if (!callback && typeof options === 'function') {
	    cb   = options;
	    opts = null;
	  }

	  // create custom options reference
	  opts = Object.create(opts || null);

	  if (opts.timeout === undefined) {
	    // default timeout of 30 seconds
	    opts.timeout = 30000;
	  }

	  this._implyConnect();
	  this._protocol.quit(opts, bindToCurrentDomain(cb));
	};

	Connection.prototype.destroy = function() {
	  this.state = "disconnected";
	  this._implyConnect();
	  this._socket.destroy();
	  this._protocol.destroy();
	};

	Connection.prototype.pause = function() {
	  this._socket.pause();
	  this._protocol.pause();
	};

	Connection.prototype.resume = function() {
	  this._socket.resume();
	  this._protocol.resume();
	};

	Connection.prototype.escape = function(value) {
	  return SqlString.escape(value, false, this.config.timezone);
	};

	Connection.prototype.escapeId = function escapeId(value) {
	  return SqlString.escapeId(value, false);
	};

	Connection.prototype.format = function(sql, values) {
	  if (typeof this.config.queryFormat == "function") {
	    return this.config.queryFormat.call(this, sql, values, this.config.timezone);
	  }
	  return SqlString.format(sql, values, this.config.stringifyObjects, this.config.timezone);
	};

	if (tls.TLSSocket) {
	  // 0.11+ environment
	  Connection.prototype._startTLS = function _startTLS(onSecure) {
	    var connection    = this;
	    var secureContext = tls.createSecureContext({
	      ca         : this.config.ssl.ca,
	      cert       : this.config.ssl.cert,
	      ciphers    : this.config.ssl.ciphers,
	      key        : this.config.ssl.key,
	      passphrase : this.config.ssl.passphrase
	    });

	    // "unpipe"
	    this._socket.removeAllListeners('data');
	    this._protocol.removeAllListeners('data');

	    // socket <-> encrypted
	    var rejectUnauthorized = this.config.ssl.rejectUnauthorized;
	    var secureEstablished  = false;
	    var secureSocket       = new tls.TLSSocket(this._socket, {
	      rejectUnauthorized : rejectUnauthorized,
	      requestCert        : true,
	      secureContext      : secureContext,
	      isServer           : false
	    });

	    // error handler for secure socket
	    secureSocket.on('_tlsError', function(err) {
	      if (secureEstablished) {
	        connection._handleNetworkError(err);
	      } else {
	        onSecure(err);
	      }
	    })

	    // cleartext <-> protocol
	    secureSocket.pipe(this._protocol);
	    this._protocol.on('data', function(data) {
	      secureSocket.write(data);
	    });

	    secureSocket.on('secure', function() {
	      secureEstablished = true;

	      onSecure(rejectUnauthorized ? this.ssl.verifyError() : null);
	    });

	    // start TLS communications
	    secureSocket._start();
	  };
	} else {
	  // pre-0.11 environment
	  Connection.prototype._startTLS = function _startTLS(onSecure) {
	    // before TLS:
	    //  _socket <-> _protocol
	    // after:
	    //  _socket <-> securePair.encrypted <-> securePair.cleartext <-> _protocol

	    var connection  = this;
	    var credentials = Crypto.createCredentials({
	      ca         : this.config.ssl.ca,
	      cert       : this.config.ssl.cert,
	      ciphers    : this.config.ssl.ciphers,
	      key        : this.config.ssl.key,
	      passphrase : this.config.ssl.passphrase
	    });

	    var rejectUnauthorized = this.config.ssl.rejectUnauthorized;
	    var secureEstablished  = false;
	    var securePair         = tls.createSecurePair(credentials, false, true, rejectUnauthorized);

	    // error handler for secure pair
	    securePair.on('error', function(err) {
	      if (secureEstablished) {
	        connection._handleNetworkError(err);
	      } else {
	        onSecure(err);
	      }
	    });

	    // "unpipe"
	    this._socket.removeAllListeners('data');
	    this._protocol.removeAllListeners('data');

	    // socket <-> encrypted
	    securePair.encrypted.pipe(this._socket);
	    this._socket.on('data', function(data) {
	      securePair.encrypted.write(data);
	    });

	    // cleartext <-> protocol
	    securePair.cleartext.pipe(this._protocol);
	    this._protocol.on('data', function(data) {
	      securePair.cleartext.write(data);
	    });

	    // secure established
	    securePair.on('secure', function() {
	      secureEstablished = true;

	      if (!rejectUnauthorized) {
	        onSecure();
	        return;
	      }

	      var verifyError = this.ssl.verifyError();
	      var err = verifyError;

	      // node.js 0.6 support
	      if (typeof err === 'string') {
	        err = new Error(verifyError);
	        err.code = verifyError;
	      }

	      onSecure(err);
	    });

	    // node.js 0.8 bug
	    securePair._cycle = securePair.cycle;
	    securePair.cycle  = function cycle() {
	      if (this.ssl && this.ssl.error) {
	        this.error();
	      }

	      return this._cycle.apply(this, arguments);
	    };
	  };
	}

	Connection.prototype._handleConnectTimeout = function() {
	  if (this._socket) {
	    this._socket.setTimeout(0);
	    this._socket.destroy();
	  }

	  var err = new Error('connect ETIMEDOUT');
	  err.errorno = 'ETIMEDOUT';
	  err.code = 'ETIMEDOUT';
	  err.syscall = 'connect';

	  this._handleNetworkError(err);
	};

	Connection.prototype._handleNetworkError = function(err) {
	  this._protocol.handleNetworkError(err);
	};

	Connection.prototype._handleProtocolError = function(err) {
	  this.state = "protocol_error";
	  this.emit('error', err);
	};

	Connection.prototype._handleProtocolDrain = function() {
	  this.emit('drain');
	};

	Connection.prototype._handleProtocolConnect = function() {
	  this.state = "connected";
	  this.emit('connect');
	};

	Connection.prototype._handleProtocolHandshake = function _handleProtocolHandshake(packet) {
	  this.state    = "authenticated";
	  this.threadId = packet.threadId;
	};

	Connection.prototype._handleProtocolEnd = function(err) {
	  this.state = "disconnected";
	  this.emit('end', err);
	};

	Connection.prototype._handleProtocolEnqueue = function _handleProtocolEnqueue(sequence) {
	  this.emit('enqueue', sequence);
	};

	Connection.prototype._implyConnect = function() {
	  if (!this._connectCalled) {
	    this.connect();
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var urlParse        = __webpack_require__(96).parse;
	var ClientConstants = __webpack_require__(377);
	var Charsets        = __webpack_require__(378);
	var SSLProfiles     = null;

	module.exports = ConnectionConfig;
	function ConnectionConfig(options) {
	  if (typeof options === 'string') {
	    options = ConnectionConfig.parseUrl(options);
	  }

	  this.host               = options.host || 'localhost';
	  this.port               = options.port || 3306;
	  this.localAddress       = options.localAddress;
	  this.socketPath         = options.socketPath;
	  this.user               = options.user || undefined;
	  this.password           = options.password || undefined;
	  this.database           = options.database;
	  this.connectTimeout     = (options.connectTimeout === undefined)
	    ? (10 * 1000)
	    : options.connectTimeout;
	  this.insecureAuth       = options.insecureAuth || false;
	  this.supportBigNumbers  = options.supportBigNumbers || false;
	  this.bigNumberStrings   = options.bigNumberStrings || false;
	  this.dateStrings        = options.dateStrings || false;
	  this.debug              = options.debug;
	  this.trace              = options.trace !== false;
	  this.stringifyObjects   = options.stringifyObjects || false;
	  this.timezone           = options.timezone || 'local';
	  this.flags              = options.flags || '';
	  this.queryFormat        = options.queryFormat;
	  this.pool               = options.pool || undefined;
	  this.ssl                = (typeof options.ssl === 'string')
	    ? ConnectionConfig.getSSLProfile(options.ssl)
	    : (options.ssl || false);
	  this.multipleStatements = options.multipleStatements || false;
	  this.typeCast           = (options.typeCast === undefined)
	    ? true
	    : options.typeCast;

	  if (this.timezone[0] == " ") {
	    // "+" is a url encoded char for space so it
	    // gets translated to space when giving a
	    // connection string..
	    this.timezone = "+" + this.timezone.substr(1);
	  }

	  if (this.ssl) {
	    // Default rejectUnauthorized to true
	    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;
	  }

	  this.maxPacketSize = 0;
	  this.charsetNumber = (options.charset)
	    ? ConnectionConfig.getCharsetNumber(options.charset)
	    : options.charsetNumber||Charsets.UTF8_GENERAL_CI;

	  // Set the client flags
	  var defaultFlags = ConnectionConfig.getDefaultFlags(options);
	  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);
	}

	ConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {
	  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);
	  var newFlags = ConnectionConfig.parseFlagList(userFlags);

	  // Merge the new flags
	  for (var flag in newFlags) {
	    if (allFlags[flag] !== false) {
	      allFlags[flag] = newFlags[flag];
	    }
	  }

	  // Build flags
	  var flags = 0x0;
	  for (var flag in allFlags) {
	    if (allFlags[flag]) {
	      // TODO: Throw here on some future release
	      flags |= ClientConstants['CLIENT_' + flag] || 0x0;
	    }
	  }

	  return flags;
	};

	ConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {
	  var num = Charsets[charset.toUpperCase()];

	  if (num === undefined) {
	    throw new TypeError('Unknown charset \'' + charset + '\'');
	  }

	  return num;
	};

	ConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {
	  var defaultFlags = [
	    '-COMPRESS',          // Compression protocol *NOT* supported
	    '-CONNECT_ATTRS',     // Does *NOT* send connection attributes in Protocol::HandshakeResponse41
	    '+CONNECT_WITH_DB',   // One can specify db on connect in Handshake Response Packet
	    '+FOUND_ROWS',        // Send found rows instead of affected rows
	    '+IGNORE_SIGPIPE',    // Don't issue SIGPIPE if network failures
	    '+IGNORE_SPACE',      // Let the parser ignore spaces before '('
	    '+LOCAL_FILES',       // Can use LOAD DATA LOCAL
	    '+LONG_FLAG',         // Longer flags in Protocol::ColumnDefinition320
	    '+LONG_PASSWORD',     // Use the improved version of Old Password Authentication
	    '+MULTI_RESULTS',     // Can handle multiple resultsets for COM_QUERY
	    '+ODBC',              // Special handling of ODBC behaviour
	    '-PLUGIN_AUTH',       // Does *NOT* support auth plugins
	    '+PROTOCOL_41',       // Uses the 4.1 protocol
	    '+PS_MULTI_RESULTS',  // Can handle multiple resultsets for COM_STMT_EXECUTE
	    '+RESERVED',          // Unused
	    '+SECURE_CONNECTION', // Supports Authentication::Native41
	    '+TRANSACTIONS'       // Expects status flags
	  ];

	  if (options && options.multipleStatements) {
	    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE
	    defaultFlags.push('+MULTI_STATEMENTS');
	  }

	  return defaultFlags;
	};

	ConnectionConfig.getSSLProfile = function getSSLProfile(name) {
	  if (!SSLProfiles) {
	    SSLProfiles = __webpack_require__(379);
	  }

	  var ssl = SSLProfiles[name];

	  if (ssl === undefined) {
	    throw new TypeError('Unknown SSL profile \'' + name + '\'');
	  }

	  return ssl;
	};

	ConnectionConfig.parseFlagList = function parseFlagList(flagList) {
	  var allFlags = Object.create(null);

	  if (!flagList) {
	    return allFlags;
	  }

	  var flags = !Array.isArray(flagList)
	    ? String(flagList || '').toUpperCase().split(/\s*,+\s*/)
	    : flagList;

	  for (var i = 0; i < flags.length; i++) {
	    var flag   = flags[i];
	    var offset = 1;
	    var state  = flag[0];

	    if (state === undefined) {
	      // TODO: throw here on some future release
	      continue;
	    }

	    if (state !== '-' && state !== '+') {
	      offset = 0;
	      state  = '+';
	    }

	    allFlags[flag.substr(offset)] = state === '+';
	  }

	  return allFlags;
	};

	ConnectionConfig.parseUrl = function(url) {
	  url = urlParse(url, true);

	  var options = {
	    host     : url.hostname,
	    port     : url.port,
	    database : url.pathname.substr(1)
	  };

	  if (url.auth) {
	    var auth = url.auth.split(':');
	    options.user     = auth.shift();
	    options.password = auth.join(':');
	  }

	  if (url.query) {
	    for (var key in url.query) {
	      var value = url.query[key];

	      try {
	        // Try to parse this as a JSON expression first
	        options[key] = JSON.parse(value);
	      } catch (err) {
	        // Otherwise assume it is a plain string
	        options[key] = value;
	      }
	    }
	  }

	  return options;
	};


/***/ },
/* 377 */
/***/ function(module, exports) {

	// Manually extracted from mysql-5.5.23/include/mysql_com.h
	exports.CLIENT_LONG_PASSWORD     = 1; /* new more secure passwords */
	exports.CLIENT_FOUND_ROWS        = 2; /* Found instead of affected rows */
	exports.CLIENT_LONG_FLAG         = 4; /* Get all column flags */
	exports.CLIENT_CONNECT_WITH_DB   = 8; /* One can specify db on connect */
	exports.CLIENT_NO_SCHEMA         = 16; /* Don't allow database.table.column */
	exports.CLIENT_COMPRESS          = 32; /* Can use compression protocol */
	exports.CLIENT_ODBC              = 64; /* Odbc client */
	exports.CLIENT_LOCAL_FILES       = 128; /* Can use LOAD DATA LOCAL */
	exports.CLIENT_IGNORE_SPACE      = 256; /* Ignore spaces before '(' */
	exports.CLIENT_PROTOCOL_41       = 512; /* New 4.1 protocol */
	exports.CLIENT_INTERACTIVE       = 1024; /* This is an interactive client */
	exports.CLIENT_SSL               = 2048; /* Switch to SSL after handshake */
	exports.CLIENT_IGNORE_SIGPIPE    = 4096;    /* IGNORE sigpipes */
	exports.CLIENT_TRANSACTIONS      = 8192; /* Client knows about transactions */
	exports.CLIENT_RESERVED          = 16384;   /* Old flag for 4.1 protocol  */
	exports.CLIENT_SECURE_CONNECTION = 32768;  /* New 4.1 authentication */

	exports.CLIENT_MULTI_STATEMENTS = 65536; /* Enable/disable multi-stmt support */
	exports.CLIENT_MULTI_RESULTS    = 131072; /* Enable/disable multi-results */
	exports.CLIENT_PS_MULTI_RESULTS = 262144; /* Multi-results in PS-protocol */

	exports.CLIENT_PLUGIN_AUTH = 524288; /* Client supports plugin authentication */

	exports.CLIENT_SSL_VERIFY_SERVER_CERT = 1073741824;
	exports.CLIENT_REMEMBER_OPTIONS       = 2147483648;


/***/ },
/* 378 */
/***/ function(module, exports) {

	exports.BIG5_CHINESE_CI              = 1;
	exports.LATIN2_CZECH_CS              = 2;
	exports.DEC8_SWEDISH_CI              = 3;
	exports.CP850_GENERAL_CI             = 4;
	exports.LATIN1_GERMAN1_CI            = 5;
	exports.HP8_ENGLISH_CI               = 6;
	exports.KOI8R_GENERAL_CI             = 7;
	exports.LATIN1_SWEDISH_CI            = 8;
	exports.LATIN2_GENERAL_CI            = 9;
	exports.SWE7_SWEDISH_CI              = 10;
	exports.ASCII_GENERAL_CI             = 11;
	exports.UJIS_JAPANESE_CI             = 12;
	exports.SJIS_JAPANESE_CI             = 13;
	exports.CP1251_BULGARIAN_CI          = 14;
	exports.LATIN1_DANISH_CI             = 15;
	exports.HEBREW_GENERAL_CI            = 16;
	exports.TIS620_THAI_CI               = 18;
	exports.EUCKR_KOREAN_CI              = 19;
	exports.LATIN7_ESTONIAN_CS           = 20;
	exports.LATIN2_HUNGARIAN_CI          = 21;
	exports.KOI8U_GENERAL_CI             = 22;
	exports.CP1251_UKRAINIAN_CI          = 23;
	exports.GB2312_CHINESE_CI            = 24;
	exports.GREEK_GENERAL_CI             = 25;
	exports.CP1250_GENERAL_CI            = 26;
	exports.LATIN2_CROATIAN_CI           = 27;
	exports.GBK_CHINESE_CI               = 28;
	exports.CP1257_LITHUANIAN_CI         = 29;
	exports.LATIN5_TURKISH_CI            = 30;
	exports.LATIN1_GERMAN2_CI            = 31;
	exports.ARMSCII8_GENERAL_CI          = 32;
	exports.UTF8_GENERAL_CI              = 33;
	exports.CP1250_CZECH_CS              = 34;
	exports.UCS2_GENERAL_CI              = 35;
	exports.CP866_GENERAL_CI             = 36;
	exports.KEYBCS2_GENERAL_CI           = 37;
	exports.MACCE_GENERAL_CI             = 38;
	exports.MACROMAN_GENERAL_CI          = 39;
	exports.CP852_GENERAL_CI             = 40;
	exports.LATIN7_GENERAL_CI            = 41;
	exports.LATIN7_GENERAL_CS            = 42;
	exports.MACCE_BIN                    = 43;
	exports.CP1250_CROATIAN_CI           = 44;
	exports.UTF8MB4_GENERAL_CI           = 45;
	exports.UTF8MB4_BIN                  = 46;
	exports.LATIN1_BIN                   = 47;
	exports.LATIN1_GENERAL_CI            = 48;
	exports.LATIN1_GENERAL_CS            = 49;
	exports.CP1251_BIN                   = 50;
	exports.CP1251_GENERAL_CI            = 51;
	exports.CP1251_GENERAL_CS            = 52;
	exports.MACROMAN_BIN                 = 53;
	exports.UTF16_GENERAL_CI             = 54;
	exports.UTF16_BIN                    = 55;
	exports.UTF16LE_GENERAL_CI           = 56;
	exports.CP1256_GENERAL_CI            = 57;
	exports.CP1257_BIN                   = 58;
	exports.CP1257_GENERAL_CI            = 59;
	exports.UTF32_GENERAL_CI             = 60;
	exports.UTF32_BIN                    = 61;
	exports.UTF16LE_BIN                  = 62;
	exports.BINARY                       = 63;
	exports.ARMSCII8_BIN                 = 64;
	exports.ASCII_BIN                    = 65;
	exports.CP1250_BIN                   = 66;
	exports.CP1256_BIN                   = 67;
	exports.CP866_BIN                    = 68;
	exports.DEC8_BIN                     = 69;
	exports.GREEK_BIN                    = 70;
	exports.HEBREW_BIN                   = 71;
	exports.HP8_BIN                      = 72;
	exports.KEYBCS2_BIN                  = 73;
	exports.KOI8R_BIN                    = 74;
	exports.KOI8U_BIN                    = 75;
	exports.LATIN2_BIN                   = 77;
	exports.LATIN5_BIN                   = 78;
	exports.LATIN7_BIN                   = 79;
	exports.CP850_BIN                    = 80;
	exports.CP852_BIN                    = 81;
	exports.SWE7_BIN                     = 82;
	exports.UTF8_BIN                     = 83;
	exports.BIG5_BIN                     = 84;
	exports.EUCKR_BIN                    = 85;
	exports.GB2312_BIN                   = 86;
	exports.GBK_BIN                      = 87;
	exports.SJIS_BIN                     = 88;
	exports.TIS620_BIN                   = 89;
	exports.UCS2_BIN                     = 90;
	exports.UJIS_BIN                     = 91;
	exports.GEOSTD8_GENERAL_CI           = 92;
	exports.GEOSTD8_BIN                  = 93;
	exports.LATIN1_SPANISH_CI            = 94;
	exports.CP932_JAPANESE_CI            = 95;
	exports.CP932_BIN                    = 96;
	exports.EUCJPMS_JAPANESE_CI          = 97;
	exports.EUCJPMS_BIN                  = 98;
	exports.CP1250_POLISH_CI             = 99;
	exports.UTF16_UNICODE_CI             = 101;
	exports.UTF16_ICELANDIC_CI           = 102;
	exports.UTF16_LATVIAN_CI             = 103;
	exports.UTF16_ROMANIAN_CI            = 104;
	exports.UTF16_SLOVENIAN_CI           = 105;
	exports.UTF16_POLISH_CI              = 106;
	exports.UTF16_ESTONIAN_CI            = 107;
	exports.UTF16_SPANISH_CI             = 108;
	exports.UTF16_SWEDISH_CI             = 109;
	exports.UTF16_TURKISH_CI             = 110;
	exports.UTF16_CZECH_CI               = 111;
	exports.UTF16_DANISH_CI              = 112;
	exports.UTF16_LITHUANIAN_CI          = 113;
	exports.UTF16_SLOVAK_CI              = 114;
	exports.UTF16_SPANISH2_CI            = 115;
	exports.UTF16_ROMAN_CI               = 116;
	exports.UTF16_PERSIAN_CI             = 117;
	exports.UTF16_ESPERANTO_CI           = 118;
	exports.UTF16_HUNGARIAN_CI           = 119;
	exports.UTF16_SINHALA_CI             = 120;
	exports.UTF16_GERMAN2_CI             = 121;
	exports.UTF16_CROATIAN_MYSQL561_CI   = 122;
	exports.UTF16_UNICODE_520_CI         = 123;
	exports.UTF16_VIETNAMESE_CI          = 124;
	exports.UCS2_UNICODE_CI              = 128;
	exports.UCS2_ICELANDIC_CI            = 129;
	exports.UCS2_LATVIAN_CI              = 130;
	exports.UCS2_ROMANIAN_CI             = 131;
	exports.UCS2_SLOVENIAN_CI            = 132;
	exports.UCS2_POLISH_CI               = 133;
	exports.UCS2_ESTONIAN_CI             = 134;
	exports.UCS2_SPANISH_CI              = 135;
	exports.UCS2_SWEDISH_CI              = 136;
	exports.UCS2_TURKISH_CI              = 137;
	exports.UCS2_CZECH_CI                = 138;
	exports.UCS2_DANISH_CI               = 139;
	exports.UCS2_LITHUANIAN_CI           = 140;
	exports.UCS2_SLOVAK_CI               = 141;
	exports.UCS2_SPANISH2_CI             = 142;
	exports.UCS2_ROMAN_CI                = 143;
	exports.UCS2_PERSIAN_CI              = 144;
	exports.UCS2_ESPERANTO_CI            = 145;
	exports.UCS2_HUNGARIAN_CI            = 146;
	exports.UCS2_SINHALA_CI              = 147;
	exports.UCS2_GERMAN2_CI              = 148;
	exports.UCS2_CROATIAN_MYSQL561_CI    = 149;
	exports.UCS2_UNICODE_520_CI          = 150;
	exports.UCS2_VIETNAMESE_CI           = 151;
	exports.UCS2_GENERAL_MYSQL500_CI     = 159;
	exports.UTF32_UNICODE_CI             = 160;
	exports.UTF32_ICELANDIC_CI           = 161;
	exports.UTF32_LATVIAN_CI             = 162;
	exports.UTF32_ROMANIAN_CI            = 163;
	exports.UTF32_SLOVENIAN_CI           = 164;
	exports.UTF32_POLISH_CI              = 165;
	exports.UTF32_ESTONIAN_CI            = 166;
	exports.UTF32_SPANISH_CI             = 167;
	exports.UTF32_SWEDISH_CI             = 168;
	exports.UTF32_TURKISH_CI             = 169;
	exports.UTF32_CZECH_CI               = 170;
	exports.UTF32_DANISH_CI              = 171;
	exports.UTF32_LITHUANIAN_CI          = 172;
	exports.UTF32_SLOVAK_CI              = 173;
	exports.UTF32_SPANISH2_CI            = 174;
	exports.UTF32_ROMAN_CI               = 175;
	exports.UTF32_PERSIAN_CI             = 176;
	exports.UTF32_ESPERANTO_CI           = 177;
	exports.UTF32_HUNGARIAN_CI           = 178;
	exports.UTF32_SINHALA_CI             = 179;
	exports.UTF32_GERMAN2_CI             = 180;
	exports.UTF32_CROATIAN_MYSQL561_CI   = 181;
	exports.UTF32_UNICODE_520_CI         = 182;
	exports.UTF32_VIETNAMESE_CI          = 183;
	exports.UTF8_UNICODE_CI              = 192;
	exports.UTF8_ICELANDIC_CI            = 193;
	exports.UTF8_LATVIAN_CI              = 194;
	exports.UTF8_ROMANIAN_CI             = 195;
	exports.UTF8_SLOVENIAN_CI            = 196;
	exports.UTF8_POLISH_CI               = 197;
	exports.UTF8_ESTONIAN_CI             = 198;
	exports.UTF8_SPANISH_CI              = 199;
	exports.UTF8_SWEDISH_CI              = 200;
	exports.UTF8_TURKISH_CI              = 201;
	exports.UTF8_CZECH_CI                = 202;
	exports.UTF8_DANISH_CI               = 203;
	exports.UTF8_LITHUANIAN_CI           = 204;
	exports.UTF8_SLOVAK_CI               = 205;
	exports.UTF8_SPANISH2_CI             = 206;
	exports.UTF8_ROMAN_CI                = 207;
	exports.UTF8_PERSIAN_CI              = 208;
	exports.UTF8_ESPERANTO_CI            = 209;
	exports.UTF8_HUNGARIAN_CI            = 210;
	exports.UTF8_SINHALA_CI              = 211;
	exports.UTF8_GERMAN2_CI              = 212;
	exports.UTF8_CROATIAN_MYSQL561_CI    = 213;
	exports.UTF8_UNICODE_520_CI          = 214;
	exports.UTF8_VIETNAMESE_CI           = 215;
	exports.UTF8_GENERAL_MYSQL500_CI     = 223;
	exports.UTF8MB4_UNICODE_CI           = 224;
	exports.UTF8MB4_ICELANDIC_CI         = 225;
	exports.UTF8MB4_LATVIAN_CI           = 226;
	exports.UTF8MB4_ROMANIAN_CI          = 227;
	exports.UTF8MB4_SLOVENIAN_CI         = 228;
	exports.UTF8MB4_POLISH_CI            = 229;
	exports.UTF8MB4_ESTONIAN_CI          = 230;
	exports.UTF8MB4_SPANISH_CI           = 231;
	exports.UTF8MB4_SWEDISH_CI           = 232;
	exports.UTF8MB4_TURKISH_CI           = 233;
	exports.UTF8MB4_CZECH_CI             = 234;
	exports.UTF8MB4_DANISH_CI            = 235;
	exports.UTF8MB4_LITHUANIAN_CI        = 236;
	exports.UTF8MB4_SLOVAK_CI            = 237;
	exports.UTF8MB4_SPANISH2_CI          = 238;
	exports.UTF8MB4_ROMAN_CI             = 239;
	exports.UTF8MB4_PERSIAN_CI           = 240;
	exports.UTF8MB4_ESPERANTO_CI         = 241;
	exports.UTF8MB4_HUNGARIAN_CI         = 242;
	exports.UTF8MB4_SINHALA_CI           = 243;
	exports.UTF8MB4_GERMAN2_CI           = 244;
	exports.UTF8MB4_CROATIAN_MYSQL561_CI = 245;
	exports.UTF8MB4_UNICODE_520_CI       = 246;
	exports.UTF8MB4_VIETNAMESE_CI        = 247;
	exports.UTF8_GENERAL50_CI            = 253;

	// short aliases
	exports.ARMSCII8 = exports.ARMSCII8_GENERAL_CI;
	exports.ASCII    = exports.ASCII_GENERAL_CI;
	exports.BIG5     = exports.BIG5_CHINESE_CI;
	exports.BINARY   = exports.BINARY;
	exports.CP1250   = exports.CP1250_GENERAL_CI;
	exports.CP1251   = exports.CP1251_GENERAL_CI;
	exports.CP1256   = exports.CP1256_GENERAL_CI;
	exports.CP1257   = exports.CP1257_GENERAL_CI;
	exports.CP866    = exports.CP866_GENERAL_CI;
	exports.CP850    = exports.CP850_GENERAL_CI;
	exports.CP852    = exports.CP852_GENERAL_CI;
	exports.CP932    = exports.CP932_JAPANESE_CI;
	exports.DEC8     = exports.DEC8_SWEDISH_CI;
	exports.EUCJPMS  = exports.EUCJPMS_JAPANESE_CI;
	exports.EUCKR    = exports.EUCKR_KOREAN_CI;
	exports.GB2312   = exports.GB2312_CHINESE_CI;
	exports.GBK      = exports.GBK_CHINESE_CI;
	exports.GEOSTD8  = exports.GEOSTD8_GENERAL_CI;
	exports.GREEK    = exports.GREEK_GENERAL_CI;
	exports.HEBREW   = exports.HEBREW_GENERAL_CI;
	exports.HP8      = exports.HP8_ENGLISH_CI;
	exports.KEYBCS2  = exports.KEYBCS2_GENERAL_CI;
	exports.KOI8R    = exports.KOI8R_GENERAL_CI;
	exports.KOI8U    = exports.KOI8U_GENERAL_CI;
	exports.LATIN1   = exports.LATIN1_SWEDISH_CI;
	exports.LATIN2   = exports.LATIN2_GENERAL_CI;
	exports.LATIN5   = exports.LATIN5_TURKISH_CI;
	exports.LATIN7   = exports.LATIN7_GENERAL_CI;
	exports.MACCE    = exports.MACCE_GENERAL_CI;
	exports.MACROMAN = exports.MACROMAN_GENERAL_CI;
	exports.SJIS     = exports.SJIS_JAPANESE_CI;
	exports.SWE7     = exports.SWE7_SWEDISH_CI;
	exports.TIS620   = exports.TIS620_THAI_CI;
	exports.UCS2     = exports.UCS2_GENERAL_CI;
	exports.UJIS     = exports.UJIS_JAPANESE_CI;
	exports.UTF16    = exports.UTF16_GENERAL_CI;
	exports.UTF16LE  = exports.UTF16LE_GENERAL_CI;
	exports.UTF8     = exports.UTF8_GENERAL_CI;
	exports.UTF8MB4  = exports.UTF8MB4_GENERAL_CI;
	exports.UTF32    = exports.UTF32_GENERAL_CI;


/***/ },
/* 379 */
/***/ function(module, exports) {

	// Certificates for Amazon RDS
	exports['Amazon RDS'] = {
	  ca: [
	    /**
	     * Amazon RDS global certificate 2010 to 2015
	     *
	     *   CN = aws.amazon.com/rds/
	     *   OU = RDS
	     *   O = Amazon.com
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2010-04-05T22:44:31Z/2015-04-04T22:41:31Z
	     *   F = 7F:09:8D:A5:7D:BB:A6:EF:7C:70:D8:CA:4E:49:11:55:7E:89:A7:D3
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIIDQzCCAqygAwIBAgIJAOd1tlfiGoEoMA0GCSqGSIb3DQEBBQUAMHUxCzAJBgNV\n'
	    + 'BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdTZWF0dGxlMRMw\n'
	    + 'EQYDVQQKEwpBbWF6b24uY29tMQwwCgYDVQQLEwNSRFMxHDAaBgNVBAMTE2F3cy5h\n'
	    + 'bWF6b24uY29tL3Jkcy8wHhcNMTAwNDA1MjI0NDMxWhcNMTUwNDA0MjI0NDMxWjB1\n'
	    + 'MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHU2Vh\n'
	    + 'dHRsZTETMBEGA1UEChMKQW1hem9uLmNvbTEMMAoGA1UECxMDUkRTMRwwGgYDVQQD\n'
	    + 'ExNhd3MuYW1hem9uLmNvbS9yZHMvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n'
	    + 'gQDKhXGU7tizxUR5WaFoMTFcxNxa05PEjZaIOEN5ctkWrqYSRov0/nOMoZjqk8bC\n'
	    + 'med9vPFoQGD0OTakPs0jVe3wwmR735hyVwmKIPPsGlaBYj1O6llIpZeQVyupNx56\n'
	    + 'UzqtiLaDzh1KcmfqP3qP2dInzBfJQKjiRudo1FWnpPt33QIDAQABo4HaMIHXMB0G\n'
	    + 'A1UdDgQWBBT/H3x+cqSkR/ePSIinPtc4yWKe3DCBpwYDVR0jBIGfMIGcgBT/H3x+\n'
	    + 'cqSkR/ePSIinPtc4yWKe3KF5pHcwdTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh\n'
	    + 'c2hpbmd0b24xEDAOBgNVBAcTB1NlYXR0bGUxEzARBgNVBAoTCkFtYXpvbi5jb20x\n'
	    + 'DDAKBgNVBAsTA1JEUzEcMBoGA1UEAxMTYXdzLmFtYXpvbi5jb20vcmRzL4IJAOd1\n'
	    + 'tlfiGoEoMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAvguZy/BDT66x\n'
	    + 'GfgnJlyQwnFSeVLQm9u/FIvz4huGjbq9dqnD6h/Gm56QPFdyMEyDiZWaqY6V08lY\n'
	    + 'LTBNb4kcIc9/6pc0/ojKciP5QJRm6OiZ4vgG05nF4fYjhU7WClUx7cxq1fKjNc2J\n'
	    + 'UCmmYqgiVkAGWRETVo+byOSDZ4swb10=\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS global root CA 2015 to 2020
	     *
	     *   CN = Amazon RDS Root CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T09:11:31Z/2020-03-05T09:11:31Z
	     *   F = E8:11:88:56:E7:A7:CE:3E:5E:DC:9A:31:25:1B:93:AC:DC:43:CE:B0
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID9DCCAtygAwIBAgIBQjANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUwOTExMzFaFw0y\n'
	    + 'MDAzMDUwOTExMzFaMIGKMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEbMBkGA1UEAwwSQW1hem9uIFJE\n'
	    + 'UyBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuD8nrZ8V\n'
	    + 'u+VA8yVlUipCZIKPTDcOILYpUe8Tct0YeQQr0uyl018StdBsa3CjBgvwpDRq1HgF\n'
	    + 'Ji2N3+39+shCNspQeE6aYU+BHXhKhIIStt3r7gl/4NqYiDDMWKHxHq0nsGDFfArf\n'
	    + 'AOcjZdJagOMqb3fF46flc8k2E7THTm9Sz4L7RY1WdABMuurpICLFE3oHcGdapOb9\n'
	    + 'T53pQR+xpHW9atkcf3pf7gbO0rlKVSIoUenBlZipUlp1VZl/OD/E+TtRhDDNdI2J\n'
	    + 'P/DSMM3aEsq6ZQkfbz/Ilml+Lx3tJYXUDmp+ZjzMPLk/+3beT8EhrwtcG3VPpvwp\n'
	    + 'BIOqsqVVTvw/CwIDAQABo2MwYTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUw\n'
	    + 'AwEB/zAdBgNVHQ4EFgQUTgLurD72FchM7Sz1BcGPnIQISYMwHwYDVR0jBBgwFoAU\n'
	    + 'TgLurD72FchM7Sz1BcGPnIQISYMwDQYJKoZIhvcNAQEFBQADggEBAHZcgIio8pAm\n'
	    + 'MjHD5cl6wKjXxScXKtXygWH2BoDMYBJF9yfyKO2jEFxYKbHePpnXB1R04zJSWAw5\n'
	    + '2EUuDI1pSBh9BA82/5PkuNlNeSTB3dXDD2PEPdzVWbSKvUB8ZdooV+2vngL0Zm4r\n'
	    + '47QPyd18yPHrRIbtBtHR/6CwKevLZ394zgExqhnekYKIqqEX41xsUV0Gm6x4vpjf\n'
	    + '2u6O/+YE2U+qyyxHE5Wd5oqde0oo9UUpFETJPVb6Q2cEeQib8PBAyi0i6KnF+kIV\n'
	    + 'A9dY7IHSubtCK/i8wxMVqfd5GtbA8mmpeJFwnDvm9rBEsHybl08qlax9syEwsUYr\n'
	    + '/40NawZfTUU=\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS ap-northeast-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS ap-northeast-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:06Z/2020-03-05T22:03:06Z
	     *   F = 4B:2D:8A:E0:C1:A3:A9:AF:A7:BB:65:0C:5A:16:8A:39:3C:03:F2:C5
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIIEATCCAumgAwIBAgIBRDANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzMDZaFw0y\n'
	    + 'MDAzMDUyMjAzMDZaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzElMCMGA1UEAwwcQW1hem9uIFJE\n'
	    + 'UyBhcC1ub3J0aGVhc3QtMSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n'
	    + 'ggEBAMmM2B4PfTXCZjbZMWiDPyxvk/eeNwIRJAhfzesiGUiLozX6CRy3rwC1ZOPV\n'
	    + 'AcQf0LB+O8wY88C/cV+d4Q2nBDmnk+Vx7o2MyMh343r5rR3Na+4izd89tkQVt0WW\n'
	    + 'vO21KRH5i8EuBjinboOwAwu6IJ+HyiQiM0VjgjrmEr/YzFPL8MgHD/YUHehqjACn\n'
	    + 'C0+B7/gu7W4qJzBL2DOf7ub2qszGtwPE+qQzkCRDwE1A4AJmVE++/FLH2Zx78Egg\n'
	    + 'fV1sUxPtYgjGH76VyyO6GNKM6rAUMD/q5mnPASQVIXgKbupr618bnH+SWHFjBqZq\n'
	    + 'HvDGPMtiiWII41EmGUypyt5AbysCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIG\n'
	    + 'A1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFIiKM0Q6n1K4EmLxs3ZXxINbwEwR\n'
	    + 'MB8GA1UdIwQYMBaAFE4C7qw+9hXITO0s9QXBj5yECEmDMA0GCSqGSIb3DQEBBQUA\n'
	    + 'A4IBAQBezGbE9Rw/k2e25iGjj5n8r+M3dlye8ORfCE/dijHtxqAKasXHgKX8I9Tw\n'
	    + 'JkBiGWiuzqn7gO5MJ0nMMro1+gq29qjZnYX1pDHPgsRjUX8R+juRhgJ3JSHijRbf\n'
	    + '4qNJrnwga7pj94MhcLq9u0f6dxH6dXbyMv21T4TZMTmcFduf1KgaiVx1PEyJjC6r\n'
	    + 'M+Ru+A0eM+jJ7uCjUoZKcpX8xkj4nmSnz9NMPog3wdOSB9cAW7XIc5mHa656wr7I\n'
	    + 'WJxVcYNHTXIjCcng2zMKd1aCcl2KSFfy56sRfT7J5Wp69QSr+jq8KM55gw8uqAwi\n'
	    + 'VPrXn2899T1rcTtFYFP16WXjGuc0\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS ap-northeast-2 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS ap-northeast-2 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-11-06T00:05:46Z/2020-03-05T00:05:46Z
	     *   F = 77:D9:33:4E:CE:56:FC:42:7B:29:57:8D:67:59:ED:29:4E:18:CB:6B
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIIEATCCAumgAwIBAgIBTDANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTExMDYwMDA1NDZaFw0y\n'
	    + 'MDAzMDUwMDA1NDZaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzElMCMGA1UEAwwcQW1hem9uIFJE\n'
	    + 'UyBhcC1ub3J0aGVhc3QtMiBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n'
	    + 'ggEBAKSwd+RVUzTRH0FgnbwoTK8TMm/zMT4+2BvALpAUe6YXbkisg2goycWuuWLg\n'
	    + 'jOpFBB3GtyvXZnkqi7MkDWUmj1a2kf8l2oLyoaZ+Hm9x/sV+IJzOqPvj1XVUGjP6\n'
	    + 'yYYnPJmUYqvZeI7fEkIGdFkP2m4/sgsSGsFvpD9FK1bL1Kx2UDpYX0kHTtr18Zm/\n'
	    + '1oN6irqWALSmXMDydb8hE0FB2A1VFyeKE6PnoDj/Y5cPHwPPdEi6/3gkDkSaOG30\n'
	    + 'rWeQfL3pOcKqzbHaWTxMphd0DSL/quZ64Nr+Ly65Q5PRcTrtr55ekOUziuqXwk+o\n'
	    + '9QpACMwcJ7ROqOznZTqTzSFVXFECAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIG\n'
	    + 'A1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFM6Nox/QWbhzWVvzoJ/y0kGpNPK+\n'
	    + 'MB8GA1UdIwQYMBaAFE4C7qw+9hXITO0s9QXBj5yECEmDMA0GCSqGSIb3DQEBBQUA\n'
	    + 'A4IBAQCTkWBqNvyRf3Y/W21DwFx3oT/AIWrHt0BdGZO34tavummXemTH9LZ/mqv9\n'
	    + 'aljt6ZuDtf5DEQjdsAwXMsyo03ffnP7doWm8iaF1+Mui77ot0TmTsP/deyGwukvJ\n'
	    + 'tkxX8bZjDh+EaNauWKr+CYnniNxCQLfFtXYJsfOdVBzK3xNL+Z3ucOQRhr2helWc\n'
	    + 'CDQgwfhP1+3pRVKqHvWCPC4R3fT7RZHuRmZ38kndv476GxRntejh+ePffif78bFI\n'
	    + '3rIZCPBGobrrUMycafSbyXteoGca/kA+/IqrAPlk0pWQ4aEL0yTWN2h2dnjoD7oX\n'
	    + 'byIuL/g9AGRh97+ssn7D6bDRPTbW\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS ap-southeast-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS ap-southeast-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:19Z/2020-03-05T22:03:19Z
	     *   F = 0E:EC:5D:BD:F9:80:EE:A9:A0:8D:81:AC:37:D9:8D:34:1C:CD:27:D1
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIIEATCCAumgAwIBAgIBRTANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzMTlaFw0y\n'
	    + 'MDAzMDUyMjAzMTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzElMCMGA1UEAwwcQW1hem9uIFJE\n'
	    + 'UyBhcC1zb3V0aGVhc3QtMSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n'
	    + 'ggEBANaXElmSEYt/UtxHFsARFhSUahTf1KNJzR0Dmay6hqOXQuRVbKRwPd19u5vx\n'
	    + 'DdF1sLT7D69IK3VDnUiQScaCv2Dpu9foZt+rLx+cpx1qiQd1UHrvqq8xPzQOqCdC\n'
	    + 'RFStq6yVYZ69yfpfoI67AjclMOjl2Vph3ftVnqP0IgVKZdzeC7fd+umGgR9xY0Qr\n'
	    + 'Ubhd/lWdsbNvzK3f1TPWcfIKQnpvSt85PIEDJir6/nuJUKMtmJRwTymJf0i+JZ4x\n'
	    + '7dJa341p2kHKcHMgOPW7nJQklGBA70ytjUV6/qebS3yIugr/28mwReflg3TJzVDl\n'
	    + 'EOvi6pqbqNbkMuEwGDCmEQIVqgkCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIG\n'
	    + 'A1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFAu93/4k5xbWOsgdCdn+/KdiRuit\n'
	    + 'MB8GA1UdIwQYMBaAFE4C7qw+9hXITO0s9QXBj5yECEmDMA0GCSqGSIb3DQEBBQUA\n'
	    + 'A4IBAQBlcjSyscpPjf5+MgzMuAsCxByqUt+WFspwcMCpwdaBeHOPSQrXNqX2Sk6P\n'
	    + 'kth6oCivA64trWo8tFMvPYlUA1FYVD5WpN0kCK+P5pD4KHlaDsXhuhClJzp/OP8t\n'
	    + 'pOyUr5109RHLxqoKB5J5m1XA7rgcFjnMxwBSWFe3/4uMk/+4T53YfCVXuc6QV3i7\n'
	    + 'I/2LAJwFf//pTtt6fZenYfCsahnr2nvrNRNyAxcfvGZ/4Opn/mJtR6R/AjvQZHiR\n'
	    + 'bkRNKF2GW0ueK5W4FkZVZVhhX9xh1Aj2Ollb+lbOqADaVj+AT3PoJPZ3MPQHKCXm\n'
	    + 'xwG0LOLlRr/TfD6li1AfOVTAJXv9\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS ap-southeast-2 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS ap-southeast-2 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:24Z/2020-03-05T22:03:24Z
	     *   F = 20:D9:A8:82:23:AB:B9:E5:C5:24:10:D3:4D:0F:3D:B1:31:DF:E5:14
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIIEATCCAumgAwIBAgIBRjANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzMjRaFw0y\n'
	    + 'MDAzMDUyMjAzMjRaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzElMCMGA1UEAwwcQW1hem9uIFJE\n'
	    + 'UyBhcC1zb3V0aGVhc3QtMiBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n'
	    + 'ggEBAJqBAJutz69hFOh3BtLHZTbwE8eejGGKayn9hu98YMDPzWzGXWCmW+ZYWELA\n'
	    + 'cY3cNWNF8K4FqKXFr2ssorBYim1UtYFX8yhydT2hMD5zgQ2sCGUpuidijuPA6zaq\n'
	    + 'Z3tdhVR94f0q8mpwpv2zqR9PcqaGDx2VR1x773FupRPRo7mEW1vC3IptHCQlP/zE\n'
	    + '7jQiLl28bDIH2567xg7e7E9WnZToRnhlYdTaDaJsHTzi5mwILi4cihSok7Shv/ME\n'
	    + 'hnukvxeSPUpaVtFaBhfBqq055ePq9I+Ns4KGreTKMhU0O9fkkaBaBmPaFgmeX/XO\n'
	    + 'n2AX7gMouo3mtv34iDTZ0h6YCGkCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIG\n'
	    + 'A1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFIlQnY0KHYWn1jYumSdJYfwj/Nfw\n'
	    + 'MB8GA1UdIwQYMBaAFE4C7qw+9hXITO0s9QXBj5yECEmDMA0GCSqGSIb3DQEBBQUA\n'
	    + 'A4IBAQA0wVU6/l41cTzHc4azc4CDYY2Wd90DFWiH9C/mw0SgToYfCJ/5Cfi0NT/Y\n'
	    + 'PRnk3GchychCJgoPA/k9d0//IhYEAIiIDjyFVgjbTkKV3sh4RbdldKVOUB9kumz/\n'
	    + 'ZpShplsGt3z4QQiVnKfrAgqxWDjR0I0pQKkxXa6Sjkicos9LQxVtJ0XA4ieG1E7z\n'
	    + 'zJr+6t80wmzxvkInSaWP3xNJK9azVRTrgQZQlvkbpDbExl4mNTG66VD3bAp6t3Wa\n'
	    + 'B49//uDdfZmPkqqbX+hsxp160OH0rxJppwO3Bh869PkDnaPEd/Pxw7PawC+li0gi\n'
	    + 'NRV8iCEx85aFxcyOhqn0WZOasxee\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS eu-central-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS eu-central-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:31Z/2020-03-05T22:03:31Z
	     *   F = 94:B4:DF:B9:6D:7E:F7:C3:B7:BF:51:E9:A6:B7:44:A0:D0:82:11:84
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/zCCAuegAwIBAgIBRzANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzMzFaFw0y\n'
	    + 'MDAzMDUyMjAzMzFaMIGSMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEjMCEGA1UEAwwaQW1hem9uIFJE\n'
	    + 'UyBldS1jZW50cmFsLTEgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\n'
	    + 'AQDFtP2dhSLuaPOI4ZrrPWsK4OY9ocQBp3yApH1KJYmI9wpQKZG/KCH2E6Oo7JAw\n'
	    + 'QORU519r033T+FO2Z7pFPlmz1yrxGXyHpJs8ySx3Yo5S8ncDCdZJCLmtPiq/hahg\n'
	    + '5/0ffexMFUCQaYicFZsrJ/cStdxUV+tSw2JQLD7UxS9J97LQWUPyyG+ZrjYVTVq+\n'
	    + 'zudnFmNSe4QoecXMhAFTGJFQXxP7nhSL9Ao5FGgdXy7/JWeWdQIAj8ku6cBDKPa6\n'
	    + 'Y6kP+ak+In+Lye8z9qsCD/afUozfWjPR2aA4JoIZVF8dNRShIMo8l0XfgfM2q0+n\n'
	    + 'ApZWZ+BjhIO5XuoUgHS3D2YFAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNV\n'
	    + 'HRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBRm4GsWIA/M6q+tK8WGHWDGh2gcyTAf\n'
	    + 'BgNVHSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOC\n'
	    + 'AQEAHpMmeVQNqcxgfQdbDIi5UIy+E7zZykmtAygN1XQrvga9nXTis4kOTN6g5/+g\n'
	    + 'HCx7jIXeNJzAbvg8XFqBN84Quqgpl/tQkbpco9Jh1HDs558D5NnZQxNqH5qXQ3Mm\n'
	    + 'uPgCw0pYcPOa7bhs07i+MdVwPBsX27CFDtsgAIru8HvKxY1oTZrWnyIRo93tt/pk\n'
	    + 'WuItVMVHjaQZVfTCow0aDUbte6Vlw82KjUFq+n2NMSCJDiDKsDDHT6BJc4AJHIq3\n'
	    + '/4Z52MSC9KMr0yAaaoWfW/yMEj9LliQauAgwVjArF4q78rxpfKTG9Rfd8U1BZANP\n'
	    + '7FrFMN0ThjfA1IvmOYcgskY5bQ==\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS eu-west-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS eu-west-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:35Z/2020-03-05T22:03:35Z
	     *   F = 1A:95:F0:43:82:D2:5D:A6:AD:F5:13:27:0B:40:8A:72:D9:92:F3:E0
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/DCCAuSgAwIBAgIBSDANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzMzVaFw0y\n'
	    + 'MDAzMDUyMjAzMzVaMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJE\n'
	    + 'UyBldS13ZXN0LTEgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx\n'
	    + 'PdbqQ0HKRj79Pmocxvjc+P6i4Ux24kgFIl+ckiir1vzkmesc3a58gjrMlCksEObt\n'
	    + 'Yihs5IhzEq1ePT0gbfS9GYFp34Uj/MtPwlrfCBWG4d2TcrsKRHr1/EXUYhWqmdrb\n'
	    + 'RhX8XqoRhVkbF/auzFSBhTzcGGvZpQ2KIaxRcQfcXlMVhj/pxxAjh8U4F350Fb0h\n'
	    + 'nX1jw4/KvEreBL0Xb2lnlGTkwVxaKGSgXEnOgIyOFdOQc61vdome0+eeZsP4jqeR\n'
	    + 'TGYJA9izJsRbe2YJxHuazD+548hsPlM3vFzKKEVURCha466rAaYAHy3rKur3HYQx\n'
	    + 'Yt+SoKcEz9PXuSGj96ejAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB\n'
	    + 'Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBTebg//h2oeXbZjQ4uuoiuLYzuiPDAfBgNV\n'
	    + 'HSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOCAQEA\n'
	    + 'TikPaGeZasTPw+4RBemlsyPAjtFFQLo7ddaFdORLgdEysVf8aBqndvbA6MT/v4lj\n'
	    + 'GtEtUdF59ZcbWOrVm+fBZ2h/jYJ59dYF/xzb09nyRbdMSzB9+mkSsnOMqluq5y8o\n'
	    + 'DY/PfP2vGhEg/2ZncRC7nlQU1Dm8F4lFWEiQ2fi7O1cW852Vmbq61RIfcYsH/9Ma\n'
	    + 'kpgk10VZ75b8m3UhmpZ/2uRY+JEHImH5WpcTJ7wNiPNJsciZMznGtrgOnPzYco8L\n'
	    + 'cDleOASIZifNMQi9PKOJKvi0ITz0B/imr8KBsW0YjZVJ54HMa7W1lwugSM7aMAs+\n'
	    + 'E3Sd5lS+SHwWaOCHwhOEVA==\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS sa-east-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS sa-east-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:40Z/2020-03-05T22:03:40Z
	     *   F = 32:10:3D:FA:6D:42:F5:35:98:40:15:F4:4C:74:74:27:CB:CE:D4:B5
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/DCCAuSgAwIBAgIBSTANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzNDBaFw0y\n'
	    + 'MDAzMDUyMjAzNDBaMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJE\n'
	    + 'UyBzYS1lYXN0LTEgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCU\n'
	    + 'X4OBnQ5xA6TLJAiFEI6l7bUWjoVJBa/VbMdCCSs2i2dOKmqUaXu2ix2zcPILj3lZ\n'
	    + 'GMk3d/2zvTK/cKhcFrewHUBamTeVHdEmynhMQamqNmkM4ptYzFcvEUw1TGxHT4pV\n'
	    + 'Q6gSN7+/AJewQvyHexHo8D0+LDN0/Wa9mRm4ixCYH2CyYYJNKaZt9+EZfNu+PPS4\n'
	    + '8iB0TWH0DgQkbWMBfCRgolLLitAZklZ4dvdlEBS7evN1/7ttBxUK6SvkeeSx3zBl\n'
	    + 'ww3BlXqc3bvTQL0A+RRysaVyFbvtp9domFaDKZCpMmDFAN/ntx215xmQdrSt+K3F\n'
	    + 'cXdGQYHx5q410CAclGnbAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB\n'
	    + 'Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBT6iVWnm/uakS+tEX2mzIfw+8JL0zAfBgNV\n'
	    + 'HSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOCAQEA\n'
	    + 'FmDD+QuDklXn2EgShwQxV13+txPRuVdOSrutHhoCgMwFWCMtPPtBAKs6KPY7Guvw\n'
	    + 'DpJoZSehDiOfsgMirjOWjvfkeWSNvKfjWTVneX7pZD9W5WPnsDBvTbCGezm+v87z\n'
	    + 'b+ZM2ZMo98m/wkMcIEAgdSKilR2fuw8rLkAjhYFfs0A7tDgZ9noKwgHvoE4dsrI0\n'
	    + 'KZYco6DlP/brASfHTPa2puBLN9McK3v+h0JaSqqm5Ro2Bh56tZkQh8AWy/miuDuK\n'
	    + '3+hNEVdxosxlkM1TPa1DGj0EzzK0yoeerXuH2HX7LlCrrxf6/wdKnjR12PMrLQ4A\n'
	    + 'pCqkcWw894z6bV9MAvKe6A==\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS us-east-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS us-east-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T21:54:04Z/2020-03-05T21:54:04Z
	     *   F = 34:47:8A:90:8A:83:AE:45:DC:B6:16:76:D2:35:EC:E9:75:C6:2C:63
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/DCCAuSgAwIBAgIBQzANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMTU0MDRaFw0y\n'
	    + 'MDAzMDUyMTU0MDRaMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJE\n'
	    + 'UyB1cy1lYXN0LTEgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDI\n'
	    + 'UIuwh8NusKHk1SqPXcP7OqxY3S/M2ZyQWD3w7Bfihpyyy/fc1w0/suIpX3kbMhAV\n'
	    + '2ESwged2/2zSx4pVnjp/493r4luhSqQYzru78TuPt9bhJIJ51WXunZW2SWkisSaf\n'
	    + 'USYUzVN9ezR/bjXTumSUQaLIouJt3OHLX49s+3NAbUyOI8EdvgBQWD68H1epsC0n\n'
	    + 'CI5s+pIktyOZ59c4DCDLQcXErQ+tNbDC++oct1ANd/q8p9URonYwGCGOBy7sbCYq\n'
	    + '9eVHh1Iy2M+SNXddVOGw5EuruvHoCIQyOz5Lz4zSuZA9dRbrfztNOpezCNYu6NKM\n'
	    + 'n+hzcvdiyxv77uNm8EaxAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB\n'
	    + 'Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBQSQG3TmMe6Sa3KufaPBa72v4QFDzAfBgNV\n'
	    + 'HSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOCAQEA\n'
	    + 'L/mOZfB3187xTmjOHMqN2G2oSKHBKiQLM9uv8+97qT+XR+TVsBT6b3yoPpMAGhHA\n'
	    + 'Pc7nxAF5gPpuzatx0OTLPcmYucFmfqT/1qA5WlgCnMNtczyNMH97lKFTNV7Njtek\n'
	    + 'jWEzAEQSyEWrkNpNlC4j6kMYyPzVXQeXUeZTgJ9FNnVZqmvfjip2N22tawMjrCn5\n'
	    + '7KN/zN65EwY2oO9XsaTwwWmBu3NrDdMbzJnbxoWcFWj4RBwanR1XjQOVNhDwmCOl\n'
	    + '/1Et13b8CPyj69PC8BOVU6cfTSx8WUVy0qvYOKHNY9Bqa5BDnIL3IVmUkeTlM1mt\n'
	    + 'enRpyBj+Bk9rh/ICdiRKmA==\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS us-west-1 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS us-west-1 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:45Z/2020-03-05T22:03:45Z
	     *   F = EF:94:2F:E3:58:0E:09:D6:79:C2:16:97:91:FB:37:EA:D7:70:A8:4B
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/DCCAuSgAwIBAgIBSjANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzNDVaFw0y\n'
	    + 'MDAzMDUyMjAzNDVaMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJE\n'
	    + 'UyB1cy13ZXN0LTEgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDE\n'
	    + 'Dhw+uw/ycaiIhhyu2pXFRimq0DlB8cNtIe8hdqndH8TV/TFrljNgR8QdzOgZtZ9C\n'
	    + 'zzQ2GRpInN/qJF6slEd6wO+6TaDBQkPY+07TXNt52POFUhdVkhJXHpE2BS7Xn6J7\n'
	    + '7RFAOeG1IZmc2DDt+sR1BgXzUqHslQGfFYNS0/MBO4P+ya6W7IhruB1qfa4HiYQS\n'
	    + 'dbe4MvGWnv0UzwAqdR7OF8+8/5c58YXZIXCO9riYF2ql6KNSL5cyDPcYK5VK0+Q9\n'
	    + 'VI6vuJHSMYcF7wLePw8jtBktqAFE/wbdZiIHhZvNyiNWPPNTGUmQbaJ+TzQEHDs5\n'
	    + '8en+/W7JKnPyBOkxxENbAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB\n'
	    + 'Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBS0nw/tFR9bCjgqWTPJkyy4oOD8bzAfBgNV\n'
	    + 'HSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOCAQEA\n'
	    + 'CXGAY3feAak6lHdqj6+YWjy6yyUnLK37bRxZDsyDVXrPRQaXRzPTzx79jvDwEb/H\n'
	    + 'Q/bdQ7zQRWqJcbivQlwhuPJ4kWPUZgSt3JUUuqkMsDzsvj/bwIjlrEFDOdHGh0mi\n'
	    + 'eVIngFEjUXjMh+5aHPEF9BlQnB8LfVtKj18e15UDTXFa+xJPFxUR7wDzCfo4WI1m\n'
	    + 'sUMG4q1FkGAZgsoyFPZfF8IVvgCuGdR8z30VWKklFxttlK0eGLlPAyIO0CQxPQlo\n'
	    + 'saNJrHf4tLOgZIWk+LpDhNd9Et5EzvJ3aURUsKY4pISPPF5WdvM9OE59bERwUErd\n'
	    + 'nuOuQWQeeadMceZnauRzJQ==\n'
	    + '-----END CERTIFICATE-----\n',

	    /**
	     * Amazon RDS us-west-2 certificate CA 2015 to 2020
	     *
	     *   CN = Amazon RDS us-west-2 CA
	     *   OU = Amazon RDS
	     *   O = Amazon Web Services, Inc.
	     *   L = Seattle
	     *   ST = Washington
	     *   C = US
	     *   P = 2015-02-05T22:03:50Z/2020-03-05T22:03:50Z
	     *   F = 94:2C:A8:B0:23:48:17:F0:CD:2F:19:7F:C1:E0:21:7C:65:79:13:3A
	     */
	    '-----BEGIN CERTIFICATE-----\n'
	    + 'MIID/DCCAuSgAwIBAgIBSzANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMCVVMx\n'
	    + 'EzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUxIjAgBgNVBAoM\n'
	    + 'GUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMx\n'
	    + 'GzAZBgNVBAMMEkFtYXpvbiBSRFMgUm9vdCBDQTAeFw0xNTAyMDUyMjAzNTBaFw0y\n'
	    + 'MDAzMDUyMjAzNTBaMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3Rv\n'
	    + 'bjEQMA4GA1UEBwwHU2VhdHRsZTEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNl\n'
	    + 'cywgSW5jLjETMBEGA1UECwwKQW1hem9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJE\n'
	    + 'UyB1cy13ZXN0LTIgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDM\n'
	    + 'H58SR48U6jyERC1vYTnub34smf5EQVXyzaTmspWGWGzT31NLNZGSDFaa7yef9kdO\n'
	    + 'mzJsgebR5tXq6LdwlIoWkKYQ7ycUaadtVKVYdI40QcI3cHn0qLFlg2iBXmWp/B+i\n'
	    + 'Z34VuVlCh31Uj5WmhaBoz8t/GRqh1V/aCsf3Wc6jCezH3QfuCjBpzxdOOHN6Ie2v\n'
	    + 'xX09O5qmZTvMoRBAvPkxdaPg/Mi7fxueWTbEVk78kuFbF1jHYw8U1BLILIAhcqlq\n'
	    + 'x4u8nl73t3O3l/soNUcIwUDK0/S+Kfqhwn9yQyPlhb4Wy3pfnZLJdkyHldktnQav\n'
	    + '9TB9u7KH5Lk0aAYslMLxAgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB\n'
	    + 'Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBT8roM4lRnlFHWMPWRz0zkwFZog1jAfBgNV\n'
	    + 'HSMEGDAWgBROAu6sPvYVyEztLPUFwY+chAhJgzANBgkqhkiG9w0BAQUFAAOCAQEA\n'
	    + 'JwrxwgwmPtcdaU7O7WDdYa4hprpOMamI49NDzmE0s10oGrqmLwZygcWU0jT+fJ+Y\n'
	    + 'pJe1w0CVfKaeLYNsOBVW3X4ZPmffYfWBheZiaiEflq/P6t7/Eg81gaKYnZ/x1Dfa\n'
	    + 'sUYkzPvCkXe9wEz5zdUTOCptDt89rBR9CstL9vE7WYUgiVVmBJffWbHQLtfjv6OF\n'
	    + 'NMb0QME981kGRzc2WhgP71YS2hHd1kXtsoYP1yTu4vThSKsoN4bkiHsaC1cRkLoy\n'
	    + '0fFA4wpB3WloMEvCDaUvvH1LZlBXTNlwi9KtcwD4tDxkkBt4tQczKLGpQ/nF/W9n\n'
	    + '8YDWk3IIc1sd0bkZqoau2Q==\n'
	    + '-----END CERTIFICATE-----\n'
	  ]
	};


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Parser       = __webpack_require__(381);
	var Sequences    = __webpack_require__(384);
	var Packets      = __webpack_require__(387);
	var Timers       = __webpack_require__(76);
	var Stream       = __webpack_require__(63).Stream;
	var Util         = __webpack_require__(124);
	var PacketWriter = __webpack_require__(429);

	module.exports = Protocol;
	Util.inherits(Protocol, Stream);
	function Protocol(options) {
	  Stream.call(this);

	  options = options || {};

	  this.readable = true;
	  this.writable = true;

	  this._config                        = options.config || {};
	  this._connection                    = options.connection;
	  this._callback                      = null;
	  this._fatalError                    = null;
	  this._quitSequence                  = null;
	  this._handshakeSequence             = null;
	  this._handshaked                    = false;
	  this._ended                         = false;
	  this._destroyed                     = false;
	  this._queue                         = [];
	  this._handshakeInitializationPacket = null;

	  this._parser = new Parser({
	    onError  : this.handleParserError.bind(this),
	    onPacket : this._parsePacket.bind(this),
	    config   : this._config
	  });
	}

	Protocol.prototype.write = function(buffer) {
	  this._parser.write(buffer);
	  return true;
	};

	Protocol.prototype.handshake = function handshake(options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || {};
	  options.config = this._config;

	  return this._handshakeSequence = this._enqueue(new Sequences.Handshake(options, callback));
	};

	Protocol.prototype.query = function query(options, callback) {
	  return this._enqueue(new Sequences.Query(options, callback));
	};

	Protocol.prototype.changeUser = function changeUser(options, callback) {
	  return this._enqueue(new Sequences.ChangeUser(options, callback));
	};

	Protocol.prototype.ping = function ping(options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  return this._enqueue(new Sequences.Ping(options, callback));
	};

	Protocol.prototype.stats = function stats(options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  return this._enqueue(new Sequences.Statistics(options, callback));
	};

	Protocol.prototype.quit = function quit(options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  var self     = this;
	  var sequence = this._enqueue(new Sequences.Quit(options, callback));

	  sequence.on('end', function () {
	    self.end();
	  });

	  return this._quitSequence = sequence;
	};

	Protocol.prototype.end = function() {
	  if(this._ended) {
	    return;
	  }
	  this._ended = true;

	  if (this._quitSequence && (this._quitSequence._ended || this._queue[0] === this._quitSequence)) {
	    this._quitSequence.end();
	    this.emit('end');
	    return;
	  }

	  var err = new Error('Connection lost: The server closed the connection.');
	  err.fatal = true;
	  err.code = 'PROTOCOL_CONNECTION_LOST';

	  this._delegateError(err);
	};

	Protocol.prototype.pause = function() {
	  this._parser.pause();
	  // Since there is a file stream in query, we must transmit pause/resume event to current sequence.
	  var seq = this._queue[0];
	  if (seq && seq.emit) {
	    seq.emit('pause');
	  }
	};

	Protocol.prototype.resume = function() {
	  this._parser.resume();
	  // Since there is a file stream in query, we must transmit pause/resume event to current sequence.
	  var seq = this._queue[0];
	  if (seq && seq.emit) {
	    seq.emit('resume');
	  }
	};

	Protocol.prototype._enqueue = function(sequence) {
	  if (!this._validateEnqueue(sequence)) {
	    return sequence;
	  }

	  if (this._config.trace) {
	    // Long stack trace support
	    sequence._callSite = sequence._callSite || new Error;
	  }

	  this._queue.push(sequence);
	  this.emit('enqueue', sequence);

	  var self = this;
	  sequence
	    .on('error', function(err) {
	      self._delegateError(err, sequence);
	    })
	    .on('packet', function(packet) {
	      Timers.active(sequence);
	      self._emitPacket(packet);
	    })
	    .on('end', function() {
	      self._dequeue(sequence);
	    })
	    .on('timeout', function() {
	      var err = new Error(sequence.constructor.name + ' inactivity timeout');

	      err.code    = 'PROTOCOL_SEQUENCE_TIMEOUT';
	      err.fatal   = true;
	      err.timeout = sequence._timeout;

	      self._delegateError(err, sequence);
	    })
	    .on('start-tls', function() {
	      Timers.active(sequence);
	      self._connection._startTLS(function(err) {
	        if (err) {
	          // SSL negotiation error are fatal
	          err.code  = 'HANDSHAKE_SSL_ERROR';
	          err.fatal = true;
	          sequence.end(err);
	          return;
	        }

	        Timers.active(sequence);
	        sequence._tlsUpgradeCompleteHandler();
	      });
	    });

	  if (this._queue.length === 1) {
	    this._parser.resetPacketNumber();
	    this._startSequence(sequence);
	  }

	  return sequence;
	};

	Protocol.prototype._validateEnqueue = function _validateEnqueue(sequence) {
	  var err;
	  var prefix = 'Cannot enqueue ' + sequence.constructor.name;
	  var prefixBefore = prefix + ' before ';
	  var prefixAfter = prefix + ' after ';

	  if (this._fatalError) {
	    err      = new Error(prefixAfter + 'fatal error.');
	    err.code = 'PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR';
	  } else if (this._quitSequence) {
	    err      = new Error(prefixAfter + 'invoking quit.');
	    err.code = 'PROTOCOL_ENQUEUE_AFTER_QUIT';
	  } else if (this._destroyed) {
	    err      = new Error(prefixAfter + 'being destroyed.');
	    err.code = 'PROTOCOL_ENQUEUE_AFTER_DESTROY';
	  } else if (this._handshakeSequence && sequence.constructor === Sequences.Handshake) {
	    err      = new Error(prefixAfter + 'already enqueuing a Handshake.');
	    err.code = 'PROTOCOL_ENQUEUE_HANDSHAKE_TWICE';
	  } else if (!this._handshakeSequence && sequence.constructor === Sequences.ChangeUser) {
	    err      = new Error(prefixBefore + 'a Handshake.');
	    err.code = 'PROTOCOL_ENQUEUE_BEFORE_HANDSHAKE';
	  } else {
	    return true;
	  }

	  var self  = this;
	  err.fatal = false;

	  // add error handler
	  sequence.on('error', function (err) {
	    self._delegateError(err, sequence);
	  });

	  process.nextTick(function () {
	    sequence.end(err);
	  });

	  return false;
	};

	Protocol.prototype._parsePacket = function() {
	  var sequence = this._queue[0];

	  if (!sequence) {
	    var err   = new Error('Received packet with no active sequence.');
	    err.code  = 'PROTOCOL_STRAY_PACKET';
	    err.fatal = true;

	    this._delegateError(err);
	    return;
	  }

	  var Packet     = this._determinePacket(sequence);
	  var packet     = new Packet({protocol41: this._config.protocol41});
	  var packetName = Packet.name;

	  // Special case: Faster dispatch, and parsing done inside sequence
	  if (Packet === Packets.RowDataPacket) {
	    sequence.RowDataPacket(packet, this._parser, this._connection);

	    if (this._config.debug) {
	      this._debugPacket(true, packet);
	    }

	    return;
	  }

	  if (this._config.debug) {
	    this._parsePacketDebug(packet);
	  } else {
	    packet.parse(this._parser);
	  }

	  if (Packet === Packets.HandshakeInitializationPacket) {
	    this._handshakeInitializationPacket = packet;
	  }

	  Timers.active(sequence);

	  if (!sequence[packetName]) {
	    var err   = new Error('Received packet in the wrong sequence.');
	    err.code  = 'PROTOCOL_INCORRECT_PACKET_SEQUENCE';
	    err.fatal = true;

	    this._delegateError(err);
	    return;
	  }

	  sequence[packetName](packet);
	};

	Protocol.prototype._parsePacketDebug = function _parsePacketDebug(packet) {
	  try {
	    packet.parse(this._parser);
	  } finally {
	    this._debugPacket(true, packet);
	  }
	};

	Protocol.prototype._emitPacket = function(packet) {
	  var packetWriter = new PacketWriter();
	  packet.write(packetWriter);
	  this.emit('data', packetWriter.toBuffer(this._parser));

	  if (this._config.debug) {
	    this._debugPacket(false, packet);
	  }
	};

	Protocol.prototype._determinePacket = function(sequence) {
	  var firstByte = this._parser.peak();

	  if (sequence.determinePacket) {
	    var Packet = sequence.determinePacket(firstByte, this._parser);
	    if (Packet) {
	      return Packet;
	    }
	  }

	  switch (firstByte) {
	    case 0x00:
	      if (!this._handshaked) {
	        this._handshaked = true;
	        this.emit('handshake', this._handshakeInitializationPacket);
	      }
	      return Packets.OkPacket;
	    case 0xfe: return Packets.EofPacket;
	    case 0xff: return Packets.ErrorPacket;
	  }

	  throw new Error('Could not determine packet, firstByte = ' + firstByte);
	};

	Protocol.prototype._dequeue = function(sequence) {
	  Timers.unenroll(sequence);

	  // No point in advancing the queue, we are dead
	  if (this._fatalError) {
	    return;
	  }

	  this._queue.shift();

	  var sequence = this._queue[0];
	  if (!sequence) {
	    this.emit('drain');
	    return;
	  }

	  this._parser.resetPacketNumber();

	  this._startSequence(sequence);
	};

	Protocol.prototype._startSequence = function(sequence) {
	  if (sequence._timeout > 0 && isFinite(sequence._timeout)) {
	    Timers.enroll(sequence, sequence._timeout);
	    Timers.active(sequence);
	  }

	  if (sequence.constructor === Sequences.ChangeUser) {
	    sequence.start(this._handshakeInitializationPacket);
	  } else {
	    sequence.start();
	  }
	};

	Protocol.prototype.handleNetworkError = function(err) {
	  err.fatal = true;

	  var sequence = this._queue[0];
	  if (sequence) {
	    sequence.end(err);
	  } else {
	    this._delegateError(err);
	  }
	};

	Protocol.prototype.handleParserError = function handleParserError(err) {
	  var sequence = this._queue[0];
	  if (sequence) {
	    sequence.end(err);
	  } else {
	    this._delegateError(err);
	  }
	};

	Protocol.prototype._delegateError = function(err, sequence) {
	  // Stop delegating errors after the first fatal error
	  if (this._fatalError) {
	    return;
	  }

	  if (err.fatal) {
	    this._fatalError = err;
	  }

	  if (this._shouldErrorBubbleUp(err, sequence)) {
	    // Can't use regular 'error' event here as that always destroys the pipe
	    // between socket and protocol which is not what we want (unless the
	    // exception was fatal).
	    this.emit('unhandledError', err);
	  } else if (err.fatal) {
	    // Send fatal error to all sequences in the queue
	    var queue = this._queue;
	    process.nextTick(function () {
	      queue.forEach(function (sequence) {
	        sequence.end(err);
	      });
	      queue.length = 0;
	    });
	  }

	  // Make sure the stream we are piping to is getting closed
	  if (err.fatal) {
	    this.emit('end', err);
	  }
	};

	Protocol.prototype._shouldErrorBubbleUp = function(err, sequence) {
	  if (sequence) {
	    if (sequence.hasErrorHandler()) {
	      return false;
	    } else if (!err.fatal) {
	      return true;
	    }
	  }

	  return (err.fatal && !this._hasPendingErrorHandlers());
	};

	Protocol.prototype._hasPendingErrorHandlers = function() {
	  return this._queue.some(function(sequence) {
	    return sequence.hasErrorHandler();
	  });
	};

	Protocol.prototype.destroy = function() {
	  this._destroyed = true;
	  this._parser.pause();

	  if (this._connection.state !== "disconnected") {
	    if(!this._ended) {
	      this.end();
	    }
	  }
	};

	Protocol.prototype._debugPacket = function(incoming, packet) {
	  var headline = (incoming)
	    ? '<-- '
	    : '--> ';

	  headline = headline + packet.constructor.name;

	  // check for debug packet restriction
	  if (Array.isArray(this._config.debug) && this._config.debug.indexOf(packet.constructor.name) === -1) {
	    return;
	  }

	  console.log(headline);
	  console.log(packet);
	  console.log('');
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var MAX_PACKET_LENGTH = Math.pow(2, 24) - 1;
	var MUL_32BIT         = Math.pow(2, 32);
	var PacketHeader      = __webpack_require__(382);
	var BigNumber         = __webpack_require__(383);

	module.exports = Parser;
	function Parser(options) {
	  options = options || {};

	  this._supportBigNumbers = options.config && options.config.supportBigNumbers;
	  this._buffer            = new Buffer(0);
	  this._longPacketBuffers = [];
	  this._offset            = 0;
	  this._packetEnd         = null;
	  this._packetHeader      = null;
	  this._packetOffset      = null;
	  this._onError           = options.onError || function(err) { throw err; };
	  this._onPacket          = options.onPacket || function() {};
	  this._nextPacketNumber  = 0;
	  this._encoding          = 'utf-8';
	  this._paused            = false;
	}

	Parser.prototype.write = function(buffer) {
	  this.append(buffer);

	  while (!this._paused) {
	    if (!this._packetHeader) {
	      if (this._bytesRemaining() < 4) {
	        break;
	      }

	      this._packetHeader = new PacketHeader(
	        this.parseUnsignedNumber(3),
	        this.parseUnsignedNumber(1)
	      );

	      if (this._packetHeader.number !== this._nextPacketNumber) {
	        var err = new Error(
	          'Packets out of order. Got: ' + this._packetHeader.number + ' ' +
	          'Expected: ' + this._nextPacketNumber
	        );

	        err.code  = 'PROTOCOL_PACKETS_OUT_OF_ORDER';
	        err.fatal = true;

	        this._onError(err);
	      }

	      this.incrementPacketNumber();
	    }

	    if (this._bytesRemaining() < this._packetHeader.length) {
	      break;
	    }

	    this._packetEnd    = this._offset + this._packetHeader.length;
	    this._packetOffset = this._offset;

	    if (this._packetHeader.length === MAX_PACKET_LENGTH) {
	      this._longPacketBuffers.push(this._buffer.slice(this._packetOffset, this._packetEnd));

	      this._advanceToNextPacket();
	      continue;
	    }

	    this._combineLongPacketBuffers();

	    // Try...finally to ensure exception safety. Unfortunately this is costing
	    // us up to ~10% performance in some benchmarks.
	    var hadException = true;
	    try {
	      this._onPacket(this._packetHeader);
	      hadException = false;
	    } catch (err) {
	      if (!err || typeof err.code !== 'string' || err.code.substr(0, 7) !== 'PARSER_') {
	        throw err; // Rethrow non-MySQL errors
	      }

	      // Pass down parser errors
	      this._onError(err);
	      hadException = false;
	    } finally {
	      this._advanceToNextPacket();

	      // If we had an exception, the parser while loop will be broken out
	      // of after the finally block. So we need to make sure to re-enter it
	      // to continue parsing any bytes that may already have been received.
	      if (hadException) {
	        process.nextTick(this.write.bind(this));
	      }
	    }
	  }
	};

	Parser.prototype.append = function append(chunk) {
	  if (!chunk || chunk.length === 0) {
	    return;
	  }

	  var buffer      = chunk;
	  var sliceEnd    = this._buffer.length;
	  var sliceStart  = this._packetOffset === null
	    ? this._offset
	    : this._packetOffset;
	  var sliceLength = sliceEnd - sliceStart;

	  if (sliceLength !== 0) {
	    // Create a new Buffer
	    buffer = new Buffer(sliceLength + chunk.length);

	    // Copy data
	    this._buffer.copy(buffer, 0, sliceStart, sliceEnd);
	    chunk.copy(buffer, sliceLength);
	  }

	  // Adjust data-tracking pointers
	  this._buffer       = buffer;
	  this._offset       = this._offset - sliceStart;
	  this._packetEnd    = this._packetEnd !== null
	    ? this._packetEnd - sliceStart
	    : null;
	  this._packetOffset = this._packetOffset !== null
	    ? this._packetOffset - sliceStart
	    : null;
	};

	Parser.prototype.pause = function() {
	  this._paused = true;
	};

	Parser.prototype.resume = function() {
	  this._paused = false;

	  // nextTick() to avoid entering write() multiple times within the same stack
	  // which would cause problems as write manipulates the state of the object.
	  process.nextTick(this.write.bind(this));
	};

	Parser.prototype.peak = function() {
	  return this._buffer[this._offset];
	};

	Parser.prototype.parseUnsignedNumber = function(bytes) {
	  if (bytes === 1) {
	    return this._buffer[this._offset++];
	  }

	  var buffer = this._buffer;
	  var offset = this._offset + bytes - 1;
	  var value  = 0;

	  if (bytes > 4) {
	    var err    = new Error('parseUnsignedNumber: Supports only up to 4 bytes');
	    err.offset = (this._offset - this._packetOffset - 1);
	    err.code   = 'PARSER_UNSIGNED_TOO_LONG';
	    throw err;
	  }

	  while (offset >= this._offset) {
	    value = ((value << 8) | buffer[offset]) >>> 0;
	    offset--;
	  }

	  this._offset += bytes;

	  return value;
	};

	Parser.prototype.parseLengthCodedString = function() {
	  var length = this.parseLengthCodedNumber();

	  if (length === null) {
	    return null;
	  }

	  return this.parseString(length);
	};

	Parser.prototype.parseLengthCodedBuffer = function() {
	  var length = this.parseLengthCodedNumber();

	  if (length === null) {
	    return null;
	  }

	  return this.parseBuffer(length);
	};

	Parser.prototype.parseLengthCodedNumber = function parseLengthCodedNumber() {
	  if (this._offset >= this._buffer.length) {
	    var err    = new Error('Parser: read past end');
	    err.offset = (this._offset - this._packetOffset);
	    err.code   = 'PARSER_READ_PAST_END';
	    throw err;
	  }

	  var bits = this._buffer[this._offset++];

	  if (bits <= 250) {
	    return bits;
	  }

	  switch (bits) {
	    case 251:
	      return null;
	    case 252:
	      return this.parseUnsignedNumber(2);
	    case 253:
	      return this.parseUnsignedNumber(3);
	    case 254:
	      break;
	    default:
	      var err    = new Error('Unexpected first byte' + (bits ? ': 0x' + bits.toString(16) : ''));
	      err.offset = (this._offset - this._packetOffset - 1);
	      err.code   = 'PARSER_BAD_LENGTH_BYTE';
	      throw err;
	  }

	  var low = this.parseUnsignedNumber(4);
	  var high = this.parseUnsignedNumber(4);
	  var value;

	  if (high >>> 21) {
	    value = (new BigNumber(low)).plus((new BigNumber(MUL_32BIT)).times(high)).toString();

	    if (this._supportBigNumbers) {
	      return value;
	    }

	    var err    = new Error(
	      'parseLengthCodedNumber: JS precision range exceeded, ' +
	      'number is >= 53 bit: "' + value + '"'
	    );
	    err.offset = (this._offset - this._packetOffset - 8);
	    err.code   = 'PARSER_JS_PRECISION_RANGE_EXCEEDED';
	    throw err;
	  }

	  value = low + (MUL_32BIT * high);

	  return value;
	};

	Parser.prototype.parseFiller = function(length) {
	  return this.parseBuffer(length);
	};

	Parser.prototype.parseNullTerminatedBuffer = function() {
	  var end      = this._nullByteOffset();
	  var value    = this._buffer.slice(this._offset, end);
	  this._offset = end + 1;

	  return value;
	};

	Parser.prototype.parseNullTerminatedString = function() {
	  var end      = this._nullByteOffset();
	  var value    = this._buffer.toString(this._encoding, this._offset, end);
	  this._offset = end + 1;

	  return value;
	};

	Parser.prototype._nullByteOffset = function() {
	  var offset = this._offset;

	  while (this._buffer[offset] !== 0x00) {
	    offset++;

	    if (offset >= this._buffer.length) {
	      var err    = new Error('Offset of null terminated string not found.');
	      err.offset = (this._offset - this._packetOffset);
	      err.code   = 'PARSER_MISSING_NULL_BYTE';
	      throw err;
	    }
	  }

	  return offset;
	};

	Parser.prototype.parsePacketTerminatedString = function() {
	  var length = this._packetEnd - this._offset;
	  return this.parseString(length);
	};

	Parser.prototype.parseBuffer = function(length) {
	  var response = new Buffer(length);
	  this._buffer.copy(response, 0, this._offset, this._offset + length);

	  this._offset += length;
	  return response;
	};

	Parser.prototype.parseString = function(length) {
	  var offset = this._offset;
	  var end = offset + length;
	  var value = this._buffer.toString(this._encoding, offset, end);

	  this._offset = end;
	  return value;
	};

	Parser.prototype.parseGeometryValue = function() {
	  var buffer = this.parseLengthCodedBuffer();
	  var offset = 4;

	  if (buffer === null || !buffer.length) {
	    return null;
	  }

	  function parseGeometry() {
	    var result = null;
	    var byteOrder = buffer.readUInt8(offset); offset += 1;
	    var wkbType = byteOrder? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;
	    switch(wkbType) {
	      case 1: // WKBPoint
	        var x = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	        var y = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	        result = {x: x, y: y};
	        break;
	      case 2: // WKBLineString
	        var numPoints = byteOrder? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;
	        result = [];
	        for(var i=numPoints;i>0;i--) {
	          var x = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	          var y = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	          result.push({x: x, y: y});
	        }
	        break;
	      case 3: // WKBPolygon
	        var numRings = byteOrder? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;
	        result = [];
	        for(var i=numRings;i>0;i--) {
	          var numPoints = byteOrder? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;
	          var line = [];
	          for(var j=numPoints;j>0;j--) {
	            var x = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	            var y = byteOrder? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;
	            line.push({x: x, y: y});
	          }
	          result.push(line);
	        }
	        break;
	      case 4: // WKBMultiPoint
	      case 5: // WKBMultiLineString
	      case 6: // WKBMultiPolygon
	      case 7: // WKBGeometryCollection
	        var num = byteOrder? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;
	        var result = [];
	        for(var i=num;i>0;i--) {
	          result.push(parseGeometry());
	        }
	        break;
	    }
	    return result;
	  }
	  return parseGeometry();
	};

	Parser.prototype.reachedPacketEnd = function() {
	  return this._offset === this._packetEnd;
	};

	Parser.prototype._bytesRemaining = function() {
	  return this._buffer.length - this._offset;
	};

	Parser.prototype.incrementPacketNumber = function() {
	  var currentPacketNumber = this._nextPacketNumber;
	  this._nextPacketNumber = (this._nextPacketNumber + 1) % 256;

	  return currentPacketNumber;
	};

	Parser.prototype.resetPacketNumber = function() {
	  this._nextPacketNumber = 0;
	};

	Parser.prototype.packetLength = function() {
	  return this._longPacketBuffers.reduce(function(length, buffer) {
	    return length + buffer.length;
	  }, this._packetHeader.length);
	};

	Parser.prototype._combineLongPacketBuffers = function() {
	  if (!this._longPacketBuffers.length) {
	    return;
	  }

	  var trailingPacketBytes = this._buffer.length - this._packetEnd;

	  var length = this._longPacketBuffers.reduce(function(length, buffer) {
	    return length + buffer.length;
	  }, this._bytesRemaining());

	  var combinedBuffer = new Buffer(length);

	  var offset = this._longPacketBuffers.reduce(function(offset, buffer) {
	    buffer.copy(combinedBuffer, offset);
	    return offset + buffer.length;
	  }, 0);

	  this._buffer.copy(combinedBuffer, offset, this._offset);

	  this._buffer            = combinedBuffer;
	  this._longPacketBuffers = [];
	  this._offset            = 0;
	  this._packetEnd         = this._buffer.length - trailingPacketBytes;
	  this._packetOffset      = 0;
	};

	Parser.prototype._advanceToNextPacket = function() {
	  this._offset       = this._packetEnd;
	  this._packetHeader = null;
	  this._packetEnd    = null;
	  this._packetOffset = null;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer, __webpack_require__(28)))

/***/ },
/* 382 */
/***/ function(module, exports) {

	module.exports = PacketHeader;
	function PacketHeader(length, number) {
	  this.length = length;
	  this.number = number;
	}


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v2.1.3 https://github.com/MikeMcl/bignumber.js/LICENCE */

	;(function (globalObj) {
	    'use strict';

	    /*
	      bignumber.js v2.1.3
	      A JavaScript library for arbitrary-precision arithmetic.
	      https://github.com/MikeMcl/bignumber.js
	      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
	      MIT Expat Licence
	    */


	    var cryptoObj, parseNumeric,
	        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        mathceil = Math.ceil,
	        mathfloor = Math.floor,
	        notBool = ' not a boolean or binary digit',
	        roundingMode = 'rounding mode',
	        tooManyDigits = 'number type has more than 15 significant digits',
	        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        BASE = 1e14,
	        LOG_BASE = 14,
	        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	        SQRT_BASE = 1e7,

	        /*
	         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
	         * exception is thrown (if ERRORS is true).
	         */
	        MAX = 1E9;                                   // 0 to MAX_INT32

	    if ( typeof crypto != 'undefined' ) cryptoObj = crypto;


	    /*
	     * Create and return a BigNumber constructor.
	     */
	    function constructorFactory(configObj) {
	        var div,

	            // id tracks the caller function, so its name can be included in error messages.
	            id = 0,
	            P = BigNumber.prototype,
	            ONE = new BigNumber(1),


	            /********************************* EDITABLE DEFAULTS **********************************/


	            /*
	             * The default values below must be integers within the inclusive ranges stated.
	             * The values can also be changed at run-time using BigNumber.config.
	             */

	            // The maximum number of decimal places for operations involving division.
	            DECIMAL_PLACES = 20,                     // 0 to MAX

	            /*
	             * The rounding mode used when rounding to the above decimal places, and when using
	             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
	             * UP         0 Away from zero.
	             * DOWN       1 Towards zero.
	             * CEIL       2 Towards +Infinity.
	             * FLOOR      3 Towards -Infinity.
	             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	             */
	            ROUNDING_MODE = 4,                       // 0 to 8

	            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	            // The exponent value at and beneath which toString returns exponential notation.
	            // Number type: -7
	            TO_EXP_NEG = -7,                         // 0 to -MAX

	            // The exponent value at and above which toString returns exponential notation.
	            // Number type: 21
	            TO_EXP_POS = 21,                         // 0 to MAX

	            // RANGE : [MIN_EXP, MAX_EXP]

	            // The minimum exponent value, beneath which underflow to zero occurs.
	            // Number type: -324  (5e-324)
	            MIN_EXP = -1e7,                          // -1 to -MAX

	            // The maximum exponent value, above which overflow to Infinity occurs.
	            // Number type:  308  (1.7976931348623157e+308)
	            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	            MAX_EXP = 1e7,                           // 1 to MAX

	            // Whether BigNumber Errors are ever thrown.
	            ERRORS = true,                           // true or false

	            // Change to intValidatorNoErrors if ERRORS is false.
	            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

	            // Whether to use cryptographically-secure random number generation, if available.
	            CRYPTO = false,                          // true or false

	            /*
	             * The modulo mode used when calculating the modulus: a mod n.
	             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	             * The remainder (r) is calculated as: r = a - n * q.
	             *
	             * UP        0 The remainder is positive if the dividend is negative, else is negative.
	             * DOWN      1 The remainder has the same sign as the dividend.
	             *             This modulo mode is commonly known as 'truncated division' and is
	             *             equivalent to (a % n) in JavaScript.
	             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
	             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	             *             The remainder is always positive.
	             *
	             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
	             * modes are commonly used for the modulus operation.
	             * Although the other rounding modes can also be used, they may not give useful results.
	             */
	            MODULO_MODE = 1,                         // 0 to 9

	            // The maximum number of significant digits of the result of the toPower operation.
	            // If POW_PRECISION is 0, there will be unlimited significant digits.
	            POW_PRECISION = 100,                     // 0 to MAX

	            // The format specification used by the BigNumber.prototype.toFormat method.
	            FORMAT = {
	                decimalSeparator: '.',
	                groupSeparator: ',',
	                groupSize: 3,
	                secondaryGroupSize: 0,
	                fractionGroupSeparator: '\xA0',      // non-breaking space
	                fractionGroupSize: 0
	            };


	        /******************************************************************************************/


	        // CONSTRUCTOR


	        /*
	         * The BigNumber constructor and exported function.
	         * Create and return a new instance of a BigNumber object.
	         *
	         * n {number|string|BigNumber} A numeric value.
	         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	         */
	        function BigNumber( n, b ) {
	            var c, e, i, num, len, str,
	                x = this;

	            // Enable constructor usage without new.
	            if ( !( x instanceof BigNumber ) ) {

	                // 'BigNumber() constructor call without new: {n}'
	                if (ERRORS) raise( 26, 'constructor call without new', n );
	                return new BigNumber( n, b );
	            }

	            // 'new BigNumber() base not an integer: {b}'
	            // 'new BigNumber() base out of range: {b}'
	            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

	                // Duplicate.
	                if ( n instanceof BigNumber ) {
	                    x.s = n.s;
	                    x.e = n.e;
	                    x.c = ( n = n.c ) ? n.slice() : n;
	                    id = 0;
	                    return;
	                }

	                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
	                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

	                    // Fast path for integers.
	                    if ( n === ~~n ) {
	                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );
	                        x.e = e;
	                        x.c = [n];
	                        id = 0;
	                        return;
	                    }

	                    str = n + '';
	                } else {
	                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }
	            } else {
	                b = b | 0;
	                str = n + '';

	                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
	                // Allow exponential notation to be used with base 10 argument.
	                if ( b == 10 ) {
	                    x = new BigNumber( n instanceof BigNumber ? n : str );
	                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
	                }

	                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	                // Any number in exponential form will fail due to the [Ee][+-].
	                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
	                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
	                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
	                    return parseNumeric( x, str, num, b );
	                }

	                if (num) {
	                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

	                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                        raise( id, tooManyDigits, n );
	                    }

	                    // Prevent later check for length on converted number.
	                    num = false;
	                } else {
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }

	                str = convertBase( str, 10, b, x.s );
	            }

	            // Decimal point?
	            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

	            // Exponential form?
	            if ( ( i = str.search( /e/i ) ) > 0 ) {

	                // Determine exponent.
	                if ( e < 0 ) e = i;
	                e += +str.slice( i + 1 );
	                str = str.substring( 0, i );
	            } else if ( e < 0 ) {

	                // Integer.
	                e = str.length;
	            }

	            // Determine leading zeros.
	            for ( i = 0; str.charCodeAt(i) === 48; i++ );

	            // Determine trailing zeros.
	            for ( len = str.length; str.charCodeAt(--len) === 48; );
	            str = str.slice( i, len + 1 );

	            if (str) {
	                len = str.length;

	                // Disallow numbers with over 15 significant digits if number type.
	                // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

	                e = e - i - 1;

	                 // Overflow?
	                if ( e > MAX_EXP ) {

	                    // Infinity.
	                    x.c = x.e = null;

	                // Underflow?
	                } else if ( e < MIN_EXP ) {

	                    // Zero.
	                    x.c = [ x.e = 0 ];
	                } else {
	                    x.e = e;
	                    x.c = [];

	                    // Transform base

	                    // e is the base 10 exponent.
	                    // i is where to slice str to get the first element of the coefficient array.
	                    i = ( e + 1 ) % LOG_BASE;
	                    if ( e < 0 ) i += LOG_BASE;

	                    if ( i < len ) {
	                        if (i) x.c.push( +str.slice( 0, i ) );

	                        for ( len -= LOG_BASE; i < len; ) {
	                            x.c.push( +str.slice( i, i += LOG_BASE ) );
	                        }

	                        str = str.slice(i);
	                        i = LOG_BASE - str.length;
	                    } else {
	                        i -= len;
	                    }

	                    for ( ; i--; str += '0' );
	                    x.c.push( +str );
	                }
	            } else {

	                // Zero.
	                x.c = [ x.e = 0 ];
	            }

	            id = 0;
	        }


	        // CONSTRUCTOR PROPERTIES


	        BigNumber.another = constructorFactory;

	        BigNumber.ROUND_UP = 0;
	        BigNumber.ROUND_DOWN = 1;
	        BigNumber.ROUND_CEIL = 2;
	        BigNumber.ROUND_FLOOR = 3;
	        BigNumber.ROUND_HALF_UP = 4;
	        BigNumber.ROUND_HALF_DOWN = 5;
	        BigNumber.ROUND_HALF_EVEN = 6;
	        BigNumber.ROUND_HALF_CEIL = 7;
	        BigNumber.ROUND_HALF_FLOOR = 8;
	        BigNumber.EUCLID = 9;


	        /*
	         * Configure infrequently-changing library-wide settings.
	         *
	         * Accept an object or an argument list, with one or many of the following properties or
	         * parameters respectively:
	         *
	         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
	         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
	         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
	         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
	         *   ERRORS          {boolean|number}   true, false, 1 or 0
	         *   CRYPTO          {boolean|number}   true, false, 1 or 0
	         *   MODULO_MODE     {number}           0 to 9 inclusive
	         *   POW_PRECISION   {number}           0 to MAX inclusive
	         *   FORMAT          {object}           See BigNumber.prototype.toFormat
	         *      decimalSeparator       {string}
	         *      groupSeparator         {string}
	         *      groupSize              {number}
	         *      secondaryGroupSize     {number}
	         *      fractionGroupSeparator {string}
	         *      fractionGroupSize      {number}
	         *
	         * (The values assigned to the above FORMAT object properties are not checked for validity.)
	         *
	         * E.g.
	         * BigNumber.config(20, 4) is equivalent to
	         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	         *
	         * Ignore properties/parameters set to null or undefined.
	         * Return an object with the properties current values.
	         */
	        BigNumber.config = function () {
	            var v, p,
	                i = 0,
	                r = {},
	                a = arguments,
	                o = a[0],
	                has = o && typeof o == 'object'
	                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
	                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

	            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	            // 'config() DECIMAL_PLACES not an integer: {v}'
	            // 'config() DECIMAL_PLACES out of range: {v}'
	            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                DECIMAL_PLACES = v | 0;
	            }
	            r[p] = DECIMAL_PLACES;

	            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	            // 'config() ROUNDING_MODE not an integer: {v}'
	            // 'config() ROUNDING_MODE out of range: {v}'
	            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
	                ROUNDING_MODE = v | 0;
	            }
	            r[p] = ROUNDING_MODE;

	            // EXPONENTIAL_AT {number|number[]}
	            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	            // 'config() EXPONENTIAL_AT not an integer: {v}'
	            // 'config() EXPONENTIAL_AT out of range: {v}'
	            if ( has( p = 'EXPONENTIAL_AT' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
	                        TO_EXP_NEG = v[0] | 0;
	                        TO_EXP_POS = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
	                }
	            }
	            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

	            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	            // 'config() RANGE not an integer: {v}'
	            // 'config() RANGE cannot be zero: {v}'
	            // 'config() RANGE out of range: {v}'
	            if ( has( p = 'RANGE' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
	                        MIN_EXP = v[0] | 0;
	                        MAX_EXP = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
	                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );
	                }
	            }
	            r[p] = [ MIN_EXP, MAX_EXP ];

	            // ERRORS {boolean|number} true, false, 1 or 0.
	            // 'config() ERRORS not a boolean or binary digit: {v}'
	            if ( has( p = 'ERRORS' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    id = 0;
	                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = ERRORS;

	            // CRYPTO {boolean|number} true, false, 1 or 0.
	            // 'config() CRYPTO not a boolean or binary digit: {v}'
	            // 'config() crypto unavailable: {crypto}'
	            if ( has( p = 'CRYPTO' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    CRYPTO = !!( v && cryptoObj );
	                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', cryptoObj );
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = CRYPTO;

	            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	            // 'config() MODULO_MODE not an integer: {v}'
	            // 'config() MODULO_MODE out of range: {v}'
	            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
	                MODULO_MODE = v | 0;
	            }
	            r[p] = MODULO_MODE;

	            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	            // 'config() POW_PRECISION not an integer: {v}'
	            // 'config() POW_PRECISION out of range: {v}'
	            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                POW_PRECISION = v | 0;
	            }
	            r[p] = POW_PRECISION;

	            // FORMAT {object}
	            // 'config() FORMAT not an object: {v}'
	            if ( has( p = 'FORMAT' ) ) {

	                if ( typeof v == 'object' ) {
	                    FORMAT = v;
	                } else if (ERRORS) {
	                    raise( 2, p + ' not an object', v );
	                }
	            }
	            r[p] = FORMAT;

	            return r;
	        };


	        /*
	         * Return a new BigNumber whose value is the maximum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


	        /*
	         * Return a new BigNumber whose value is the minimum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


	        /*
	         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	         * zeros are produced).
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         *
	         * 'random() decimal places not an integer: {dp}'
	         * 'random() decimal places out of range: {dp}'
	         * 'random() crypto unavailable: {crypto}'
	         */
	        BigNumber.random = (function () {
	            var pow2_53 = 0x20000000000000;

	            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	            // Check if Math.random() produces more than 32 bits of randomness.
	            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	              ? function () { return mathfloor( Math.random() * pow2_53 ); }
	              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	                  (Math.random() * 0x800000 | 0); };

	            return function (dp) {
	                var a, b, e, k, v,
	                    i = 0,
	                    c = [],
	                    rand = new BigNumber(ONE);

	                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
	                k = mathceil( dp / LOG_BASE );

	                if (CRYPTO) {

	                    // Browsers supporting crypto.getRandomValues.
	                    if ( cryptoObj && cryptoObj.getRandomValues ) {

	                        a = cryptoObj.getRandomValues( new Uint32Array( k *= 2 ) );

	                        for ( ; i < k; ) {

	                            // 53 bits:
	                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	                            //                                     11111 11111111 11111111
	                            // 0x20000 is 2^21.
	                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	                            // Rejection sampling:
	                            // 0 <= v < 9007199254740992
	                            // Probability that v >= 9e15, is
	                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	                            if ( v >= 9e15 ) {
	                                b = cryptoObj.getRandomValues( new Uint32Array(2) );
	                                a[i] = b[0];
	                                a[i + 1] = b[1];
	                            } else {

	                                // 0 <= v <= 8999999999999999
	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 2;
	                            }
	                        }
	                        i = k / 2;

	                    // Node.js supporting crypto.randomBytes.
	                    } else if ( cryptoObj && cryptoObj.randomBytes ) {

	                        // buffer
	                        a = cryptoObj.randomBytes( k *= 7 );

	                        for ( ; i < k; ) {

	                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	                            // 0x100000000 is 2^32, 0x1000000 is 2^24
	                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	                            // 0 <= v < 9007199254740992
	                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
	                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
	                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

	                            if ( v >= 9e15 ) {
	                                cryptoObj.randomBytes(7).copy( a, i );
	                            } else {

	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 7;
	                            }
	                        }
	                        i = k / 7;
	                    } else if (ERRORS) {
	                        raise( 14, 'crypto unavailable', cryptoObj );
	                    }
	                }

	                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
	                if (!i) {

	                    for ( ; i < k; ) {
	                        v = random53bitInt();
	                        if ( v < 9e15 ) c[i++] = v % 1e14;
	                    }
	                }

	                k = c[--i];
	                dp %= LOG_BASE;

	                // Convert trailing digits to zeros according to dp.
	                if ( k && dp ) {
	                    v = POWS_TEN[LOG_BASE - dp];
	                    c[i] = mathfloor( k / v ) * v;
	                }

	                // Remove trailing elements which are zero.
	                for ( ; c[i] === 0; c.pop(), i-- );

	                // Zero?
	                if ( i < 0 ) {
	                    c = [ e = 0 ];
	                } else {

	                    // Remove leading elements which are zero and adjust exponent accordingly.
	                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

	                    // Count the digits of the first element of c to determine leading zeros, and...
	                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

	                    // adjust the exponent accordingly.
	                    if ( i < LOG_BASE ) e -= LOG_BASE - i;
	                }

	                rand.e = e;
	                rand.c = c;
	                return rand;
	            };
	        })();


	        // PRIVATE FUNCTIONS


	        // Convert a numeric string of baseIn to a numeric string of baseOut.
	        function convertBase( str, baseOut, baseIn, sign ) {
	            var d, e, k, r, x, xc, y,
	                i = str.indexOf( '.' ),
	                dp = DECIMAL_PLACES,
	                rm = ROUNDING_MODE;

	            if ( baseIn < 37 ) str = str.toLowerCase();

	            // Non-integer.
	            if ( i >= 0 ) {
	                k = POW_PRECISION;

	                // Unlimited precision.
	                POW_PRECISION = 0;
	                str = str.replace( '.', '' );
	                y = new BigNumber(baseIn);
	                x = y.pow( str.length - i );
	                POW_PRECISION = k;

	                // Convert str as if an integer, then restore the fraction part by dividing the
	                // result by its base raised to a power.
	                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
	                y.e = y.c.length;
	            }

	            // Convert the number as integer.
	            xc = toBaseOut( str, baseIn, baseOut );
	            e = k = xc.length;

	            // Remove trailing zeros.
	            for ( ; xc[--k] == 0; xc.pop() );
	            if ( !xc[0] ) return '0';

	            if ( i < 0 ) {
	                --e;
	            } else {
	                x.c = xc;
	                x.e = e;

	                // sign is needed for correct rounding.
	                x.s = sign;
	                x = div( x, y, dp, rm, baseOut );
	                xc = x.c;
	                r = x.r;
	                e = x.e;
	            }

	            d = e + dp + 1;

	            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
	            i = xc[d];
	            k = baseOut / 2;
	            r = r || d < 0 || xc[d + 1] != null;

	            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	                         rm == ( x.s < 0 ? 8 : 7 ) );

	            if ( d < 1 || !xc[0] ) {

	                // 1^-dp or 0.
	                str = r ? toFixedPoint( '1', -dp ) : '0';
	            } else {
	                xc.length = d;

	                if (r) {

	                    // Rounding up may mean the previous digit has to be rounded up and so on.
	                    for ( --baseOut; ++xc[--d] > baseOut; ) {
	                        xc[d] = 0;

	                        if ( !d ) {
	                            ++e;
	                            xc.unshift(1);
	                        }
	                    }
	                }

	                // Determine trailing zeros.
	                for ( k = xc.length; !xc[--k]; );

	                // E.g. [4, 11, 15] becomes 4bf.
	                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
	                str = toFixedPoint( str, e );
	            }

	            // The caller will add the sign.
	            return str;
	        }


	        // Perform division in the specified base. Called by div and convertBase.
	        div = (function () {

	            // Assume non-zero x and k.
	            function multiply( x, k, base ) {
	                var m, temp, xlo, xhi,
	                    carry = 0,
	                    i = x.length,
	                    klo = k % SQRT_BASE,
	                    khi = k / SQRT_BASE | 0;

	                for ( x = x.slice(); i--; ) {
	                    xlo = x[i] % SQRT_BASE;
	                    xhi = x[i] / SQRT_BASE | 0;
	                    m = khi * xlo + xhi * klo;
	                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
	                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
	                    x[i] = temp % base;
	                }

	                if (carry) x.unshift(carry);

	                return x;
	            }

	            function compare( a, b, aL, bL ) {
	                var i, cmp;

	                if ( aL != bL ) {
	                    cmp = aL > bL ? 1 : -1;
	                } else {

	                    for ( i = cmp = 0; i < aL; i++ ) {

	                        if ( a[i] != b[i] ) {
	                            cmp = a[i] > b[i] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }
	                return cmp;
	            }

	            function subtract( a, b, aL, base ) {
	                var i = 0;

	                // Subtract b from a.
	                for ( ; aL--; ) {
	                    a[aL] -= i;
	                    i = a[aL] < b[aL] ? 1 : 0;
	                    a[aL] = i * base + a[aL] - b[aL];
	                }

	                // Remove leading zeros.
	                for ( ; !a[0] && a.length > 1; a.shift() );
	            }

	            // x: dividend, y: divisor.
	            return function ( x, y, dp, rm, base ) {
	                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	                    yL, yz,
	                    s = x.s == y.s ? 1 : -1,
	                    xc = x.c,
	                    yc = y.c;

	                // Either NaN, Infinity or 0?
	                if ( !xc || !xc[0] || !yc || !yc[0] ) {

	                    return new BigNumber(

	                      // Return NaN if either NaN, or both Infinity or 0.
	                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

	                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	                    );
	                }

	                q = new BigNumber(s);
	                qc = q.c = [];
	                e = x.e - y.e;
	                s = dp + e + 1;

	                if ( !base ) {
	                    base = BASE;
	                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
	                    s = s / LOG_BASE | 0;
	                }

	                // Result exponent may be one less then the current value of e.
	                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
	                if ( yc[i] > ( xc[i] || 0 ) ) e--;

	                if ( s < 0 ) {
	                    qc.push(1);
	                    more = true;
	                } else {
	                    xL = xc.length;
	                    yL = yc.length;
	                    i = 0;
	                    s += 2;

	                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

	                    n = mathfloor( base / ( yc[0] + 1 ) );

	                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
	                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
	                    if ( n > 1 ) {
	                        yc = multiply( yc, n, base );
	                        xc = multiply( xc, n, base );
	                        yL = yc.length;
	                        xL = xc.length;
	                    }

	                    xi = yL;
	                    rem = xc.slice( 0, yL );
	                    remL = rem.length;

	                    // Add zeros to make remainder as long as divisor.
	                    for ( ; remL < yL; rem[remL++] = 0 );
	                    yz = yc.slice();
	                    yz.unshift(0);
	                    yc0 = yc[0];
	                    if ( yc[1] >= base / 2 ) yc0++;
	                    // Not necessary, but to prevent trial digit n > base, when using base 3.
	                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

	                    do {
	                        n = 0;

	                        // Compare divisor and remainder.
	                        cmp = compare( yc, rem, yL, remL );

	                        // If divisor < remainder.
	                        if ( cmp < 0 ) {

	                            // Calculate trial digit, n.

	                            rem0 = rem[0];
	                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

	                            // n is how many times the divisor goes into the current remainder.
	                            n = mathfloor( rem0 / yc0 );

	                            //  Algorithm:
	                            //  1. product = divisor * trial digit (n)
	                            //  2. if product > remainder: product -= divisor, n--
	                            //  3. remainder -= product
	                            //  4. if product was < remainder at 2:
	                            //    5. compare new remainder and divisor
	                            //    6. If remainder > divisor: remainder -= divisor, n++

	                            if ( n > 1 ) {

	                                // n may be > base only when base is 3.
	                                if (n >= base) n = base - 1;

	                                // product = divisor * trial digit.
	                                prod = multiply( yc, n, base );
	                                prodL = prod.length;
	                                remL = rem.length;

	                                // Compare product and remainder.
	                                // If product > remainder.
	                                // Trial digit n too high.
	                                // n is 1 too high about 5% of the time, and is not known to have
	                                // ever been more than 1 too high.
	                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
	                                    n--;

	                                    // Subtract divisor from product.
	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
	                                    prodL = prod.length;
	                                    cmp = 1;
	                                }
	                            } else {

	                                // n is 0 or 1, cmp is -1.
	                                // If n is 0, there is no need to compare yc and rem again below,
	                                // so change cmp to 1 to avoid it.
	                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                                if ( n == 0 ) {

	                                    // divisor < remainder, so n must be at least 1.
	                                    cmp = n = 1;
	                                }

	                                // product = divisor
	                                prod = yc.slice();
	                                prodL = prod.length;
	                            }

	                            if ( prodL < remL ) prod.unshift(0);

	                            // Subtract product from remainder.
	                            subtract( rem, prod, remL, base );
	                            remL = rem.length;

	                             // If product was < remainder.
	                            if ( cmp == -1 ) {

	                                // Compare divisor and new remainder.
	                                // If divisor < new remainder, subtract divisor from remainder.
	                                // Trial digit n too low.
	                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                                while ( compare( yc, rem, yL, remL ) < 1 ) {
	                                    n++;

	                                    // Subtract divisor from remainder.
	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
	                                    remL = rem.length;
	                                }
	                            }
	                        } else if ( cmp === 0 ) {
	                            n++;
	                            rem = [0];
	                        } // else cmp === 1 and n will be 0

	                        // Add the next digit, n, to the result array.
	                        qc[i++] = n;

	                        // Update the remainder.
	                        if ( rem[0] ) {
	                            rem[remL++] = xc[xi] || 0;
	                        } else {
	                            rem = [ xc[xi] ];
	                            remL = 1;
	                        }
	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

	                    more = rem[0] != null;

	                    // Leading zero?
	                    if ( !qc[0] ) qc.shift();
	                }

	                if ( base == BASE ) {

	                    // To calculate q.e, first get the number of digits of qc[0].
	                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
	                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

	                // Caller is convertBase.
	                } else {
	                    q.e = e;
	                    q.r = +more;
	                }

	                return q;
	            };
	        })();


	        /*
	         * Return a string representing the value of BigNumber n in fixed-point or exponential
	         * notation rounded to the specified decimal places or significant digits.
	         *
	         * n is a BigNumber.
	         * i is the index of the last digit required (i.e. the digit that may be rounded up).
	         * rm is the rounding mode.
	         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
	         */
	        function format( n, i, rm, caller ) {
	            var c0, e, ne, len, str;

	            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
	              ? rm | 0 : ROUNDING_MODE;

	            if ( !n.c ) return n.toString();
	            c0 = n.c[0];
	            ne = n.e;

	            if ( i == null ) {
	                str = coeffToString( n.c );
	                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
	                  ? toExponential( str, ne )
	                  : toFixedPoint( str, ne );
	            } else {
	                n = round( new BigNumber(n), i, rm );

	                // n.e may have changed if the value was rounded up.
	                e = n.e;

	                str = coeffToString( n.c );
	                len = str.length;

	                // toPrecision returns exponential notation if the number of significant digits
	                // specified is less than the number of digits necessary to represent the integer
	                // part of the value in fixed-point notation.

	                // Exponential notation.
	                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

	                    // Append zeros?
	                    for ( ; len < i; str += '0', len++ );
	                    str = toExponential( str, e );

	                // Fixed-point notation.
	                } else {
	                    i -= ne;
	                    str = toFixedPoint( str, e );

	                    // Append zeros?
	                    if ( e + 1 > len ) {
	                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
	                    } else {
	                        i += e - len;
	                        if ( i > 0 ) {
	                            if ( e + 1 == len ) str += '.';
	                            for ( ; i--; str += '0' );
	                        }
	                    }
	                }
	            }

	            return n.s < 0 && c0 ? '-' + str : str;
	        }


	        // Handle BigNumber.max and BigNumber.min.
	        function maxOrMin( args, method ) {
	            var m, n,
	                i = 0;

	            if ( isArray( args[0] ) ) args = args[0];
	            m = new BigNumber( args[0] );

	            for ( ; ++i < args.length; ) {
	                n = new BigNumber( args[i] );

	                // If any number is NaN, return NaN.
	                if ( !n.s ) {
	                    m = n;
	                    break;
	                } else if ( method.call( m, n ) ) {
	                    m = n;
	                }
	            }

	            return m;
	        }


	        /*
	         * Return true if n is an integer in range, otherwise throw.
	         * Use for argument validation when ERRORS is true.
	         */
	        function intValidatorWithErrors( n, min, max, caller, name ) {
	            if ( n < min || n > max || n != truncate(n) ) {
	                raise( caller, ( name || 'decimal places' ) +
	                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
	            }

	            return true;
	        }


	        /*
	         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	         * Called by minus, plus and times.
	         */
	        function normalise( n, c, e ) {
	            var i = 1,
	                j = c.length;

	             // Remove trailing zeros.
	            for ( ; !c[--j]; c.pop() );

	            // Calculate the base 10 exponent. First get the number of digits of c[0].
	            for ( j = c[0]; j >= 10; j /= 10, i++ );

	            // Overflow?
	            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

	                // Infinity.
	                n.c = n.e = null;

	            // Underflow?
	            } else if ( e < MIN_EXP ) {

	                // Zero.
	                n.c = [ n.e = 0 ];
	            } else {
	                n.e = e;
	                n.c = c;
	            }

	            return n;
	        }


	        // Handle values that fail the validity test in BigNumber.
	        parseNumeric = (function () {
	            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	                dotAfter = /^([^.]+)\.$/,
	                dotBefore = /^\.([^.]+)$/,
	                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	            return function ( x, str, num, b ) {
	                var base,
	                    s = num ? str : str.replace( whitespaceOrPlus, '' );

	                // No exception on ±Infinity or NaN.
	                if ( isInfinityOrNaN.test(s) ) {
	                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	                } else {
	                    if ( !num ) {

	                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
	                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	                            return !b || b == base ? p1 : m;
	                        });

	                        if (b) {
	                            base = b;

	                            // E.g. '1.' to '1', '.1' to '0.1'
	                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
	                        }

	                        if ( str != s ) return new BigNumber( s, base );
	                    }

	                    // 'new BigNumber() not a number: {n}'
	                    // 'new BigNumber() not a base {b} number: {n}'
	                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
	                    x.s = null;
	                }

	                x.c = x.e = null;
	                id = 0;
	            }
	        })();


	        // Throw a BigNumber Error.
	        function raise( caller, msg, val ) {
	            var error = new Error( [
	                'new BigNumber',     // 0
	                'cmp',               // 1
	                'config',            // 2
	                'div',               // 3
	                'divToInt',          // 4
	                'eq',                // 5
	                'gt',                // 6
	                'gte',               // 7
	                'lt',                // 8
	                'lte',               // 9
	                'minus',             // 10
	                'mod',               // 11
	                'plus',              // 12
	                'precision',         // 13
	                'random',            // 14
	                'round',             // 15
	                'shift',             // 16
	                'times',             // 17
	                'toDigits',          // 18
	                'toExponential',     // 19
	                'toFixed',           // 20
	                'toFormat',          // 21
	                'toFraction',        // 22
	                'pow',               // 23
	                'toPrecision',       // 24
	                'toString',          // 25
	                'BigNumber'          // 26
	            ][caller] + '() ' + msg + ': ' + val );

	            error.name = 'BigNumber Error';
	            id = 0;
	            throw error;
	        }


	        /*
	         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	         * If r is truthy, it is known that there are more digits after the rounding digit.
	         */
	        function round( x, sd, rm, r ) {
	            var d, i, j, k, n, ni, rd,
	                xc = x.c,
	                pows10 = POWS_TEN;

	            // if x is not Infinity or NaN...
	            if (xc) {

	                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	                // n is a base 1e14 number, the value of the element of array x.c containing rd.
	                // ni is the index of n within x.c.
	                // d is the number of digits of n.
	                // i is the index of rd within n including leading zeros.
	                // j is the actual index of rd within n (if < 0, rd is a leading zero).
	                out: {

	                    // Get the number of digits of the first element of xc.
	                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
	                    i = sd - d;

	                    // If the rounding digit is in the first element of xc...
	                    if ( i < 0 ) {
	                        i += LOG_BASE;
	                        j = sd;
	                        n = xc[ ni = 0 ];

	                        // Get the rounding digit at index j of n.
	                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
	                    } else {
	                        ni = mathceil( ( i + 1 ) / LOG_BASE );

	                        if ( ni >= xc.length ) {

	                            if (r) {

	                                // Needed by sqrt.
	                                for ( ; xc.length <= ni; xc.push(0) );
	                                n = rd = 0;
	                                d = 1;
	                                i %= LOG_BASE;
	                                j = i - LOG_BASE + 1;
	                            } else {
	                                break out;
	                            }
	                        } else {
	                            n = k = xc[ni];

	                            // Get the number of digits of n.
	                            for ( d = 1; k >= 10; k /= 10, d++ );

	                            // Get the index of rd within n.
	                            i %= LOG_BASE;

	                            // Get the index of rd within n, adjusted for leading zeros.
	                            // The number of leading zeros of n is given by LOG_BASE - d.
	                            j = i - LOG_BASE + d;

	                            // Get the rounding digit at index j of n.
	                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
	                        }
	                    }

	                    r = r || sd < 0 ||

	                    // Are there any non-zero digits after the rounding digit?
	                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
	                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

	                    r = rm < 4
	                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

	                        // Check whether the digit to the left of the rounding digit is odd.
	                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
	                          rm == ( x.s < 0 ? 8 : 7 ) );

	                    if ( sd < 1 || !xc[0] ) {
	                        xc.length = 0;

	                        if (r) {

	                            // Convert sd to decimal places.
	                            sd -= x.e + 1;

	                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
	                            x.e = -sd || 0;
	                        } else {

	                            // Zero.
	                            xc[0] = x.e = 0;
	                        }

	                        return x;
	                    }

	                    // Remove excess digits.
	                    if ( i == 0 ) {
	                        xc.length = ni;
	                        k = 1;
	                        ni--;
	                    } else {
	                        xc.length = ni + 1;
	                        k = pows10[ LOG_BASE - i ];

	                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	                        // j > 0 means i > number of leading zeros of n.
	                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
	                    }

	                    // Round up?
	                    if (r) {

	                        for ( ; ; ) {

	                            // If the digit to be rounded up is in the first element of xc...
	                            if ( ni == 0 ) {

	                                // i will be the length of xc[0] before k is added.
	                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
	                                j = xc[0] += k;
	                                for ( k = 1; j >= 10; j /= 10, k++ );

	                                // if i != k the length has increased.
	                                if ( i != k ) {
	                                    x.e++;
	                                    if ( xc[0] == BASE ) xc[0] = 1;
	                                }

	                                break;
	                            } else {
	                                xc[ni] += k;
	                                if ( xc[ni] != BASE ) break;
	                                xc[ni--] = 0;
	                                k = 1;
	                            }
	                        }
	                    }

	                    // Remove trailing zeros.
	                    for ( i = xc.length; xc[--i] === 0; xc.pop() );
	                }

	                // Overflow? Infinity.
	                if ( x.e > MAX_EXP ) {
	                    x.c = x.e = null;

	                // Underflow? Zero.
	                } else if ( x.e < MIN_EXP ) {
	                    x.c = [ x.e = 0 ];
	                }
	            }

	            return x;
	        }


	        // PROTOTYPE/INSTANCE METHODS


	        /*
	         * Return a new BigNumber whose value is the absolute value of this BigNumber.
	         */
	        P.absoluteValue = P.abs = function () {
	            var x = new BigNumber(this);
	            if ( x.s < 0 ) x.s = 1;
	            return x;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of Infinity.
	         */
	        P.ceil = function () {
	            return round( new BigNumber(this), this.e + 1, 2 );
	        };


	        /*
	         * Return
	         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * 0 if they have the same value,
	         * or null if the value of either is NaN.
	         */
	        P.comparedTo = P.cmp = function ( y, b ) {
	            id = 1;
	            return compare( this, new BigNumber( y, b ) );
	        };


	        /*
	         * Return the number of decimal places of the value of this BigNumber, or null if the value
	         * of this BigNumber is ±Infinity or NaN.
	         */
	        P.decimalPlaces = P.dp = function () {
	            var n, v,
	                c = this.c;

	            if ( !c ) return null;
	            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

	            // Subtract the number of trailing zeros of the last number.
	            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
	            if ( n < 0 ) n = 0;

	            return n;
	        };


	        /*
	         *  n / 0 = I
	         *  n / N = N
	         *  n / I = 0
	         *  0 / n = 0
	         *  0 / 0 = N
	         *  0 / N = N
	         *  0 / I = 0
	         *  N / n = N
	         *  N / 0 = N
	         *  N / N = N
	         *  N / I = N
	         *  I / n = I
	         *  I / 0 = I
	         *  I / N = N
	         *  I / I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.dividedBy = P.div = function ( y, b ) {
	            id = 3;
	            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
	        };


	        /*
	         * Return a new BigNumber whose value is the integer part of dividing the value of this
	         * BigNumber by the value of BigNumber(y, b).
	         */
	        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
	            id = 4;
	            return div( this, new BigNumber( y, b ), 0, 1 );
	        };


	        /*
	         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.equals = P.eq = function ( y, b ) {
	            id = 5;
	            return compare( this, new BigNumber( y, b ) ) === 0;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of -Infinity.
	         */
	        P.floor = function () {
	            return round( new BigNumber(this), this.e + 1, 3 );
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.greaterThan = P.gt = function ( y, b ) {
	            id = 6;
	            return compare( this, new BigNumber( y, b ) ) > 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
	            id = 7;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

	        };


	        /*
	         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
	         */
	        P.isFinite = function () {
	            return !!this.c;
	        };


	        /*
	         * Return true if the value of this BigNumber is an integer, otherwise return false.
	         */
	        P.isInteger = P.isInt = function () {
	            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
	        };


	        /*
	         * Return true if the value of this BigNumber is NaN, otherwise returns false.
	         */
	        P.isNaN = function () {
	            return !this.s;
	        };


	        /*
	         * Return true if the value of this BigNumber is negative, otherwise returns false.
	         */
	        P.isNegative = P.isNeg = function () {
	            return this.s < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
	         */
	        P.isZero = function () {
	            return !!this.c && this.c[0] == 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.lessThan = P.lt = function ( y, b ) {
	            id = 8;
	            return compare( this, new BigNumber( y, b ) ) < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
	            id = 9;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
	        };


	        /*
	         *  n - 0 = n
	         *  n - N = N
	         *  n - I = -I
	         *  0 - n = -n
	         *  0 - 0 = 0
	         *  0 - N = N
	         *  0 - I = -I
	         *  N - n = N
	         *  N - 0 = N
	         *  N - N = N
	         *  N - I = N
	         *  I - n = I
	         *  I - 0 = I
	         *  I - N = N
	         *  I - I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	         * BigNumber(y, b).
	         */
	        P.minus = P.sub = function ( y, b ) {
	            var i, j, t, xLTy,
	                x = this,
	                a = x.s;

	            id = 10;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	            if ( a != b ) {
	                y.s = -b;
	                return x.plus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Either Infinity?
	                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

	                // Either zero?
	                if ( !xc[0] || !yc[0] ) {

	                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

	                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                      ROUNDING_MODE == 3 ? -0 : 0 );
	                }
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Determine which is the bigger number.
	            if ( a = xe - ye ) {

	                if ( xLTy = a < 0 ) {
	                    a = -a;
	                    t = xc;
	                } else {
	                    ye = xe;
	                    t = yc;
	                }

	                t.reverse();

	                // Prepend zeros to equalise exponents.
	                for ( b = a; b--; t.push(0) );
	                t.reverse();
	            } else {

	                // Exponents equal. Check digit by digit.
	                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

	                for ( a = b = 0; b < j; b++ ) {

	                    if ( xc[b] != yc[b] ) {
	                        xLTy = xc[b] < yc[b];
	                        break;
	                    }
	                }
	            }

	            // x < y? Point xc to the array of the bigger number.
	            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	            b = ( j = yc.length ) - ( i = xc.length );

	            // Append zeros to xc if shorter.
	            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
	            b = BASE - 1;

	            // Subtract yc from xc.
	            for ( ; j > a; ) {

	                if ( xc[--j] < yc[j] ) {
	                    for ( i = j; i && !xc[--i]; xc[i] = b );
	                    --xc[i];
	                    xc[j] += BASE;
	                }

	                xc[j] -= yc[j];
	            }

	            // Remove leading zeros and adjust exponent accordingly.
	            for ( ; xc[0] == 0; xc.shift(), --ye );

	            // Zero?
	            if ( !xc[0] ) {

	                // Following IEEE 754 (2008) 6.3,
	                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	                y.s = ROUNDING_MODE == 3 ? -1 : 1;
	                y.c = [ y.e = 0 ];
	                return y;
	            }

	            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	            // for finite x and y.
	            return normalise( y, xc, ye );
	        };


	        /*
	         *   n % 0 =  N
	         *   n % N =  N
	         *   n % I =  n
	         *   0 % n =  0
	         *  -0 % n = -0
	         *   0 % 0 =  N
	         *   0 % N =  N
	         *   0 % I =  0
	         *   N % n =  N
	         *   N % 0 =  N
	         *   N % N =  N
	         *   N % I =  N
	         *   I % n =  N
	         *   I % 0 =  N
	         *   I % N =  N
	         *   I % I =  N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	         */
	        P.modulo = P.mod = function ( y, b ) {
	            var q, s,
	                x = this;

	            id = 11;
	            y = new BigNumber( y, b );

	            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	            if ( !x.c || !y.s || y.c && !y.c[0] ) {
	                return new BigNumber(NaN);

	            // Return x if y is Infinity or x is zero.
	            } else if ( !y.c || x.c && !x.c[0] ) {
	                return new BigNumber(x);
	            }

	            if ( MODULO_MODE == 9 ) {

	                // Euclidian division: q = sign(y) * floor(x / abs(y))
	                // r = x - qy    where  0 <= r < abs(y)
	                s = y.s;
	                y.s = 1;
	                q = div( x, y, 0, 3 );
	                y.s = s;
	                q.s *= s;
	            } else {
	                q = div( x, y, 0, MODULO_MODE );
	            }

	            return x.minus( q.times(y) );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber negated,
	         * i.e. multiplied by -1.
	         */
	        P.negated = P.neg = function () {
	            var x = new BigNumber(this);
	            x.s = -x.s || null;
	            return x;
	        };


	        /*
	         *  n + 0 = n
	         *  n + N = N
	         *  n + I = I
	         *  0 + n = n
	         *  0 + 0 = 0
	         *  0 + N = N
	         *  0 + I = I
	         *  N + n = N
	         *  N + 0 = N
	         *  N + N = N
	         *  N + I = N
	         *  I + n = I
	         *  I + 0 = I
	         *  I + N = N
	         *  I + I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	         * BigNumber(y, b).
	         */
	        P.plus = P.add = function ( y, b ) {
	            var t,
	                x = this,
	                a = x.s;

	            id = 12;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	             if ( a != b ) {
	                y.s = -b;
	                return x.minus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Return ±Infinity if either ±Infinity.
	                if ( !xc || !yc ) return new BigNumber( a / 0 );

	                // Either zero?
	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	            if ( a = xe - ye ) {
	                if ( a > 0 ) {
	                    ye = xe;
	                    t = yc;
	                } else {
	                    a = -a;
	                    t = xc;
	                }

	                t.reverse();
	                for ( ; a--; t.push(0) );
	                t.reverse();
	            }

	            a = xc.length;
	            b = yc.length;

	            // Point xc to the longer array, and b to the shorter length.
	            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

	            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	            for ( a = 0; b; ) {
	                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
	                xc[b] %= BASE;
	            }

	            if (a) {
	                xc.unshift(a);
	                ++ye;
	            }

	            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	            // ye = MAX_EXP + 1 possible
	            return normalise( y, xc, ye );
	        };


	        /*
	         * Return the number of significant digits of the value of this BigNumber.
	         *
	         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	         */
	        P.precision = P.sd = function (z) {
	            var n, v,
	                x = this,
	                c = x.c;

	            // 'precision() argument not a boolean or binary digit: {z}'
	            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
	                if (ERRORS) raise( 13, 'argument' + notBool, z );
	                if ( z != !!z ) z = null;
	            }

	            if ( !c ) return null;
	            v = c.length - 1;
	            n = v * LOG_BASE + 1;

	            if ( v = c[v] ) {

	                // Subtract the number of trailing zeros of the last element.
	                for ( ; v % 10 == 0; v /= 10, n-- );

	                // Add the number of digits of the first element.
	                for ( v = c[0]; v >= 10; v /= 10, n++ );
	            }

	            if ( z && x.e + 1 > n ) n = x.e + 1;

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
	         * omitted.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'round() decimal places out of range: {dp}'
	         * 'round() decimal places not an integer: {dp}'
	         * 'round() rounding mode not an integer: {rm}'
	         * 'round() rounding mode out of range: {rm}'
	         */
	        P.round = function ( dp, rm ) {
	            var n = new BigNumber(this);

	            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
	                round( n, ~~dp + this.e + 1, rm == null ||
	                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
	            }

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	         *
	         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	         *
	         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
	         * otherwise.
	         *
	         * 'shift() argument not an integer: {k}'
	         * 'shift() argument out of range: {k}'
	         */
	        P.shift = function (k) {
	            var n = this;
	            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

	              // k < 1e+21, or truncate(k) will produce exponential notation.
	              ? n.times( '1e' + truncate(k) )
	              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
	                ? n.s * ( k < 0 ? 0 : 1 / 0 )
	                : n );
	        };


	        /*
	         *  sqrt(-n) =  N
	         *  sqrt( N) =  N
	         *  sqrt(-I) =  N
	         *  sqrt( I) =  I
	         *  sqrt( 0) =  0
	         *  sqrt(-0) = -0
	         *
	         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.squareRoot = P.sqrt = function () {
	            var m, n, r, rep, t,
	                x = this,
	                c = x.c,
	                s = x.s,
	                e = x.e,
	                dp = DECIMAL_PLACES + 4,
	                half = new BigNumber('0.5');

	            // Negative/NaN/Infinity/zero?
	            if ( s !== 1 || !c || !c[0] ) {
	                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
	            }

	            // Initial estimate.
	            s = Math.sqrt( +x );

	            // Math.sqrt underflow/overflow?
	            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	            if ( s == 0 || s == 1 / 0 ) {
	                n = coeffToString(c);
	                if ( ( n.length + e ) % 2 == 0 ) n += '0';
	                s = Math.sqrt(n);
	                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

	                if ( s == 1 / 0 ) {
	                    n = '1e' + e;
	                } else {
	                    n = s.toExponential();
	                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
	                }

	                r = new BigNumber(n);
	            } else {
	                r = new BigNumber( s + '' );
	            }

	            // Check for zero.
	            // r could be zero if MIN_EXP is changed after the this value was created.
	            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	            // coeffToString to throw.
	            if ( r.c[0] ) {
	                e = r.e;
	                s = e + dp;
	                if ( s < 3 ) s = 0;

	                // Newton-Raphson iteration.
	                for ( ; ; ) {
	                    t = r;
	                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

	                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
	                         coeffToString( r.c ) ).slice( 0, s ) ) {

	                        // The exponent of r may here be one less than the final result exponent,
	                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	                        // are indexed correctly.
	                        if ( r.e < e ) --s;
	                        n = n.slice( s - 3, s + 1 );

	                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	                        // iteration.
	                        if ( n == '9999' || !rep && n == '4999' ) {

	                            // On the first iteration only, check to see if rounding up gives the
	                            // exact result as the nines may infinitely repeat.
	                            if ( !rep ) {
	                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

	                                if ( t.times(t).eq(x) ) {
	                                    r = t;
	                                    break;
	                                }
	                            }

	                            dp += 4;
	                            s += 4;
	                            rep = 1;
	                        } else {

	                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	                            // result. If not, then there are further digits and m will be truthy.
	                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

	                                // Truncate to the first rounding digit.
	                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
	                                m = !r.times(r).eq(x);
	                            }

	                            break;
	                        }
	                    }
	                }
	            }

	            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
	        };


	        /*
	         *  n * 0 = 0
	         *  n * N = N
	         *  n * I = I
	         *  0 * n = 0
	         *  0 * 0 = 0
	         *  0 * N = N
	         *  0 * I = N
	         *  N * n = N
	         *  N * 0 = N
	         *  N * N = N
	         *  N * I = N
	         *  I * n = I
	         *  I * 0 = N
	         *  I * N = N
	         *  I * I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber times the value of
	         * BigNumber(y, b).
	         */
	        P.times = P.mul = function ( y, b ) {
	            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	                base, sqrtBase,
	                x = this,
	                xc = x.c,
	                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

	            // Either NaN, ±Infinity or ±0?
	            if ( !xc || !yc || !xc[0] || !yc[0] ) {

	                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
	                    y.c = y.e = y.s = null;
	                } else {
	                    y.s *= x.s;

	                    // Return ±Infinity if either is ±Infinity.
	                    if ( !xc || !yc ) {
	                        y.c = y.e = null;

	                    // Return ±0 if either is ±0.
	                    } else {
	                        y.c = [0];
	                        y.e = 0;
	                    }
	                }

	                return y;
	            }

	            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
	            y.s *= x.s;
	            xcL = xc.length;
	            ycL = yc.length;

	            // Ensure xc points to longer array and xcL to its length.
	            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	            // Initialise the result array with zeros.
	            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

	            base = BASE;
	            sqrtBase = SQRT_BASE;

	            for ( i = ycL; --i >= 0; ) {
	                c = 0;
	                ylo = yc[i] % sqrtBase;
	                yhi = yc[i] / sqrtBase | 0;

	                for ( k = xcL, j = i + k; j > i; ) {
	                    xlo = xc[--k] % sqrtBase;
	                    xhi = xc[k] / sqrtBase | 0;
	                    m = yhi * xlo + xhi * ylo;
	                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
	                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
	                    zc[j--] = xlo % base;
	                }

	                zc[j] = c;
	            }

	            if (c) {
	                ++e;
	            } else {
	                zc.shift();
	            }

	            return normalise( y, zc, e );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toDigits() precision out of range: {sd}'
	         * 'toDigits() precision not an integer: {sd}'
	         * 'toDigits() rounding mode not an integer: {rm}'
	         * 'toDigits() rounding mode out of range: {rm}'
	         */
	        P.toDigits = function ( sd, rm ) {
	            var n = new BigNumber(this);
	            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
	            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
	            return sd ? round( n, sd, rm ) : n;
	        };


	        /*
	         * Return a string representing the value of this BigNumber in exponential notation and
	         * rounded using ROUNDING_MODE to dp fixed decimal places.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toExponential() decimal places not an integer: {dp}'
	         * 'toExponential() decimal places out of range: {dp}'
	         * 'toExponential() rounding mode not an integer: {rm}'
	         * 'toExponential() rounding mode out of range: {rm}'
	         */
	        P.toExponential = function ( dp, rm ) {
	            return format( this,
	              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounding
	         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	         * but e.g. (-0.00001).toFixed(0) is '-0'.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFixed() decimal places not an integer: {dp}'
	         * 'toFixed() decimal places out of range: {dp}'
	         * 'toFixed() rounding mode not an integer: {rm}'
	         * 'toFixed() rounding mode out of range: {rm}'
	         */
	        P.toFixed = function ( dp, rm ) {
	            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
	              ? ~~dp + this.e + 1 : null, rm, 20 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounded
	         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	         * of the FORMAT object (see BigNumber.config).
	         *
	         * FORMAT = {
	         *      decimalSeparator : '.',
	         *      groupSeparator : ',',
	         *      groupSize : 3,
	         *      secondaryGroupSize : 0,
	         *      fractionGroupSeparator : '\xA0',    // non-breaking space
	         *      fractionGroupSize : 0
	         * };
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFormat() decimal places not an integer: {dp}'
	         * 'toFormat() decimal places out of range: {dp}'
	         * 'toFormat() rounding mode not an integer: {rm}'
	         * 'toFormat() rounding mode out of range: {rm}'
	         */
	        P.toFormat = function ( dp, rm ) {
	            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
	              ? ~~dp + this.e + 1 : null, rm, 21 );

	            if ( this.c ) {
	                var i,
	                    arr = str.split('.'),
	                    g1 = +FORMAT.groupSize,
	                    g2 = +FORMAT.secondaryGroupSize,
	                    groupSeparator = FORMAT.groupSeparator,
	                    intPart = arr[0],
	                    fractionPart = arr[1],
	                    isNeg = this.s < 0,
	                    intDigits = isNeg ? intPart.slice(1) : intPart,
	                    len = intDigits.length;

	                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	                if ( g1 > 0 && len > 0 ) {
	                    i = len % g1 || g1;
	                    intPart = intDigits.substr( 0, i );

	                    for ( ; i < len; i += g1 ) {
	                        intPart += groupSeparator + intDigits.substr( i, g1 );
	                    }

	                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
	                    if (isNeg) intPart = '-' + intPart;
	                }

	                str = fractionPart
	                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
	                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
	                      '$&' + FORMAT.fractionGroupSeparator )
	                    : fractionPart )
	                  : intPart;
	            }

	            return str;
	        };


	        /*
	         * Return a string array representing the value of this BigNumber as a simple fraction with
	         * an integer numerator and an integer denominator. The denominator will be a positive
	         * non-zero value less than or equal to the specified maximum denominator. If a maximum
	         * denominator is not specified, the denominator will be the lowest value necessary to
	         * represent the number exactly.
	         *
	         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
	         *
	         * 'toFraction() max denominator not an integer: {md}'
	         * 'toFraction() max denominator out of range: {md}'
	         */
	        P.toFraction = function (md) {
	            var arr, d0, d2, e, exp, n, n0, q, s,
	                k = ERRORS,
	                x = this,
	                xc = x.c,
	                d = new BigNumber(ONE),
	                n1 = d0 = new BigNumber(ONE),
	                d1 = n0 = new BigNumber(ONE);

	            if ( md != null ) {
	                ERRORS = false;
	                n = new BigNumber(md);
	                ERRORS = k;

	                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

	                    if (ERRORS) {
	                        raise( 22,
	                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
	                    }

	                    // ERRORS is false:
	                    // If md is a finite non-integer >= 1, round it to an integer and use it.
	                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
	                }
	            }

	            if ( !xc ) return x.toString();
	            s = coeffToString(xc);

	            // Determine initial denominator.
	            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	            e = d.e = s.length - x.e - 1;
	            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
	            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

	            exp = MAX_EXP;
	            MAX_EXP = 1 / 0;
	            n = new BigNumber(s);

	            // n0 = d1 = 0
	            n0.c[0] = 0;

	            for ( ; ; )  {
	                q = div( n, d, 0, 1 );
	                d2 = d0.plus( q.times(d1) );
	                if ( d2.cmp(md) == 1 ) break;
	                d0 = d1;
	                d1 = d2;
	                n1 = n0.plus( q.times( d2 = n1 ) );
	                n0 = d2;
	                d = n.minus( q.times( d2 = d ) );
	                n = d2;
	            }

	            d2 = div( md.minus(d0), d1, 0, 1 );
	            n0 = n0.plus( d2.times(n1) );
	            d0 = d0.plus( d2.times(d1) );
	            n0.s = n1.s = x.s;
	            e *= 2;

	            // Determine which fraction is closer to x, n0/d0 or n1/d1
	            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
	                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
	                    ? [ n1.toString(), d1.toString() ]
	                    : [ n0.toString(), d0.toString() ];

	            MAX_EXP = exp;
	            return arr;
	        };


	        /*
	         * Return the value of this BigNumber converted to a number primitive.
	         */
	        P.toNumber = function () {
	            return +this;
	        };


	        /*
	         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
	         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
	         *
	         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
	         * (Performs 54 loop iterations for n of 9007199254740992.)
	         *
	         * 'pow() exponent not an integer: {n}'
	         * 'pow() exponent out of range: {n}'
	         */
	        P.toPower = P.pow = function (n) {
	            var k, y,
	                i = mathfloor( n < 0 ? -n : +n ),
	                x = this;

	            // Pass ±Infinity to Math.pow if exponent is out of range.
	            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
	              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
	                parseFloat(n) != n && !( n = NaN ) ) ) {
	                return new BigNumber( Math.pow( +x, n ) );
	            }

	            // Truncating each coefficient array to a length of k after each multiplication equates
	            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
	            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
	            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
	            y = new BigNumber(ONE);

	            for ( ; ; ) {

	                if ( i % 2 ) {
	                    y = y.times(x);
	                    if ( !y.c ) break;
	                    if ( k && y.c.length > k ) y.c.length = k;
	                }

	                i = mathfloor( i / 2 );
	                if ( !i ) break;

	                x = x.times(x);
	                if ( k && x.c && x.c.length > k ) x.c.length = k;
	            }

	            if ( n < 0 ) y = ONE.div(y);
	            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
	        };


	        /*
	         * Return a string representing the value of this BigNumber rounded to sd significant digits
	         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	         * necessary to represent the integer part of the value in fixed-point notation, then use
	         * exponential notation.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toPrecision() precision not an integer: {sd}'
	         * 'toPrecision() precision out of range: {sd}'
	         * 'toPrecision() rounding mode not an integer: {rm}'
	         * 'toPrecision() rounding mode out of range: {rm}'
	         */
	        P.toPrecision = function ( sd, rm ) {
	            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
	              ? sd | 0 : null, rm, 24 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	         * TO_EXP_NEG, return exponential notation.
	         *
	         * [b] {number} Integer, 2 to 64 inclusive.
	         *
	         * 'toString() base not an integer: {b}'
	         * 'toString() base out of range: {b}'
	         */
	        P.toString = function (b) {
	            var str,
	                n = this,
	                s = n.s,
	                e = n.e;

	            // Infinity or NaN?
	            if ( e === null ) {

	                if (s) {
	                    str = 'Infinity';
	                    if ( s < 0 ) str = '-' + str;
	                } else {
	                    str = 'NaN';
	                }
	            } else {
	                str = coeffToString( n.c );

	                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
	                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                      ? toExponential( str, e )
	                      : toFixedPoint( str, e );
	                } else {
	                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
	                }

	                if ( s < 0 && n.c[0] ) str = '-' + str;
	            }

	            return str;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
	         * number.
	         */
	        P.truncated = P.trunc = function () {
	            return round( new BigNumber(this), this.e + 1, 1 );
	        };



	        /*
	         * Return as toString, but do not accept a base argument, and include the minus sign for
	         * negative zero.
	         */
	        P.valueOf = P.toJSON = function () {
	            var str,
	                n = this,
	                e = n.e;

	            if ( e === null ) return n.toString();

	            str = coeffToString( n.c );

	            str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                ? toExponential( str, e )
	                : toFixedPoint( str, e );

	            return n.s < 0 ? '-' + str : str;
	        };


	        // Aliases for BigDecimal methods.
	        //P.add = P.plus;         // P.add included above
	        //P.subtract = P.minus;   // P.sub included above
	        //P.multiply = P.times;   // P.mul included above
	        //P.divide = P.div;
	        //P.remainder = P.mod;
	        //P.compareTo = P.cmp;
	        //P.negate = P.neg;


	        if ( configObj != null ) BigNumber.config(configObj);

	        return BigNumber;
	    }


	    // PRIVATE HELPER FUNCTIONS


	    function bitFloor(n) {
	        var i = n | 0;
	        return n > 0 || n === i ? i : i - 1;
	    }


	    // Return a coefficient array as a string of base 10 digits.
	    function coeffToString(a) {
	        var s, z,
	            i = 1,
	            j = a.length,
	            r = a[0] + '';

	        for ( ; i < j; ) {
	            s = a[i++] + '';
	            z = LOG_BASE - s.length;
	            for ( ; z--; s = '0' + s );
	            r += s;
	        }

	        // Determine trailing zeros.
	        for ( j = r.length; r.charCodeAt(--j) === 48; );
	        return r.slice( 0, j + 1 || 1 );
	    }


	    // Compare the value of BigNumbers x and y.
	    function compare( x, y ) {
	        var a, b,
	            xc = x.c,
	            yc = y.c,
	            i = x.s,
	            j = y.s,
	            k = x.e,
	            l = y.e;

	        // Either NaN?
	        if ( !i || !j ) return null;

	        a = xc && !xc[0];
	        b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) return a ? b ? 0 : -j : i;

	        // Signs differ?
	        if ( i != j ) return i;

	        a = i < 0;
	        b = k == l;

	        // Either Infinity?
	        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

	        // Compare exponents.
	        if ( !b ) return k > l ^ a ? 1 : -1;

	        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

	        // Compare digit by digit.
	        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    }


	    /*
	     * Return true if n is a valid number in range, otherwise false.
	     * Use for argument validation when ERRORS is false.
	     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
	     */
	    function intValidatorNoErrors( n, min, max ) {
	        return ( n = truncate(n) ) >= min && n <= max;
	    }


	    function isArray(obj) {
	        return Object.prototype.toString.call(obj) == '[object Array]';
	    }


	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. convertBase('255', 10, 16) returns [15, 15].
	     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut( str, baseIn, baseOut ) {
	        var j,
	            arr = [0],
	            arrL,
	            i = 0,
	            len = str.length;

	        for ( ; i < len; ) {
	            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
	            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

	            for ( ; j < arr.length; j++ ) {

	                if ( arr[j] > baseOut - 1 ) {
	                    if ( arr[j + 1] == null ) arr[j + 1] = 0;
	                    arr[j + 1] += arr[j] / baseOut | 0;
	                    arr[j] %= baseOut;
	                }
	            }
	        }

	        return arr.reverse();
	    }


	    function toExponential( str, e ) {
	        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
	          ( e < 0 ? 'e' : 'e+' ) + e;
	    }


	    function toFixedPoint( str, e ) {
	        var len, z;

	        // Negative exponent?
	        if ( e < 0 ) {

	            // Prepend zeros.
	            for ( z = '0.'; ++e; z += '0' );
	            str = z + str;

	        // Positive exponent
	        } else {
	            len = str.length;

	            // Append zeros.
	            if ( ++e > len ) {
	                for ( z = '0', e -= len; --e; z += '0' );
	                str += z;
	            } else if ( e < len ) {
	                str = str.slice( 0, e ) + '.' + str.slice(e);
	            }
	        }

	        return str;
	    }


	    function truncate(n) {
	        n = parseFloat(n);
	        return n < 0 ? mathceil(n) : mathfloor(n);
	    }


	    // EXPORT


	   // AMD.
	    if ( true ) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return constructorFactory(); }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	    // Node.js and other environments that support module.exports.
	    } else if ( typeof module != 'undefined' && module.exports ) {
	        module.exports = constructorFactory();

	        // Split string stops browserify adding crypto shim.
	        if ( !cryptoObj ) try { cryptoObj = require('cry' + 'pto'); } catch (e) {}

	    // Browser.
	    } else {
	        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();
	        globalObj.BigNumber = constructorFactory();
	    }
	})(this);


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	exports.ChangeUser = __webpack_require__(385);
	exports.Handshake = __webpack_require__(411);
	exports.Ping = __webpack_require__(412);
	exports.Query = __webpack_require__(413);
	exports.Quit = __webpack_require__(427);
	exports.Sequence = __webpack_require__(386);
	exports.Statistics = __webpack_require__(428);


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence = __webpack_require__(386);
	var Util     = __webpack_require__(124);
	var Packets  = __webpack_require__(387);
	var Auth     = __webpack_require__(410);

	module.exports = ChangeUser;
	Util.inherits(ChangeUser, Sequence);
	function ChangeUser(options, callback) {
	  Sequence.call(this, options, callback);

	  this._user          = options.user;
	  this._password      = options.password;
	  this._database      = options.database;
	  this._charsetNumber = options.charsetNumber;
	  this._currentConfig = options.currentConfig;
	}

	ChangeUser.prototype.start = function(handshakeInitializationPacket) {
	  var scrambleBuff = handshakeInitializationPacket.scrambleBuff();
	  scrambleBuff     = Auth.token(this._password, scrambleBuff);

	  var packet = new Packets.ComChangeUserPacket({
	    user          : this._user,
	    scrambleBuff  : scrambleBuff,
	    database      : this._database,
	    charsetNumber : this._charsetNumber
	  });

	  this._currentConfig.user          = this._user;
	  this._currentConfig.password      = this._password;
	  this._currentConfig.database      = this._database;
	  this._currentConfig.charsetNumber = this._charsetNumber;

	  this.emit('packet', packet);
	};

	ChangeUser.prototype['ErrorPacket'] = function(packet) {
	  var err = this._packetToError(packet);
	  err.fatal = true;
	  this.end(err);
	};


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var Util           = __webpack_require__(124);
	var EventEmitter   = __webpack_require__(64).EventEmitter;
	var Packets        = __webpack_require__(387);
	var ErrorConstants = __webpack_require__(409);

	var listenerCount = EventEmitter.listenerCount
	  || function(emitter, type){ return emitter.listeners(type).length; };

	module.exports = Sequence;
	Util.inherits(Sequence, EventEmitter);
	function Sequence(options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  EventEmitter.call(this);

	  options = options || {};

	  this._callback = callback;
	  this._callSite = null;
	  this._ended    = false;
	  this._timeout  = options.timeout;

	  // For Timers
	  this._idleNext    = null;
	  this._idlePrev    = null;
	  this._idleStart   = null;
	  this._idleTimeout = undefined;
	  this._repeat      = null;
	}

	Sequence.determinePacket = function(byte) {
	  switch (byte) {
	    case 0x00: return Packets.OkPacket;
	    case 0xfe: return Packets.EofPacket;
	    case 0xff: return Packets.ErrorPacket;
	  }
	};

	Sequence.prototype.hasErrorHandler = function() {
	  return Boolean(this._callback) || listenerCount(this, 'error') > 1;
	};

	Sequence.prototype._packetToError = function(packet) {
	  var code = ErrorConstants[packet.errno] || 'UNKNOWN_CODE_PLEASE_REPORT';
	  var err  = new Error(code + ': ' + packet.message);
	  err.code = code;
	  err.errno = packet.errno;
	  err.sqlState = packet.sqlState;

	  return err;
	};

	Sequence.prototype._addLongStackTrace = function _addLongStackTrace(err) {
	  if (!this._callSite || !this._callSite.stack) {
	    return;
	  }

	  var delimiter = '\n    --------------------\n';

	  if (err.stack.indexOf(delimiter) > -1) {
	    return;
	  }

	  err.stack += delimiter + this._callSite.stack.replace(/.+\n/, '');
	};

	Sequence.prototype.end = function(err) {
	  if (this._ended) {
	    return;
	  }

	  this._ended = true;

	  if (err) {
	    this._addLongStackTrace(err);
	  }

	  // Without this we are leaking memory. This problem was introduced in
	  // 8189925374e7ce3819bbe88b64c7b15abac96b16. I suspect that the error object
	  // causes a cyclic reference that the GC does not detect properly, but I was
	  // unable to produce a standalone version of this leak. This would be a great
	  // challenge for somebody interested in difficult problems : )!
	  this._callSite = null;

	  // try...finally for exception safety
	  try {
	    if (err) {
	      this.emit('error', err);
	    }
	  } finally {
	    try {
	      if (this._callback) {
	        this._callback.apply(this, arguments);
	      }
	    } finally {
	      this.emit('end');
	    }
	  }
	};

	Sequence.prototype['OkPacket'] = function(packet) {
	  this.end(null, packet);
	};

	Sequence.prototype['ErrorPacket'] = function(packet) {
	  this.end(this._packetToError(packet));
	};

	// Implemented by child classes
	Sequence.prototype.start = function() {};

	Sequence.prototype._onTimeout = function _onTimeout() {
	  this.emit('timeout');
	};


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	exports.ClientAuthenticationPacket = __webpack_require__(388);
	exports.ComChangeUserPacket = __webpack_require__(389);
	exports.ComPingPacket = __webpack_require__(390);
	exports.ComQueryPacket = __webpack_require__(391);
	exports.ComQuitPacket = __webpack_require__(392);
	exports.ComStatisticsPacket = __webpack_require__(393);
	exports.EmptyPacket = __webpack_require__(394);
	exports.EofPacket = __webpack_require__(395);
	exports.ErrorPacket = __webpack_require__(396);
	exports.Field = __webpack_require__(397);
	exports.FieldPacket = __webpack_require__(399);
	exports.HandshakeInitializationPacket = __webpack_require__(400);
	exports.LocalDataFilePacket = __webpack_require__(401);
	exports.OkPacket = __webpack_require__(402);
	exports.OldPasswordPacket = __webpack_require__(403);
	exports.ResultSetHeaderPacket = __webpack_require__(404);
	exports.RowDataPacket = __webpack_require__(405);
	exports.SSLRequestPacket = __webpack_require__(406);
	exports.StatisticsPacket = __webpack_require__(407);
	exports.UseOldPasswordPacket = __webpack_require__(408);


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = ClientAuthenticationPacket;
	function ClientAuthenticationPacket(options) {
	  options = options || {};

	  this.clientFlags   = options.clientFlags;
	  this.maxPacketSize = options.maxPacketSize;
	  this.charsetNumber = options.charsetNumber;
	  this.filler        = undefined;
	  this.user          = options.user;
	  this.scrambleBuff  = options.scrambleBuff;
	  this.database      = options.database;
	  this.protocol41    = options.protocol41;
	}

	ClientAuthenticationPacket.prototype.parse = function(parser) {
	  if (this.protocol41) {
	    this.clientFlags   = parser.parseUnsignedNumber(4);
	    this.maxPacketSize = parser.parseUnsignedNumber(4);
	    this.charsetNumber = parser.parseUnsignedNumber(1);
	    this.filler        = parser.parseFiller(23);
	    this.user          = parser.parseNullTerminatedString();
	    this.scrambleBuff  = parser.parseLengthCodedBuffer();
	    this.database      = parser.parseNullTerminatedString();
	  } else {
	    this.clientFlags   = parser.parseUnsignedNumber(2);
	    this.maxPacketSize = parser.parseUnsignedNumber(3);
	    this.user          = parser.parseNullTerminatedString();
	    this.scrambleBuff  = parser.parseBuffer(8);
	    this.database      = parser.parseLengthCodedBuffer();
	  }
	};

	ClientAuthenticationPacket.prototype.write = function(writer) {
	  if (this.protocol41) {
	    writer.writeUnsignedNumber(4, this.clientFlags);
	    writer.writeUnsignedNumber(4, this.maxPacketSize);
	    writer.writeUnsignedNumber(1, this.charsetNumber);
	    writer.writeFiller(23);
	    writer.writeNullTerminatedString(this.user);
	    writer.writeLengthCodedBuffer(this.scrambleBuff);
	    writer.writeNullTerminatedString(this.database);
	  } else {
	    writer.writeUnsignedNumber(2, this.clientFlags);
	    writer.writeUnsignedNumber(3, this.maxPacketSize);
	    writer.writeNullTerminatedString(this.user);
	    writer.writeBuffer(this.scrambleBuff);
	    if (this.database && this.database.length) {
	      writer.writeFiller(1);
	      writer.writeBuffer(new Buffer(this.database));
	    }
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 389 */
/***/ function(module, exports) {

	module.exports = ComChangeUserPacket;
	function ComChangeUserPacket(options) {
	  options = options || {};

	  this.command       = 0x11;
	  this.user          = options.user;
	  this.scrambleBuff  = options.scrambleBuff;
	  this.database      = options.database;
	  this.charsetNumber = options.charsetNumber;
	}

	ComChangeUserPacket.prototype.parse = function(parser) {
	  this.command       = parser.parseUnsignedNumber(1);
	  this.user          = parser.parseNullTerminatedString();
	  this.scrambleBuff  = parser.parseLengthCodedBuffer();
	  this.database      = parser.parseNullTerminatedString();
	  this.charsetNumber = parser.parseUnsignedNumber(1);
	};

	ComChangeUserPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.command);
	  writer.writeNullTerminatedString(this.user);
	  writer.writeLengthCodedBuffer(this.scrambleBuff);
	  writer.writeNullTerminatedString(this.database);
	  writer.writeUnsignedNumber(2, this.charsetNumber);
	};


/***/ },
/* 390 */
/***/ function(module, exports) {

	module.exports = ComPingPacket;
	function ComPingPacket(sql) {
	  this.command = 0x0e;
	}

	ComPingPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.command);
	};

	ComPingPacket.prototype.parse = function(parser) {
	  this.command = parser.parseUnsignedNumber(1);
	};


/***/ },
/* 391 */
/***/ function(module, exports) {

	module.exports = ComQueryPacket;
	function ComQueryPacket(sql) {
	  this.command = 0x03;
	  this.sql     = sql;
	}

	ComQueryPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.command);
	  writer.writeString(this.sql);
	};

	ComQueryPacket.prototype.parse = function(parser) {
	  this.command = parser.parseUnsignedNumber(1);
	  this.sql     = parser.parsePacketTerminatedString();
	};


/***/ },
/* 392 */
/***/ function(module, exports) {

	module.exports = ComQuitPacket;
	function ComQuitPacket(sql) {
	  this.command = 0x01;
	}

	ComQuitPacket.prototype.parse = function parse(parser) {
	  this.command = parser.parseUnsignedNumber(1);
	};

	ComQuitPacket.prototype.write = function write(writer) {
	  writer.writeUnsignedNumber(1, this.command);
	};


/***/ },
/* 393 */
/***/ function(module, exports) {

	module.exports = ComStatisticsPacket;
	function ComStatisticsPacket(sql) {
	  this.command = 0x09;
	}

	ComStatisticsPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.command);
	};

	ComStatisticsPacket.prototype.parse = function(parser) {
	  this.command = parser.parseUnsignedNumber(1);
	};


/***/ },
/* 394 */
/***/ function(module, exports) {

	module.exports = EmptyPacket;
	function EmptyPacket() {
	}

	EmptyPacket.prototype.write = function(writer) {
	};


/***/ },
/* 395 */
/***/ function(module, exports) {

	module.exports = EofPacket;
	function EofPacket(options) {
	  options = options || {};

	  this.fieldCount   = undefined;
	  this.warningCount = options.warningCount;
	  this.serverStatus = options.serverStatus;
	  this.protocol41   = options.protocol41;
	}

	EofPacket.prototype.parse = function(parser) {
	  this.fieldCount   = parser.parseUnsignedNumber(1);
	  if (this.protocol41) {
	    this.warningCount = parser.parseUnsignedNumber(2);
	    this.serverStatus = parser.parseUnsignedNumber(2);
	  }
	};

	EofPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, 0xfe);
	  if (this.protocol41) {
	    writer.writeUnsignedNumber(2, this.warningCount);
	    writer.writeUnsignedNumber(2, this.serverStatus);
	  }
	};


/***/ },
/* 396 */
/***/ function(module, exports) {

	module.exports = ErrorPacket;
	function ErrorPacket(options) {
	  options = options || {};

	  this.fieldCount     = options.fieldCount;
	  this.errno          = options.errno;
	  this.sqlStateMarker = options.sqlStateMarker;
	  this.sqlState       = options.sqlState;
	  this.message        = options.message;
	}

	ErrorPacket.prototype.parse = function(parser) {
	  this.fieldCount = parser.parseUnsignedNumber(1);
	  this.errno      = parser.parseUnsignedNumber(2);

	  // sqlStateMarker ('#' = 0x23) indicates error packet format
	  if (parser.peak() === 0x23) {
	    this.sqlStateMarker = parser.parseString(1);
	    this.sqlState       = parser.parseString(5);
	  }

	  this.message = parser.parsePacketTerminatedString();
	};

	ErrorPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, 0xff);
	  writer.writeUnsignedNumber(2, this.errno);

	  if (this.sqlStateMarker) {
	    writer.writeString(this.sqlStateMarker);
	    writer.writeString(this.sqlState);
	  }

	  writer.writeString(this.message);
	};


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var Types = __webpack_require__(398);

	module.exports = Field;
	function Field(options) {
	  options = options || {};

	  this.parser = options.parser;
	  this.packet = options.packet;
	  this.db     = options.packet.db;
	  this.table  = options.packet.table;
	  this.name   = options.packet.name;
	  this.type   = typeToString(options.packet.type);
	  this.length = options.packet.length;
	}

	Field.prototype.string = function () {
	  return this.parser.parseLengthCodedString();
	};

	Field.prototype.buffer = function () {
	  return this.parser.parseLengthCodedBuffer();
	};

	Field.prototype.geometry = function () {
	  return this.parser.parseGeometryValue();
	};

	function typeToString(t) {
	  for (var k in Types) {
	    if (Types[k] == t) return k;
	  }
	}


/***/ },
/* 398 */
/***/ function(module, exports) {

	// Manually extracted from mysql-5.7.9/include/mysql.h.pp
	// some more info here: http://dev.mysql.com/doc/refman/5.5/en/c-api-prepared-statement-type-codes.html
	exports.DECIMAL     = 0x00; // aka DECIMAL (http://dev.mysql.com/doc/refman/5.0/en/precision-math-decimal-changes.html)
	exports.TINY        = 0x01; // aka TINYINT, 1 byte
	exports.SHORT       = 0x02; // aka SMALLINT, 2 bytes
	exports.LONG        = 0x03; // aka INT, 4 bytes
	exports.FLOAT       = 0x04; // aka FLOAT, 4-8 bytes
	exports.DOUBLE      = 0x05; // aka DOUBLE, 8 bytes
	exports.NULL        = 0x06; // NULL (used for prepared statements, I think)
	exports.TIMESTAMP   = 0x07; // aka TIMESTAMP
	exports.LONGLONG    = 0x08; // aka BIGINT, 8 bytes
	exports.INT24       = 0x09; // aka MEDIUMINT, 3 bytes
	exports.DATE        = 0x0a; // aka DATE
	exports.TIME        = 0x0b; // aka TIME
	exports.DATETIME    = 0x0c; // aka DATETIME
	exports.YEAR        = 0x0d; // aka YEAR, 1 byte (don't ask)
	exports.NEWDATE     = 0x0e; // aka ?
	exports.VARCHAR     = 0x0f; // aka VARCHAR (?)
	exports.BIT         = 0x10; // aka BIT, 1-8 byte
	exports.TIMESTAMP2  = 0x11; // aka TIMESTAMP with fractional seconds
	exports.DATETIME2   = 0x12; // aka DATETIME with fractional seconds
	exports.TIME2       = 0x13; // aka TIME with fractional seconds
	exports.JSON        = 0xf5; // aka JSON
	exports.NEWDECIMAL  = 0xf6; // aka DECIMAL
	exports.ENUM        = 0xf7; // aka ENUM
	exports.SET         = 0xf8; // aka SET
	exports.TINY_BLOB   = 0xf9; // aka TINYBLOB, TINYTEXT
	exports.MEDIUM_BLOB = 0xfa; // aka MEDIUMBLOB, MEDIUMTEXT
	exports.LONG_BLOB   = 0xfb; // aka LONGBLOG, LONGTEXT
	exports.BLOB        = 0xfc; // aka BLOB, TEXT
	exports.VAR_STRING  = 0xfd; // aka VARCHAR, VARBINARY
	exports.STRING      = 0xfe; // aka CHAR, BINARY
	exports.GEOMETRY    = 0xff; // aka GEOMETRY


/***/ },
/* 399 */
/***/ function(module, exports) {

	module.exports = FieldPacket;
	function FieldPacket(options) {
	  options = options || {};

	  this.catalog    = options.catalog;
	  this.db         = options.db;
	  this.table      = options.table;
	  this.orgTable   = options.orgTable;
	  this.name       = options.name;
	  this.orgName    = options.orgName;
	  this.charsetNr  = options.charsetNr;
	  this.length     = options.length;
	  this.type       = options.type;
	  this.flags      = options.flags;
	  this.decimals   = options.decimals;
	  this.default    = options.default;
	  this.zeroFill   = options.zeroFill;
	  this.protocol41 = options.protocol41;
	}

	FieldPacket.prototype.parse = function(parser) {
	  if (this.protocol41) {
	    this.catalog     = parser.parseLengthCodedString();
	    this.db          = parser.parseLengthCodedString();
	    this.table       = parser.parseLengthCodedString();
	    this.orgTable    = parser.parseLengthCodedString();
	    this.name        = parser.parseLengthCodedString();
	    this.orgName     = parser.parseLengthCodedString();

	    if (parser.parseLengthCodedNumber() !== 0x0c) {
	      var err  = new TypeError('Received invalid field length');
	      err.code = 'PARSER_INVALID_FIELD_LENGTH';
	      throw err;
	    }

	    this.charsetNr   = parser.parseUnsignedNumber(2);
	    this.length      = parser.parseUnsignedNumber(4);
	    this.type        = parser.parseUnsignedNumber(1);
	    this.flags       = parser.parseUnsignedNumber(2);
	    this.decimals    = parser.parseUnsignedNumber(1);

	    var filler       = parser.parseBuffer(2);
	    if (filler[0] !== 0x0 || filler[1] !== 0x0) {
	      var err  = new TypeError('Received invalid filler');
	      err.code = 'PARSER_INVALID_FILLER';
	      throw err;
	    }

	    // parsed flags
	    this.zeroFill    = (this.flags & 0x0040 ? true : false);

	    if (parser.reachedPacketEnd()) {
	      return;
	    }

	    this.default     = parser.parseLengthCodedString();
	  } else {
	    this.table       = parser.parseLengthCodedString();
	    this.name        = parser.parseLengthCodedString();
	    this.length      = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));
	    this.type        = parser.parseUnsignedNumber(parser.parseUnsignedNumber(1));
	  }
	};

	FieldPacket.prototype.write = function(writer) {
	  if (this.protocol41) {
	    writer.writeLengthCodedString(this.catalog);
	    writer.writeLengthCodedString(this.db);
	    writer.writeLengthCodedString(this.table);
	    writer.writeLengthCodedString(this.orgTable);
	    writer.writeLengthCodedString(this.name);
	    writer.writeLengthCodedString(this.orgName);

	    writer.writeLengthCodedNumber(0x0c);
	    writer.writeUnsignedNumber(2, this.charsetNr || 0);
	    writer.writeUnsignedNumber(4, this.length || 0);
	    writer.writeUnsignedNumber(1, this.type || 0);
	    writer.writeUnsignedNumber(2, this.flags || 0);
	    writer.writeUnsignedNumber(1, this.decimals || 0);
	    writer.writeFiller(2);

	    if (this.default !== undefined) {
	      writer.writeLengthCodedString(this.default);
	    }
	  } else {
	    writer.writeLengthCodedString(this.table);
	    writer.writeLengthCodedString(this.name);
	    writer.writeUnsignedNumber(1, 0x01);
	    writer.writeUnsignedNumber(1, this.length);
	    writer.writeUnsignedNumber(1, 0x01);
	    writer.writeUnsignedNumber(1, this.type);
	  }
	};


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Client = __webpack_require__(377);

	module.exports = HandshakeInitializationPacket;
	function HandshakeInitializationPacket(options) {
	  options = options || {};

	  this.protocolVersion     = options.protocolVersion;
	  this.serverVersion       = options.serverVersion;
	  this.threadId            = options.threadId;
	  this.scrambleBuff1       = options.scrambleBuff1;
	  this.filler1             = options.filler1;
	  this.serverCapabilities1 = options.serverCapabilities1;
	  this.serverLanguage      = options.serverLanguage;
	  this.serverStatus        = options.serverStatus;
	  this.serverCapabilities2 = options.serverCapabilities2;
	  this.scrambleLength      = options.scrambleLength;
	  this.filler2             = options.filler2;
	  this.scrambleBuff2       = options.scrambleBuff2;
	  this.filler3             = options.filler3;
	  this.pluginData          = options.pluginData;
	  this.protocol41          = options.protocol41;

	  if (this.protocol41) {
	    // force set the bit in serverCapabilities1
	    this.serverCapabilities1 |= Client.CLIENT_PROTOCOL_41;
	  }
	}

	HandshakeInitializationPacket.prototype.parse = function(parser) {
	  this.protocolVersion     = parser.parseUnsignedNumber(1);
	  this.serverVersion       = parser.parseNullTerminatedString();
	  this.threadId            = parser.parseUnsignedNumber(4);
	  this.scrambleBuff1       = parser.parseBuffer(8);
	  this.filler1             = parser.parseFiller(1);
	  this.serverCapabilities1 = parser.parseUnsignedNumber(2);
	  this.serverLanguage      = parser.parseUnsignedNumber(1);
	  this.serverStatus        = parser.parseUnsignedNumber(2);

	  this.protocol41          = (this.serverCapabilities1 & (1 << 9)) > 0;

	  if (this.protocol41) {
	    this.serverCapabilities2 = parser.parseUnsignedNumber(2);
	    this.scrambleLength      = parser.parseUnsignedNumber(1);
	    this.filler2             = parser.parseFiller(10);
	    // scrambleBuff2 should be 0x00 terminated, but sphinx does not do this
	    // so we assume scrambleBuff2 to be 12 byte and treat the next byte as a
	    // filler byte.
	    this.scrambleBuff2       = parser.parseBuffer(12);
	    this.filler3             = parser.parseFiller(1);
	  } else {
	    this.filler2             = parser.parseFiller(13);
	  }

	  if (parser.reachedPacketEnd()) {
	    return;
	  }

	  // According to the docs this should be 0x00 terminated, but MariaDB does
	  // not do this, so we assume this string to be packet terminated.
	  this.pluginData = parser.parsePacketTerminatedString();

	  // However, if there is a trailing '\0', strip it
	  var lastChar = this.pluginData.length - 1;
	  if (this.pluginData[lastChar] === '\0') {
	    this.pluginData = this.pluginData.substr(0, lastChar);
	  }
	};

	HandshakeInitializationPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.protocolVersion);
	  writer.writeNullTerminatedString(this.serverVersion);
	  writer.writeUnsignedNumber(4, this.threadId);
	  writer.writeBuffer(this.scrambleBuff1);
	  writer.writeFiller(1);
	  writer.writeUnsignedNumber(2, this.serverCapabilities1);
	  writer.writeUnsignedNumber(1, this.serverLanguage);
	  writer.writeUnsignedNumber(2, this.serverStatus);
	  if (this.protocol41) {
	    writer.writeUnsignedNumber(2, this.serverCapabilities2);
	    writer.writeUnsignedNumber(1, this.scrambleLength);
	    writer.writeFiller(10);
	  }
	  writer.writeNullTerminatedBuffer(this.scrambleBuff2);

	  if (this.pluginData !== undefined) {
	    writer.writeNullTerminatedString(this.pluginData);
	  }
	};

	HandshakeInitializationPacket.prototype.scrambleBuff = function() {
	  var buffer = new Buffer(this.scrambleBuff1.length +
	                          (typeof this.scrambleBuff2 != "undefined" ? this.scrambleBuff2.length : 0));

	  this.scrambleBuff1.copy(buffer);
	  if (typeof this.scrambleBuff2 != "undefined") {
	    this.scrambleBuff2.copy(buffer, this.scrambleBuff1.length);
	  }

	  return buffer;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 401 */
/***/ function(module, exports) {

	module.exports = LocalDataFilePacket;
	/**
	 * @param {Buffer} data
	 */
	function LocalDataFilePacket(data) {
	  this.data = data;
	}

	LocalDataFilePacket.prototype.write = function(writer) {
	  writer.writeBuffer(this.data);
	};


/***/ },
/* 402 */
/***/ function(module, exports) {

	module.exports = OkPacket;
	function OkPacket(options) {
	  options = options || {};

	  this.fieldCount   = undefined;
	  this.affectedRows = undefined;
	  this.insertId     = undefined;
	  this.serverStatus = undefined;
	  this.warningCount = undefined;
	  this.message      = undefined;
	  this.protocol41   = options.protocol41;
	}

	OkPacket.prototype.parse = function(parser) {
	  this.fieldCount   = parser.parseUnsignedNumber(1);
	  this.affectedRows = parser.parseLengthCodedNumber();
	  this.insertId     = parser.parseLengthCodedNumber();
	  if (this.protocol41) {
	    this.serverStatus = parser.parseUnsignedNumber(2);
	    this.warningCount = parser.parseUnsignedNumber(2);
	  }
	  this.message      = parser.parsePacketTerminatedString();
	  this.changedRows  = 0;

	  var m = this.message.match(/\schanged:\s*(\d+)/i);

	  if (m !== null) {
	    this.changedRows = parseInt(m[1], 10);
	  }
	};

	OkPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, 0x00);
	  writer.writeLengthCodedNumber(this.affectedRows || 0);
	  writer.writeLengthCodedNumber(this.insertId || 0);
	  if (this.protocol41) {
	    writer.writeUnsignedNumber(2, this.serverStatus || 0);
	    writer.writeUnsignedNumber(2, this.warningCount || 0);
	  }
	  writer.writeString(this.message);
	};


/***/ },
/* 403 */
/***/ function(module, exports) {

	module.exports = OldPasswordPacket;
	function OldPasswordPacket(options) {
	  options = options || {};

	  this.scrambleBuff = options.scrambleBuff;
	}

	OldPasswordPacket.prototype.parse = function(parser) {
	  this.scrambleBuff = parser.parseNullTerminatedBuffer();
	};

	OldPasswordPacket.prototype.write = function(writer) {
	  writer.writeBuffer(this.scrambleBuff);
	  writer.writeFiller(1);
	};


/***/ },
/* 404 */
/***/ function(module, exports) {

	module.exports = ResultSetHeaderPacket;
	function ResultSetHeaderPacket(options) {
	  options = options || {};

	  this.fieldCount = options.fieldCount;
	  this.extra      = options.extra;
	}

	ResultSetHeaderPacket.prototype.parse = function(parser) {
	  this.fieldCount = parser.parseLengthCodedNumber();

	  if (parser.reachedPacketEnd()) return;

	  this.extra = (this.fieldCount === null)
	    ? parser.parsePacketTerminatedString()
	    : parser.parseLengthCodedNumber();
	};

	ResultSetHeaderPacket.prototype.write = function(writer) {
	  writer.writeLengthCodedNumber(this.fieldCount);

	  if (this.extra !== undefined) {
	    writer.writeLengthCodedNumber(this.extra);
	  }
	};


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var Types                        = __webpack_require__(398);
	var Charsets                     = __webpack_require__(378);
	var Field                        = __webpack_require__(397);
	var IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);

	module.exports = RowDataPacket;
	function RowDataPacket() {
	}

	Object.defineProperty(RowDataPacket.prototype, 'parse', {
	  configurable: true,
	  enumerable: false,
	  value: parse
	});

	Object.defineProperty(RowDataPacket.prototype, '_typeCast', {
	  configurable: true,
	  enumerable: false,
	  value: typeCast
	});

	function parse(parser, fieldPackets, typeCast, nestTables, connection) {
	  var self = this;
	  var next = function () {
	    return self._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings);
	  };

	  for (var i = 0; i < fieldPackets.length; i++) {
	    var fieldPacket = fieldPackets[i];
	    var value;

	    if (typeof typeCast == "function") {
	      value = typeCast.apply(connection, [ new Field({ packet: fieldPacket, parser: parser }), next ]);
	    } else {
	      value = (typeCast)
	        ? this._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings)
	        : ( (fieldPacket.charsetNr === Charsets.BINARY)
	          ? parser.parseLengthCodedBuffer()
	          : parser.parseLengthCodedString() );
	    }

	    if (typeof nestTables == "string" && nestTables.length) {
	      this[fieldPacket.table + nestTables + fieldPacket.name] = value;
	    } else if (nestTables) {
	      this[fieldPacket.table] = this[fieldPacket.table] || {};
	      this[fieldPacket.table][fieldPacket.name] = value;
	    } else {
	      this[fieldPacket.name] = value;
	    }
	  }
	}

	function typeCast(field, parser, timeZone, supportBigNumbers, bigNumberStrings, dateStrings) {
	  var numberString;

	  switch (field.type) {
	    case Types.TIMESTAMP:
	    case Types.TIMESTAMP2:
	    case Types.DATE:
	    case Types.DATETIME:
	    case Types.DATETIME2:
	    case Types.NEWDATE:
	      var dateString = parser.parseLengthCodedString();
	      if (dateStrings) {
	          return dateString;
	      }
	      var dt;

	      if (dateString === null) {
	        return null;
	      }

	      var originalString = dateString;
	      if (field.type === Types.DATE) {
	        dateString += ' 00:00:00';
	      }

	      if (timeZone !== 'local') {
	        dateString += ' ' + timeZone;
	      }

	      dt = new Date(dateString);
	      if (isNaN(dt.getTime())) {
	        return originalString;
	      }

	      return dt;
	    case Types.TINY:
	    case Types.SHORT:
	    case Types.LONG:
	    case Types.INT24:
	    case Types.YEAR:
	    case Types.FLOAT:
	    case Types.DOUBLE:
	      numberString = parser.parseLengthCodedString();
	      return (numberString === null || (field.zeroFill && numberString[0] == "0"))
	        ? numberString : Number(numberString);
	    case Types.NEWDECIMAL:
	    case Types.LONGLONG:
	      numberString = parser.parseLengthCodedString();
	      return (numberString === null || (field.zeroFill && numberString[0] == "0"))
	        ? numberString
	        : ((supportBigNumbers && (bigNumberStrings || (Number(numberString) > IEEE_754_BINARY_64_PRECISION)))
	          ? numberString
	          : Number(numberString));
	    case Types.BIT:
	      return parser.parseLengthCodedBuffer();
	    case Types.STRING:
	    case Types.VAR_STRING:
	    case Types.TINY_BLOB:
	    case Types.MEDIUM_BLOB:
	    case Types.LONG_BLOB:
	    case Types.BLOB:
	      return (field.charsetNr === Charsets.BINARY)
	        ? parser.parseLengthCodedBuffer()
	        : parser.parseLengthCodedString();
	    case Types.GEOMETRY:
	      return parser.parseGeometryValue();
	    default:
	      return parser.parseLengthCodedString();
	  }
	}


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	// http://dev.mysql.com/doc/internals/en/ssl.html
	// http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::SSLRequest

	var ClientConstants = __webpack_require__(377);

	module.exports = SSLRequestPacket;

	function SSLRequestPacket(options) {
	  options = options || {};
	  this.clientFlags   = options.clientFlags | ClientConstants.CLIENT_SSL;
	  this.maxPacketSize = options.maxPacketSize;
	  this.charsetNumber = options.charsetNumber;
	}

	SSLRequestPacket.prototype.parse = function(parser) {
	  // TODO: check SSLRequest packet v41 vs pre v41
	  this.clientFlags   = parser.parseUnsignedNumber(4);
	  this.maxPacketSize = parser.parseUnsignedNumber(4);
	  this.charsetNumber = parser.parseUnsignedNumber(1);
	};

	SSLRequestPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(4, this.clientFlags);
	  writer.writeUnsignedNumber(4, this.maxPacketSize);
	  writer.writeUnsignedNumber(1, this.charsetNumber);
	  writer.writeFiller(23);
	};


/***/ },
/* 407 */
/***/ function(module, exports) {

	module.exports = StatisticsPacket;
	function StatisticsPacket() {
	  this.message      = undefined;
	}

	StatisticsPacket.prototype.parse = function(parser) {
	  this.message      = parser.parsePacketTerminatedString();

	  var items = this.message.split(/\s\s/);
	  for (var i = 0; i < items.length; i++) {
	    var m = items[i].match(/^(.+)\:\s+(.+)$/);
	    if (m !== null) {
	      this[m[1].toLowerCase().replace(/\s/g, '_')] = Number(m[2]);
	    }
	  }
	};

	StatisticsPacket.prototype.write = function(writer) {
	  writer.writeString(this.message);
	};


/***/ },
/* 408 */
/***/ function(module, exports) {

	module.exports = UseOldPasswordPacket;
	function UseOldPasswordPacket(options) {
	  options = options || {};

	  this.firstByte = options.firstByte || 0xfe;
	}

	UseOldPasswordPacket.prototype.parse = function(parser) {
	  this.firstByte = parser.parseUnsignedNumber(1);
	};

	UseOldPasswordPacket.prototype.write = function(writer) {
	  writer.writeUnsignedNumber(1, this.firstByte);
	};


/***/ },
/* 409 */
/***/ function(module, exports) {

	/**
	 * MySQL error constants
	 *
	 * !! Generated by generate-error-constants.js, do not modify by hand !!
	 */

	exports.EE_CANTCREATEFILE                                                                = 1;
	exports.EE_READ                                                                          = 2;
	exports.EE_WRITE                                                                         = 3;
	exports.EE_BADCLOSE                                                                      = 4;
	exports.EE_OUTOFMEMORY                                                                   = 5;
	exports.EE_DELETE                                                                        = 6;
	exports.EE_LINK                                                                          = 7;
	exports.EE_EOFERR                                                                        = 9;
	exports.EE_CANTLOCK                                                                      = 10;
	exports.EE_CANTUNLOCK                                                                    = 11;
	exports.EE_DIR                                                                           = 12;
	exports.EE_STAT                                                                          = 13;
	exports.EE_CANT_CHSIZE                                                                   = 14;
	exports.EE_CANT_OPEN_STREAM                                                              = 15;
	exports.EE_GETWD                                                                         = 16;
	exports.EE_SETWD                                                                         = 17;
	exports.EE_LINK_WARNING                                                                  = 18;
	exports.EE_OPEN_WARNING                                                                  = 19;
	exports.EE_DISK_FULL                                                                     = 20;
	exports.EE_CANT_MKDIR                                                                    = 21;
	exports.EE_UNKNOWN_CHARSET                                                               = 22;
	exports.EE_OUT_OF_FILERESOURCES                                                          = 23;
	exports.EE_CANT_READLINK                                                                 = 24;
	exports.EE_CANT_SYMLINK                                                                  = 25;
	exports.EE_REALPATH                                                                      = 26;
	exports.EE_SYNC                                                                          = 27;
	exports.EE_UNKNOWN_COLLATION                                                             = 28;
	exports.EE_FILENOTFOUND                                                                  = 29;
	exports.EE_FILE_NOT_CLOSED                                                               = 30;
	exports.EE_CHANGE_OWNERSHIP                                                              = 31;
	exports.EE_CHANGE_PERMISSIONS                                                            = 32;
	exports.EE_CANT_SEEK                                                                     = 33;
	exports.EE_CAPACITY_EXCEEDED                                                             = 34;
	exports.HA_ERR_KEY_NOT_FOUND                                                             = 120;
	exports.HA_ERR_FOUND_DUPP_KEY                                                            = 121;
	exports.HA_ERR_INTERNAL_ERROR                                                            = 122;
	exports.HA_ERR_RECORD_CHANGED                                                            = 123;
	exports.HA_ERR_WRONG_INDEX                                                               = 124;
	exports.HA_ERR_CRASHED                                                                   = 126;
	exports.HA_ERR_WRONG_IN_RECORD                                                           = 127;
	exports.HA_ERR_OUT_OF_MEM                                                                = 128;
	exports.HA_ERR_NOT_A_TABLE                                                               = 130;
	exports.HA_ERR_WRONG_COMMAND                                                             = 131;
	exports.HA_ERR_OLD_FILE                                                                  = 132;
	exports.HA_ERR_NO_ACTIVE_RECORD                                                          = 133;
	exports.HA_ERR_RECORD_DELETED                                                            = 134;
	exports.HA_ERR_RECORD_FILE_FULL                                                          = 135;
	exports.HA_ERR_INDEX_FILE_FULL                                                           = 136;
	exports.HA_ERR_END_OF_FILE                                                               = 137;
	exports.HA_ERR_UNSUPPORTED                                                               = 138;
	exports.HA_ERR_TOO_BIG_ROW                                                               = 139;
	exports.HA_WRONG_CREATE_OPTION                                                           = 140;
	exports.HA_ERR_FOUND_DUPP_UNIQUE                                                         = 141;
	exports.HA_ERR_UNKNOWN_CHARSET                                                           = 142;
	exports.HA_ERR_WRONG_MRG_TABLE_DEF                                                       = 143;
	exports.HA_ERR_CRASHED_ON_REPAIR                                                         = 144;
	exports.HA_ERR_CRASHED_ON_USAGE                                                          = 145;
	exports.HA_ERR_LOCK_WAIT_TIMEOUT                                                         = 146;
	exports.HA_ERR_LOCK_TABLE_FULL                                                           = 147;
	exports.HA_ERR_READ_ONLY_TRANSACTION                                                     = 148;
	exports.HA_ERR_LOCK_DEADLOCK                                                             = 149;
	exports.HA_ERR_CANNOT_ADD_FOREIGN                                                        = 150;
	exports.HA_ERR_NO_REFERENCED_ROW                                                         = 151;
	exports.HA_ERR_ROW_IS_REFERENCED                                                         = 152;
	exports.HA_ERR_NO_SAVEPOINT                                                              = 153;
	exports.HA_ERR_NON_UNIQUE_BLOCK_SIZE                                                     = 154;
	exports.HA_ERR_NO_SUCH_TABLE                                                             = 155;
	exports.HA_ERR_TABLE_EXIST                                                               = 156;
	exports.HA_ERR_NO_CONNECTION                                                             = 157;
	exports.HA_ERR_NULL_IN_SPATIAL                                                           = 158;
	exports.HA_ERR_TABLE_DEF_CHANGED                                                         = 159;
	exports.HA_ERR_NO_PARTITION_FOUND                                                        = 160;
	exports.HA_ERR_RBR_LOGGING_FAILED                                                        = 161;
	exports.HA_ERR_DROP_INDEX_FK                                                             = 162;
	exports.HA_ERR_FOREIGN_DUPLICATE_KEY                                                     = 163;
	exports.HA_ERR_TABLE_NEEDS_UPGRADE                                                       = 164;
	exports.HA_ERR_TABLE_READONLY                                                            = 165;
	exports.HA_ERR_AUTOINC_READ_FAILED                                                       = 166;
	exports.HA_ERR_AUTOINC_ERANGE                                                            = 167;
	exports.HA_ERR_GENERIC                                                                   = 168;
	exports.HA_ERR_RECORD_IS_THE_SAME                                                        = 169;
	exports.HA_ERR_LOGGING_IMPOSSIBLE                                                        = 170;
	exports.HA_ERR_CORRUPT_EVENT                                                             = 171;
	exports.HA_ERR_NEW_FILE                                                                  = 172;
	exports.HA_ERR_ROWS_EVENT_APPLY                                                          = 173;
	exports.HA_ERR_INITIALIZATION                                                            = 174;
	exports.HA_ERR_FILE_TOO_SHORT                                                            = 175;
	exports.HA_ERR_WRONG_CRC                                                                 = 176;
	exports.HA_ERR_TOO_MANY_CONCURRENT_TRXS                                                  = 177;
	exports.HA_ERR_NOT_IN_LOCK_PARTITIONS                                                    = 178;
	exports.HA_ERR_INDEX_COL_TOO_LONG                                                        = 179;
	exports.HA_ERR_INDEX_CORRUPT                                                             = 180;
	exports.HA_ERR_UNDO_REC_TOO_BIG                                                          = 181;
	exports.HA_FTS_INVALID_DOCID                                                             = 182;
	exports.HA_ERR_TABLE_IN_FK_CHECK                                                         = 183;
	exports.HA_ERR_TABLESPACE_EXISTS                                                         = 184;
	exports.HA_ERR_TOO_MANY_FIELDS                                                           = 185;
	exports.HA_ERR_ROW_IN_WRONG_PARTITION                                                    = 186;
	exports.HA_ERR_INNODB_READ_ONLY                                                          = 187;
	exports.HA_ERR_FTS_EXCEED_RESULT_CACHE_LIMIT                                             = 188;
	exports.HA_ERR_TEMP_FILE_WRITE_FAILURE                                                   = 189;
	exports.HA_ERR_INNODB_FORCED_RECOVERY                                                    = 190;
	exports.HA_ERR_FTS_TOO_MANY_WORDS_IN_PHRASE                                              = 191;
	exports.HA_ERR_FK_DEPTH_EXCEEDED                                                         = 192;
	exports.HA_MISSING_CREATE_OPTION                                                         = 193;
	exports.HA_ERR_SE_OUT_OF_MEMORY                                                          = 194;
	exports.HA_ERR_TABLE_CORRUPT                                                             = 195;
	exports.HA_ERR_QUERY_INTERRUPTED                                                         = 196;
	exports.HA_ERR_TABLESPACE_MISSING                                                        = 197;
	exports.HA_ERR_TABLESPACE_IS_NOT_EMPTY                                                   = 198;
	exports.HA_ERR_WRONG_FILE_NAME                                                           = 199;
	exports.HA_ERR_NOT_ALLOWED_COMMAND                                                       = 200;
	exports.HA_ERR_COMPUTE_FAILED                                                            = 201;
	exports.ER_HASHCHK                                                                       = 1000;
	exports.ER_NISAMCHK                                                                      = 1001;
	exports.ER_NO                                                                            = 1002;
	exports.ER_YES                                                                           = 1003;
	exports.ER_CANT_CREATE_FILE                                                              = 1004;
	exports.ER_CANT_CREATE_TABLE                                                             = 1005;
	exports.ER_CANT_CREATE_DB                                                                = 1006;
	exports.ER_DB_CREATE_EXISTS                                                              = 1007;
	exports.ER_DB_DROP_EXISTS                                                                = 1008;
	exports.ER_DB_DROP_DELETE                                                                = 1009;
	exports.ER_DB_DROP_RMDIR                                                                 = 1010;
	exports.ER_CANT_DELETE_FILE                                                              = 1011;
	exports.ER_CANT_FIND_SYSTEM_REC                                                          = 1012;
	exports.ER_CANT_GET_STAT                                                                 = 1013;
	exports.ER_CANT_GET_WD                                                                   = 1014;
	exports.ER_CANT_LOCK                                                                     = 1015;
	exports.ER_CANT_OPEN_FILE                                                                = 1016;
	exports.ER_FILE_NOT_FOUND                                                                = 1017;
	exports.ER_CANT_READ_DIR                                                                 = 1018;
	exports.ER_CANT_SET_WD                                                                   = 1019;
	exports.ER_CHECKREAD                                                                     = 1020;
	exports.ER_DISK_FULL                                                                     = 1021;
	exports.ER_DUP_KEY                                                                       = 1022;
	exports.ER_ERROR_ON_CLOSE                                                                = 1023;
	exports.ER_ERROR_ON_READ                                                                 = 1024;
	exports.ER_ERROR_ON_RENAME                                                               = 1025;
	exports.ER_ERROR_ON_WRITE                                                                = 1026;
	exports.ER_FILE_USED                                                                     = 1027;
	exports.ER_FILSORT_ABORT                                                                 = 1028;
	exports.ER_FORM_NOT_FOUND                                                                = 1029;
	exports.ER_GET_ERRNO                                                                     = 1030;
	exports.ER_ILLEGAL_HA                                                                    = 1031;
	exports.ER_KEY_NOT_FOUND                                                                 = 1032;
	exports.ER_NOT_FORM_FILE                                                                 = 1033;
	exports.ER_NOT_KEYFILE                                                                   = 1034;
	exports.ER_OLD_KEYFILE                                                                   = 1035;
	exports.ER_OPEN_AS_READONLY                                                              = 1036;
	exports.ER_OUTOFMEMORY                                                                   = 1037;
	exports.ER_OUT_OF_SORTMEMORY                                                             = 1038;
	exports.ER_UNEXPECTED_EOF                                                                = 1039;
	exports.ER_CON_COUNT_ERROR                                                               = 1040;
	exports.ER_OUT_OF_RESOURCES                                                              = 1041;
	exports.ER_BAD_HOST_ERROR                                                                = 1042;
	exports.ER_HANDSHAKE_ERROR                                                               = 1043;
	exports.ER_DBACCESS_DENIED_ERROR                                                         = 1044;
	exports.ER_ACCESS_DENIED_ERROR                                                           = 1045;
	exports.ER_NO_DB_ERROR                                                                   = 1046;
	exports.ER_UNKNOWN_COM_ERROR                                                             = 1047;
	exports.ER_BAD_NULL_ERROR                                                                = 1048;
	exports.ER_BAD_DB_ERROR                                                                  = 1049;
	exports.ER_TABLE_EXISTS_ERROR                                                            = 1050;
	exports.ER_BAD_TABLE_ERROR                                                               = 1051;
	exports.ER_NON_UNIQ_ERROR                                                                = 1052;
	exports.ER_SERVER_SHUTDOWN                                                               = 1053;
	exports.ER_BAD_FIELD_ERROR                                                               = 1054;
	exports.ER_WRONG_FIELD_WITH_GROUP                                                        = 1055;
	exports.ER_WRONG_GROUP_FIELD                                                             = 1056;
	exports.ER_WRONG_SUM_SELECT                                                              = 1057;
	exports.ER_WRONG_VALUE_COUNT                                                             = 1058;
	exports.ER_TOO_LONG_IDENT                                                                = 1059;
	exports.ER_DUP_FIELDNAME                                                                 = 1060;
	exports.ER_DUP_KEYNAME                                                                   = 1061;
	exports.ER_DUP_ENTRY                                                                     = 1062;
	exports.ER_WRONG_FIELD_SPEC                                                              = 1063;
	exports.ER_PARSE_ERROR                                                                   = 1064;
	exports.ER_EMPTY_QUERY                                                                   = 1065;
	exports.ER_NONUNIQ_TABLE                                                                 = 1066;
	exports.ER_INVALID_DEFAULT                                                               = 1067;
	exports.ER_MULTIPLE_PRI_KEY                                                              = 1068;
	exports.ER_TOO_MANY_KEYS                                                                 = 1069;
	exports.ER_TOO_MANY_KEY_PARTS                                                            = 1070;
	exports.ER_TOO_LONG_KEY                                                                  = 1071;
	exports.ER_KEY_COLUMN_DOES_NOT_EXITS                                                     = 1072;
	exports.ER_BLOB_USED_AS_KEY                                                              = 1073;
	exports.ER_TOO_BIG_FIELDLENGTH                                                           = 1074;
	exports.ER_WRONG_AUTO_KEY                                                                = 1075;
	exports.ER_READY                                                                         = 1076;
	exports.ER_NORMAL_SHUTDOWN                                                               = 1077;
	exports.ER_GOT_SIGNAL                                                                    = 1078;
	exports.ER_SHUTDOWN_COMPLETE                                                             = 1079;
	exports.ER_FORCING_CLOSE                                                                 = 1080;
	exports.ER_IPSOCK_ERROR                                                                  = 1081;
	exports.ER_NO_SUCH_INDEX                                                                 = 1082;
	exports.ER_WRONG_FIELD_TERMINATORS                                                       = 1083;
	exports.ER_BLOBS_AND_NO_TERMINATED                                                       = 1084;
	exports.ER_TEXTFILE_NOT_READABLE                                                         = 1085;
	exports.ER_FILE_EXISTS_ERROR                                                             = 1086;
	exports.ER_LOAD_INFO                                                                     = 1087;
	exports.ER_ALTER_INFO                                                                    = 1088;
	exports.ER_WRONG_SUB_KEY                                                                 = 1089;
	exports.ER_CANT_REMOVE_ALL_FIELDS                                                        = 1090;
	exports.ER_CANT_DROP_FIELD_OR_KEY                                                        = 1091;
	exports.ER_INSERT_INFO                                                                   = 1092;
	exports.ER_UPDATE_TABLE_USED                                                             = 1093;
	exports.ER_NO_SUCH_THREAD                                                                = 1094;
	exports.ER_KILL_DENIED_ERROR                                                             = 1095;
	exports.ER_NO_TABLES_USED                                                                = 1096;
	exports.ER_TOO_BIG_SET                                                                   = 1097;
	exports.ER_NO_UNIQUE_LOGFILE                                                             = 1098;
	exports.ER_TABLE_NOT_LOCKED_FOR_WRITE                                                    = 1099;
	exports.ER_TABLE_NOT_LOCKED                                                              = 1100;
	exports.ER_BLOB_CANT_HAVE_DEFAULT                                                        = 1101;
	exports.ER_WRONG_DB_NAME                                                                 = 1102;
	exports.ER_WRONG_TABLE_NAME                                                              = 1103;
	exports.ER_TOO_BIG_SELECT                                                                = 1104;
	exports.ER_UNKNOWN_ERROR                                                                 = 1105;
	exports.ER_UNKNOWN_PROCEDURE                                                             = 1106;
	exports.ER_WRONG_PARAMCOUNT_TO_PROCEDURE                                                 = 1107;
	exports.ER_WRONG_PARAMETERS_TO_PROCEDURE                                                 = 1108;
	exports.ER_UNKNOWN_TABLE                                                                 = 1109;
	exports.ER_FIELD_SPECIFIED_TWICE                                                         = 1110;
	exports.ER_INVALID_GROUP_FUNC_USE                                                        = 1111;
	exports.ER_UNSUPPORTED_EXTENSION                                                         = 1112;
	exports.ER_TABLE_MUST_HAVE_COLUMNS                                                       = 1113;
	exports.ER_RECORD_FILE_FULL                                                              = 1114;
	exports.ER_UNKNOWN_CHARACTER_SET                                                         = 1115;
	exports.ER_TOO_MANY_TABLES                                                               = 1116;
	exports.ER_TOO_MANY_FIELDS                                                               = 1117;
	exports.ER_TOO_BIG_ROWSIZE                                                               = 1118;
	exports.ER_STACK_OVERRUN                                                                 = 1119;
	exports.ER_WRONG_OUTER_JOIN                                                              = 1120;
	exports.ER_NULL_COLUMN_IN_INDEX                                                          = 1121;
	exports.ER_CANT_FIND_UDF                                                                 = 1122;
	exports.ER_CANT_INITIALIZE_UDF                                                           = 1123;
	exports.ER_UDF_NO_PATHS                                                                  = 1124;
	exports.ER_UDF_EXISTS                                                                    = 1125;
	exports.ER_CANT_OPEN_LIBRARY                                                             = 1126;
	exports.ER_CANT_FIND_DL_ENTRY                                                            = 1127;
	exports.ER_FUNCTION_NOT_DEFINED                                                          = 1128;
	exports.ER_HOST_IS_BLOCKED                                                               = 1129;
	exports.ER_HOST_NOT_PRIVILEGED                                                           = 1130;
	exports.ER_PASSWORD_ANONYMOUS_USER                                                       = 1131;
	exports.ER_PASSWORD_NOT_ALLOWED                                                          = 1132;
	exports.ER_PASSWORD_NO_MATCH                                                             = 1133;
	exports.ER_UPDATE_INFO                                                                   = 1134;
	exports.ER_CANT_CREATE_THREAD                                                            = 1135;
	exports.ER_WRONG_VALUE_COUNT_ON_ROW                                                      = 1136;
	exports.ER_CANT_REOPEN_TABLE                                                             = 1137;
	exports.ER_INVALID_USE_OF_NULL                                                           = 1138;
	exports.ER_REGEXP_ERROR                                                                  = 1139;
	exports.ER_MIX_OF_GROUP_FUNC_AND_FIELDS                                                  = 1140;
	exports.ER_NONEXISTING_GRANT                                                             = 1141;
	exports.ER_TABLEACCESS_DENIED_ERROR                                                      = 1142;
	exports.ER_COLUMNACCESS_DENIED_ERROR                                                     = 1143;
	exports.ER_ILLEGAL_GRANT_FOR_TABLE                                                       = 1144;
	exports.ER_GRANT_WRONG_HOST_OR_USER                                                      = 1145;
	exports.ER_NO_SUCH_TABLE                                                                 = 1146;
	exports.ER_NONEXISTING_TABLE_GRANT                                                       = 1147;
	exports.ER_NOT_ALLOWED_COMMAND                                                           = 1148;
	exports.ER_SYNTAX_ERROR                                                                  = 1149;
	exports.ER_DELAYED_CANT_CHANGE_LOCK                                                      = 1150;
	exports.ER_TOO_MANY_DELAYED_THREADS                                                      = 1151;
	exports.ER_ABORTING_CONNECTION                                                           = 1152;
	exports.ER_NET_PACKET_TOO_LARGE                                                          = 1153;
	exports.ER_NET_READ_ERROR_FROM_PIPE                                                      = 1154;
	exports.ER_NET_FCNTL_ERROR                                                               = 1155;
	exports.ER_NET_PACKETS_OUT_OF_ORDER                                                      = 1156;
	exports.ER_NET_UNCOMPRESS_ERROR                                                          = 1157;
	exports.ER_NET_READ_ERROR                                                                = 1158;
	exports.ER_NET_READ_INTERRUPTED                                                          = 1159;
	exports.ER_NET_ERROR_ON_WRITE                                                            = 1160;
	exports.ER_NET_WRITE_INTERRUPTED                                                         = 1161;
	exports.ER_TOO_LONG_STRING                                                               = 1162;
	exports.ER_TABLE_CANT_HANDLE_BLOB                                                        = 1163;
	exports.ER_TABLE_CANT_HANDLE_AUTO_INCREMENT                                              = 1164;
	exports.ER_DELAYED_INSERT_TABLE_LOCKED                                                   = 1165;
	exports.ER_WRONG_COLUMN_NAME                                                             = 1166;
	exports.ER_WRONG_KEY_COLUMN                                                              = 1167;
	exports.ER_WRONG_MRG_TABLE                                                               = 1168;
	exports.ER_DUP_UNIQUE                                                                    = 1169;
	exports.ER_BLOB_KEY_WITHOUT_LENGTH                                                       = 1170;
	exports.ER_PRIMARY_CANT_HAVE_NULL                                                        = 1171;
	exports.ER_TOO_MANY_ROWS                                                                 = 1172;
	exports.ER_REQUIRES_PRIMARY_KEY                                                          = 1173;
	exports.ER_NO_RAID_COMPILED                                                              = 1174;
	exports.ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE                                               = 1175;
	exports.ER_KEY_DOES_NOT_EXITS                                                            = 1176;
	exports.ER_CHECK_NO_SUCH_TABLE                                                           = 1177;
	exports.ER_CHECK_NOT_IMPLEMENTED                                                         = 1178;
	exports.ER_CANT_DO_THIS_DURING_AN_TRANSACTION                                            = 1179;
	exports.ER_ERROR_DURING_COMMIT                                                           = 1180;
	exports.ER_ERROR_DURING_ROLLBACK                                                         = 1181;
	exports.ER_ERROR_DURING_FLUSH_LOGS                                                       = 1182;
	exports.ER_ERROR_DURING_CHECKPOINT                                                       = 1183;
	exports.ER_NEW_ABORTING_CONNECTION                                                       = 1184;
	exports.ER_DUMP_NOT_IMPLEMENTED                                                          = 1185;
	exports.ER_FLUSH_MASTER_BINLOG_CLOSED                                                    = 1186;
	exports.ER_INDEX_REBUILD                                                                 = 1187;
	exports.ER_MASTER                                                                        = 1188;
	exports.ER_MASTER_NET_READ                                                               = 1189;
	exports.ER_MASTER_NET_WRITE                                                              = 1190;
	exports.ER_FT_MATCHING_KEY_NOT_FOUND                                                     = 1191;
	exports.ER_LOCK_OR_ACTIVE_TRANSACTION                                                    = 1192;
	exports.ER_UNKNOWN_SYSTEM_VARIABLE                                                       = 1193;
	exports.ER_CRASHED_ON_USAGE                                                              = 1194;
	exports.ER_CRASHED_ON_REPAIR                                                             = 1195;
	exports.ER_WARNING_NOT_COMPLETE_ROLLBACK                                                 = 1196;
	exports.ER_TRANS_CACHE_FULL                                                              = 1197;
	exports.ER_SLAVE_MUST_STOP                                                               = 1198;
	exports.ER_SLAVE_NOT_RUNNING                                                             = 1199;
	exports.ER_BAD_SLAVE                                                                     = 1200;
	exports.ER_MASTER_INFO                                                                   = 1201;
	exports.ER_SLAVE_THREAD                                                                  = 1202;
	exports.ER_TOO_MANY_USER_CONNECTIONS                                                     = 1203;
	exports.ER_SET_CONSTANTS_ONLY                                                            = 1204;
	exports.ER_LOCK_WAIT_TIMEOUT                                                             = 1205;
	exports.ER_LOCK_TABLE_FULL                                                               = 1206;
	exports.ER_READ_ONLY_TRANSACTION                                                         = 1207;
	exports.ER_DROP_DB_WITH_READ_LOCK                                                        = 1208;
	exports.ER_CREATE_DB_WITH_READ_LOCK                                                      = 1209;
	exports.ER_WRONG_ARGUMENTS                                                               = 1210;
	exports.ER_NO_PERMISSION_TO_CREATE_USER                                                  = 1211;
	exports.ER_UNION_TABLES_IN_DIFFERENT_DIR                                                 = 1212;
	exports.ER_LOCK_DEADLOCK                                                                 = 1213;
	exports.ER_TABLE_CANT_HANDLE_FT                                                          = 1214;
	exports.ER_CANNOT_ADD_FOREIGN                                                            = 1215;
	exports.ER_NO_REFERENCED_ROW                                                             = 1216;
	exports.ER_ROW_IS_REFERENCED                                                             = 1217;
	exports.ER_CONNECT_TO_MASTER                                                             = 1218;
	exports.ER_QUERY_ON_MASTER                                                               = 1219;
	exports.ER_ERROR_WHEN_EXECUTING_COMMAND                                                  = 1220;
	exports.ER_WRONG_USAGE                                                                   = 1221;
	exports.ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT                                             = 1222;
	exports.ER_CANT_UPDATE_WITH_READLOCK                                                     = 1223;
	exports.ER_MIXING_NOT_ALLOWED                                                            = 1224;
	exports.ER_DUP_ARGUMENT                                                                  = 1225;
	exports.ER_USER_LIMIT_REACHED                                                            = 1226;
	exports.ER_SPECIFIC_ACCESS_DENIED_ERROR                                                  = 1227;
	exports.ER_LOCAL_VARIABLE                                                                = 1228;
	exports.ER_GLOBAL_VARIABLE                                                               = 1229;
	exports.ER_NO_DEFAULT                                                                    = 1230;
	exports.ER_WRONG_VALUE_FOR_VAR                                                           = 1231;
	exports.ER_WRONG_TYPE_FOR_VAR                                                            = 1232;
	exports.ER_VAR_CANT_BE_READ                                                              = 1233;
	exports.ER_CANT_USE_OPTION_HERE                                                          = 1234;
	exports.ER_NOT_SUPPORTED_YET                                                             = 1235;
	exports.ER_MASTER_FATAL_ERROR_READING_BINLOG                                             = 1236;
	exports.ER_SLAVE_IGNORED_TABLE                                                           = 1237;
	exports.ER_INCORRECT_GLOBAL_LOCAL_VAR                                                    = 1238;
	exports.ER_WRONG_FK_DEF                                                                  = 1239;
	exports.ER_KEY_REF_DO_NOT_MATCH_TABLE_REF                                                = 1240;
	exports.ER_OPERAND_COLUMNS                                                               = 1241;
	exports.ER_SUBQUERY_NO_1_ROW                                                             = 1242;
	exports.ER_UNKNOWN_STMT_HANDLER                                                          = 1243;
	exports.ER_CORRUPT_HELP_DB                                                               = 1244;
	exports.ER_CYCLIC_REFERENCE                                                              = 1245;
	exports.ER_AUTO_CONVERT                                                                  = 1246;
	exports.ER_ILLEGAL_REFERENCE                                                             = 1247;
	exports.ER_DERIVED_MUST_HAVE_ALIAS                                                       = 1248;
	exports.ER_SELECT_REDUCED                                                                = 1249;
	exports.ER_TABLENAME_NOT_ALLOWED_HERE                                                    = 1250;
	exports.ER_NOT_SUPPORTED_AUTH_MODE                                                       = 1251;
	exports.ER_SPATIAL_CANT_HAVE_NULL                                                        = 1252;
	exports.ER_COLLATION_CHARSET_MISMATCH                                                    = 1253;
	exports.ER_SLAVE_WAS_RUNNING                                                             = 1254;
	exports.ER_SLAVE_WAS_NOT_RUNNING                                                         = 1255;
	exports.ER_TOO_BIG_FOR_UNCOMPRESS                                                        = 1256;
	exports.ER_ZLIB_Z_MEM_ERROR                                                              = 1257;
	exports.ER_ZLIB_Z_BUF_ERROR                                                              = 1258;
	exports.ER_ZLIB_Z_DATA_ERROR                                                             = 1259;
	exports.ER_CUT_VALUE_GROUP_CONCAT                                                        = 1260;
	exports.ER_WARN_TOO_FEW_RECORDS                                                          = 1261;
	exports.ER_WARN_TOO_MANY_RECORDS                                                         = 1262;
	exports.ER_WARN_NULL_TO_NOTNULL                                                          = 1263;
	exports.ER_WARN_DATA_OUT_OF_RANGE                                                        = 1264;
	exports.WARN_DATA_TRUNCATED                                                              = 1265;
	exports.ER_WARN_USING_OTHER_HANDLER                                                      = 1266;
	exports.ER_CANT_AGGREGATE_2COLLATIONS                                                    = 1267;
	exports.ER_DROP_USER                                                                     = 1268;
	exports.ER_REVOKE_GRANTS                                                                 = 1269;
	exports.ER_CANT_AGGREGATE_3COLLATIONS                                                    = 1270;
	exports.ER_CANT_AGGREGATE_NCOLLATIONS                                                    = 1271;
	exports.ER_VARIABLE_IS_NOT_STRUCT                                                        = 1272;
	exports.ER_UNKNOWN_COLLATION                                                             = 1273;
	exports.ER_SLAVE_IGNORED_SSL_PARAMS                                                      = 1274;
	exports.ER_SERVER_IS_IN_SECURE_AUTH_MODE                                                 = 1275;
	exports.ER_WARN_FIELD_RESOLVED                                                           = 1276;
	exports.ER_BAD_SLAVE_UNTIL_COND                                                          = 1277;
	exports.ER_MISSING_SKIP_SLAVE                                                            = 1278;
	exports.ER_UNTIL_COND_IGNORED                                                            = 1279;
	exports.ER_WRONG_NAME_FOR_INDEX                                                          = 1280;
	exports.ER_WRONG_NAME_FOR_CATALOG                                                        = 1281;
	exports.ER_WARN_QC_RESIZE                                                                = 1282;
	exports.ER_BAD_FT_COLUMN                                                                 = 1283;
	exports.ER_UNKNOWN_KEY_CACHE                                                             = 1284;
	exports.ER_WARN_HOSTNAME_WONT_WORK                                                       = 1285;
	exports.ER_UNKNOWN_STORAGE_ENGINE                                                        = 1286;
	exports.ER_WARN_DEPRECATED_SYNTAX                                                        = 1287;
	exports.ER_NON_UPDATABLE_TABLE                                                           = 1288;
	exports.ER_FEATURE_DISABLED                                                              = 1289;
	exports.ER_OPTION_PREVENTS_STATEMENT                                                     = 1290;
	exports.ER_DUPLICATED_VALUE_IN_TYPE                                                      = 1291;
	exports.ER_TRUNCATED_WRONG_VALUE                                                         = 1292;
	exports.ER_TOO_MUCH_AUTO_TIMESTAMP_COLS                                                  = 1293;
	exports.ER_INVALID_ON_UPDATE                                                             = 1294;
	exports.ER_UNSUPPORTED_PS                                                                = 1295;
	exports.ER_GET_ERRMSG                                                                    = 1296;
	exports.ER_GET_TEMPORARY_ERRMSG                                                          = 1297;
	exports.ER_UNKNOWN_TIME_ZONE                                                             = 1298;
	exports.ER_WARN_INVALID_TIMESTAMP                                                        = 1299;
	exports.ER_INVALID_CHARACTER_STRING                                                      = 1300;
	exports.ER_WARN_ALLOWED_PACKET_OVERFLOWED                                                = 1301;
	exports.ER_CONFLICTING_DECLARATIONS                                                      = 1302;
	exports.ER_SP_NO_RECURSIVE_CREATE                                                        = 1303;
	exports.ER_SP_ALREADY_EXISTS                                                             = 1304;
	exports.ER_SP_DOES_NOT_EXIST                                                             = 1305;
	exports.ER_SP_DROP_FAILED                                                                = 1306;
	exports.ER_SP_STORE_FAILED                                                               = 1307;
	exports.ER_SP_LILABEL_MISMATCH                                                           = 1308;
	exports.ER_SP_LABEL_REDEFINE                                                             = 1309;
	exports.ER_SP_LABEL_MISMATCH                                                             = 1310;
	exports.ER_SP_UNINIT_VAR                                                                 = 1311;
	exports.ER_SP_BADSELECT                                                                  = 1312;
	exports.ER_SP_BADRETURN                                                                  = 1313;
	exports.ER_SP_BADSTATEMENT                                                               = 1314;
	exports.ER_UPDATE_LOG_DEPRECATED_IGNORED                                                 = 1315;
	exports.ER_UPDATE_LOG_DEPRECATED_TRANSLATED                                              = 1316;
	exports.ER_QUERY_INTERRUPTED                                                             = 1317;
	exports.ER_SP_WRONG_NO_OF_ARGS                                                           = 1318;
	exports.ER_SP_COND_MISMATCH                                                              = 1319;
	exports.ER_SP_NORETURN                                                                   = 1320;
	exports.ER_SP_NORETURNEND                                                                = 1321;
	exports.ER_SP_BAD_CURSOR_QUERY                                                           = 1322;
	exports.ER_SP_BAD_CURSOR_SELECT                                                          = 1323;
	exports.ER_SP_CURSOR_MISMATCH                                                            = 1324;
	exports.ER_SP_CURSOR_ALREADY_OPEN                                                        = 1325;
	exports.ER_SP_CURSOR_NOT_OPEN                                                            = 1326;
	exports.ER_SP_UNDECLARED_VAR                                                             = 1327;
	exports.ER_SP_WRONG_NO_OF_FETCH_ARGS                                                     = 1328;
	exports.ER_SP_FETCH_NO_DATA                                                              = 1329;
	exports.ER_SP_DUP_PARAM                                                                  = 1330;
	exports.ER_SP_DUP_VAR                                                                    = 1331;
	exports.ER_SP_DUP_COND                                                                   = 1332;
	exports.ER_SP_DUP_CURS                                                                   = 1333;
	exports.ER_SP_CANT_ALTER                                                                 = 1334;
	exports.ER_SP_SUBSELECT_NYI                                                              = 1335;
	exports.ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG                                                 = 1336;
	exports.ER_SP_VARCOND_AFTER_CURSHNDLR                                                    = 1337;
	exports.ER_SP_CURSOR_AFTER_HANDLER                                                       = 1338;
	exports.ER_SP_CASE_NOT_FOUND                                                             = 1339;
	exports.ER_FPARSER_TOO_BIG_FILE                                                          = 1340;
	exports.ER_FPARSER_BAD_HEADER                                                            = 1341;
	exports.ER_FPARSER_EOF_IN_COMMENT                                                        = 1342;
	exports.ER_FPARSER_ERROR_IN_PARAMETER                                                    = 1343;
	exports.ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER                                              = 1344;
	exports.ER_VIEW_NO_EXPLAIN                                                               = 1345;
	exports.ER_FRM_UNKNOWN_TYPE                                                              = 1346;
	exports.ER_WRONG_OBJECT                                                                  = 1347;
	exports.ER_NONUPDATEABLE_COLUMN                                                          = 1348;
	exports.ER_VIEW_SELECT_DERIVED                                                           = 1349;
	exports.ER_VIEW_SELECT_CLAUSE                                                            = 1350;
	exports.ER_VIEW_SELECT_VARIABLE                                                          = 1351;
	exports.ER_VIEW_SELECT_TMPTABLE                                                          = 1352;
	exports.ER_VIEW_WRONG_LIST                                                               = 1353;
	exports.ER_WARN_VIEW_MERGE                                                               = 1354;
	exports.ER_WARN_VIEW_WITHOUT_KEY                                                         = 1355;
	exports.ER_VIEW_INVALID                                                                  = 1356;
	exports.ER_SP_NO_DROP_SP                                                                 = 1357;
	exports.ER_SP_GOTO_IN_HNDLR                                                              = 1358;
	exports.ER_TRG_ALREADY_EXISTS                                                            = 1359;
	exports.ER_TRG_DOES_NOT_EXIST                                                            = 1360;
	exports.ER_TRG_ON_VIEW_OR_TEMP_TABLE                                                     = 1361;
	exports.ER_TRG_CANT_CHANGE_ROW                                                           = 1362;
	exports.ER_TRG_NO_SUCH_ROW_IN_TRG                                                        = 1363;
	exports.ER_NO_DEFAULT_FOR_FIELD                                                          = 1364;
	exports.ER_DIVISION_BY_ZERO                                                              = 1365;
	exports.ER_TRUNCATED_WRONG_VALUE_FOR_FIELD                                               = 1366;
	exports.ER_ILLEGAL_VALUE_FOR_TYPE                                                        = 1367;
	exports.ER_VIEW_NONUPD_CHECK                                                             = 1368;
	exports.ER_VIEW_CHECK_FAILED                                                             = 1369;
	exports.ER_PROCACCESS_DENIED_ERROR                                                       = 1370;
	exports.ER_RELAY_LOG_FAIL                                                                = 1371;
	exports.ER_PASSWD_LENGTH                                                                 = 1372;
	exports.ER_UNKNOWN_TARGET_BINLOG                                                         = 1373;
	exports.ER_IO_ERR_LOG_INDEX_READ                                                         = 1374;
	exports.ER_BINLOG_PURGE_PROHIBITED                                                       = 1375;
	exports.ER_FSEEK_FAIL                                                                    = 1376;
	exports.ER_BINLOG_PURGE_FATAL_ERR                                                        = 1377;
	exports.ER_LOG_IN_USE                                                                    = 1378;
	exports.ER_LOG_PURGE_UNKNOWN_ERR                                                         = 1379;
	exports.ER_RELAY_LOG_INIT                                                                = 1380;
	exports.ER_NO_BINARY_LOGGING                                                             = 1381;
	exports.ER_RESERVED_SYNTAX                                                               = 1382;
	exports.ER_WSAS_FAILED                                                                   = 1383;
	exports.ER_DIFF_GROUPS_PROC                                                              = 1384;
	exports.ER_NO_GROUP_FOR_PROC                                                             = 1385;
	exports.ER_ORDER_WITH_PROC                                                               = 1386;
	exports.ER_LOGGING_PROHIBIT_CHANGING_OF                                                  = 1387;
	exports.ER_NO_FILE_MAPPING                                                               = 1388;
	exports.ER_WRONG_MAGIC                                                                   = 1389;
	exports.ER_PS_MANY_PARAM                                                                 = 1390;
	exports.ER_KEY_PART_0                                                                    = 1391;
	exports.ER_VIEW_CHECKSUM                                                                 = 1392;
	exports.ER_VIEW_MULTIUPDATE                                                              = 1393;
	exports.ER_VIEW_NO_INSERT_FIELD_LIST                                                     = 1394;
	exports.ER_VIEW_DELETE_MERGE_VIEW                                                        = 1395;
	exports.ER_CANNOT_USER                                                                   = 1396;
	exports.ER_XAER_NOTA                                                                     = 1397;
	exports.ER_XAER_INVAL                                                                    = 1398;
	exports.ER_XAER_RMFAIL                                                                   = 1399;
	exports.ER_XAER_OUTSIDE                                                                  = 1400;
	exports.ER_XAER_RMERR                                                                    = 1401;
	exports.ER_XA_RBROLLBACK                                                                 = 1402;
	exports.ER_NONEXISTING_PROC_GRANT                                                        = 1403;
	exports.ER_PROC_AUTO_GRANT_FAIL                                                          = 1404;
	exports.ER_PROC_AUTO_REVOKE_FAIL                                                         = 1405;
	exports.ER_DATA_TOO_LONG                                                                 = 1406;
	exports.ER_SP_BAD_SQLSTATE                                                               = 1407;
	exports.ER_STARTUP                                                                       = 1408;
	exports.ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR                                              = 1409;
	exports.ER_CANT_CREATE_USER_WITH_GRANT                                                   = 1410;
	exports.ER_WRONG_VALUE_FOR_TYPE                                                          = 1411;
	exports.ER_TABLE_DEF_CHANGED                                                             = 1412;
	exports.ER_SP_DUP_HANDLER                                                                = 1413;
	exports.ER_SP_NOT_VAR_ARG                                                                = 1414;
	exports.ER_SP_NO_RETSET                                                                  = 1415;
	exports.ER_CANT_CREATE_GEOMETRY_OBJECT                                                   = 1416;
	exports.ER_FAILED_ROUTINE_BREAK_BINLOG                                                   = 1417;
	exports.ER_BINLOG_UNSAFE_ROUTINE                                                         = 1418;
	exports.ER_BINLOG_CREATE_ROUTINE_NEED_SUPER                                              = 1419;
	exports.ER_EXEC_STMT_WITH_OPEN_CURSOR                                                    = 1420;
	exports.ER_STMT_HAS_NO_OPEN_CURSOR                                                       = 1421;
	exports.ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG                                               = 1422;
	exports.ER_NO_DEFAULT_FOR_VIEW_FIELD                                                     = 1423;
	exports.ER_SP_NO_RECURSION                                                               = 1424;
	exports.ER_TOO_BIG_SCALE                                                                 = 1425;
	exports.ER_TOO_BIG_PRECISION                                                             = 1426;
	exports.ER_M_BIGGER_THAN_D                                                               = 1427;
	exports.ER_WRONG_LOCK_OF_SYSTEM_TABLE                                                    = 1428;
	exports.ER_CONNECT_TO_FOREIGN_DATA_SOURCE                                                = 1429;
	exports.ER_QUERY_ON_FOREIGN_DATA_SOURCE                                                  = 1430;
	exports.ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST                                              = 1431;
	exports.ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE                                       = 1432;
	exports.ER_FOREIGN_DATA_STRING_INVALID                                                   = 1433;
	exports.ER_CANT_CREATE_FEDERATED_TABLE                                                   = 1434;
	exports.ER_TRG_IN_WRONG_SCHEMA                                                           = 1435;
	exports.ER_STACK_OVERRUN_NEED_MORE                                                       = 1436;
	exports.ER_TOO_LONG_BODY                                                                 = 1437;
	exports.ER_WARN_CANT_DROP_DEFAULT_KEYCACHE                                               = 1438;
	exports.ER_TOO_BIG_DISPLAYWIDTH                                                          = 1439;
	exports.ER_XAER_DUPID                                                                    = 1440;
	exports.ER_DATETIME_FUNCTION_OVERFLOW                                                    = 1441;
	exports.ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG                                           = 1442;
	exports.ER_VIEW_PREVENT_UPDATE                                                           = 1443;
	exports.ER_PS_NO_RECURSION                                                               = 1444;
	exports.ER_SP_CANT_SET_AUTOCOMMIT                                                        = 1445;
	exports.ER_MALFORMED_DEFINER                                                             = 1446;
	exports.ER_VIEW_FRM_NO_USER                                                              = 1447;
	exports.ER_VIEW_OTHER_USER                                                               = 1448;
	exports.ER_NO_SUCH_USER                                                                  = 1449;
	exports.ER_FORBID_SCHEMA_CHANGE                                                          = 1450;
	exports.ER_ROW_IS_REFERENCED_2                                                           = 1451;
	exports.ER_NO_REFERENCED_ROW_2                                                           = 1452;
	exports.ER_SP_BAD_VAR_SHADOW                                                             = 1453;
	exports.ER_TRG_NO_DEFINER                                                                = 1454;
	exports.ER_OLD_FILE_FORMAT                                                               = 1455;
	exports.ER_SP_RECURSION_LIMIT                                                            = 1456;
	exports.ER_SP_PROC_TABLE_CORRUPT                                                         = 1457;
	exports.ER_SP_WRONG_NAME                                                                 = 1458;
	exports.ER_TABLE_NEEDS_UPGRADE                                                           = 1459;
	exports.ER_SP_NO_AGGREGATE                                                               = 1460;
	exports.ER_MAX_PREPARED_STMT_COUNT_REACHED                                               = 1461;
	exports.ER_VIEW_RECURSIVE                                                                = 1462;
	exports.ER_NON_GROUPING_FIELD_USED                                                       = 1463;
	exports.ER_TABLE_CANT_HANDLE_SPKEYS                                                      = 1464;
	exports.ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA                                                  = 1465;
	exports.ER_REMOVED_SPACES                                                                = 1466;
	exports.ER_AUTOINC_READ_FAILED                                                           = 1467;
	exports.ER_USERNAME                                                                      = 1468;
	exports.ER_HOSTNAME                                                                      = 1469;
	exports.ER_WRONG_STRING_LENGTH                                                           = 1470;
	exports.ER_NON_INSERTABLE_TABLE                                                          = 1471;
	exports.ER_ADMIN_WRONG_MRG_TABLE                                                         = 1472;
	exports.ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT                                          = 1473;
	exports.ER_NAME_BECOMES_EMPTY                                                            = 1474;
	exports.ER_AMBIGUOUS_FIELD_TERM                                                          = 1475;
	exports.ER_FOREIGN_SERVER_EXISTS                                                         = 1476;
	exports.ER_FOREIGN_SERVER_DOESNT_EXIST                                                   = 1477;
	exports.ER_ILLEGAL_HA_CREATE_OPTION                                                      = 1478;
	exports.ER_PARTITION_REQUIRES_VALUES_ERROR                                               = 1479;
	exports.ER_PARTITION_WRONG_VALUES_ERROR                                                  = 1480;
	exports.ER_PARTITION_MAXVALUE_ERROR                                                      = 1481;
	exports.ER_PARTITION_SUBPARTITION_ERROR                                                  = 1482;
	exports.ER_PARTITION_SUBPART_MIX_ERROR                                                   = 1483;
	exports.ER_PARTITION_WRONG_NO_PART_ERROR                                                 = 1484;
	exports.ER_PARTITION_WRONG_NO_SUBPART_ERROR                                              = 1485;
	exports.ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR                                            = 1486;
	exports.ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR                                          = 1487;
	exports.ER_FIELD_NOT_FOUND_PART_ERROR                                                    = 1488;
	exports.ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR                                             = 1489;
	exports.ER_INCONSISTENT_PARTITION_INFO_ERROR                                             = 1490;
	exports.ER_PARTITION_FUNC_NOT_ALLOWED_ERROR                                              = 1491;
	exports.ER_PARTITIONS_MUST_BE_DEFINED_ERROR                                              = 1492;
	exports.ER_RANGE_NOT_INCREASING_ERROR                                                    = 1493;
	exports.ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR                                          = 1494;
	exports.ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR                                         = 1495;
	exports.ER_PARTITION_ENTRY_ERROR                                                         = 1496;
	exports.ER_MIX_HANDLER_ERROR                                                             = 1497;
	exports.ER_PARTITION_NOT_DEFINED_ERROR                                                   = 1498;
	exports.ER_TOO_MANY_PARTITIONS_ERROR                                                     = 1499;
	exports.ER_SUBPARTITION_ERROR                                                            = 1500;
	exports.ER_CANT_CREATE_HANDLER_FILE                                                      = 1501;
	exports.ER_BLOB_FIELD_IN_PART_FUNC_ERROR                                                 = 1502;
	exports.ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF                                              = 1503;
	exports.ER_NO_PARTS_ERROR                                                                = 1504;
	exports.ER_PARTITION_MGMT_ON_NONPARTITIONED                                              = 1505;
	exports.ER_FOREIGN_KEY_ON_PARTITIONED                                                    = 1506;
	exports.ER_DROP_PARTITION_NON_EXISTENT                                                   = 1507;
	exports.ER_DROP_LAST_PARTITION                                                           = 1508;
	exports.ER_COALESCE_ONLY_ON_HASH_PARTITION                                               = 1509;
	exports.ER_REORG_HASH_ONLY_ON_SAME_NO                                                    = 1510;
	exports.ER_REORG_NO_PARAM_ERROR                                                          = 1511;
	exports.ER_ONLY_ON_RANGE_LIST_PARTITION                                                  = 1512;
	exports.ER_ADD_PARTITION_SUBPART_ERROR                                                   = 1513;
	exports.ER_ADD_PARTITION_NO_NEW_PARTITION                                                = 1514;
	exports.ER_COALESCE_PARTITION_NO_PARTITION                                               = 1515;
	exports.ER_REORG_PARTITION_NOT_EXIST                                                     = 1516;
	exports.ER_SAME_NAME_PARTITION                                                           = 1517;
	exports.ER_NO_BINLOG_ERROR                                                               = 1518;
	exports.ER_CONSECUTIVE_REORG_PARTITIONS                                                  = 1519;
	exports.ER_REORG_OUTSIDE_RANGE                                                           = 1520;
	exports.ER_PARTITION_FUNCTION_FAILURE                                                    = 1521;
	exports.ER_PART_STATE_ERROR                                                              = 1522;
	exports.ER_LIMITED_PART_RANGE                                                            = 1523;
	exports.ER_PLUGIN_IS_NOT_LOADED                                                          = 1524;
	exports.ER_WRONG_VALUE                                                                   = 1525;
	exports.ER_NO_PARTITION_FOR_GIVEN_VALUE                                                  = 1526;
	exports.ER_FILEGROUP_OPTION_ONLY_ONCE                                                    = 1527;
	exports.ER_CREATE_FILEGROUP_FAILED                                                       = 1528;
	exports.ER_DROP_FILEGROUP_FAILED                                                         = 1529;
	exports.ER_TABLESPACE_AUTO_EXTEND_ERROR                                                  = 1530;
	exports.ER_WRONG_SIZE_NUMBER                                                             = 1531;
	exports.ER_SIZE_OVERFLOW_ERROR                                                           = 1532;
	exports.ER_ALTER_FILEGROUP_FAILED                                                        = 1533;
	exports.ER_BINLOG_ROW_LOGGING_FAILED                                                     = 1534;
	exports.ER_BINLOG_ROW_WRONG_TABLE_DEF                                                    = 1535;
	exports.ER_BINLOG_ROW_RBR_TO_SBR                                                         = 1536;
	exports.ER_EVENT_ALREADY_EXISTS                                                          = 1537;
	exports.ER_EVENT_STORE_FAILED                                                            = 1538;
	exports.ER_EVENT_DOES_NOT_EXIST                                                          = 1539;
	exports.ER_EVENT_CANT_ALTER                                                              = 1540;
	exports.ER_EVENT_DROP_FAILED                                                             = 1541;
	exports.ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG                                        = 1542;
	exports.ER_EVENT_ENDS_BEFORE_STARTS                                                      = 1543;
	exports.ER_EVENT_EXEC_TIME_IN_THE_PAST                                                   = 1544;
	exports.ER_EVENT_OPEN_TABLE_FAILED                                                       = 1545;
	exports.ER_EVENT_NEITHER_M_EXPR_NOR_M_AT                                                 = 1546;
	exports.ER_COL_COUNT_DOESNT_MATCH_CORRUPTED                                              = 1547;
	exports.ER_CANNOT_LOAD_FROM_TABLE                                                        = 1548;
	exports.ER_EVENT_CANNOT_DELETE                                                           = 1549;
	exports.ER_EVENT_COMPILE_ERROR                                                           = 1550;
	exports.ER_EVENT_SAME_NAME                                                               = 1551;
	exports.ER_EVENT_DATA_TOO_LONG                                                           = 1552;
	exports.ER_DROP_INDEX_FK                                                                 = 1553;
	exports.ER_WARN_DEPRECATED_SYNTAX_WITH_VER                                               = 1554;
	exports.ER_CANT_WRITE_LOCK_LOG_TABLE                                                     = 1555;
	exports.ER_CANT_LOCK_LOG_TABLE                                                           = 1556;
	exports.ER_FOREIGN_DUPLICATE_KEY                                                         = 1557;
	exports.ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE                                          = 1558;
	exports.ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR                                         = 1559;
	exports.ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT                                 = 1560;
	exports.ER_NDB_CANT_SWITCH_BINLOG_FORMAT                                                 = 1561;
	exports.ER_PARTITION_NO_TEMPORARY                                                        = 1562;
	exports.ER_PARTITION_CONST_DOMAIN_ERROR                                                  = 1563;
	exports.ER_PARTITION_FUNCTION_IS_NOT_ALLOWED                                             = 1564;
	exports.ER_DDL_LOG_ERROR                                                                 = 1565;
	exports.ER_NULL_IN_VALUES_LESS_THAN                                                      = 1566;
	exports.ER_WRONG_PARTITION_NAME                                                          = 1567;
	exports.ER_CANT_CHANGE_TX_CHARACTERISTICS                                                = 1568;
	exports.ER_DUP_ENTRY_AUTOINCREMENT_CASE                                                  = 1569;
	exports.ER_EVENT_MODIFY_QUEUE_ERROR                                                      = 1570;
	exports.ER_EVENT_SET_VAR_ERROR                                                           = 1571;
	exports.ER_PARTITION_MERGE_ERROR                                                         = 1572;
	exports.ER_CANT_ACTIVATE_LOG                                                             = 1573;
	exports.ER_RBR_NOT_AVAILABLE                                                             = 1574;
	exports.ER_BASE64_DECODE_ERROR                                                           = 1575;
	exports.ER_EVENT_RECURSION_FORBIDDEN                                                     = 1576;
	exports.ER_EVENTS_DB_ERROR                                                               = 1577;
	exports.ER_ONLY_INTEGERS_ALLOWED                                                         = 1578;
	exports.ER_UNSUPORTED_LOG_ENGINE                                                         = 1579;
	exports.ER_BAD_LOG_STATEMENT                                                             = 1580;
	exports.ER_CANT_RENAME_LOG_TABLE                                                         = 1581;
	exports.ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT                                                = 1582;
	exports.ER_WRONG_PARAMETERS_TO_NATIVE_FCT                                                = 1583;
	exports.ER_WRONG_PARAMETERS_TO_STORED_FCT                                                = 1584;
	exports.ER_NATIVE_FCT_NAME_COLLISION                                                     = 1585;
	exports.ER_DUP_ENTRY_WITH_KEY_NAME                                                       = 1586;
	exports.ER_BINLOG_PURGE_EMFILE                                                           = 1587;
	exports.ER_EVENT_CANNOT_CREATE_IN_THE_PAST                                               = 1588;
	exports.ER_EVENT_CANNOT_ALTER_IN_THE_PAST                                                = 1589;
	exports.ER_SLAVE_INCIDENT                                                                = 1590;
	exports.ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT                                           = 1591;
	exports.ER_BINLOG_UNSAFE_STATEMENT                                                       = 1592;
	exports.ER_SLAVE_FATAL_ERROR                                                             = 1593;
	exports.ER_SLAVE_RELAY_LOG_READ_FAILURE                                                  = 1594;
	exports.ER_SLAVE_RELAY_LOG_WRITE_FAILURE                                                 = 1595;
	exports.ER_SLAVE_CREATE_EVENT_FAILURE                                                    = 1596;
	exports.ER_SLAVE_MASTER_COM_FAILURE                                                      = 1597;
	exports.ER_BINLOG_LOGGING_IMPOSSIBLE                                                     = 1598;
	exports.ER_VIEW_NO_CREATION_CTX                                                          = 1599;
	exports.ER_VIEW_INVALID_CREATION_CTX                                                     = 1600;
	exports.ER_SR_INVALID_CREATION_CTX                                                       = 1601;
	exports.ER_TRG_CORRUPTED_FILE                                                            = 1602;
	exports.ER_TRG_NO_CREATION_CTX                                                           = 1603;
	exports.ER_TRG_INVALID_CREATION_CTX                                                      = 1604;
	exports.ER_EVENT_INVALID_CREATION_CTX                                                    = 1605;
	exports.ER_TRG_CANT_OPEN_TABLE                                                           = 1606;
	exports.ER_CANT_CREATE_SROUTINE                                                          = 1607;
	exports.ER_NEVER_USED                                                                    = 1608;
	exports.ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT                           = 1609;
	exports.ER_SLAVE_CORRUPT_EVENT                                                           = 1610;
	exports.ER_LOAD_DATA_INVALID_COLUMN                                                      = 1611;
	exports.ER_LOG_PURGE_NO_FILE                                                             = 1612;
	exports.ER_XA_RBTIMEOUT                                                                  = 1613;
	exports.ER_XA_RBDEADLOCK                                                                 = 1614;
	exports.ER_NEED_REPREPARE                                                                = 1615;
	exports.ER_DELAYED_NOT_SUPPORTED                                                         = 1616;
	exports.WARN_NO_MASTER_INFO                                                              = 1617;
	exports.WARN_OPTION_IGNORED                                                              = 1618;
	exports.ER_PLUGIN_DELETE_BUILTIN                                                         = 1619;
	exports.WARN_PLUGIN_BUSY                                                                 = 1620;
	exports.ER_VARIABLE_IS_READONLY                                                          = 1621;
	exports.ER_WARN_ENGINE_TRANSACTION_ROLLBACK                                              = 1622;
	exports.ER_SLAVE_HEARTBEAT_FAILURE                                                       = 1623;
	exports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE                                            = 1624;
	exports.ER_NDB_REPLICATION_SCHEMA_ERROR                                                  = 1625;
	exports.ER_CONFLICT_FN_PARSE_ERROR                                                       = 1626;
	exports.ER_EXCEPTIONS_WRITE_ERROR                                                        = 1627;
	exports.ER_TOO_LONG_TABLE_COMMENT                                                        = 1628;
	exports.ER_TOO_LONG_FIELD_COMMENT                                                        = 1629;
	exports.ER_FUNC_INEXISTENT_NAME_COLLISION                                                = 1630;
	exports.ER_DATABASE_NAME                                                                 = 1631;
	exports.ER_TABLE_NAME                                                                    = 1632;
	exports.ER_PARTITION_NAME                                                                = 1633;
	exports.ER_SUBPARTITION_NAME                                                             = 1634;
	exports.ER_TEMPORARY_NAME                                                                = 1635;
	exports.ER_RENAMED_NAME                                                                  = 1636;
	exports.ER_TOO_MANY_CONCURRENT_TRXS                                                      = 1637;
	exports.WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED                                         = 1638;
	exports.ER_DEBUG_SYNC_TIMEOUT                                                            = 1639;
	exports.ER_DEBUG_SYNC_HIT_LIMIT                                                          = 1640;
	exports.ER_DUP_SIGNAL_SET                                                                = 1641;
	exports.ER_SIGNAL_WARN                                                                   = 1642;
	exports.ER_SIGNAL_NOT_FOUND                                                              = 1643;
	exports.ER_SIGNAL_EXCEPTION                                                              = 1644;
	exports.ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER                                               = 1645;
	exports.ER_SIGNAL_BAD_CONDITION_TYPE                                                     = 1646;
	exports.WARN_COND_ITEM_TRUNCATED                                                         = 1647;
	exports.ER_COND_ITEM_TOO_LONG                                                            = 1648;
	exports.ER_UNKNOWN_LOCALE                                                                = 1649;
	exports.ER_SLAVE_IGNORE_SERVER_IDS                                                       = 1650;
	exports.ER_QUERY_CACHE_DISABLED                                                          = 1651;
	exports.ER_SAME_NAME_PARTITION_FIELD                                                     = 1652;
	exports.ER_PARTITION_COLUMN_LIST_ERROR                                                   = 1653;
	exports.ER_WRONG_TYPE_COLUMN_VALUE_ERROR                                                 = 1654;
	exports.ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR                                          = 1655;
	exports.ER_MAXVALUE_IN_VALUES_IN                                                         = 1656;
	exports.ER_TOO_MANY_VALUES_ERROR                                                         = 1657;
	exports.ER_ROW_SINGLE_PARTITION_FIELD_ERROR                                              = 1658;
	exports.ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD                                     = 1659;
	exports.ER_PARTITION_FIELDS_TOO_LONG                                                     = 1660;
	exports.ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE                                             = 1661;
	exports.ER_BINLOG_ROW_MODE_AND_STMT_ENGINE                                               = 1662;
	exports.ER_BINLOG_UNSAFE_AND_STMT_ENGINE                                                 = 1663;
	exports.ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE                                          = 1664;
	exports.ER_BINLOG_STMT_MODE_AND_ROW_ENGINE                                               = 1665;
	exports.ER_BINLOG_ROW_INJECTION_AND_STMT_MODE                                            = 1666;
	exports.ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE                               = 1667;
	exports.ER_BINLOG_UNSAFE_LIMIT                                                           = 1668;
	exports.ER_BINLOG_UNSAFE_INSERT_DELAYED                                                  = 1669;
	exports.ER_BINLOG_UNSAFE_SYSTEM_TABLE                                                    = 1670;
	exports.ER_BINLOG_UNSAFE_AUTOINC_COLUMNS                                                 = 1671;
	exports.ER_BINLOG_UNSAFE_UDF                                                             = 1672;
	exports.ER_BINLOG_UNSAFE_SYSTEM_VARIABLE                                                 = 1673;
	exports.ER_BINLOG_UNSAFE_SYSTEM_FUNCTION                                                 = 1674;
	exports.ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS                                            = 1675;
	exports.ER_MESSAGE_AND_STATEMENT                                                         = 1676;
	exports.ER_SLAVE_CONVERSION_FAILED                                                       = 1677;
	exports.ER_SLAVE_CANT_CREATE_CONVERSION                                                  = 1678;
	exports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT                              = 1679;
	exports.ER_PATH_LENGTH                                                                   = 1680;
	exports.ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT                                         = 1681;
	exports.ER_WRONG_NATIVE_TABLE_STRUCTURE                                                  = 1682;
	exports.ER_WRONG_PERFSCHEMA_USAGE                                                        = 1683;
	exports.ER_WARN_I_S_SKIPPED_TABLE                                                        = 1684;
	exports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT                              = 1685;
	exports.ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT                                 = 1686;
	exports.ER_SPATIAL_MUST_HAVE_GEOM_COL                                                    = 1687;
	exports.ER_TOO_LONG_INDEX_COMMENT                                                        = 1688;
	exports.ER_LOCK_ABORTED                                                                  = 1689;
	exports.ER_DATA_OUT_OF_RANGE                                                             = 1690;
	exports.ER_WRONG_SPVAR_TYPE_IN_LIMIT                                                     = 1691;
	exports.ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE                        = 1692;
	exports.ER_BINLOG_UNSAFE_MIXED_STATEMENT                                                 = 1693;
	exports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN                                = 1694;
	exports.ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN                                   = 1695;
	exports.ER_FAILED_READ_FROM_PAR_FILE                                                     = 1696;
	exports.ER_VALUES_IS_NOT_INT_TYPE_ERROR                                                  = 1697;
	exports.ER_ACCESS_DENIED_NO_PASSWORD_ERROR                                               = 1698;
	exports.ER_SET_PASSWORD_AUTH_PLUGIN                                                      = 1699;
	exports.ER_GRANT_PLUGIN_USER_EXISTS                                                      = 1700;
	exports.ER_TRUNCATE_ILLEGAL_FK                                                           = 1701;
	exports.ER_PLUGIN_IS_PERMANENT                                                           = 1702;
	exports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN                                        = 1703;
	exports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX                                        = 1704;
	exports.ER_STMT_CACHE_FULL                                                               = 1705;
	exports.ER_MULTI_UPDATE_KEY_CONFLICT                                                     = 1706;
	exports.ER_TABLE_NEEDS_REBUILD                                                           = 1707;
	exports.WARN_OPTION_BELOW_LIMIT                                                          = 1708;
	exports.ER_INDEX_COLUMN_TOO_LONG                                                         = 1709;
	exports.ER_ERROR_IN_TRIGGER_BODY                                                         = 1710;
	exports.ER_ERROR_IN_UNKNOWN_TRIGGER_BODY                                                 = 1711;
	exports.ER_INDEX_CORRUPT                                                                 = 1712;
	exports.ER_UNDO_RECORD_TOO_BIG                                                           = 1713;
	exports.ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT                                            = 1714;
	exports.ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE                                            = 1715;
	exports.ER_BINLOG_UNSAFE_REPLACE_SELECT                                                  = 1716;
	exports.ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT                                            = 1717;
	exports.ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT                                           = 1718;
	exports.ER_BINLOG_UNSAFE_UPDATE_IGNORE                                                   = 1719;
	exports.ER_PLUGIN_NO_UNINSTALL                                                           = 1720;
	exports.ER_PLUGIN_NO_INSTALL                                                             = 1721;
	exports.ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT                                            = 1722;
	exports.ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC                                           = 1723;
	exports.ER_BINLOG_UNSAFE_INSERT_TWO_KEYS                                                 = 1724;
	exports.ER_TABLE_IN_FK_CHECK                                                             = 1725;
	exports.ER_UNSUPPORTED_ENGINE                                                            = 1726;
	exports.ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST                                               = 1727;
	exports.ER_CANNOT_LOAD_FROM_TABLE_V2                                                     = 1728;
	exports.ER_MASTER_DELAY_VALUE_OUT_OF_RANGE                                               = 1729;
	exports.ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT                            = 1730;
	exports.ER_PARTITION_EXCHANGE_DIFFERENT_OPTION                                           = 1731;
	exports.ER_PARTITION_EXCHANGE_PART_TABLE                                                 = 1732;
	exports.ER_PARTITION_EXCHANGE_TEMP_TABLE                                                 = 1733;
	exports.ER_PARTITION_INSTEAD_OF_SUBPARTITION                                             = 1734;
	exports.ER_UNKNOWN_PARTITION                                                             = 1735;
	exports.ER_TABLES_DIFFERENT_METADATA                                                     = 1736;
	exports.ER_ROW_DOES_NOT_MATCH_PARTITION                                                  = 1737;
	exports.ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX                                            = 1738;
	exports.ER_WARN_INDEX_NOT_APPLICABLE                                                     = 1739;
	exports.ER_PARTITION_EXCHANGE_FOREIGN_KEY                                                = 1740;
	exports.ER_NO_SUCH_KEY_VALUE                                                             = 1741;
	exports.ER_RPL_INFO_DATA_TOO_LONG                                                        = 1742;
	exports.ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE                                           = 1743;
	exports.ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE                                            = 1744;
	exports.ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX                                       = 1745;
	exports.ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT                                      = 1746;
	exports.ER_PARTITION_CLAUSE_ON_NONPARTITIONED                                            = 1747;
	exports.ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET                                        = 1748;
	exports.ER_NO_SUCH_PARTITION                                                             = 1749;
	exports.ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE                                            = 1750;
	exports.ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE                         = 1751;
	exports.ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE                         = 1752;
	exports.ER_MTS_FEATURE_IS_NOT_SUPPORTED                                                  = 1753;
	exports.ER_MTS_UPDATED_DBS_GREATER_MAX                                                   = 1754;
	exports.ER_MTS_CANT_PARALLEL                                                             = 1755;
	exports.ER_MTS_INCONSISTENT_DATA                                                         = 1756;
	exports.ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING                                      = 1757;
	exports.ER_DA_INVALID_CONDITION_NUMBER                                                   = 1758;
	exports.ER_INSECURE_PLAIN_TEXT                                                           = 1759;
	exports.ER_INSECURE_CHANGE_MASTER                                                        = 1760;
	exports.ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO                                         = 1761;
	exports.ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO                                      = 1762;
	exports.ER_SQLTHREAD_WITH_SECURE_SLAVE                                                   = 1763;
	exports.ER_TABLE_HAS_NO_FT                                                               = 1764;
	exports.ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER                                        = 1765;
	exports.ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION                                          = 1766;
	exports.ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST                                            = 1767;
	exports.ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION                                          = 1768;
	exports.ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION                                          = 1769;
	exports.ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL                     = 1770;
	exports.ER_SKIPPING_LOGGED_TRANSACTION                                                   = 1771;
	exports.ER_MALFORMED_GTID_SET_SPECIFICATION                                              = 1772;
	exports.ER_MALFORMED_GTID_SET_ENCODING                                                   = 1773;
	exports.ER_MALFORMED_GTID_SPECIFICATION                                                  = 1774;
	exports.ER_GNO_EXHAUSTED                                                                 = 1775;
	exports.ER_BAD_SLAVE_AUTO_POSITION                                                       = 1776;
	exports.ER_AUTO_POSITION_REQUIRES_GTID_MODE_NOT_OFF                                      = 1777;
	exports.ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET                          = 1778;
	exports.ER_GTID_MODE_ON_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON                             = 1779;
	exports.ER_GTID_MODE_REQUIRES_BINLOG                                                     = 1780;
	exports.ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF                              = 1781;
	exports.ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON                          = 1782;
	exports.ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF                     = 1783;
	exports.ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF                                        = 1784;
	exports.ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE                                           = 1785;
	exports.ER_GTID_UNSAFE_CREATE_SELECT                                                     = 1786;
	exports.ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION                        = 1787;
	exports.ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME                                  = 1788;
	exports.ER_MASTER_HAS_PURGED_REQUIRED_GTIDS                                              = 1789;
	exports.ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID                                           = 1790;
	exports.ER_UNKNOWN_EXPLAIN_FORMAT                                                        = 1791;
	exports.ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION                                         = 1792;
	exports.ER_TOO_LONG_TABLE_PARTITION_COMMENT                                              = 1793;
	exports.ER_SLAVE_CONFIGURATION                                                           = 1794;
	exports.ER_INNODB_FT_LIMIT                                                               = 1795;
	exports.ER_INNODB_NO_FT_TEMP_TABLE                                                       = 1796;
	exports.ER_INNODB_FT_WRONG_DOCID_COLUMN                                                  = 1797;
	exports.ER_INNODB_FT_WRONG_DOCID_INDEX                                                   = 1798;
	exports.ER_INNODB_ONLINE_LOG_TOO_BIG                                                     = 1799;
	exports.ER_UNKNOWN_ALTER_ALGORITHM                                                       = 1800;
	exports.ER_UNKNOWN_ALTER_LOCK                                                            = 1801;
	exports.ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS                                          = 1802;
	exports.ER_MTS_RECOVERY_FAILURE                                                          = 1803;
	exports.ER_MTS_RESET_WORKERS                                                             = 1804;
	exports.ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2                                           = 1805;
	exports.ER_SLAVE_SILENT_RETRY_TRANSACTION                                                = 1806;
	exports.ER_DISCARD_FK_CHECKS_RUNNING                                                     = 1807;
	exports.ER_TABLE_SCHEMA_MISMATCH                                                         = 1808;
	exports.ER_TABLE_IN_SYSTEM_TABLESPACE                                                    = 1809;
	exports.ER_IO_READ_ERROR                                                                 = 1810;
	exports.ER_IO_WRITE_ERROR                                                                = 1811;
	exports.ER_TABLESPACE_MISSING                                                            = 1812;
	exports.ER_TABLESPACE_EXISTS                                                             = 1813;
	exports.ER_TABLESPACE_DISCARDED                                                          = 1814;
	exports.ER_INTERNAL_ERROR                                                                = 1815;
	exports.ER_INNODB_IMPORT_ERROR                                                           = 1816;
	exports.ER_INNODB_INDEX_CORRUPT                                                          = 1817;
	exports.ER_INVALID_YEAR_COLUMN_LENGTH                                                    = 1818;
	exports.ER_NOT_VALID_PASSWORD                                                            = 1819;
	exports.ER_MUST_CHANGE_PASSWORD                                                          = 1820;
	exports.ER_FK_NO_INDEX_CHILD                                                             = 1821;
	exports.ER_FK_NO_INDEX_PARENT                                                            = 1822;
	exports.ER_FK_FAIL_ADD_SYSTEM                                                            = 1823;
	exports.ER_FK_CANNOT_OPEN_PARENT                                                         = 1824;
	exports.ER_FK_INCORRECT_OPTION                                                           = 1825;
	exports.ER_FK_DUP_NAME                                                                   = 1826;
	exports.ER_PASSWORD_FORMAT                                                               = 1827;
	exports.ER_FK_COLUMN_CANNOT_DROP                                                         = 1828;
	exports.ER_FK_COLUMN_CANNOT_DROP_CHILD                                                   = 1829;
	exports.ER_FK_COLUMN_NOT_NULL                                                            = 1830;
	exports.ER_DUP_INDEX                                                                     = 1831;
	exports.ER_FK_COLUMN_CANNOT_CHANGE                                                       = 1832;
	exports.ER_FK_COLUMN_CANNOT_CHANGE_CHILD                                                 = 1833;
	exports.ER_FK_CANNOT_DELETE_PARENT                                                       = 1834;
	exports.ER_MALFORMED_PACKET                                                              = 1835;
	exports.ER_READ_ONLY_MODE                                                                = 1836;
	exports.ER_GTID_NEXT_TYPE_UNDEFINED_GROUP                                                = 1837;
	exports.ER_VARIABLE_NOT_SETTABLE_IN_SP                                                   = 1838;
	exports.ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF                                    = 1839;
	exports.ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY                          = 1840;
	exports.ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY                            = 1841;
	exports.ER_GTID_PURGED_WAS_CHANGED                                                       = 1842;
	exports.ER_GTID_EXECUTED_WAS_CHANGED                                                     = 1843;
	exports.ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES                                           = 1844;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED                                                 = 1845;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON                                          = 1846;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY                                     = 1847;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION                                = 1848;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME                                = 1849;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE                              = 1850;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK                                 = 1851;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE                                   = 1852;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK                                     = 1853;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC                                  = 1854;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS                               = 1855;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS                               = 1856;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS                                      = 1857;
	exports.ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE                              = 1858;
	exports.ER_DUP_UNKNOWN_IN_INDEX                                                          = 1859;
	exports.ER_IDENT_CAUSES_TOO_LONG_PATH                                                    = 1860;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL                                 = 1861;
	exports.ER_MUST_CHANGE_PASSWORD_LOGIN                                                    = 1862;
	exports.ER_ROW_IN_WRONG_PARTITION                                                        = 1863;
	exports.ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX                                        = 1864;
	exports.ER_INNODB_NO_FT_USES_PARSER                                                      = 1865;
	exports.ER_BINLOG_LOGICAL_CORRUPTION                                                     = 1866;
	exports.ER_WARN_PURGE_LOG_IN_USE                                                         = 1867;
	exports.ER_WARN_PURGE_LOG_IS_ACTIVE                                                      = 1868;
	exports.ER_AUTO_INCREMENT_CONFLICT                                                       = 1869;
	exports.WARN_ON_BLOCKHOLE_IN_RBR                                                         = 1870;
	exports.ER_SLAVE_MI_INIT_REPOSITORY                                                      = 1871;
	exports.ER_SLAVE_RLI_INIT_REPOSITORY                                                     = 1872;
	exports.ER_ACCESS_DENIED_CHANGE_USER_ERROR                                               = 1873;
	exports.ER_INNODB_READ_ONLY                                                              = 1874;
	exports.ER_STOP_SLAVE_SQL_THREAD_TIMEOUT                                                 = 1875;
	exports.ER_STOP_SLAVE_IO_THREAD_TIMEOUT                                                  = 1876;
	exports.ER_TABLE_CORRUPT                                                                 = 1877;
	exports.ER_TEMP_FILE_WRITE_FAILURE                                                       = 1878;
	exports.ER_INNODB_FT_AUX_NOT_HEX_ID                                                      = 1879;
	exports.ER_OLD_TEMPORALS_UPGRADED                                                        = 1880;
	exports.ER_INNODB_FORCED_RECOVERY                                                        = 1881;
	exports.ER_AES_INVALID_IV                                                                = 1882;
	exports.ER_PLUGIN_CANNOT_BE_UNINSTALLED                                                  = 1883;
	exports.ER_GTID_UNSAFE_BINLOG_SPLITTABLE_STATEMENT_AND_GTID_GROUP                        = 1884;
	exports.ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER                                              = 1885;
	exports.ER_FILE_CORRUPT                                                                  = 1886;
	exports.ER_ERROR_ON_MASTER                                                               = 1887;
	exports.ER_INCONSISTENT_ERROR                                                            = 1888;
	exports.ER_STORAGE_ENGINE_NOT_LOADED                                                     = 1889;
	exports.ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER                                         = 1890;
	exports.ER_WARN_LEGACY_SYNTAX_CONVERTED                                                  = 1891;
	exports.ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN                                                 = 1892;
	exports.ER_CANNOT_DISCARD_TEMPORARY_TABLE                                                = 1893;
	exports.ER_FK_DEPTH_EXCEEDED                                                             = 1894;
	exports.ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2                                       = 1895;
	exports.ER_WARN_TRIGGER_DOESNT_HAVE_CREATED                                              = 1896;
	exports.ER_REFERENCED_TRG_DOES_NOT_EXIST                                                 = 1897;
	exports.ER_EXPLAIN_NOT_SUPPORTED                                                         = 1898;
	exports.ER_INVALID_FIELD_SIZE                                                            = 1899;
	exports.ER_MISSING_HA_CREATE_OPTION                                                      = 1900;
	exports.ER_ENGINE_OUT_OF_MEMORY                                                          = 1901;
	exports.ER_PASSWORD_EXPIRE_ANONYMOUS_USER                                                = 1902;
	exports.ER_SLAVE_SQL_THREAD_MUST_STOP                                                    = 1903;
	exports.ER_NO_FT_MATERIALIZED_SUBQUERY                                                   = 1904;
	exports.ER_INNODB_UNDO_LOG_FULL                                                          = 1905;
	exports.ER_INVALID_ARGUMENT_FOR_LOGARITHM                                                = 1906;
	exports.ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP                                             = 1907;
	exports.ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO                                            = 1908;
	exports.ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS                                              = 1909;
	exports.ER_QUERY_TIMEOUT                                                                 = 1910;
	exports.ER_NON_RO_SELECT_DISABLE_TIMER                                                   = 1911;
	exports.ER_DUP_LIST_ENTRY                                                                = 1912;
	exports.ER_SQL_MODE_NO_EFFECT                                                            = 1913;
	exports.ER_AGGREGATE_ORDER_FOR_UNION                                                     = 1914;
	exports.ER_AGGREGATE_ORDER_NON_AGG_QUERY                                                 = 1915;
	exports.ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR                                       = 1916;
	exports.ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER                                      = 1917;
	exports.ER_SERVER_OFFLINE_MODE                                                           = 1918;
	exports.ER_GIS_DIFFERENT_SRIDS                                                           = 1919;
	exports.ER_GIS_UNSUPPORTED_ARGUMENT                                                      = 1920;
	exports.ER_GIS_UNKNOWN_ERROR                                                             = 1921;
	exports.ER_GIS_UNKNOWN_EXCEPTION                                                         = 1922;
	exports.ER_GIS_INVALID_DATA                                                              = 1923;
	exports.ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION                                          = 1924;
	exports.ER_BOOST_GEOMETRY_CENTROID_EXCEPTION                                             = 1925;
	exports.ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION                                = 1926;
	exports.ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION                                            = 1927;
	exports.ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION                              = 1928;
	exports.ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION                                              = 1929;
	exports.ER_STD_BAD_ALLOC_ERROR                                                           = 1930;
	exports.ER_STD_DOMAIN_ERROR                                                              = 1931;
	exports.ER_STD_LENGTH_ERROR                                                              = 1932;
	exports.ER_STD_INVALID_ARGUMENT                                                          = 1933;
	exports.ER_STD_OUT_OF_RANGE_ERROR                                                        = 1934;
	exports.ER_STD_OVERFLOW_ERROR                                                            = 1935;
	exports.ER_STD_RANGE_ERROR                                                               = 1936;
	exports.ER_STD_UNDERFLOW_ERROR                                                           = 1937;
	exports.ER_STD_LOGIC_ERROR                                                               = 1938;
	exports.ER_STD_RUNTIME_ERROR                                                             = 1939;
	exports.ER_STD_UNKNOWN_EXCEPTION                                                         = 1940;
	exports.ER_GIS_DATA_WRONG_ENDIANESS                                                      = 1941;
	exports.ER_CHANGE_MASTER_PASSWORD_LENGTH                                                 = 1942;
	exports.ER_USER_LOCK_WRONG_NAME                                                          = 1943;
	exports.ER_USER_LOCK_DEADLOCK                                                            = 1944;
	exports.ER_REPLACE_INACCESSIBLE_ROWS                                                     = 1945;
	exports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS                                      = 1946;
	exports.ER_ILLEGAL_USER_VAR                                                              = 1947;
	exports.ER_GTID_MODE_OFF                                                                 = 1948;
	exports.ER_UNSUPPORTED_BY_REPLICATION_THREAD                                             = 1949;
	exports.ER_INCORRECT_TYPE                                                                = 1950;
	exports.ER_FIELD_IN_ORDER_NOT_SELECT                                                     = 1951;
	exports.ER_AGGREGATE_IN_ORDER_NOT_SELECT                                                 = 1952;
	exports.ER_INVALID_RPL_WILD_TABLE_FILTER_PATTERN                                         = 1953;
	exports.ER_NET_OK_PACKET_TOO_LARGE                                                       = 1954;
	exports.ER_INVALID_JSON_DATA                                                             = 1955;
	exports.ER_INVALID_GEOJSON_MISSING_MEMBER                                                = 1956;
	exports.ER_INVALID_GEOJSON_WRONG_TYPE                                                    = 1957;
	exports.ER_INVALID_GEOJSON_UNSPECIFIED                                                   = 1958;
	exports.ER_DIMENSION_UNSUPPORTED                                                         = 1959;
	exports.ER_SLAVE_CHANNEL_DOES_NOT_EXIST                                                  = 1960;
	exports.ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT                                             = 1961;
	exports.ER_SLAVE_CHANNEL_NAME_INVALID_OR_TOO_LONG                                        = 1962;
	exports.ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY                                            = 1963;
	exports.ER_SLAVE_CHANNEL_DELETE                                                          = 1964;
	exports.ER_SLAVE_MULTIPLE_CHANNELS_CMD                                                   = 1965;
	exports.ER_SLAVE_MAX_CHANNELS_EXCEEDED                                                   = 1966;
	exports.ER_SLAVE_CHANNEL_MUST_STOP                                                       = 1967;
	exports.ER_SLAVE_CHANNEL_NOT_RUNNING                                                     = 1968;
	exports.ER_SLAVE_CHANNEL_WAS_RUNNING                                                     = 1969;
	exports.ER_SLAVE_CHANNEL_WAS_NOT_RUNNING                                                 = 1970;
	exports.ER_SLAVE_CHANNEL_SQL_THREAD_MUST_STOP                                            = 1971;
	exports.ER_SLAVE_CHANNEL_SQL_SKIP_COUNTER                                                = 1972;
	exports.ER_WRONG_FIELD_WITH_GROUP_V2                                                     = 1973;
	exports.ER_MIX_OF_GROUP_FUNC_AND_FIELDS_V2                                               = 1974;
	exports.ER_WARN_DEPRECATED_SYSVAR_UPDATE                                                 = 1975;
	exports.ER_WARN_DEPRECATED_SQLMODE                                                       = 1976;
	exports.ER_CANNOT_LOG_PARTIAL_DROP_DATABASE_WITH_GTID                                    = 1977;
	exports.ER_GROUP_REPLICATION_CONFIGURATION                                               = 1978;
	exports.ER_GROUP_REPLICATION_RUNNING                                                     = 1979;
	exports.ER_GROUP_REPLICATION_APPLIER_INIT_ERROR                                          = 1980;
	exports.ER_GROUP_REPLICATION_STOP_APPLIER_THREAD_TIMEOUT                                 = 1981;
	exports.ER_GROUP_REPLICATION_COMMUNICATION_LAYER_SESSION_ERROR                           = 1982;
	exports.ER_GROUP_REPLICATION_COMMUNICATION_LAYER_JOIN_ERROR                              = 1983;
	exports.ER_BEFORE_DML_VALIDATION_ERROR                                                   = 1984;
	exports.ER_PREVENTS_VARIABLE_WITHOUT_RBR                                                 = 1985;
	exports.ER_RUN_HOOK_ERROR                                                                = 1986;
	exports.ER_TRANSACTION_ROLLBACK_DURING_COMMIT                                            = 1987;
	exports.ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED                                      = 1988;
	exports.ER_UNSUPPORTED_ALTER_INPLACE_ON_VIRTUAL_COLUMN                                   = 1989;
	exports.ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN                                          = 1990;
	exports.ER_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN                                        = 1991;
	exports.ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN                                        = 1992;
	exports.ER_GENERATED_COLUMN_NON_PRIOR                                                    = 1993;
	exports.ER_DEPENDENT_BY_GENERATED_COLUMN                                                 = 1994;
	exports.ER_GENERATED_COLUMN_REF_AUTO_INC                                                 = 1995;
	exports.ER_FEATURE_NOT_AVAILABLE                                                         = 1996;
	exports.ER_CANT_SET_GTID_MODE                                                            = 1997;
	exports.ER_CANT_USE_AUTO_POSITION_WITH_GTID_MODE_OFF                                     = 1998;
	exports.ER_CANT_REPLICATE_ANONYMOUS_WITH_AUTO_POSITION                                   = 1999;
	exports.ER_CANT_REPLICATE_ANONYMOUS_WITH_GTID_MODE_ON                                    = 2000;
	exports.ER_CANT_REPLICATE_GTID_WITH_GTID_MODE_OFF                                        = 2001;
	exports.ER_CANT_SET_ENFORCE_GTID_CONSISTENCY_ON_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS = 2002;
	exports.ER_SET_ENFORCE_GTID_CONSISTENCY_WARN_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS    = 2003;
	exports.ER_ACCOUNT_HAS_BEEN_LOCKED                                                       = 2004;
	exports.ER_WRONG_TABLESPACE_NAME                                                         = 2005;
	exports.ER_TABLESPACE_IS_NOT_EMPTY                                                       = 2006;
	exports.ER_WRONG_FILE_NAME                                                               = 2007;
	exports.ER_BOOST_GEOMETRY_INCONSISTENT_TURNS_EXCEPTION                                   = 2008;
	exports.ER_WARN_OPTIMIZER_HINT_SYNTAX_ERROR                                              = 2009;
	exports.ER_WARN_BAD_MAX_EXECUTION_TIME                                                   = 2010;
	exports.ER_WARN_UNSUPPORTED_MAX_EXECUTION_TIME                                           = 2011;
	exports.ER_WARN_CONFLICTING_HINT                                                         = 2012;
	exports.ER_WARN_UNKNOWN_QB_NAME                                                          = 2013;
	exports.ER_UNRESOLVED_HINT_NAME                                                          = 2014;
	exports.ER_WARN_ON_MODIFYING_GTID_EXECUTED_TABLE                                         = 2015;
	exports.ER_PLUGGABLE_PROTOCOL_COMMAND_NOT_SUPPORTED                                      = 2016;
	exports.ER_LOCKING_SERVICE_WRONG_NAME                                                    = 2017;
	exports.ER_LOCKING_SERVICE_DEADLOCK                                                      = 2018;
	exports.ER_LOCKING_SERVICE_TIMEOUT                                                       = 2019;
	exports.ER_GIS_MAX_POINTS_IN_GEOMETRY_OVERFLOWED                                         = 2020;
	exports.ER_SQL_MODE_MERGED                                                               = 2021;
	exports.ER_VTOKEN_PLUGIN_TOKEN_MISMATCH                                                  = 2022;
	exports.ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND                                                 = 2023;
	exports.ER_CANT_SET_VARIABLE_WHEN_OWNING_GTID                                            = 2024;
	exports.ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED                                           = 2025;
	exports.ER_INVALID_JSON_TEXT                                                             = 2026;
	exports.ER_INVALID_JSON_TEXT_IN_PARAM                                                    = 2027;
	exports.ER_INVALID_JSON_BINARY_DATA                                                      = 2028;
	exports.ER_INVALID_JSON_PATH                                                             = 2029;
	exports.ER_INVALID_JSON_CHARSET                                                          = 2030;
	exports.ER_INVALID_JSON_CHARSET_IN_FUNCTION                                              = 2031;
	exports.ER_INVALID_TYPE_FOR_JSON                                                         = 2032;
	exports.ER_INVALID_CAST_TO_JSON                                                          = 2033;
	exports.ER_INVALID_JSON_PATH_CHARSET                                                     = 2034;
	exports.ER_INVALID_JSON_PATH_WILDCARD                                                    = 2035;
	exports.ER_JSON_VALUE_TOO_BIG                                                            = 2036;
	exports.ER_JSON_KEY_TOO_BIG                                                              = 2037;
	exports.ER_JSON_USED_AS_KEY                                                              = 2038;
	exports.ER_JSON_VACUOUS_PATH                                                             = 2039;
	exports.ER_JSON_BAD_ONE_OR_ALL_ARG                                                       = 2040;
	exports.ER_NUMERIC_JSON_VALUE_OUT_OF_RANGE                                               = 2041;
	exports.ER_INVALID_JSON_VALUE_FOR_CAST                                                   = 2042;
	exports.ER_JSON_DOCUMENT_TOO_DEEP                                                        = 2043;
	exports.ER_JSON_DOCUMENT_NULL_KEY                                                        = 2044;
	exports.ER_SECURE_TRANSPORT_REQUIRED                                                     = 2045;
	exports.ER_NO_SECURE_TRANSPORTS_CONFIGURED                                               = 2046;
	exports.ER_DISABLED_STORAGE_ENGINE                                                       = 2047;
	exports.ER_USER_DOES_NOT_EXIST                                                           = 2048;
	exports.ER_USER_ALREADY_EXISTS                                                           = 2049;
	exports.ER_AUDIT_API_ABORT                                                               = 2050;
	exports.ER_INVALID_JSON_PATH_ARRAY_CELL                                                  = 2051;
	exports.ER_BUFPOOL_RESIZE_INPROGRESS                                                     = 2052;
	exports.ER_FEATURE_DISABLED_SEE_DOC                                                      = 2053;
	exports.ER_SERVER_ISNT_AVAILABLE                                                         = 2054;
	exports.ER_SESSION_WAS_KILLED                                                            = 2055;
	exports.ER_CAPACITY_EXCEEDED                                                             = 2056;
	exports.ER_CAPACITY_EXCEEDED_IN_RANGE_OPTIMIZER                                          = 2057;
	exports.ER_TABLE_NEEDS_UPG_PART                                                          = 2058;
	exports.ER_CANT_WAIT_FOR_EXECUTED_GTID_SET_WHILE_OWNING_A_GTID                           = 2059;

	// Lookup-by-number table
	exports[1]    = 'EE_CANTCREATEFILE';
	exports[2]    = 'EE_READ';
	exports[3]    = 'EE_WRITE';
	exports[4]    = 'EE_BADCLOSE';
	exports[5]    = 'EE_OUTOFMEMORY';
	exports[6]    = 'EE_DELETE';
	exports[7]    = 'EE_LINK';
	exports[9]    = 'EE_EOFERR';
	exports[10]   = 'EE_CANTLOCK';
	exports[11]   = 'EE_CANTUNLOCK';
	exports[12]   = 'EE_DIR';
	exports[13]   = 'EE_STAT';
	exports[14]   = 'EE_CANT_CHSIZE';
	exports[15]   = 'EE_CANT_OPEN_STREAM';
	exports[16]   = 'EE_GETWD';
	exports[17]   = 'EE_SETWD';
	exports[18]   = 'EE_LINK_WARNING';
	exports[19]   = 'EE_OPEN_WARNING';
	exports[20]   = 'EE_DISK_FULL';
	exports[21]   = 'EE_CANT_MKDIR';
	exports[22]   = 'EE_UNKNOWN_CHARSET';
	exports[23]   = 'EE_OUT_OF_FILERESOURCES';
	exports[24]   = 'EE_CANT_READLINK';
	exports[25]   = 'EE_CANT_SYMLINK';
	exports[26]   = 'EE_REALPATH';
	exports[27]   = 'EE_SYNC';
	exports[28]   = 'EE_UNKNOWN_COLLATION';
	exports[29]   = 'EE_FILENOTFOUND';
	exports[30]   = 'EE_FILE_NOT_CLOSED';
	exports[31]   = 'EE_CHANGE_OWNERSHIP';
	exports[32]   = 'EE_CHANGE_PERMISSIONS';
	exports[33]   = 'EE_CANT_SEEK';
	exports[34]   = 'EE_CAPACITY_EXCEEDED';
	exports[120]  = 'HA_ERR_KEY_NOT_FOUND';
	exports[121]  = 'HA_ERR_FOUND_DUPP_KEY';
	exports[122]  = 'HA_ERR_INTERNAL_ERROR';
	exports[123]  = 'HA_ERR_RECORD_CHANGED';
	exports[124]  = 'HA_ERR_WRONG_INDEX';
	exports[126]  = 'HA_ERR_CRASHED';
	exports[127]  = 'HA_ERR_WRONG_IN_RECORD';
	exports[128]  = 'HA_ERR_OUT_OF_MEM';
	exports[130]  = 'HA_ERR_NOT_A_TABLE';
	exports[131]  = 'HA_ERR_WRONG_COMMAND';
	exports[132]  = 'HA_ERR_OLD_FILE';
	exports[133]  = 'HA_ERR_NO_ACTIVE_RECORD';
	exports[134]  = 'HA_ERR_RECORD_DELETED';
	exports[135]  = 'HA_ERR_RECORD_FILE_FULL';
	exports[136]  = 'HA_ERR_INDEX_FILE_FULL';
	exports[137]  = 'HA_ERR_END_OF_FILE';
	exports[138]  = 'HA_ERR_UNSUPPORTED';
	exports[139]  = 'HA_ERR_TOO_BIG_ROW';
	exports[140]  = 'HA_WRONG_CREATE_OPTION';
	exports[141]  = 'HA_ERR_FOUND_DUPP_UNIQUE';
	exports[142]  = 'HA_ERR_UNKNOWN_CHARSET';
	exports[143]  = 'HA_ERR_WRONG_MRG_TABLE_DEF';
	exports[144]  = 'HA_ERR_CRASHED_ON_REPAIR';
	exports[145]  = 'HA_ERR_CRASHED_ON_USAGE';
	exports[146]  = 'HA_ERR_LOCK_WAIT_TIMEOUT';
	exports[147]  = 'HA_ERR_LOCK_TABLE_FULL';
	exports[148]  = 'HA_ERR_READ_ONLY_TRANSACTION';
	exports[149]  = 'HA_ERR_LOCK_DEADLOCK';
	exports[150]  = 'HA_ERR_CANNOT_ADD_FOREIGN';
	exports[151]  = 'HA_ERR_NO_REFERENCED_ROW';
	exports[152]  = 'HA_ERR_ROW_IS_REFERENCED';
	exports[153]  = 'HA_ERR_NO_SAVEPOINT';
	exports[154]  = 'HA_ERR_NON_UNIQUE_BLOCK_SIZE';
	exports[155]  = 'HA_ERR_NO_SUCH_TABLE';
	exports[156]  = 'HA_ERR_TABLE_EXIST';
	exports[157]  = 'HA_ERR_NO_CONNECTION';
	exports[158]  = 'HA_ERR_NULL_IN_SPATIAL';
	exports[159]  = 'HA_ERR_TABLE_DEF_CHANGED';
	exports[160]  = 'HA_ERR_NO_PARTITION_FOUND';
	exports[161]  = 'HA_ERR_RBR_LOGGING_FAILED';
	exports[162]  = 'HA_ERR_DROP_INDEX_FK';
	exports[163]  = 'HA_ERR_FOREIGN_DUPLICATE_KEY';
	exports[164]  = 'HA_ERR_TABLE_NEEDS_UPGRADE';
	exports[165]  = 'HA_ERR_TABLE_READONLY';
	exports[166]  = 'HA_ERR_AUTOINC_READ_FAILED';
	exports[167]  = 'HA_ERR_AUTOINC_ERANGE';
	exports[168]  = 'HA_ERR_GENERIC';
	exports[169]  = 'HA_ERR_RECORD_IS_THE_SAME';
	exports[170]  = 'HA_ERR_LOGGING_IMPOSSIBLE';
	exports[171]  = 'HA_ERR_CORRUPT_EVENT';
	exports[172]  = 'HA_ERR_NEW_FILE';
	exports[173]  = 'HA_ERR_ROWS_EVENT_APPLY';
	exports[174]  = 'HA_ERR_INITIALIZATION';
	exports[175]  = 'HA_ERR_FILE_TOO_SHORT';
	exports[176]  = 'HA_ERR_WRONG_CRC';
	exports[177]  = 'HA_ERR_TOO_MANY_CONCURRENT_TRXS';
	exports[178]  = 'HA_ERR_NOT_IN_LOCK_PARTITIONS';
	exports[179]  = 'HA_ERR_INDEX_COL_TOO_LONG';
	exports[180]  = 'HA_ERR_INDEX_CORRUPT';
	exports[181]  = 'HA_ERR_UNDO_REC_TOO_BIG';
	exports[182]  = 'HA_FTS_INVALID_DOCID';
	exports[183]  = 'HA_ERR_TABLE_IN_FK_CHECK';
	exports[184]  = 'HA_ERR_TABLESPACE_EXISTS';
	exports[185]  = 'HA_ERR_TOO_MANY_FIELDS';
	exports[186]  = 'HA_ERR_ROW_IN_WRONG_PARTITION';
	exports[187]  = 'HA_ERR_INNODB_READ_ONLY';
	exports[188]  = 'HA_ERR_FTS_EXCEED_RESULT_CACHE_LIMIT';
	exports[189]  = 'HA_ERR_TEMP_FILE_WRITE_FAILURE';
	exports[190]  = 'HA_ERR_INNODB_FORCED_RECOVERY';
	exports[191]  = 'HA_ERR_FTS_TOO_MANY_WORDS_IN_PHRASE';
	exports[192]  = 'HA_ERR_FK_DEPTH_EXCEEDED';
	exports[193]  = 'HA_MISSING_CREATE_OPTION';
	exports[194]  = 'HA_ERR_SE_OUT_OF_MEMORY';
	exports[195]  = 'HA_ERR_TABLE_CORRUPT';
	exports[196]  = 'HA_ERR_QUERY_INTERRUPTED';
	exports[197]  = 'HA_ERR_TABLESPACE_MISSING';
	exports[198]  = 'HA_ERR_TABLESPACE_IS_NOT_EMPTY';
	exports[199]  = 'HA_ERR_WRONG_FILE_NAME';
	exports[200]  = 'HA_ERR_NOT_ALLOWED_COMMAND';
	exports[201]  = 'HA_ERR_COMPUTE_FAILED';
	exports[1000] = 'ER_HASHCHK';
	exports[1001] = 'ER_NISAMCHK';
	exports[1002] = 'ER_NO';
	exports[1003] = 'ER_YES';
	exports[1004] = 'ER_CANT_CREATE_FILE';
	exports[1005] = 'ER_CANT_CREATE_TABLE';
	exports[1006] = 'ER_CANT_CREATE_DB';
	exports[1007] = 'ER_DB_CREATE_EXISTS';
	exports[1008] = 'ER_DB_DROP_EXISTS';
	exports[1009] = 'ER_DB_DROP_DELETE';
	exports[1010] = 'ER_DB_DROP_RMDIR';
	exports[1011] = 'ER_CANT_DELETE_FILE';
	exports[1012] = 'ER_CANT_FIND_SYSTEM_REC';
	exports[1013] = 'ER_CANT_GET_STAT';
	exports[1014] = 'ER_CANT_GET_WD';
	exports[1015] = 'ER_CANT_LOCK';
	exports[1016] = 'ER_CANT_OPEN_FILE';
	exports[1017] = 'ER_FILE_NOT_FOUND';
	exports[1018] = 'ER_CANT_READ_DIR';
	exports[1019] = 'ER_CANT_SET_WD';
	exports[1020] = 'ER_CHECKREAD';
	exports[1021] = 'ER_DISK_FULL';
	exports[1022] = 'ER_DUP_KEY';
	exports[1023] = 'ER_ERROR_ON_CLOSE';
	exports[1024] = 'ER_ERROR_ON_READ';
	exports[1025] = 'ER_ERROR_ON_RENAME';
	exports[1026] = 'ER_ERROR_ON_WRITE';
	exports[1027] = 'ER_FILE_USED';
	exports[1028] = 'ER_FILSORT_ABORT';
	exports[1029] = 'ER_FORM_NOT_FOUND';
	exports[1030] = 'ER_GET_ERRNO';
	exports[1031] = 'ER_ILLEGAL_HA';
	exports[1032] = 'ER_KEY_NOT_FOUND';
	exports[1033] = 'ER_NOT_FORM_FILE';
	exports[1034] = 'ER_NOT_KEYFILE';
	exports[1035] = 'ER_OLD_KEYFILE';
	exports[1036] = 'ER_OPEN_AS_READONLY';
	exports[1037] = 'ER_OUTOFMEMORY';
	exports[1038] = 'ER_OUT_OF_SORTMEMORY';
	exports[1039] = 'ER_UNEXPECTED_EOF';
	exports[1040] = 'ER_CON_COUNT_ERROR';
	exports[1041] = 'ER_OUT_OF_RESOURCES';
	exports[1042] = 'ER_BAD_HOST_ERROR';
	exports[1043] = 'ER_HANDSHAKE_ERROR';
	exports[1044] = 'ER_DBACCESS_DENIED_ERROR';
	exports[1045] = 'ER_ACCESS_DENIED_ERROR';
	exports[1046] = 'ER_NO_DB_ERROR';
	exports[1047] = 'ER_UNKNOWN_COM_ERROR';
	exports[1048] = 'ER_BAD_NULL_ERROR';
	exports[1049] = 'ER_BAD_DB_ERROR';
	exports[1050] = 'ER_TABLE_EXISTS_ERROR';
	exports[1051] = 'ER_BAD_TABLE_ERROR';
	exports[1052] = 'ER_NON_UNIQ_ERROR';
	exports[1053] = 'ER_SERVER_SHUTDOWN';
	exports[1054] = 'ER_BAD_FIELD_ERROR';
	exports[1055] = 'ER_WRONG_FIELD_WITH_GROUP';
	exports[1056] = 'ER_WRONG_GROUP_FIELD';
	exports[1057] = 'ER_WRONG_SUM_SELECT';
	exports[1058] = 'ER_WRONG_VALUE_COUNT';
	exports[1059] = 'ER_TOO_LONG_IDENT';
	exports[1060] = 'ER_DUP_FIELDNAME';
	exports[1061] = 'ER_DUP_KEYNAME';
	exports[1062] = 'ER_DUP_ENTRY';
	exports[1063] = 'ER_WRONG_FIELD_SPEC';
	exports[1064] = 'ER_PARSE_ERROR';
	exports[1065] = 'ER_EMPTY_QUERY';
	exports[1066] = 'ER_NONUNIQ_TABLE';
	exports[1067] = 'ER_INVALID_DEFAULT';
	exports[1068] = 'ER_MULTIPLE_PRI_KEY';
	exports[1069] = 'ER_TOO_MANY_KEYS';
	exports[1070] = 'ER_TOO_MANY_KEY_PARTS';
	exports[1071] = 'ER_TOO_LONG_KEY';
	exports[1072] = 'ER_KEY_COLUMN_DOES_NOT_EXITS';
	exports[1073] = 'ER_BLOB_USED_AS_KEY';
	exports[1074] = 'ER_TOO_BIG_FIELDLENGTH';
	exports[1075] = 'ER_WRONG_AUTO_KEY';
	exports[1076] = 'ER_READY';
	exports[1077] = 'ER_NORMAL_SHUTDOWN';
	exports[1078] = 'ER_GOT_SIGNAL';
	exports[1079] = 'ER_SHUTDOWN_COMPLETE';
	exports[1080] = 'ER_FORCING_CLOSE';
	exports[1081] = 'ER_IPSOCK_ERROR';
	exports[1082] = 'ER_NO_SUCH_INDEX';
	exports[1083] = 'ER_WRONG_FIELD_TERMINATORS';
	exports[1084] = 'ER_BLOBS_AND_NO_TERMINATED';
	exports[1085] = 'ER_TEXTFILE_NOT_READABLE';
	exports[1086] = 'ER_FILE_EXISTS_ERROR';
	exports[1087] = 'ER_LOAD_INFO';
	exports[1088] = 'ER_ALTER_INFO';
	exports[1089] = 'ER_WRONG_SUB_KEY';
	exports[1090] = 'ER_CANT_REMOVE_ALL_FIELDS';
	exports[1091] = 'ER_CANT_DROP_FIELD_OR_KEY';
	exports[1092] = 'ER_INSERT_INFO';
	exports[1093] = 'ER_UPDATE_TABLE_USED';
	exports[1094] = 'ER_NO_SUCH_THREAD';
	exports[1095] = 'ER_KILL_DENIED_ERROR';
	exports[1096] = 'ER_NO_TABLES_USED';
	exports[1097] = 'ER_TOO_BIG_SET';
	exports[1098] = 'ER_NO_UNIQUE_LOGFILE';
	exports[1099] = 'ER_TABLE_NOT_LOCKED_FOR_WRITE';
	exports[1100] = 'ER_TABLE_NOT_LOCKED';
	exports[1101] = 'ER_BLOB_CANT_HAVE_DEFAULT';
	exports[1102] = 'ER_WRONG_DB_NAME';
	exports[1103] = 'ER_WRONG_TABLE_NAME';
	exports[1104] = 'ER_TOO_BIG_SELECT';
	exports[1105] = 'ER_UNKNOWN_ERROR';
	exports[1106] = 'ER_UNKNOWN_PROCEDURE';
	exports[1107] = 'ER_WRONG_PARAMCOUNT_TO_PROCEDURE';
	exports[1108] = 'ER_WRONG_PARAMETERS_TO_PROCEDURE';
	exports[1109] = 'ER_UNKNOWN_TABLE';
	exports[1110] = 'ER_FIELD_SPECIFIED_TWICE';
	exports[1111] = 'ER_INVALID_GROUP_FUNC_USE';
	exports[1112] = 'ER_UNSUPPORTED_EXTENSION';
	exports[1113] = 'ER_TABLE_MUST_HAVE_COLUMNS';
	exports[1114] = 'ER_RECORD_FILE_FULL';
	exports[1115] = 'ER_UNKNOWN_CHARACTER_SET';
	exports[1116] = 'ER_TOO_MANY_TABLES';
	exports[1117] = 'ER_TOO_MANY_FIELDS';
	exports[1118] = 'ER_TOO_BIG_ROWSIZE';
	exports[1119] = 'ER_STACK_OVERRUN';
	exports[1120] = 'ER_WRONG_OUTER_JOIN';
	exports[1121] = 'ER_NULL_COLUMN_IN_INDEX';
	exports[1122] = 'ER_CANT_FIND_UDF';
	exports[1123] = 'ER_CANT_INITIALIZE_UDF';
	exports[1124] = 'ER_UDF_NO_PATHS';
	exports[1125] = 'ER_UDF_EXISTS';
	exports[1126] = 'ER_CANT_OPEN_LIBRARY';
	exports[1127] = 'ER_CANT_FIND_DL_ENTRY';
	exports[1128] = 'ER_FUNCTION_NOT_DEFINED';
	exports[1129] = 'ER_HOST_IS_BLOCKED';
	exports[1130] = 'ER_HOST_NOT_PRIVILEGED';
	exports[1131] = 'ER_PASSWORD_ANONYMOUS_USER';
	exports[1132] = 'ER_PASSWORD_NOT_ALLOWED';
	exports[1133] = 'ER_PASSWORD_NO_MATCH';
	exports[1134] = 'ER_UPDATE_INFO';
	exports[1135] = 'ER_CANT_CREATE_THREAD';
	exports[1136] = 'ER_WRONG_VALUE_COUNT_ON_ROW';
	exports[1137] = 'ER_CANT_REOPEN_TABLE';
	exports[1138] = 'ER_INVALID_USE_OF_NULL';
	exports[1139] = 'ER_REGEXP_ERROR';
	exports[1140] = 'ER_MIX_OF_GROUP_FUNC_AND_FIELDS';
	exports[1141] = 'ER_NONEXISTING_GRANT';
	exports[1142] = 'ER_TABLEACCESS_DENIED_ERROR';
	exports[1143] = 'ER_COLUMNACCESS_DENIED_ERROR';
	exports[1144] = 'ER_ILLEGAL_GRANT_FOR_TABLE';
	exports[1145] = 'ER_GRANT_WRONG_HOST_OR_USER';
	exports[1146] = 'ER_NO_SUCH_TABLE';
	exports[1147] = 'ER_NONEXISTING_TABLE_GRANT';
	exports[1148] = 'ER_NOT_ALLOWED_COMMAND';
	exports[1149] = 'ER_SYNTAX_ERROR';
	exports[1150] = 'ER_DELAYED_CANT_CHANGE_LOCK';
	exports[1151] = 'ER_TOO_MANY_DELAYED_THREADS';
	exports[1152] = 'ER_ABORTING_CONNECTION';
	exports[1153] = 'ER_NET_PACKET_TOO_LARGE';
	exports[1154] = 'ER_NET_READ_ERROR_FROM_PIPE';
	exports[1155] = 'ER_NET_FCNTL_ERROR';
	exports[1156] = 'ER_NET_PACKETS_OUT_OF_ORDER';
	exports[1157] = 'ER_NET_UNCOMPRESS_ERROR';
	exports[1158] = 'ER_NET_READ_ERROR';
	exports[1159] = 'ER_NET_READ_INTERRUPTED';
	exports[1160] = 'ER_NET_ERROR_ON_WRITE';
	exports[1161] = 'ER_NET_WRITE_INTERRUPTED';
	exports[1162] = 'ER_TOO_LONG_STRING';
	exports[1163] = 'ER_TABLE_CANT_HANDLE_BLOB';
	exports[1164] = 'ER_TABLE_CANT_HANDLE_AUTO_INCREMENT';
	exports[1165] = 'ER_DELAYED_INSERT_TABLE_LOCKED';
	exports[1166] = 'ER_WRONG_COLUMN_NAME';
	exports[1167] = 'ER_WRONG_KEY_COLUMN';
	exports[1168] = 'ER_WRONG_MRG_TABLE';
	exports[1169] = 'ER_DUP_UNIQUE';
	exports[1170] = 'ER_BLOB_KEY_WITHOUT_LENGTH';
	exports[1171] = 'ER_PRIMARY_CANT_HAVE_NULL';
	exports[1172] = 'ER_TOO_MANY_ROWS';
	exports[1173] = 'ER_REQUIRES_PRIMARY_KEY';
	exports[1174] = 'ER_NO_RAID_COMPILED';
	exports[1175] = 'ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE';
	exports[1176] = 'ER_KEY_DOES_NOT_EXITS';
	exports[1177] = 'ER_CHECK_NO_SUCH_TABLE';
	exports[1178] = 'ER_CHECK_NOT_IMPLEMENTED';
	exports[1179] = 'ER_CANT_DO_THIS_DURING_AN_TRANSACTION';
	exports[1180] = 'ER_ERROR_DURING_COMMIT';
	exports[1181] = 'ER_ERROR_DURING_ROLLBACK';
	exports[1182] = 'ER_ERROR_DURING_FLUSH_LOGS';
	exports[1183] = 'ER_ERROR_DURING_CHECKPOINT';
	exports[1184] = 'ER_NEW_ABORTING_CONNECTION';
	exports[1185] = 'ER_DUMP_NOT_IMPLEMENTED';
	exports[1186] = 'ER_FLUSH_MASTER_BINLOG_CLOSED';
	exports[1187] = 'ER_INDEX_REBUILD';
	exports[1188] = 'ER_MASTER';
	exports[1189] = 'ER_MASTER_NET_READ';
	exports[1190] = 'ER_MASTER_NET_WRITE';
	exports[1191] = 'ER_FT_MATCHING_KEY_NOT_FOUND';
	exports[1192] = 'ER_LOCK_OR_ACTIVE_TRANSACTION';
	exports[1193] = 'ER_UNKNOWN_SYSTEM_VARIABLE';
	exports[1194] = 'ER_CRASHED_ON_USAGE';
	exports[1195] = 'ER_CRASHED_ON_REPAIR';
	exports[1196] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK';
	exports[1197] = 'ER_TRANS_CACHE_FULL';
	exports[1198] = 'ER_SLAVE_MUST_STOP';
	exports[1199] = 'ER_SLAVE_NOT_RUNNING';
	exports[1200] = 'ER_BAD_SLAVE';
	exports[1201] = 'ER_MASTER_INFO';
	exports[1202] = 'ER_SLAVE_THREAD';
	exports[1203] = 'ER_TOO_MANY_USER_CONNECTIONS';
	exports[1204] = 'ER_SET_CONSTANTS_ONLY';
	exports[1205] = 'ER_LOCK_WAIT_TIMEOUT';
	exports[1206] = 'ER_LOCK_TABLE_FULL';
	exports[1207] = 'ER_READ_ONLY_TRANSACTION';
	exports[1208] = 'ER_DROP_DB_WITH_READ_LOCK';
	exports[1209] = 'ER_CREATE_DB_WITH_READ_LOCK';
	exports[1210] = 'ER_WRONG_ARGUMENTS';
	exports[1211] = 'ER_NO_PERMISSION_TO_CREATE_USER';
	exports[1212] = 'ER_UNION_TABLES_IN_DIFFERENT_DIR';
	exports[1213] = 'ER_LOCK_DEADLOCK';
	exports[1214] = 'ER_TABLE_CANT_HANDLE_FT';
	exports[1215] = 'ER_CANNOT_ADD_FOREIGN';
	exports[1216] = 'ER_NO_REFERENCED_ROW';
	exports[1217] = 'ER_ROW_IS_REFERENCED';
	exports[1218] = 'ER_CONNECT_TO_MASTER';
	exports[1219] = 'ER_QUERY_ON_MASTER';
	exports[1220] = 'ER_ERROR_WHEN_EXECUTING_COMMAND';
	exports[1221] = 'ER_WRONG_USAGE';
	exports[1222] = 'ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT';
	exports[1223] = 'ER_CANT_UPDATE_WITH_READLOCK';
	exports[1224] = 'ER_MIXING_NOT_ALLOWED';
	exports[1225] = 'ER_DUP_ARGUMENT';
	exports[1226] = 'ER_USER_LIMIT_REACHED';
	exports[1227] = 'ER_SPECIFIC_ACCESS_DENIED_ERROR';
	exports[1228] = 'ER_LOCAL_VARIABLE';
	exports[1229] = 'ER_GLOBAL_VARIABLE';
	exports[1230] = 'ER_NO_DEFAULT';
	exports[1231] = 'ER_WRONG_VALUE_FOR_VAR';
	exports[1232] = 'ER_WRONG_TYPE_FOR_VAR';
	exports[1233] = 'ER_VAR_CANT_BE_READ';
	exports[1234] = 'ER_CANT_USE_OPTION_HERE';
	exports[1235] = 'ER_NOT_SUPPORTED_YET';
	exports[1236] = 'ER_MASTER_FATAL_ERROR_READING_BINLOG';
	exports[1237] = 'ER_SLAVE_IGNORED_TABLE';
	exports[1238] = 'ER_INCORRECT_GLOBAL_LOCAL_VAR';
	exports[1239] = 'ER_WRONG_FK_DEF';
	exports[1240] = 'ER_KEY_REF_DO_NOT_MATCH_TABLE_REF';
	exports[1241] = 'ER_OPERAND_COLUMNS';
	exports[1242] = 'ER_SUBQUERY_NO_1_ROW';
	exports[1243] = 'ER_UNKNOWN_STMT_HANDLER';
	exports[1244] = 'ER_CORRUPT_HELP_DB';
	exports[1245] = 'ER_CYCLIC_REFERENCE';
	exports[1246] = 'ER_AUTO_CONVERT';
	exports[1247] = 'ER_ILLEGAL_REFERENCE';
	exports[1248] = 'ER_DERIVED_MUST_HAVE_ALIAS';
	exports[1249] = 'ER_SELECT_REDUCED';
	exports[1250] = 'ER_TABLENAME_NOT_ALLOWED_HERE';
	exports[1251] = 'ER_NOT_SUPPORTED_AUTH_MODE';
	exports[1252] = 'ER_SPATIAL_CANT_HAVE_NULL';
	exports[1253] = 'ER_COLLATION_CHARSET_MISMATCH';
	exports[1254] = 'ER_SLAVE_WAS_RUNNING';
	exports[1255] = 'ER_SLAVE_WAS_NOT_RUNNING';
	exports[1256] = 'ER_TOO_BIG_FOR_UNCOMPRESS';
	exports[1257] = 'ER_ZLIB_Z_MEM_ERROR';
	exports[1258] = 'ER_ZLIB_Z_BUF_ERROR';
	exports[1259] = 'ER_ZLIB_Z_DATA_ERROR';
	exports[1260] = 'ER_CUT_VALUE_GROUP_CONCAT';
	exports[1261] = 'ER_WARN_TOO_FEW_RECORDS';
	exports[1262] = 'ER_WARN_TOO_MANY_RECORDS';
	exports[1263] = 'ER_WARN_NULL_TO_NOTNULL';
	exports[1264] = 'ER_WARN_DATA_OUT_OF_RANGE';
	exports[1265] = 'WARN_DATA_TRUNCATED';
	exports[1266] = 'ER_WARN_USING_OTHER_HANDLER';
	exports[1267] = 'ER_CANT_AGGREGATE_2COLLATIONS';
	exports[1268] = 'ER_DROP_USER';
	exports[1269] = 'ER_REVOKE_GRANTS';
	exports[1270] = 'ER_CANT_AGGREGATE_3COLLATIONS';
	exports[1271] = 'ER_CANT_AGGREGATE_NCOLLATIONS';
	exports[1272] = 'ER_VARIABLE_IS_NOT_STRUCT';
	exports[1273] = 'ER_UNKNOWN_COLLATION';
	exports[1274] = 'ER_SLAVE_IGNORED_SSL_PARAMS';
	exports[1275] = 'ER_SERVER_IS_IN_SECURE_AUTH_MODE';
	exports[1276] = 'ER_WARN_FIELD_RESOLVED';
	exports[1277] = 'ER_BAD_SLAVE_UNTIL_COND';
	exports[1278] = 'ER_MISSING_SKIP_SLAVE';
	exports[1279] = 'ER_UNTIL_COND_IGNORED';
	exports[1280] = 'ER_WRONG_NAME_FOR_INDEX';
	exports[1281] = 'ER_WRONG_NAME_FOR_CATALOG';
	exports[1282] = 'ER_WARN_QC_RESIZE';
	exports[1283] = 'ER_BAD_FT_COLUMN';
	exports[1284] = 'ER_UNKNOWN_KEY_CACHE';
	exports[1285] = 'ER_WARN_HOSTNAME_WONT_WORK';
	exports[1286] = 'ER_UNKNOWN_STORAGE_ENGINE';
	exports[1287] = 'ER_WARN_DEPRECATED_SYNTAX';
	exports[1288] = 'ER_NON_UPDATABLE_TABLE';
	exports[1289] = 'ER_FEATURE_DISABLED';
	exports[1290] = 'ER_OPTION_PREVENTS_STATEMENT';
	exports[1291] = 'ER_DUPLICATED_VALUE_IN_TYPE';
	exports[1292] = 'ER_TRUNCATED_WRONG_VALUE';
	exports[1293] = 'ER_TOO_MUCH_AUTO_TIMESTAMP_COLS';
	exports[1294] = 'ER_INVALID_ON_UPDATE';
	exports[1295] = 'ER_UNSUPPORTED_PS';
	exports[1296] = 'ER_GET_ERRMSG';
	exports[1297] = 'ER_GET_TEMPORARY_ERRMSG';
	exports[1298] = 'ER_UNKNOWN_TIME_ZONE';
	exports[1299] = 'ER_WARN_INVALID_TIMESTAMP';
	exports[1300] = 'ER_INVALID_CHARACTER_STRING';
	exports[1301] = 'ER_WARN_ALLOWED_PACKET_OVERFLOWED';
	exports[1302] = 'ER_CONFLICTING_DECLARATIONS';
	exports[1303] = 'ER_SP_NO_RECURSIVE_CREATE';
	exports[1304] = 'ER_SP_ALREADY_EXISTS';
	exports[1305] = 'ER_SP_DOES_NOT_EXIST';
	exports[1306] = 'ER_SP_DROP_FAILED';
	exports[1307] = 'ER_SP_STORE_FAILED';
	exports[1308] = 'ER_SP_LILABEL_MISMATCH';
	exports[1309] = 'ER_SP_LABEL_REDEFINE';
	exports[1310] = 'ER_SP_LABEL_MISMATCH';
	exports[1311] = 'ER_SP_UNINIT_VAR';
	exports[1312] = 'ER_SP_BADSELECT';
	exports[1313] = 'ER_SP_BADRETURN';
	exports[1314] = 'ER_SP_BADSTATEMENT';
	exports[1315] = 'ER_UPDATE_LOG_DEPRECATED_IGNORED';
	exports[1316] = 'ER_UPDATE_LOG_DEPRECATED_TRANSLATED';
	exports[1317] = 'ER_QUERY_INTERRUPTED';
	exports[1318] = 'ER_SP_WRONG_NO_OF_ARGS';
	exports[1319] = 'ER_SP_COND_MISMATCH';
	exports[1320] = 'ER_SP_NORETURN';
	exports[1321] = 'ER_SP_NORETURNEND';
	exports[1322] = 'ER_SP_BAD_CURSOR_QUERY';
	exports[1323] = 'ER_SP_BAD_CURSOR_SELECT';
	exports[1324] = 'ER_SP_CURSOR_MISMATCH';
	exports[1325] = 'ER_SP_CURSOR_ALREADY_OPEN';
	exports[1326] = 'ER_SP_CURSOR_NOT_OPEN';
	exports[1327] = 'ER_SP_UNDECLARED_VAR';
	exports[1328] = 'ER_SP_WRONG_NO_OF_FETCH_ARGS';
	exports[1329] = 'ER_SP_FETCH_NO_DATA';
	exports[1330] = 'ER_SP_DUP_PARAM';
	exports[1331] = 'ER_SP_DUP_VAR';
	exports[1332] = 'ER_SP_DUP_COND';
	exports[1333] = 'ER_SP_DUP_CURS';
	exports[1334] = 'ER_SP_CANT_ALTER';
	exports[1335] = 'ER_SP_SUBSELECT_NYI';
	exports[1336] = 'ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG';
	exports[1337] = 'ER_SP_VARCOND_AFTER_CURSHNDLR';
	exports[1338] = 'ER_SP_CURSOR_AFTER_HANDLER';
	exports[1339] = 'ER_SP_CASE_NOT_FOUND';
	exports[1340] = 'ER_FPARSER_TOO_BIG_FILE';
	exports[1341] = 'ER_FPARSER_BAD_HEADER';
	exports[1342] = 'ER_FPARSER_EOF_IN_COMMENT';
	exports[1343] = 'ER_FPARSER_ERROR_IN_PARAMETER';
	exports[1344] = 'ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER';
	exports[1345] = 'ER_VIEW_NO_EXPLAIN';
	exports[1346] = 'ER_FRM_UNKNOWN_TYPE';
	exports[1347] = 'ER_WRONG_OBJECT';
	exports[1348] = 'ER_NONUPDATEABLE_COLUMN';
	exports[1349] = 'ER_VIEW_SELECT_DERIVED';
	exports[1350] = 'ER_VIEW_SELECT_CLAUSE';
	exports[1351] = 'ER_VIEW_SELECT_VARIABLE';
	exports[1352] = 'ER_VIEW_SELECT_TMPTABLE';
	exports[1353] = 'ER_VIEW_WRONG_LIST';
	exports[1354] = 'ER_WARN_VIEW_MERGE';
	exports[1355] = 'ER_WARN_VIEW_WITHOUT_KEY';
	exports[1356] = 'ER_VIEW_INVALID';
	exports[1357] = 'ER_SP_NO_DROP_SP';
	exports[1358] = 'ER_SP_GOTO_IN_HNDLR';
	exports[1359] = 'ER_TRG_ALREADY_EXISTS';
	exports[1360] = 'ER_TRG_DOES_NOT_EXIST';
	exports[1361] = 'ER_TRG_ON_VIEW_OR_TEMP_TABLE';
	exports[1362] = 'ER_TRG_CANT_CHANGE_ROW';
	exports[1363] = 'ER_TRG_NO_SUCH_ROW_IN_TRG';
	exports[1364] = 'ER_NO_DEFAULT_FOR_FIELD';
	exports[1365] = 'ER_DIVISION_BY_ZERO';
	exports[1366] = 'ER_TRUNCATED_WRONG_VALUE_FOR_FIELD';
	exports[1367] = 'ER_ILLEGAL_VALUE_FOR_TYPE';
	exports[1368] = 'ER_VIEW_NONUPD_CHECK';
	exports[1369] = 'ER_VIEW_CHECK_FAILED';
	exports[1370] = 'ER_PROCACCESS_DENIED_ERROR';
	exports[1371] = 'ER_RELAY_LOG_FAIL';
	exports[1372] = 'ER_PASSWD_LENGTH';
	exports[1373] = 'ER_UNKNOWN_TARGET_BINLOG';
	exports[1374] = 'ER_IO_ERR_LOG_INDEX_READ';
	exports[1375] = 'ER_BINLOG_PURGE_PROHIBITED';
	exports[1376] = 'ER_FSEEK_FAIL';
	exports[1377] = 'ER_BINLOG_PURGE_FATAL_ERR';
	exports[1378] = 'ER_LOG_IN_USE';
	exports[1379] = 'ER_LOG_PURGE_UNKNOWN_ERR';
	exports[1380] = 'ER_RELAY_LOG_INIT';
	exports[1381] = 'ER_NO_BINARY_LOGGING';
	exports[1382] = 'ER_RESERVED_SYNTAX';
	exports[1383] = 'ER_WSAS_FAILED';
	exports[1384] = 'ER_DIFF_GROUPS_PROC';
	exports[1385] = 'ER_NO_GROUP_FOR_PROC';
	exports[1386] = 'ER_ORDER_WITH_PROC';
	exports[1387] = 'ER_LOGGING_PROHIBIT_CHANGING_OF';
	exports[1388] = 'ER_NO_FILE_MAPPING';
	exports[1389] = 'ER_WRONG_MAGIC';
	exports[1390] = 'ER_PS_MANY_PARAM';
	exports[1391] = 'ER_KEY_PART_0';
	exports[1392] = 'ER_VIEW_CHECKSUM';
	exports[1393] = 'ER_VIEW_MULTIUPDATE';
	exports[1394] = 'ER_VIEW_NO_INSERT_FIELD_LIST';
	exports[1395] = 'ER_VIEW_DELETE_MERGE_VIEW';
	exports[1396] = 'ER_CANNOT_USER';
	exports[1397] = 'ER_XAER_NOTA';
	exports[1398] = 'ER_XAER_INVAL';
	exports[1399] = 'ER_XAER_RMFAIL';
	exports[1400] = 'ER_XAER_OUTSIDE';
	exports[1401] = 'ER_XAER_RMERR';
	exports[1402] = 'ER_XA_RBROLLBACK';
	exports[1403] = 'ER_NONEXISTING_PROC_GRANT';
	exports[1404] = 'ER_PROC_AUTO_GRANT_FAIL';
	exports[1405] = 'ER_PROC_AUTO_REVOKE_FAIL';
	exports[1406] = 'ER_DATA_TOO_LONG';
	exports[1407] = 'ER_SP_BAD_SQLSTATE';
	exports[1408] = 'ER_STARTUP';
	exports[1409] = 'ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR';
	exports[1410] = 'ER_CANT_CREATE_USER_WITH_GRANT';
	exports[1411] = 'ER_WRONG_VALUE_FOR_TYPE';
	exports[1412] = 'ER_TABLE_DEF_CHANGED';
	exports[1413] = 'ER_SP_DUP_HANDLER';
	exports[1414] = 'ER_SP_NOT_VAR_ARG';
	exports[1415] = 'ER_SP_NO_RETSET';
	exports[1416] = 'ER_CANT_CREATE_GEOMETRY_OBJECT';
	exports[1417] = 'ER_FAILED_ROUTINE_BREAK_BINLOG';
	exports[1418] = 'ER_BINLOG_UNSAFE_ROUTINE';
	exports[1419] = 'ER_BINLOG_CREATE_ROUTINE_NEED_SUPER';
	exports[1420] = 'ER_EXEC_STMT_WITH_OPEN_CURSOR';
	exports[1421] = 'ER_STMT_HAS_NO_OPEN_CURSOR';
	exports[1422] = 'ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG';
	exports[1423] = 'ER_NO_DEFAULT_FOR_VIEW_FIELD';
	exports[1424] = 'ER_SP_NO_RECURSION';
	exports[1425] = 'ER_TOO_BIG_SCALE';
	exports[1426] = 'ER_TOO_BIG_PRECISION';
	exports[1427] = 'ER_M_BIGGER_THAN_D';
	exports[1428] = 'ER_WRONG_LOCK_OF_SYSTEM_TABLE';
	exports[1429] = 'ER_CONNECT_TO_FOREIGN_DATA_SOURCE';
	exports[1430] = 'ER_QUERY_ON_FOREIGN_DATA_SOURCE';
	exports[1431] = 'ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST';
	exports[1432] = 'ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE';
	exports[1433] = 'ER_FOREIGN_DATA_STRING_INVALID';
	exports[1434] = 'ER_CANT_CREATE_FEDERATED_TABLE';
	exports[1435] = 'ER_TRG_IN_WRONG_SCHEMA';
	exports[1436] = 'ER_STACK_OVERRUN_NEED_MORE';
	exports[1437] = 'ER_TOO_LONG_BODY';
	exports[1438] = 'ER_WARN_CANT_DROP_DEFAULT_KEYCACHE';
	exports[1439] = 'ER_TOO_BIG_DISPLAYWIDTH';
	exports[1440] = 'ER_XAER_DUPID';
	exports[1441] = 'ER_DATETIME_FUNCTION_OVERFLOW';
	exports[1442] = 'ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG';
	exports[1443] = 'ER_VIEW_PREVENT_UPDATE';
	exports[1444] = 'ER_PS_NO_RECURSION';
	exports[1445] = 'ER_SP_CANT_SET_AUTOCOMMIT';
	exports[1446] = 'ER_MALFORMED_DEFINER';
	exports[1447] = 'ER_VIEW_FRM_NO_USER';
	exports[1448] = 'ER_VIEW_OTHER_USER';
	exports[1449] = 'ER_NO_SUCH_USER';
	exports[1450] = 'ER_FORBID_SCHEMA_CHANGE';
	exports[1451] = 'ER_ROW_IS_REFERENCED_2';
	exports[1452] = 'ER_NO_REFERENCED_ROW_2';
	exports[1453] = 'ER_SP_BAD_VAR_SHADOW';
	exports[1454] = 'ER_TRG_NO_DEFINER';
	exports[1455] = 'ER_OLD_FILE_FORMAT';
	exports[1456] = 'ER_SP_RECURSION_LIMIT';
	exports[1457] = 'ER_SP_PROC_TABLE_CORRUPT';
	exports[1458] = 'ER_SP_WRONG_NAME';
	exports[1459] = 'ER_TABLE_NEEDS_UPGRADE';
	exports[1460] = 'ER_SP_NO_AGGREGATE';
	exports[1461] = 'ER_MAX_PREPARED_STMT_COUNT_REACHED';
	exports[1462] = 'ER_VIEW_RECURSIVE';
	exports[1463] = 'ER_NON_GROUPING_FIELD_USED';
	exports[1464] = 'ER_TABLE_CANT_HANDLE_SPKEYS';
	exports[1465] = 'ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA';
	exports[1466] = 'ER_REMOVED_SPACES';
	exports[1467] = 'ER_AUTOINC_READ_FAILED';
	exports[1468] = 'ER_USERNAME';
	exports[1469] = 'ER_HOSTNAME';
	exports[1470] = 'ER_WRONG_STRING_LENGTH';
	exports[1471] = 'ER_NON_INSERTABLE_TABLE';
	exports[1472] = 'ER_ADMIN_WRONG_MRG_TABLE';
	exports[1473] = 'ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT';
	exports[1474] = 'ER_NAME_BECOMES_EMPTY';
	exports[1475] = 'ER_AMBIGUOUS_FIELD_TERM';
	exports[1476] = 'ER_FOREIGN_SERVER_EXISTS';
	exports[1477] = 'ER_FOREIGN_SERVER_DOESNT_EXIST';
	exports[1478] = 'ER_ILLEGAL_HA_CREATE_OPTION';
	exports[1479] = 'ER_PARTITION_REQUIRES_VALUES_ERROR';
	exports[1480] = 'ER_PARTITION_WRONG_VALUES_ERROR';
	exports[1481] = 'ER_PARTITION_MAXVALUE_ERROR';
	exports[1482] = 'ER_PARTITION_SUBPARTITION_ERROR';
	exports[1483] = 'ER_PARTITION_SUBPART_MIX_ERROR';
	exports[1484] = 'ER_PARTITION_WRONG_NO_PART_ERROR';
	exports[1485] = 'ER_PARTITION_WRONG_NO_SUBPART_ERROR';
	exports[1486] = 'ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR';
	exports[1487] = 'ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR';
	exports[1488] = 'ER_FIELD_NOT_FOUND_PART_ERROR';
	exports[1489] = 'ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR';
	exports[1490] = 'ER_INCONSISTENT_PARTITION_INFO_ERROR';
	exports[1491] = 'ER_PARTITION_FUNC_NOT_ALLOWED_ERROR';
	exports[1492] = 'ER_PARTITIONS_MUST_BE_DEFINED_ERROR';
	exports[1493] = 'ER_RANGE_NOT_INCREASING_ERROR';
	exports[1494] = 'ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR';
	exports[1495] = 'ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR';
	exports[1496] = 'ER_PARTITION_ENTRY_ERROR';
	exports[1497] = 'ER_MIX_HANDLER_ERROR';
	exports[1498] = 'ER_PARTITION_NOT_DEFINED_ERROR';
	exports[1499] = 'ER_TOO_MANY_PARTITIONS_ERROR';
	exports[1500] = 'ER_SUBPARTITION_ERROR';
	exports[1501] = 'ER_CANT_CREATE_HANDLER_FILE';
	exports[1502] = 'ER_BLOB_FIELD_IN_PART_FUNC_ERROR';
	exports[1503] = 'ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF';
	exports[1504] = 'ER_NO_PARTS_ERROR';
	exports[1505] = 'ER_PARTITION_MGMT_ON_NONPARTITIONED';
	exports[1506] = 'ER_FOREIGN_KEY_ON_PARTITIONED';
	exports[1507] = 'ER_DROP_PARTITION_NON_EXISTENT';
	exports[1508] = 'ER_DROP_LAST_PARTITION';
	exports[1509] = 'ER_COALESCE_ONLY_ON_HASH_PARTITION';
	exports[1510] = 'ER_REORG_HASH_ONLY_ON_SAME_NO';
	exports[1511] = 'ER_REORG_NO_PARAM_ERROR';
	exports[1512] = 'ER_ONLY_ON_RANGE_LIST_PARTITION';
	exports[1513] = 'ER_ADD_PARTITION_SUBPART_ERROR';
	exports[1514] = 'ER_ADD_PARTITION_NO_NEW_PARTITION';
	exports[1515] = 'ER_COALESCE_PARTITION_NO_PARTITION';
	exports[1516] = 'ER_REORG_PARTITION_NOT_EXIST';
	exports[1517] = 'ER_SAME_NAME_PARTITION';
	exports[1518] = 'ER_NO_BINLOG_ERROR';
	exports[1519] = 'ER_CONSECUTIVE_REORG_PARTITIONS';
	exports[1520] = 'ER_REORG_OUTSIDE_RANGE';
	exports[1521] = 'ER_PARTITION_FUNCTION_FAILURE';
	exports[1522] = 'ER_PART_STATE_ERROR';
	exports[1523] = 'ER_LIMITED_PART_RANGE';
	exports[1524] = 'ER_PLUGIN_IS_NOT_LOADED';
	exports[1525] = 'ER_WRONG_VALUE';
	exports[1526] = 'ER_NO_PARTITION_FOR_GIVEN_VALUE';
	exports[1527] = 'ER_FILEGROUP_OPTION_ONLY_ONCE';
	exports[1528] = 'ER_CREATE_FILEGROUP_FAILED';
	exports[1529] = 'ER_DROP_FILEGROUP_FAILED';
	exports[1530] = 'ER_TABLESPACE_AUTO_EXTEND_ERROR';
	exports[1531] = 'ER_WRONG_SIZE_NUMBER';
	exports[1532] = 'ER_SIZE_OVERFLOW_ERROR';
	exports[1533] = 'ER_ALTER_FILEGROUP_FAILED';
	exports[1534] = 'ER_BINLOG_ROW_LOGGING_FAILED';
	exports[1535] = 'ER_BINLOG_ROW_WRONG_TABLE_DEF';
	exports[1536] = 'ER_BINLOG_ROW_RBR_TO_SBR';
	exports[1537] = 'ER_EVENT_ALREADY_EXISTS';
	exports[1538] = 'ER_EVENT_STORE_FAILED';
	exports[1539] = 'ER_EVENT_DOES_NOT_EXIST';
	exports[1540] = 'ER_EVENT_CANT_ALTER';
	exports[1541] = 'ER_EVENT_DROP_FAILED';
	exports[1542] = 'ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG';
	exports[1543] = 'ER_EVENT_ENDS_BEFORE_STARTS';
	exports[1544] = 'ER_EVENT_EXEC_TIME_IN_THE_PAST';
	exports[1545] = 'ER_EVENT_OPEN_TABLE_FAILED';
	exports[1546] = 'ER_EVENT_NEITHER_M_EXPR_NOR_M_AT';
	exports[1547] = 'ER_COL_COUNT_DOESNT_MATCH_CORRUPTED';
	exports[1548] = 'ER_CANNOT_LOAD_FROM_TABLE';
	exports[1549] = 'ER_EVENT_CANNOT_DELETE';
	exports[1550] = 'ER_EVENT_COMPILE_ERROR';
	exports[1551] = 'ER_EVENT_SAME_NAME';
	exports[1552] = 'ER_EVENT_DATA_TOO_LONG';
	exports[1553] = 'ER_DROP_INDEX_FK';
	exports[1554] = 'ER_WARN_DEPRECATED_SYNTAX_WITH_VER';
	exports[1555] = 'ER_CANT_WRITE_LOCK_LOG_TABLE';
	exports[1556] = 'ER_CANT_LOCK_LOG_TABLE';
	exports[1557] = 'ER_FOREIGN_DUPLICATE_KEY';
	exports[1558] = 'ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE';
	exports[1559] = 'ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR';
	exports[1560] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT';
	exports[1561] = 'ER_NDB_CANT_SWITCH_BINLOG_FORMAT';
	exports[1562] = 'ER_PARTITION_NO_TEMPORARY';
	exports[1563] = 'ER_PARTITION_CONST_DOMAIN_ERROR';
	exports[1564] = 'ER_PARTITION_FUNCTION_IS_NOT_ALLOWED';
	exports[1565] = 'ER_DDL_LOG_ERROR';
	exports[1566] = 'ER_NULL_IN_VALUES_LESS_THAN';
	exports[1567] = 'ER_WRONG_PARTITION_NAME';
	exports[1568] = 'ER_CANT_CHANGE_TX_CHARACTERISTICS';
	exports[1569] = 'ER_DUP_ENTRY_AUTOINCREMENT_CASE';
	exports[1570] = 'ER_EVENT_MODIFY_QUEUE_ERROR';
	exports[1571] = 'ER_EVENT_SET_VAR_ERROR';
	exports[1572] = 'ER_PARTITION_MERGE_ERROR';
	exports[1573] = 'ER_CANT_ACTIVATE_LOG';
	exports[1574] = 'ER_RBR_NOT_AVAILABLE';
	exports[1575] = 'ER_BASE64_DECODE_ERROR';
	exports[1576] = 'ER_EVENT_RECURSION_FORBIDDEN';
	exports[1577] = 'ER_EVENTS_DB_ERROR';
	exports[1578] = 'ER_ONLY_INTEGERS_ALLOWED';
	exports[1579] = 'ER_UNSUPORTED_LOG_ENGINE';
	exports[1580] = 'ER_BAD_LOG_STATEMENT';
	exports[1581] = 'ER_CANT_RENAME_LOG_TABLE';
	exports[1582] = 'ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT';
	exports[1583] = 'ER_WRONG_PARAMETERS_TO_NATIVE_FCT';
	exports[1584] = 'ER_WRONG_PARAMETERS_TO_STORED_FCT';
	exports[1585] = 'ER_NATIVE_FCT_NAME_COLLISION';
	exports[1586] = 'ER_DUP_ENTRY_WITH_KEY_NAME';
	exports[1587] = 'ER_BINLOG_PURGE_EMFILE';
	exports[1588] = 'ER_EVENT_CANNOT_CREATE_IN_THE_PAST';
	exports[1589] = 'ER_EVENT_CANNOT_ALTER_IN_THE_PAST';
	exports[1590] = 'ER_SLAVE_INCIDENT';
	exports[1591] = 'ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT';
	exports[1592] = 'ER_BINLOG_UNSAFE_STATEMENT';
	exports[1593] = 'ER_SLAVE_FATAL_ERROR';
	exports[1594] = 'ER_SLAVE_RELAY_LOG_READ_FAILURE';
	exports[1595] = 'ER_SLAVE_RELAY_LOG_WRITE_FAILURE';
	exports[1596] = 'ER_SLAVE_CREATE_EVENT_FAILURE';
	exports[1597] = 'ER_SLAVE_MASTER_COM_FAILURE';
	exports[1598] = 'ER_BINLOG_LOGGING_IMPOSSIBLE';
	exports[1599] = 'ER_VIEW_NO_CREATION_CTX';
	exports[1600] = 'ER_VIEW_INVALID_CREATION_CTX';
	exports[1601] = 'ER_SR_INVALID_CREATION_CTX';
	exports[1602] = 'ER_TRG_CORRUPTED_FILE';
	exports[1603] = 'ER_TRG_NO_CREATION_CTX';
	exports[1604] = 'ER_TRG_INVALID_CREATION_CTX';
	exports[1605] = 'ER_EVENT_INVALID_CREATION_CTX';
	exports[1606] = 'ER_TRG_CANT_OPEN_TABLE';
	exports[1607] = 'ER_CANT_CREATE_SROUTINE';
	exports[1608] = 'ER_NEVER_USED';
	exports[1609] = 'ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT';
	exports[1610] = 'ER_SLAVE_CORRUPT_EVENT';
	exports[1611] = 'ER_LOAD_DATA_INVALID_COLUMN';
	exports[1612] = 'ER_LOG_PURGE_NO_FILE';
	exports[1613] = 'ER_XA_RBTIMEOUT';
	exports[1614] = 'ER_XA_RBDEADLOCK';
	exports[1615] = 'ER_NEED_REPREPARE';
	exports[1616] = 'ER_DELAYED_NOT_SUPPORTED';
	exports[1617] = 'WARN_NO_MASTER_INFO';
	exports[1618] = 'WARN_OPTION_IGNORED';
	exports[1619] = 'ER_PLUGIN_DELETE_BUILTIN';
	exports[1620] = 'WARN_PLUGIN_BUSY';
	exports[1621] = 'ER_VARIABLE_IS_READONLY';
	exports[1622] = 'ER_WARN_ENGINE_TRANSACTION_ROLLBACK';
	exports[1623] = 'ER_SLAVE_HEARTBEAT_FAILURE';
	exports[1624] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE';
	exports[1625] = 'ER_NDB_REPLICATION_SCHEMA_ERROR';
	exports[1626] = 'ER_CONFLICT_FN_PARSE_ERROR';
	exports[1627] = 'ER_EXCEPTIONS_WRITE_ERROR';
	exports[1628] = 'ER_TOO_LONG_TABLE_COMMENT';
	exports[1629] = 'ER_TOO_LONG_FIELD_COMMENT';
	exports[1630] = 'ER_FUNC_INEXISTENT_NAME_COLLISION';
	exports[1631] = 'ER_DATABASE_NAME';
	exports[1632] = 'ER_TABLE_NAME';
	exports[1633] = 'ER_PARTITION_NAME';
	exports[1634] = 'ER_SUBPARTITION_NAME';
	exports[1635] = 'ER_TEMPORARY_NAME';
	exports[1636] = 'ER_RENAMED_NAME';
	exports[1637] = 'ER_TOO_MANY_CONCURRENT_TRXS';
	exports[1638] = 'WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED';
	exports[1639] = 'ER_DEBUG_SYNC_TIMEOUT';
	exports[1640] = 'ER_DEBUG_SYNC_HIT_LIMIT';
	exports[1641] = 'ER_DUP_SIGNAL_SET';
	exports[1642] = 'ER_SIGNAL_WARN';
	exports[1643] = 'ER_SIGNAL_NOT_FOUND';
	exports[1644] = 'ER_SIGNAL_EXCEPTION';
	exports[1645] = 'ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER';
	exports[1646] = 'ER_SIGNAL_BAD_CONDITION_TYPE';
	exports[1647] = 'WARN_COND_ITEM_TRUNCATED';
	exports[1648] = 'ER_COND_ITEM_TOO_LONG';
	exports[1649] = 'ER_UNKNOWN_LOCALE';
	exports[1650] = 'ER_SLAVE_IGNORE_SERVER_IDS';
	exports[1651] = 'ER_QUERY_CACHE_DISABLED';
	exports[1652] = 'ER_SAME_NAME_PARTITION_FIELD';
	exports[1653] = 'ER_PARTITION_COLUMN_LIST_ERROR';
	exports[1654] = 'ER_WRONG_TYPE_COLUMN_VALUE_ERROR';
	exports[1655] = 'ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR';
	exports[1656] = 'ER_MAXVALUE_IN_VALUES_IN';
	exports[1657] = 'ER_TOO_MANY_VALUES_ERROR';
	exports[1658] = 'ER_ROW_SINGLE_PARTITION_FIELD_ERROR';
	exports[1659] = 'ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD';
	exports[1660] = 'ER_PARTITION_FIELDS_TOO_LONG';
	exports[1661] = 'ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE';
	exports[1662] = 'ER_BINLOG_ROW_MODE_AND_STMT_ENGINE';
	exports[1663] = 'ER_BINLOG_UNSAFE_AND_STMT_ENGINE';
	exports[1664] = 'ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE';
	exports[1665] = 'ER_BINLOG_STMT_MODE_AND_ROW_ENGINE';
	exports[1666] = 'ER_BINLOG_ROW_INJECTION_AND_STMT_MODE';
	exports[1667] = 'ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE';
	exports[1668] = 'ER_BINLOG_UNSAFE_LIMIT';
	exports[1669] = 'ER_BINLOG_UNSAFE_INSERT_DELAYED';
	exports[1670] = 'ER_BINLOG_UNSAFE_SYSTEM_TABLE';
	exports[1671] = 'ER_BINLOG_UNSAFE_AUTOINC_COLUMNS';
	exports[1672] = 'ER_BINLOG_UNSAFE_UDF';
	exports[1673] = 'ER_BINLOG_UNSAFE_SYSTEM_VARIABLE';
	exports[1674] = 'ER_BINLOG_UNSAFE_SYSTEM_FUNCTION';
	exports[1675] = 'ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS';
	exports[1676] = 'ER_MESSAGE_AND_STATEMENT';
	exports[1677] = 'ER_SLAVE_CONVERSION_FAILED';
	exports[1678] = 'ER_SLAVE_CANT_CREATE_CONVERSION';
	exports[1679] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT';
	exports[1680] = 'ER_PATH_LENGTH';
	exports[1681] = 'ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT';
	exports[1682] = 'ER_WRONG_NATIVE_TABLE_STRUCTURE';
	exports[1683] = 'ER_WRONG_PERFSCHEMA_USAGE';
	exports[1684] = 'ER_WARN_I_S_SKIPPED_TABLE';
	exports[1685] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT';
	exports[1686] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT';
	exports[1687] = 'ER_SPATIAL_MUST_HAVE_GEOM_COL';
	exports[1688] = 'ER_TOO_LONG_INDEX_COMMENT';
	exports[1689] = 'ER_LOCK_ABORTED';
	exports[1690] = 'ER_DATA_OUT_OF_RANGE';
	exports[1691] = 'ER_WRONG_SPVAR_TYPE_IN_LIMIT';
	exports[1692] = 'ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE';
	exports[1693] = 'ER_BINLOG_UNSAFE_MIXED_STATEMENT';
	exports[1694] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN';
	exports[1695] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN';
	exports[1696] = 'ER_FAILED_READ_FROM_PAR_FILE';
	exports[1697] = 'ER_VALUES_IS_NOT_INT_TYPE_ERROR';
	exports[1698] = 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR';
	exports[1699] = 'ER_SET_PASSWORD_AUTH_PLUGIN';
	exports[1700] = 'ER_GRANT_PLUGIN_USER_EXISTS';
	exports[1701] = 'ER_TRUNCATE_ILLEGAL_FK';
	exports[1702] = 'ER_PLUGIN_IS_PERMANENT';
	exports[1703] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN';
	exports[1704] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX';
	exports[1705] = 'ER_STMT_CACHE_FULL';
	exports[1706] = 'ER_MULTI_UPDATE_KEY_CONFLICT';
	exports[1707] = 'ER_TABLE_NEEDS_REBUILD';
	exports[1708] = 'WARN_OPTION_BELOW_LIMIT';
	exports[1709] = 'ER_INDEX_COLUMN_TOO_LONG';
	exports[1710] = 'ER_ERROR_IN_TRIGGER_BODY';
	exports[1711] = 'ER_ERROR_IN_UNKNOWN_TRIGGER_BODY';
	exports[1712] = 'ER_INDEX_CORRUPT';
	exports[1713] = 'ER_UNDO_RECORD_TOO_BIG';
	exports[1714] = 'ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT';
	exports[1715] = 'ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE';
	exports[1716] = 'ER_BINLOG_UNSAFE_REPLACE_SELECT';
	exports[1717] = 'ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT';
	exports[1718] = 'ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT';
	exports[1719] = 'ER_BINLOG_UNSAFE_UPDATE_IGNORE';
	exports[1720] = 'ER_PLUGIN_NO_UNINSTALL';
	exports[1721] = 'ER_PLUGIN_NO_INSTALL';
	exports[1722] = 'ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT';
	exports[1723] = 'ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC';
	exports[1724] = 'ER_BINLOG_UNSAFE_INSERT_TWO_KEYS';
	exports[1725] = 'ER_TABLE_IN_FK_CHECK';
	exports[1726] = 'ER_UNSUPPORTED_ENGINE';
	exports[1727] = 'ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST';
	exports[1728] = 'ER_CANNOT_LOAD_FROM_TABLE_V2';
	exports[1729] = 'ER_MASTER_DELAY_VALUE_OUT_OF_RANGE';
	exports[1730] = 'ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT';
	exports[1731] = 'ER_PARTITION_EXCHANGE_DIFFERENT_OPTION';
	exports[1732] = 'ER_PARTITION_EXCHANGE_PART_TABLE';
	exports[1733] = 'ER_PARTITION_EXCHANGE_TEMP_TABLE';
	exports[1734] = 'ER_PARTITION_INSTEAD_OF_SUBPARTITION';
	exports[1735] = 'ER_UNKNOWN_PARTITION';
	exports[1736] = 'ER_TABLES_DIFFERENT_METADATA';
	exports[1737] = 'ER_ROW_DOES_NOT_MATCH_PARTITION';
	exports[1738] = 'ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX';
	exports[1739] = 'ER_WARN_INDEX_NOT_APPLICABLE';
	exports[1740] = 'ER_PARTITION_EXCHANGE_FOREIGN_KEY';
	exports[1741] = 'ER_NO_SUCH_KEY_VALUE';
	exports[1742] = 'ER_RPL_INFO_DATA_TOO_LONG';
	exports[1743] = 'ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE';
	exports[1744] = 'ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE';
	exports[1745] = 'ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX';
	exports[1746] = 'ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT';
	exports[1747] = 'ER_PARTITION_CLAUSE_ON_NONPARTITIONED';
	exports[1748] = 'ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET';
	exports[1749] = 'ER_NO_SUCH_PARTITION';
	exports[1750] = 'ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE';
	exports[1751] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE';
	exports[1752] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE';
	exports[1753] = 'ER_MTS_FEATURE_IS_NOT_SUPPORTED';
	exports[1754] = 'ER_MTS_UPDATED_DBS_GREATER_MAX';
	exports[1755] = 'ER_MTS_CANT_PARALLEL';
	exports[1756] = 'ER_MTS_INCONSISTENT_DATA';
	exports[1757] = 'ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING';
	exports[1758] = 'ER_DA_INVALID_CONDITION_NUMBER';
	exports[1759] = 'ER_INSECURE_PLAIN_TEXT';
	exports[1760] = 'ER_INSECURE_CHANGE_MASTER';
	exports[1761] = 'ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO';
	exports[1762] = 'ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO';
	exports[1763] = 'ER_SQLTHREAD_WITH_SECURE_SLAVE';
	exports[1764] = 'ER_TABLE_HAS_NO_FT';
	exports[1765] = 'ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER';
	exports[1766] = 'ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION';
	exports[1767] = 'ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST';
	exports[1768] = 'ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION';
	exports[1769] = 'ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION';
	exports[1770] = 'ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL';
	exports[1771] = 'ER_SKIPPING_LOGGED_TRANSACTION';
	exports[1772] = 'ER_MALFORMED_GTID_SET_SPECIFICATION';
	exports[1773] = 'ER_MALFORMED_GTID_SET_ENCODING';
	exports[1774] = 'ER_MALFORMED_GTID_SPECIFICATION';
	exports[1775] = 'ER_GNO_EXHAUSTED';
	exports[1776] = 'ER_BAD_SLAVE_AUTO_POSITION';
	exports[1777] = 'ER_AUTO_POSITION_REQUIRES_GTID_MODE_NOT_OFF';
	exports[1778] = 'ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET';
	exports[1779] = 'ER_GTID_MODE_ON_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON';
	exports[1780] = 'ER_GTID_MODE_REQUIRES_BINLOG';
	exports[1781] = 'ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF';
	exports[1782] = 'ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON';
	exports[1783] = 'ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF';
	exports[1784] = 'ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF';
	exports[1785] = 'ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE';
	exports[1786] = 'ER_GTID_UNSAFE_CREATE_SELECT';
	exports[1787] = 'ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION';
	exports[1788] = 'ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME';
	exports[1789] = 'ER_MASTER_HAS_PURGED_REQUIRED_GTIDS';
	exports[1790] = 'ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID';
	exports[1791] = 'ER_UNKNOWN_EXPLAIN_FORMAT';
	exports[1792] = 'ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION';
	exports[1793] = 'ER_TOO_LONG_TABLE_PARTITION_COMMENT';
	exports[1794] = 'ER_SLAVE_CONFIGURATION';
	exports[1795] = 'ER_INNODB_FT_LIMIT';
	exports[1796] = 'ER_INNODB_NO_FT_TEMP_TABLE';
	exports[1797] = 'ER_INNODB_FT_WRONG_DOCID_COLUMN';
	exports[1798] = 'ER_INNODB_FT_WRONG_DOCID_INDEX';
	exports[1799] = 'ER_INNODB_ONLINE_LOG_TOO_BIG';
	exports[1800] = 'ER_UNKNOWN_ALTER_ALGORITHM';
	exports[1801] = 'ER_UNKNOWN_ALTER_LOCK';
	exports[1802] = 'ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS';
	exports[1803] = 'ER_MTS_RECOVERY_FAILURE';
	exports[1804] = 'ER_MTS_RESET_WORKERS';
	exports[1805] = 'ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2';
	exports[1806] = 'ER_SLAVE_SILENT_RETRY_TRANSACTION';
	exports[1807] = 'ER_DISCARD_FK_CHECKS_RUNNING';
	exports[1808] = 'ER_TABLE_SCHEMA_MISMATCH';
	exports[1809] = 'ER_TABLE_IN_SYSTEM_TABLESPACE';
	exports[1810] = 'ER_IO_READ_ERROR';
	exports[1811] = 'ER_IO_WRITE_ERROR';
	exports[1812] = 'ER_TABLESPACE_MISSING';
	exports[1813] = 'ER_TABLESPACE_EXISTS';
	exports[1814] = 'ER_TABLESPACE_DISCARDED';
	exports[1815] = 'ER_INTERNAL_ERROR';
	exports[1816] = 'ER_INNODB_IMPORT_ERROR';
	exports[1817] = 'ER_INNODB_INDEX_CORRUPT';
	exports[1818] = 'ER_INVALID_YEAR_COLUMN_LENGTH';
	exports[1819] = 'ER_NOT_VALID_PASSWORD';
	exports[1820] = 'ER_MUST_CHANGE_PASSWORD';
	exports[1821] = 'ER_FK_NO_INDEX_CHILD';
	exports[1822] = 'ER_FK_NO_INDEX_PARENT';
	exports[1823] = 'ER_FK_FAIL_ADD_SYSTEM';
	exports[1824] = 'ER_FK_CANNOT_OPEN_PARENT';
	exports[1825] = 'ER_FK_INCORRECT_OPTION';
	exports[1826] = 'ER_FK_DUP_NAME';
	exports[1827] = 'ER_PASSWORD_FORMAT';
	exports[1828] = 'ER_FK_COLUMN_CANNOT_DROP';
	exports[1829] = 'ER_FK_COLUMN_CANNOT_DROP_CHILD';
	exports[1830] = 'ER_FK_COLUMN_NOT_NULL';
	exports[1831] = 'ER_DUP_INDEX';
	exports[1832] = 'ER_FK_COLUMN_CANNOT_CHANGE';
	exports[1833] = 'ER_FK_COLUMN_CANNOT_CHANGE_CHILD';
	exports[1834] = 'ER_FK_CANNOT_DELETE_PARENT';
	exports[1835] = 'ER_MALFORMED_PACKET';
	exports[1836] = 'ER_READ_ONLY_MODE';
	exports[1837] = 'ER_GTID_NEXT_TYPE_UNDEFINED_GROUP';
	exports[1838] = 'ER_VARIABLE_NOT_SETTABLE_IN_SP';
	exports[1839] = 'ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF';
	exports[1840] = 'ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY';
	exports[1841] = 'ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY';
	exports[1842] = 'ER_GTID_PURGED_WAS_CHANGED';
	exports[1843] = 'ER_GTID_EXECUTED_WAS_CHANGED';
	exports[1844] = 'ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES';
	exports[1845] = 'ER_ALTER_OPERATION_NOT_SUPPORTED';
	exports[1846] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON';
	exports[1847] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY';
	exports[1848] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION';
	exports[1849] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME';
	exports[1850] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE';
	exports[1851] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK';
	exports[1852] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE';
	exports[1853] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK';
	exports[1854] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC';
	exports[1855] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS';
	exports[1856] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS';
	exports[1857] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS';
	exports[1858] = 'ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE';
	exports[1859] = 'ER_DUP_UNKNOWN_IN_INDEX';
	exports[1860] = 'ER_IDENT_CAUSES_TOO_LONG_PATH';
	exports[1861] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL';
	exports[1862] = 'ER_MUST_CHANGE_PASSWORD_LOGIN';
	exports[1863] = 'ER_ROW_IN_WRONG_PARTITION';
	exports[1864] = 'ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX';
	exports[1865] = 'ER_INNODB_NO_FT_USES_PARSER';
	exports[1866] = 'ER_BINLOG_LOGICAL_CORRUPTION';
	exports[1867] = 'ER_WARN_PURGE_LOG_IN_USE';
	exports[1868] = 'ER_WARN_PURGE_LOG_IS_ACTIVE';
	exports[1869] = 'ER_AUTO_INCREMENT_CONFLICT';
	exports[1870] = 'WARN_ON_BLOCKHOLE_IN_RBR';
	exports[1871] = 'ER_SLAVE_MI_INIT_REPOSITORY';
	exports[1872] = 'ER_SLAVE_RLI_INIT_REPOSITORY';
	exports[1873] = 'ER_ACCESS_DENIED_CHANGE_USER_ERROR';
	exports[1874] = 'ER_INNODB_READ_ONLY';
	exports[1875] = 'ER_STOP_SLAVE_SQL_THREAD_TIMEOUT';
	exports[1876] = 'ER_STOP_SLAVE_IO_THREAD_TIMEOUT';
	exports[1877] = 'ER_TABLE_CORRUPT';
	exports[1878] = 'ER_TEMP_FILE_WRITE_FAILURE';
	exports[1879] = 'ER_INNODB_FT_AUX_NOT_HEX_ID';
	exports[1880] = 'ER_OLD_TEMPORALS_UPGRADED';
	exports[1881] = 'ER_INNODB_FORCED_RECOVERY';
	exports[1882] = 'ER_AES_INVALID_IV';
	exports[1883] = 'ER_PLUGIN_CANNOT_BE_UNINSTALLED';
	exports[1884] = 'ER_GTID_UNSAFE_BINLOG_SPLITTABLE_STATEMENT_AND_GTID_GROUP';
	exports[1885] = 'ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER';
	exports[1886] = 'ER_FILE_CORRUPT';
	exports[1887] = 'ER_ERROR_ON_MASTER';
	exports[1888] = 'ER_INCONSISTENT_ERROR';
	exports[1889] = 'ER_STORAGE_ENGINE_NOT_LOADED';
	exports[1890] = 'ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER';
	exports[1891] = 'ER_WARN_LEGACY_SYNTAX_CONVERTED';
	exports[1892] = 'ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN';
	exports[1893] = 'ER_CANNOT_DISCARD_TEMPORARY_TABLE';
	exports[1894] = 'ER_FK_DEPTH_EXCEEDED';
	exports[1895] = 'ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2';
	exports[1896] = 'ER_WARN_TRIGGER_DOESNT_HAVE_CREATED';
	exports[1897] = 'ER_REFERENCED_TRG_DOES_NOT_EXIST';
	exports[1898] = 'ER_EXPLAIN_NOT_SUPPORTED';
	exports[1899] = 'ER_INVALID_FIELD_SIZE';
	exports[1900] = 'ER_MISSING_HA_CREATE_OPTION';
	exports[1901] = 'ER_ENGINE_OUT_OF_MEMORY';
	exports[1902] = 'ER_PASSWORD_EXPIRE_ANONYMOUS_USER';
	exports[1903] = 'ER_SLAVE_SQL_THREAD_MUST_STOP';
	exports[1904] = 'ER_NO_FT_MATERIALIZED_SUBQUERY';
	exports[1905] = 'ER_INNODB_UNDO_LOG_FULL';
	exports[1906] = 'ER_INVALID_ARGUMENT_FOR_LOGARITHM';
	exports[1907] = 'ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP';
	exports[1908] = 'ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO';
	exports[1909] = 'ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS';
	exports[1910] = 'ER_QUERY_TIMEOUT';
	exports[1911] = 'ER_NON_RO_SELECT_DISABLE_TIMER';
	exports[1912] = 'ER_DUP_LIST_ENTRY';
	exports[1913] = 'ER_SQL_MODE_NO_EFFECT';
	exports[1914] = 'ER_AGGREGATE_ORDER_FOR_UNION';
	exports[1915] = 'ER_AGGREGATE_ORDER_NON_AGG_QUERY';
	exports[1916] = 'ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR';
	exports[1917] = 'ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER';
	exports[1918] = 'ER_SERVER_OFFLINE_MODE';
	exports[1919] = 'ER_GIS_DIFFERENT_SRIDS';
	exports[1920] = 'ER_GIS_UNSUPPORTED_ARGUMENT';
	exports[1921] = 'ER_GIS_UNKNOWN_ERROR';
	exports[1922] = 'ER_GIS_UNKNOWN_EXCEPTION';
	exports[1923] = 'ER_GIS_INVALID_DATA';
	exports[1924] = 'ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION';
	exports[1925] = 'ER_BOOST_GEOMETRY_CENTROID_EXCEPTION';
	exports[1926] = 'ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION';
	exports[1927] = 'ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION';
	exports[1928] = 'ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION';
	exports[1929] = 'ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION';
	exports[1930] = 'ER_STD_BAD_ALLOC_ERROR';
	exports[1931] = 'ER_STD_DOMAIN_ERROR';
	exports[1932] = 'ER_STD_LENGTH_ERROR';
	exports[1933] = 'ER_STD_INVALID_ARGUMENT';
	exports[1934] = 'ER_STD_OUT_OF_RANGE_ERROR';
	exports[1935] = 'ER_STD_OVERFLOW_ERROR';
	exports[1936] = 'ER_STD_RANGE_ERROR';
	exports[1937] = 'ER_STD_UNDERFLOW_ERROR';
	exports[1938] = 'ER_STD_LOGIC_ERROR';
	exports[1939] = 'ER_STD_RUNTIME_ERROR';
	exports[1940] = 'ER_STD_UNKNOWN_EXCEPTION';
	exports[1941] = 'ER_GIS_DATA_WRONG_ENDIANESS';
	exports[1942] = 'ER_CHANGE_MASTER_PASSWORD_LENGTH';
	exports[1943] = 'ER_USER_LOCK_WRONG_NAME';
	exports[1944] = 'ER_USER_LOCK_DEADLOCK';
	exports[1945] = 'ER_REPLACE_INACCESSIBLE_ROWS';
	exports[1946] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS';
	exports[1947] = 'ER_ILLEGAL_USER_VAR';
	exports[1948] = 'ER_GTID_MODE_OFF';
	exports[1949] = 'ER_UNSUPPORTED_BY_REPLICATION_THREAD';
	exports[1950] = 'ER_INCORRECT_TYPE';
	exports[1951] = 'ER_FIELD_IN_ORDER_NOT_SELECT';
	exports[1952] = 'ER_AGGREGATE_IN_ORDER_NOT_SELECT';
	exports[1953] = 'ER_INVALID_RPL_WILD_TABLE_FILTER_PATTERN';
	exports[1954] = 'ER_NET_OK_PACKET_TOO_LARGE';
	exports[1955] = 'ER_INVALID_JSON_DATA';
	exports[1956] = 'ER_INVALID_GEOJSON_MISSING_MEMBER';
	exports[1957] = 'ER_INVALID_GEOJSON_WRONG_TYPE';
	exports[1958] = 'ER_INVALID_GEOJSON_UNSPECIFIED';
	exports[1959] = 'ER_DIMENSION_UNSUPPORTED';
	exports[1960] = 'ER_SLAVE_CHANNEL_DOES_NOT_EXIST';
	exports[1961] = 'ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT';
	exports[1962] = 'ER_SLAVE_CHANNEL_NAME_INVALID_OR_TOO_LONG';
	exports[1963] = 'ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY';
	exports[1964] = 'ER_SLAVE_CHANNEL_DELETE';
	exports[1965] = 'ER_SLAVE_MULTIPLE_CHANNELS_CMD';
	exports[1966] = 'ER_SLAVE_MAX_CHANNELS_EXCEEDED';
	exports[1967] = 'ER_SLAVE_CHANNEL_MUST_STOP';
	exports[1968] = 'ER_SLAVE_CHANNEL_NOT_RUNNING';
	exports[1969] = 'ER_SLAVE_CHANNEL_WAS_RUNNING';
	exports[1970] = 'ER_SLAVE_CHANNEL_WAS_NOT_RUNNING';
	exports[1971] = 'ER_SLAVE_CHANNEL_SQL_THREAD_MUST_STOP';
	exports[1972] = 'ER_SLAVE_CHANNEL_SQL_SKIP_COUNTER';
	exports[1973] = 'ER_WRONG_FIELD_WITH_GROUP_V2';
	exports[1974] = 'ER_MIX_OF_GROUP_FUNC_AND_FIELDS_V2';
	exports[1975] = 'ER_WARN_DEPRECATED_SYSVAR_UPDATE';
	exports[1976] = 'ER_WARN_DEPRECATED_SQLMODE';
	exports[1977] = 'ER_CANNOT_LOG_PARTIAL_DROP_DATABASE_WITH_GTID';
	exports[1978] = 'ER_GROUP_REPLICATION_CONFIGURATION';
	exports[1979] = 'ER_GROUP_REPLICATION_RUNNING';
	exports[1980] = 'ER_GROUP_REPLICATION_APPLIER_INIT_ERROR';
	exports[1981] = 'ER_GROUP_REPLICATION_STOP_APPLIER_THREAD_TIMEOUT';
	exports[1982] = 'ER_GROUP_REPLICATION_COMMUNICATION_LAYER_SESSION_ERROR';
	exports[1983] = 'ER_GROUP_REPLICATION_COMMUNICATION_LAYER_JOIN_ERROR';
	exports[1984] = 'ER_BEFORE_DML_VALIDATION_ERROR';
	exports[1985] = 'ER_PREVENTS_VARIABLE_WITHOUT_RBR';
	exports[1986] = 'ER_RUN_HOOK_ERROR';
	exports[1987] = 'ER_TRANSACTION_ROLLBACK_DURING_COMMIT';
	exports[1988] = 'ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED';
	exports[1989] = 'ER_UNSUPPORTED_ALTER_INPLACE_ON_VIRTUAL_COLUMN';
	exports[1990] = 'ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN';
	exports[1991] = 'ER_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN';
	exports[1992] = 'ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN';
	exports[1993] = 'ER_GENERATED_COLUMN_NON_PRIOR';
	exports[1994] = 'ER_DEPENDENT_BY_GENERATED_COLUMN';
	exports[1995] = 'ER_GENERATED_COLUMN_REF_AUTO_INC';
	exports[1996] = 'ER_FEATURE_NOT_AVAILABLE';
	exports[1997] = 'ER_CANT_SET_GTID_MODE';
	exports[1998] = 'ER_CANT_USE_AUTO_POSITION_WITH_GTID_MODE_OFF';
	exports[1999] = 'ER_CANT_REPLICATE_ANONYMOUS_WITH_AUTO_POSITION';
	exports[2000] = 'ER_CANT_REPLICATE_ANONYMOUS_WITH_GTID_MODE_ON';
	exports[2001] = 'ER_CANT_REPLICATE_GTID_WITH_GTID_MODE_OFF';
	exports[2002] = 'ER_CANT_SET_ENFORCE_GTID_CONSISTENCY_ON_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS';
	exports[2003] = 'ER_SET_ENFORCE_GTID_CONSISTENCY_WARN_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS';
	exports[2004] = 'ER_ACCOUNT_HAS_BEEN_LOCKED';
	exports[2005] = 'ER_WRONG_TABLESPACE_NAME';
	exports[2006] = 'ER_TABLESPACE_IS_NOT_EMPTY';
	exports[2007] = 'ER_WRONG_FILE_NAME';
	exports[2008] = 'ER_BOOST_GEOMETRY_INCONSISTENT_TURNS_EXCEPTION';
	exports[2009] = 'ER_WARN_OPTIMIZER_HINT_SYNTAX_ERROR';
	exports[2010] = 'ER_WARN_BAD_MAX_EXECUTION_TIME';
	exports[2011] = 'ER_WARN_UNSUPPORTED_MAX_EXECUTION_TIME';
	exports[2012] = 'ER_WARN_CONFLICTING_HINT';
	exports[2013] = 'ER_WARN_UNKNOWN_QB_NAME';
	exports[2014] = 'ER_UNRESOLVED_HINT_NAME';
	exports[2015] = 'ER_WARN_ON_MODIFYING_GTID_EXECUTED_TABLE';
	exports[2016] = 'ER_PLUGGABLE_PROTOCOL_COMMAND_NOT_SUPPORTED';
	exports[2017] = 'ER_LOCKING_SERVICE_WRONG_NAME';
	exports[2018] = 'ER_LOCKING_SERVICE_DEADLOCK';
	exports[2019] = 'ER_LOCKING_SERVICE_TIMEOUT';
	exports[2020] = 'ER_GIS_MAX_POINTS_IN_GEOMETRY_OVERFLOWED';
	exports[2021] = 'ER_SQL_MODE_MERGED';
	exports[2022] = 'ER_VTOKEN_PLUGIN_TOKEN_MISMATCH';
	exports[2023] = 'ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND';
	exports[2024] = 'ER_CANT_SET_VARIABLE_WHEN_OWNING_GTID';
	exports[2025] = 'ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED';
	exports[2026] = 'ER_INVALID_JSON_TEXT';
	exports[2027] = 'ER_INVALID_JSON_TEXT_IN_PARAM';
	exports[2028] = 'ER_INVALID_JSON_BINARY_DATA';
	exports[2029] = 'ER_INVALID_JSON_PATH';
	exports[2030] = 'ER_INVALID_JSON_CHARSET';
	exports[2031] = 'ER_INVALID_JSON_CHARSET_IN_FUNCTION';
	exports[2032] = 'ER_INVALID_TYPE_FOR_JSON';
	exports[2033] = 'ER_INVALID_CAST_TO_JSON';
	exports[2034] = 'ER_INVALID_JSON_PATH_CHARSET';
	exports[2035] = 'ER_INVALID_JSON_PATH_WILDCARD';
	exports[2036] = 'ER_JSON_VALUE_TOO_BIG';
	exports[2037] = 'ER_JSON_KEY_TOO_BIG';
	exports[2038] = 'ER_JSON_USED_AS_KEY';
	exports[2039] = 'ER_JSON_VACUOUS_PATH';
	exports[2040] = 'ER_JSON_BAD_ONE_OR_ALL_ARG';
	exports[2041] = 'ER_NUMERIC_JSON_VALUE_OUT_OF_RANGE';
	exports[2042] = 'ER_INVALID_JSON_VALUE_FOR_CAST';
	exports[2043] = 'ER_JSON_DOCUMENT_TOO_DEEP';
	exports[2044] = 'ER_JSON_DOCUMENT_NULL_KEY';
	exports[2045] = 'ER_SECURE_TRANSPORT_REQUIRED';
	exports[2046] = 'ER_NO_SECURE_TRANSPORTS_CONFIGURED';
	exports[2047] = 'ER_DISABLED_STORAGE_ENGINE';
	exports[2048] = 'ER_USER_DOES_NOT_EXIST';
	exports[2049] = 'ER_USER_ALREADY_EXISTS';
	exports[2050] = 'ER_AUDIT_API_ABORT';
	exports[2051] = 'ER_INVALID_JSON_PATH_ARRAY_CELL';
	exports[2052] = 'ER_BUFPOOL_RESIZE_INPROGRESS';
	exports[2053] = 'ER_FEATURE_DISABLED_SEE_DOC';
	exports[2054] = 'ER_SERVER_ISNT_AVAILABLE';
	exports[2055] = 'ER_SESSION_WAS_KILLED';
	exports[2056] = 'ER_CAPACITY_EXCEEDED';
	exports[2057] = 'ER_CAPACITY_EXCEEDED_IN_RANGE_OPTIMIZER';
	exports[2058] = 'ER_TABLE_NEEDS_UPG_PART';
	exports[2059] = 'ER_CANT_WAIT_FOR_EXECUTED_GTID_SET_WHILE_OWNING_A_GTID';


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(38).Buffer;
	var Crypto = __webpack_require__(37);
	var Auth   = exports;

	function sha1(msg) {
	  var hash = Crypto.createHash('sha1');
	  hash.update(msg, 'binary');
	  return hash.digest('binary');
	}
	Auth.sha1 = sha1;

	function xor(a, b) {
	  a = new Buffer(a, 'binary');
	  b = new Buffer(b, 'binary');
	  var result = new Buffer(a.length);
	  for (var i = 0; i < a.length; i++) {
	    result[i] = (a[i] ^ b[i]);
	  }
	  return result;
	}
	Auth.xor = xor;

	Auth.token = function(password, scramble) {
	  if (!password) {
	    return new Buffer(0);
	  }

	  // password must be in binary format, not utf8
	  var stage1 = sha1((new Buffer(password, "utf8")).toString("binary"));
	  var stage2 = sha1(stage1);
	  var stage3 = sha1(scramble.toString('binary') + stage2);
	  return xor(stage3, stage1);
	};

	// This is a port of sql/password.c:hash_password which needs to be used for
	// pre-4.1 passwords.
	Auth.hashPassword = function(password) {
	  var nr = [0x5030, 0x5735],
	      add = 7,
	      nr2 = [0x1234, 0x5671],
	      result = new Buffer(8);

	  if (typeof password == 'string'){
	    password = new Buffer(password);
	  }

	  for (var i = 0; i < password.length; i++) {
	    var c = password[i];
	    if (c == 32 || c == 9) {
	      // skip space in password
	      continue;
	    }

	    // nr^= (((nr & 63)+add)*c)+ (nr << 8);
	    // nr = xor(nr, add(mul(add(and(nr, 63), add), c), shl(nr, 8)))
	    nr = this.xor32(nr, this.add32(this.mul32(this.add32(this.and32(nr, [0,63]), [0,add]), [0,c]), this.shl32(nr, 8)));

	    // nr2+=(nr2 << 8) ^ nr;
	    // nr2 = add(nr2, xor(shl(nr2, 8), nr))
	    nr2 = this.add32(nr2, this.xor32(this.shl32(nr2, 8), nr));

	    // add+=tmp;
	    add += c;
	  }

	  this.int31Write(result, nr, 0);
	  this.int31Write(result, nr2, 4);

	  return result;
	};

	Auth.randomInit = function(seed1, seed2) {
	  return {
	    max_value: 0x3FFFFFFF,
	    max_value_dbl: 0x3FFFFFFF,
	    seed1: seed1 % 0x3FFFFFFF,
	    seed2: seed2 % 0x3FFFFFFF
	  };
	};

	Auth.myRnd = function(r){
	  r.seed1 = (r.seed1 * 3 + r.seed2) % r.max_value;
	  r.seed2 = (r.seed1 + r.seed2 + 33) % r.max_value;

	  return r.seed1 / r.max_value_dbl;
	};

	Auth.scramble323 = function(message, password) {
	  var to = new Buffer(8),
	      hashPass = this.hashPassword(password),
	      hashMessage = this.hashPassword(message.slice(0, 8)),
	      seed1 = this.int32Read(hashPass, 0) ^ this.int32Read(hashMessage, 0),
	      seed2 = this.int32Read(hashPass, 4) ^ this.int32Read(hashMessage, 4),
	      r = this.randomInit(seed1, seed2);

	  for (var i = 0; i < 8; i++){
	    to[i] = Math.floor(this.myRnd(r) * 31) + 64;
	  }
	  var extra = (Math.floor(this.myRnd(r) * 31));

	  for (var i = 0; i < 8; i++){
	    to[i] ^= extra;
	  }

	  return to;
	};

	Auth.fmt32 = function(x){
	  var a = x[0].toString(16),
	      b = x[1].toString(16);

	  if (a.length == 1) a = '000'+a;
	  if (a.length == 2) a = '00'+a;
	  if (a.length == 3) a = '0'+a;
	  if (b.length == 1) b = '000'+b;
	  if (b.length == 2) b = '00'+b;
	  if (b.length == 3) b = '0'+b;
	  return '' + a + '/' + b;
	};

	Auth.xor32 = function(a,b){
	  return [a[0] ^ b[0], a[1] ^ b[1]];
	};

	Auth.add32 = function(a,b){
	  var w1 = a[1] + b[1],
	      w2 = a[0] + b[0] + ((w1 & 0xFFFF0000) >> 16);

	  return [w2 & 0xFFFF, w1 & 0xFFFF];
	};

	Auth.mul32 = function(a,b){
	  // based on this example of multiplying 32b ints using 16b
	  // http://www.dsprelated.com/showmessage/89790/1.php
	  var w1 = a[1] * b[1],
	      w2 = (((a[1] * b[1]) >> 16) & 0xFFFF) + ((a[0] * b[1]) & 0xFFFF) + (a[1] * b[0] & 0xFFFF);

	  return [w2 & 0xFFFF, w1 & 0xFFFF];
	};

	Auth.and32 = function(a,b){
	  return [a[0] & b[0], a[1] & b[1]];
	};

	Auth.shl32 = function(a,b){
	  // assume b is 16 or less
	  var w1 = a[1] << b,
	      w2 = (a[0] << b) | ((w1 & 0xFFFF0000) >> 16);

	  return [w2 & 0xFFFF, w1 & 0xFFFF];
	};

	Auth.int31Write = function(buffer, number, offset) {
	  buffer[offset] = (number[0] >> 8) & 0x7F;
	  buffer[offset + 1] = (number[0]) & 0xFF;
	  buffer[offset + 2] = (number[1] >> 8) & 0xFF;
	  buffer[offset + 3] = (number[1]) & 0xFF;
	};

	Auth.int32Read = function(buffer, offset){
	  return (buffer[offset] << 24)
	       + (buffer[offset+1] << 16)
	       + (buffer[offset+2] << 8)
	       + (buffer[offset+3]);
	};


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence        = __webpack_require__(386);
	var Util            = __webpack_require__(124);
	var Packets         = __webpack_require__(387);
	var Auth            = __webpack_require__(410);
	var ClientConstants = __webpack_require__(377);

	module.exports = Handshake;
	Util.inherits(Handshake, Sequence);
	function Handshake(options, callback) {
	  Sequence.call(this, options, callback);

	  options = options || {};

	  this._config                        = options.config;
	  this._handshakeInitializationPacket = null;
	}

	Handshake.prototype.determinePacket = function(firstByte) {
	  if (firstByte === 0xff) {
	    return Packets.ErrorPacket;
	  }

	  if (!this._handshakeInitializationPacket) {
	    return Packets.HandshakeInitializationPacket;
	  }

	  if (firstByte === 0xfe) {
	    return Packets.UseOldPasswordPacket;
	  }
	};

	Handshake.prototype['HandshakeInitializationPacket'] = function(packet) {
	  this._handshakeInitializationPacket = packet;

	  this._config.protocol41 = packet.protocol41;

	  var serverSSLSupport = packet.serverCapabilities1 & ClientConstants.CLIENT_SSL;

	  if (this._config.ssl) {
	    if (!serverSSLSupport) {
	      var err = new Error('Server does not support secure connnection');

	      err.code = 'HANDSHAKE_NO_SSL_SUPPORT';
	      err.fatal = true;

	      this.end(err);
	      return;
	    }

	    this._config.clientFlags |= ClientConstants.CLIENT_SSL;
	    this.emit('packet', new Packets.SSLRequestPacket({
	      clientFlags   : this._config.clientFlags,
	      maxPacketSize : this._config.maxPacketSize,
	      charsetNumber : this._config.charsetNumber
	    }));
	    this.emit('start-tls');
	  } else {
	    this._sendCredentials();
	  }
	};

	Handshake.prototype._tlsUpgradeCompleteHandler = function() {
	  this._sendCredentials();
	};

	Handshake.prototype._sendCredentials = function(serverHello) {
	  var packet = this._handshakeInitializationPacket;
	  this.emit('packet', new Packets.ClientAuthenticationPacket({
	    clientFlags   : this._config.clientFlags,
	    maxPacketSize : this._config.maxPacketSize,
	    charsetNumber : this._config.charsetNumber,
	    user          : this._config.user,
	    scrambleBuff  : (packet.protocol41)
	                     ? Auth.token(this._config.password, packet.scrambleBuff())
	                     : Auth.scramble323(packet.scrambleBuff(), this._config.password),
	    database      : this._config.database,
	    protocol41    : packet.protocol41
	  }));
	};

	Handshake.prototype['UseOldPasswordPacket'] = function(packet) {
	  if (!this._config.insecureAuth) {
	    var err = new Error(
	      'MySQL server is requesting the old and insecure pre-4.1 auth mechanism.' +
	      'Upgrade the user password or use the {insecureAuth: true} option.'
	    );

	    err.code = 'HANDSHAKE_INSECURE_AUTH';
	    err.fatal = true;

	    this.end(err);
	    return;
	  }

	  this.emit('packet', new Packets.OldPasswordPacket({
	    scrambleBuff : Auth.scramble323(this._handshakeInitializationPacket.scrambleBuff(), this._config.password)
	  }));
	};

	Handshake.prototype['ErrorPacket'] = function(packet) {
	  var err = this._packetToError(packet, true);
	  err.fatal = true;
	  this.end(err);
	};


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence = __webpack_require__(386);
	var Util     = __webpack_require__(124);
	var Packets  = __webpack_require__(387);

	module.exports = Ping;
	Util.inherits(Ping, Sequence);

	function Ping(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  Sequence.call(this, options, callback);
	}

	Ping.prototype.start = function() {
	  this.emit('packet', new Packets.ComPingPacket);
	};


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence     = __webpack_require__(386);
	var Util         = __webpack_require__(124);
	var Packets      = __webpack_require__(387);
	var ResultSet    = __webpack_require__(414);
	var ServerStatus = __webpack_require__(415);
	var fs           = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var Readable     = __webpack_require__(416);

	module.exports = Query;
	Util.inherits(Query, Sequence);
	function Query(options, callback) {
	  Sequence.call(this, options, callback);

	  this.sql = options.sql;
	  this.values = options.values;
	  this.typeCast = (options.typeCast === undefined)
	    ? true
	    : options.typeCast;
	  this.nestTables = options.nestTables || false;

	  this._resultSet = null;
	  this._results   = [];
	  this._fields    = [];
	  this._index     = 0;
	  this._loadError = null;
	}

	Query.prototype.start = function() {
	  this.emit('packet', new Packets.ComQueryPacket(this.sql));
	};

	Query.prototype.determinePacket = function(firstByte, parser) {
	  if (firstByte === 0) {
	    // If we have a resultSet and got one eofPacket
	    if (this._resultSet && this._resultSet.eofPackets.length === 1) {
	      // Then this is a RowDataPacket with an empty string in the first column.
	      // See: https://github.com/felixge/node-mysql/issues/222
	    } else if (this._resultSet && this._resultSet.resultSetHeaderPacket
	           && this._resultSet.resultSetHeaderPacket.fieldCount !== null) {
	      return Packets.FieldPacket;
	    } else {
	      return;
	    }
	  }

	  if (firstByte === 255) {
	    return;
	  }

	  // EofPacket's are 5 bytes in mysql >= 4.1
	  // This is the only / best way to differentiate their firstByte from a 9
	  // byte length coded binary.
	  if (firstByte === 0xfe && parser.packetLength() < 9) {
	    return Packets.EofPacket;
	  }

	  if (!this._resultSet) {
	    return Packets.ResultSetHeaderPacket;
	  }

	  return (this._resultSet.eofPackets.length === 0)
	    ? Packets.FieldPacket
	    : Packets.RowDataPacket;
	};

	Query.prototype['OkPacket'] = function(packet) {
	  // try...finally for exception safety
	  try {
	    if (!this._callback) {
	      this.emit('result', packet, this._index);
	    } else {
	      this._results.push(packet);
	      this._fields.push(undefined);
	    }
	  } finally {
	    this._index++;
	    this._resultSet = null;
	    this._handleFinalResultPacket(packet);
	  }
	};

	Query.prototype['ErrorPacket'] = function(packet) {
	  var err = this._packetToError(packet);

	  var results = (this._results.length > 0)
	    ? this._results
	    : undefined;

	  var fields = (this._fields.length > 0)
	    ? this._fields
	    : undefined;

	  err.index = this._index;
	  this.end(err, results, fields);
	};

	Query.prototype['ResultSetHeaderPacket'] = function(packet) {
	  this._resultSet = new ResultSet(packet);

	  // used by LOAD DATA LOCAL INFILE queries
	  if (packet.fieldCount === null) {
	    this._sendLocalDataFile(packet.extra);
	  }
	};

	Query.prototype['FieldPacket'] = function(packet) {
	  this._resultSet.fieldPackets.push(packet);
	};

	Query.prototype['EofPacket'] = function(packet) {
	  this._resultSet.eofPackets.push(packet);

	  if (this._resultSet.eofPackets.length === 1 && !this._callback) {
	    this.emit('fields', this._resultSet.fieldPackets, this._index);
	  }

	  if (this._resultSet.eofPackets.length !== 2) {
	    return;
	  }

	  if (this._callback) {
	    this._results.push(this._resultSet.rows);
	    this._fields.push(this._resultSet.fieldPackets);
	  }

	  this._index++;
	  this._resultSet = null;
	  this._handleFinalResultPacket(packet);
	};

	Query.prototype._handleFinalResultPacket = function(packet) {
	  if (packet.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {
	    return;
	  }

	  var results = (this._results.length > 1)
	    ? this._results
	    : this._results[0];

	  var fields = (this._fields.length > 1)
	    ? this._fields
	    : this._fields[0];

	  this.end(this._loadError, results, fields);
	};

	Query.prototype['RowDataPacket'] = function(packet, parser, connection) {
	  packet.parse(parser, this._resultSet.fieldPackets, this.typeCast, this.nestTables, connection);

	  if (this._callback) {
	    this._resultSet.rows.push(packet);
	  } else {
	    this.emit('result', packet, this._index);
	  }
	};

	Query.prototype._sendLocalDataFile = function(path) {
	  var self = this;
	  var localStream = fs.createReadStream(path, {
	    'flag': 'r',
	    'encoding': null,
	    'autoClose': true
	  });


	  this.on('pause', function () {
	    localStream.pause();
	  });

	  this.on('resume', function () {
	    localStream.resume();
	  });

	  localStream.on('data', function (data) {
	    self.emit('packet', new Packets.LocalDataFilePacket(data));
	  });

	  localStream.on('error', function (err) {
	    self._loadError = err;
	    localStream.emit('end');
	  });

	  localStream.on('end', function () {
	    self.emit('packet', new Packets.EmptyPacket());
	  });
	};

	Query.prototype.stream = function(options) {
	  var self = this,
	      stream;

	  options = options || {};
	  options.objectMode = true;
	  stream = new Readable(options);

	  stream._read = function() {
	    self._connection && self._connection.resume();
	  };

	  this.on('result',function(row,i) {
	    if (!stream.push(row)) self._connection.pause();
	    stream.emit('result',row,i);  // replicate old emitter
	  });

	  this.on('error',function(err) {
	    stream.emit('error',err);  // Pass on any errors
	  });

	  this.on('end', function() {
	    stream.emit('close');  // notify readers that query has completed
	    stream.push(null);  // pushing null, indicating EOF
	  });

	  this.on('fields',function(fields,i) {
	    stream.emit('fields',fields,i);  // replicate old emitter
	  });

	  return stream;
	};


/***/ },
/* 414 */
/***/ function(module, exports) {

	module.exports = ResultSet;
	function ResultSet(resultSetHeaderPacket) {
	  this.resultSetHeaderPacket = resultSetHeaderPacket;
	  this.fieldPackets          = [];
	  this.eofPackets            = [];
	  this.rows                  = [];
	}


/***/ },
/* 415 */
/***/ function(module, exports) {

	// Manually extracted from mysql-5.5.23/include/mysql_com.h

	/**
	  Is raised when a multi-statement transaction
	  has been started, either explicitly, by means
	  of BEGIN or COMMIT AND CHAIN, or
	  implicitly, by the first transactional
	  statement, when autocommit=off.
	*/
	exports.SERVER_STATUS_IN_TRANS          = 1;
	exports.SERVER_STATUS_AUTOCOMMIT        = 2;  /* Server in auto_commit mode */
	exports.SERVER_MORE_RESULTS_EXISTS      = 8;    /* Multi query - next query exists */
	exports.SERVER_QUERY_NO_GOOD_INDEX_USED = 16;
	exports.SERVER_QUERY_NO_INDEX_USED      = 32;
	/**
	  The server was able to fulfill the clients request and opened a
	  read-only non-scrollable cursor for a query. This flag comes
	  in reply to COM_STMT_EXECUTE and COM_STMT_FETCH commands.
	*/
	exports.SERVER_STATUS_CURSOR_EXISTS = 64;
	/**
	  This flag is sent when a read-only cursor is exhausted, in reply to
	  COM_STMT_FETCH command.
	*/
	exports.SERVER_STATUS_LAST_ROW_SENT        = 128;
	exports.SERVER_STATUS_DB_DROPPED           = 256; /* A database was dropped */
	exports.SERVER_STATUS_NO_BACKSLASH_ESCAPES = 512;
	/**
	  Sent to the client if after a prepared statement reprepare
	  we discovered that the new statement returns a different
	  number of result set columns.
	*/
	exports.SERVER_STATUS_METADATA_CHANGED = 1024;
	exports.SERVER_QUERY_WAS_SLOW          = 2048;

	/**
	  To mark ResultSet containing output parameter values.
	*/
	exports.SERVER_PS_OUT_PARAMS = 4096;


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(417);
	exports.Stream = __webpack_require__(63);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(423);
	exports.Duplex = __webpack_require__(422);
	exports.Transform = __webpack_require__(425);
	exports.PassThrough = __webpack_require__(426);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(63);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(418);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(38).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(64).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(63);

	/*<replacement>*/
	var util = __webpack_require__(419);
	util.inherits = __webpack_require__(420);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(421);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(422);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(424).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(422);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(424).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 418 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 420 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 421 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(419);
	util.inherits = __webpack_require__(420);
	/*</replacement>*/

	var Readable = __webpack_require__(417);
	var Writable = __webpack_require__(423);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(38).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(419);
	util.inherits = __webpack_require__(420);
	/*</replacement>*/

	var Stream = __webpack_require__(63);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(422);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(422);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(38).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(422);

	/*<replacement>*/
	var util = __webpack_require__(419);
	util.inherits = __webpack_require__(420);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(425);

	/*<replacement>*/
	var util = __webpack_require__(419);
	util.inherits = __webpack_require__(420);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence = __webpack_require__(386);
	var Util     = __webpack_require__(124);
	var Packets  = __webpack_require__(387);

	module.exports = Quit;
	Util.inherits(Quit, Sequence);
	function Quit(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  Sequence.call(this, options, callback);
	}

	Quit.prototype.start = function() {
	  this.emit('packet', new Packets.ComQuitPacket);
	};


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var Sequence = __webpack_require__(386);
	var Util     = __webpack_require__(124);
	var Packets  = __webpack_require__(387);

	module.exports = Statistics;
	Util.inherits(Statistics, Sequence);
	function Statistics(options, callback) {
	  if (!callback && typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  Sequence.call(this, options, callback);
	}

	Statistics.prototype.start = function() {
	  this.emit('packet', new Packets.ComStatisticsPacket);
	};

	Statistics.prototype['StatisticsPacket'] = function (packet) {
	  this.end(null, packet);
	};

	Statistics.prototype.determinePacket = function(firstByte, parser) {
	  if (firstByte === 0x55) {
	    return Packets.StatisticsPacket;
	  }
	};


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BIT_16 = Math.pow(2, 16);
	var BIT_24 = Math.pow(2, 24);
	// The maximum precision JS Numbers can hold precisely
	// Don't panic: Good enough to represent byte values up to 8192 TB
	var IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);
	var MAX_PACKET_LENGTH            = Math.pow(2, 24) - 1;

	module.exports = PacketWriter;
	function PacketWriter() {
	  this._buffer = new Buffer(0);
	  this._offset = 0;
	}

	PacketWriter.prototype.toBuffer = function(parser) {
	  var packets  = Math.floor(this._buffer.length / MAX_PACKET_LENGTH) + 1;
	  var buffer   = this._buffer;
	  this._buffer = new Buffer(this._buffer.length + packets * 4);

	  for (var packet = 0; packet < packets; packet++) {
	    this._offset = packet * (MAX_PACKET_LENGTH + 4);

	    var isLast = (packet + 1 === packets);
	    var packetLength = (isLast)
	      ? buffer.length % MAX_PACKET_LENGTH
	      : MAX_PACKET_LENGTH;

	    var packetNumber = parser.incrementPacketNumber();

	    this.writeUnsignedNumber(3, packetLength);
	    this.writeUnsignedNumber(1, packetNumber);

	    var start = packet * MAX_PACKET_LENGTH;
	    var end   = start + packetLength;

	    this.writeBuffer(buffer.slice(start, end));
	  }

	  return this._buffer;
	};

	PacketWriter.prototype.writeUnsignedNumber = function(bytes, value) {
	  this._allocate(bytes);

	  for (var i = 0; i < bytes; i++) {
	    this._buffer[this._offset++] = (value >> (i * 8)) & 0xff;
	  }
	};

	PacketWriter.prototype.writeFiller = function(bytes) {
	  this._allocate(bytes);

	  for (var i = 0; i < bytes; i++) {
	    this._buffer[this._offset++] = 0x00;
	  }
	};

	PacketWriter.prototype.writeNullTerminatedString = function(value, encoding) {
	  // Typecast undefined into '' and numbers into strings
	  value = value || '';
	  value = value + '';

	  var bytes = Buffer.byteLength(value, encoding || 'utf-8') + 1;
	  this._allocate(bytes);

	  this._buffer.write(value, this._offset, encoding);
	  this._buffer[this._offset + bytes - 1] = 0x00;

	  this._offset += bytes;
	};

	PacketWriter.prototype.writeString = function(value) {
	  // Typecast undefined into '' and numbers into strings
	  value = value || '';
	  value = value + '';

	  var bytes = Buffer.byteLength(value, 'utf-8');
	  this._allocate(bytes);

	  this._buffer.write(value, this._offset, 'utf-8');

	  this._offset += bytes;
	};

	PacketWriter.prototype.writeBuffer = function(value) {
	  var bytes = value.length;

	  this._allocate(bytes);
	  value.copy(this._buffer, this._offset);
	  this._offset += bytes;
	};

	PacketWriter.prototype.writeLengthCodedNumber = function(value) {
	  if (value === null) {
	    this._allocate(1);
	    this._buffer[this._offset++] = 251;
	    return;
	  }

	  if (value <= 250) {
	    this._allocate(1);
	    this._buffer[this._offset++] = value;
	    return;
	  }

	  if (value > IEEE_754_BINARY_64_PRECISION) {
	    throw new Error(
	      'writeLengthCodedNumber: JS precision range exceeded, your ' +
	      'number is > 53 bit: "' + value + '"'
	    );
	  }

	  if (value <= BIT_16) {
	    this._allocate(3);
	    this._buffer[this._offset++] = 252;
	  } else if (value <= BIT_24) {
	    this._allocate(4);
	    this._buffer[this._offset++] = 253;
	  } else {
	    this._allocate(9);
	    this._buffer[this._offset++] = 254;
	  }

	  // 16 Bit
	  this._buffer[this._offset++] = value & 0xff;
	  this._buffer[this._offset++] = (value >> 8) & 0xff;

	  if (value <= BIT_16) return;

	  // 24 Bit
	  this._buffer[this._offset++] = (value >> 16) & 0xff;

	  if (value <= BIT_24) return;

	  this._buffer[this._offset++] = (value >> 24) & 0xff;

	  // Hack: Get the most significant 32 bit (JS bitwise operators are 32 bit)
	  value = value.toString(2);
	  value = value.substr(0, value.length - 32);
	  value = parseInt(value, 2);

	  this._buffer[this._offset++] = value & 0xff;
	  this._buffer[this._offset++] = (value >> 8) & 0xff;
	  this._buffer[this._offset++] = (value >> 16) & 0xff;

	  // Set last byte to 0, as we can only support 53 bits in JS (see above)
	  this._buffer[this._offset++] = 0;
	};

	PacketWriter.prototype.writeLengthCodedBuffer = function(value) {
	  var bytes = value.length;
	  this.writeLengthCodedNumber(bytes);
	  this.writeBuffer(value);
	};

	PacketWriter.prototype.writeNullTerminatedBuffer = function(value) {
	  this.writeBuffer(value);
	  this.writeFiller(1); // 0x00 terminator
	};

	PacketWriter.prototype.writeLengthCodedString = function(value) {
	  if (value === null) {
	    this.writeLengthCodedNumber(null);
	    return;
	  }

	  value = (value === undefined)
	    ? ''
	    : String(value);

	  var bytes = Buffer.byteLength(value, 'utf-8');
	  this.writeLengthCodedNumber(bytes);

	  if (!bytes) {
	    return;
	  }

	  this._allocate(bytes);
	  this._buffer.write(value, this._offset, 'utf-8');
	  this._offset += bytes;
	};

	PacketWriter.prototype._allocate = function(bytes) {
	  if (!this._buffer) {
	    this._buffer = new Buffer(bytes);
	    return;
	  }

	  var bytesRemaining = this._buffer.length - this._offset;
	  if (bytesRemaining >= bytes) {
	    return;
	  }

	  var oldBuffer = this._buffer;

	  this._buffer = new Buffer(oldBuffer.length + bytes);
	  oldBuffer.copy(this._buffer);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var SqlString = exports;

	SqlString.escapeId = function (val, forbidQualified) {
	  if (Array.isArray(val)) {
	    return val.map(function(v) {
	      return SqlString.escapeId(v, forbidQualified);
	    }).join(', ');
	  }

	  if (forbidQualified) {
	    return '`' + val.replace(/`/g, '``') + '`';
	  }
	  return '`' + val.replace(/`/g, '``').replace(/\./g, '`.`') + '`';
	};

	SqlString.escape = function(val, stringifyObjects, timeZone) {
	  if (val === undefined || val === null) {
	    return 'NULL';
	  }

	  switch (typeof val) {
	    case 'boolean': return (val) ? 'true' : 'false';
	    case 'number': return val+'';
	  }

	  if (val instanceof Date) {
	    val = SqlString.dateToString(val, timeZone || 'local');
	  }

	  if (Buffer.isBuffer(val)) {
	    return SqlString.bufferToString(val);
	  }

	  if (Array.isArray(val)) {
	    return SqlString.arrayToList(val, timeZone);
	  }

	  if (typeof val === 'object') {
	    if (stringifyObjects) {
	      val = val.toString();
	    } else {
	      return SqlString.objectToValues(val, timeZone);
	    }
	  }

	  val = val.replace(/[\0\n\r\b\t\\\'\"\x1a]/g, function(s) {
	    switch(s) {
	      case "\0": return "\\0";
	      case "\n": return "\\n";
	      case "\r": return "\\r";
	      case "\b": return "\\b";
	      case "\t": return "\\t";
	      case "\x1a": return "\\Z";
	      default: return "\\"+s;
	    }
	  });
	  return "'"+val+"'";
	};

	SqlString.arrayToList = function(array, timeZone) {
	  return array.map(function(v) {
	    if (Array.isArray(v)) return '(' + SqlString.arrayToList(v, timeZone) + ')';
	    return SqlString.escape(v, true, timeZone);
	  }).join(', ');
	};

	SqlString.format = function(sql, values, stringifyObjects, timeZone) {
	  values = values == null ? [] : [].concat(values);

	  var index = 0;
	  return sql.replace(/\?\??/g, function(match) {
	    if (index === values.length) {
	      return match;
	    }

	    var value = values[index++];

	    return match === '??'
	      ? SqlString.escapeId(value)
	      : SqlString.escape(value, stringifyObjects, timeZone);
	  });
	};

	SqlString.dateToString = function dateToString(date, timeZone) {
	  var dt = new Date(date);

	  var year;
	  var month;
	  var day;
	  var hour;
	  var minute;
	  var second;
	  var millisecond;

	  if (timeZone === 'local') {
	    year        = dt.getFullYear();
	    month       = dt.getMonth() + 1;
	    day         = dt.getDate();
	    hour        = dt.getHours();
	    minute      = dt.getMinutes();
	    second      = dt.getSeconds();
	    millisecond = dt.getMilliseconds();
	  } else {
	    var tz = convertTimezone(timeZone);

	    if (tz !== false && tz !== 0) {
	      dt.setTime(dt.getTime() + (tz * 60000));
	    }

	    year       = dt.getUTCFullYear();
	    month       = dt.getUTCMonth() + 1;
	    day         = dt.getUTCDate();
	    hour        = dt.getUTCHours();
	    minute      = dt.getUTCMinutes();
	    second      = dt.getUTCSeconds();
	    millisecond = dt.getUTCMilliseconds();
	  }

	  // YYYY-MM-DD HH:mm:ss.mmm
	  return zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +
	    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +
	    zeroPad(millisecond, 3);
	};

	SqlString.bufferToString = function bufferToString(buffer) {
	  return "X'" + buffer.toString('hex') + "'";
	};

	SqlString.objectToValues = function(object, timeZone) {
	  var values = [];
	  for (var key in object) {
	    var value = object[key];
	    if(typeof value === 'function') {
	      continue;
	    }

	    values.push(this.escapeId(key) + ' = ' + SqlString.escape(value, true, timeZone));
	  }

	  return values.join(', ');
	};

	function zeroPad(number, length) {
	  number = number.toString();
	  while (number.length < length) {
	    number = '0' + number;
	  }

	  return number;
	}

	function convertTimezone(tz) {
	  if (tz === 'Z') {
	    return 0;
	  }

	  var m = tz.match(/([\+\-\s])(\d\d):?(\d\d)?/);
	  if (m) {
	    return (m[1] == '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;
	  }
	  return false;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var mysql          = __webpack_require__(374);
	var Connection     = __webpack_require__(375);
	var EventEmitter   = __webpack_require__(64).EventEmitter;
	var Util           = __webpack_require__(124);
	var PoolConnection = __webpack_require__(432);

	module.exports = Pool;

	Util.inherits(Pool, EventEmitter);
	function Pool(options) {
	  EventEmitter.call(this);
	  this.config = options.config;
	  this.config.connectionConfig.pool = this;

	  this._acquiringConnections = [];
	  this._allConnections       = [];
	  this._freeConnections      = [];
	  this._connectionQueue      = [];
	  this._closed               = false;
	}

	Pool.prototype.getConnection = function (cb) {

	  if (this._closed) {
	    return process.nextTick(function(){
	      return cb(new Error('Pool is closed.'));
	    });
	  }

	  var connection;
	  var pool = this;

	  if (this._freeConnections.length > 0) {
	    connection = this._freeConnections.shift();

	    return this.acquireConnection(connection, cb);
	  }

	  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {
	    connection = new PoolConnection(this, { config: this.config.newConnectionConfig() });

	    this._acquiringConnections.push(connection);
	    this._allConnections.push(connection);

	    return connection.connect({timeout: this.config.acquireTimeout}, function onConnect(err) {
	      spliceConnection(pool._acquiringConnections, connection);

	      if (pool._closed) {
	        err = new Error('Pool is closed.');
	      }

	      if (err) {
	        pool._purgeConnection(connection);
	        cb(err);
	        return;
	      }

	      pool.emit('connection', connection);
	      cb(null, connection);
	    });
	  }

	  if (!this.config.waitForConnections) {
	    return process.nextTick(function(){
	      return cb(new Error('No connections available.'));
	    });
	  }

	  this._enqueueCallback(cb);
	};

	Pool.prototype.acquireConnection = function acquireConnection(connection, cb) {
	  if (connection._pool !== this) {
	    throw new Error('Connection acquired from wrong pool.');
	  }

	  var changeUser = this._needsChangeUser(connection);
	  var pool       = this;

	  this._acquiringConnections.push(connection);

	  function onOperationComplete(err) {
	    spliceConnection(pool._acquiringConnections, connection);

	    if (pool._closed) {
	      err = new Error('Pool is closed.');
	    }

	    if (err) {
	      pool._connectionQueue.unshift(cb);
	      pool._purgeConnection(connection);
	      return;
	    }

	    if (changeUser) {
	      pool.emit('connection', connection);
	    }

	    cb(null, connection);
	  }

	  if (changeUser) {
	    // restore user back to pool configuration
	    connection.config = this.config.newConnectionConfig();
	    connection.changeUser({timeout: this.config.acquireTimeout}, onOperationComplete);
	  } else {
	    // ping connection
	    connection.ping({timeout: this.config.acquireTimeout}, onOperationComplete);
	  }
	};

	Pool.prototype.releaseConnection = function releaseConnection(connection) {
	  var cb;
	  var pool = this;

	  if (this._acquiringConnections.indexOf(connection) !== -1) {
	    // connection is being acquired
	    return;
	  }

	  if (connection._pool) {
	    if (connection._pool !== this) {
	      throw new Error('Connection released to wrong pool');
	    }

	    if (this._freeConnections.indexOf(connection) !== -1) {
	      // connection already in free connection pool
	      // this won't catch all double-release cases
	      throw new Error('Connection already released');
	    } else {
	      // add connection to end of free queue
	      this._freeConnections.push(connection);
	    }
	  }

	  while (this._closed && this._connectionQueue.length) {
	    // empty the connection queue
	    cb = this._connectionQueue.shift();

	    process.nextTick(cb.bind(null, new Error('Pool is closed.')));
	  }

	  if (this._connectionQueue.length) {
	    cb = this._connectionQueue.shift();

	    this.getConnection(cb);
	  }
	};

	Pool.prototype.end = function (cb) {
	  this._closed = true;

	  if (typeof cb != "function") {
	    cb = function (err) {
	      if (err) throw err;
	    };
	  }

	  var calledBack   = false;
	  var waitingClose = this._allConnections.length;

	  function onEnd(err) {
	    if (calledBack) {
	      return;
	    }

	    if (err || --waitingClose === 0) {
	      calledBack = true;
	      return cb(err);
	    }
	  }

	  if (waitingClose === 0) {
	    return process.nextTick(cb);
	  }

	  while (this._allConnections.length !== 0) {
	    this._purgeConnection(this._allConnections[0], onEnd);
	  }
	};

	Pool.prototype.query = function (sql, values, cb) {
	  var query = Connection.createQuery(sql, values, cb);

	  if (!(typeof sql === 'object' && 'typeCast' in sql)) {
	    query.typeCast = this.config.connectionConfig.typeCast;
	  }

	  if (this.config.connectionConfig.trace) {
	    // Long stack trace support
	    query._callSite = new Error;
	  }

	  this.getConnection(function (err, conn) {
	    if (err) {
	      query.on('error', function () {});
	      query.end(err);
	      return;
	    }

	    // Release connection based off event
	    query.once('end', function() {
	      conn.release();
	    });

	    conn.query(query);
	  });

	  return query;
	};

	Pool.prototype._enqueueCallback = function _enqueueCallback(callback) {

	  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {
	    process.nextTick(function () {
	      var err = new Error('Queue limit reached.');
	      err.code = 'POOL_ENQUEUELIMIT';
	      callback(err);
	    });
	    return;
	  }

	  // Bind to domain, as dequeue will likely occur in a different domain
	  var cb = process.domain
	    ? process.domain.bind(callback)
	    : callback;

	  this._connectionQueue.push(cb);
	  this.emit('enqueue');
	};

	Pool.prototype._needsChangeUser = function _needsChangeUser(connection) {
	  var connConfig = connection.config;
	  var poolConfig = this.config.connectionConfig;

	  // check if changeUser values are different
	  return connConfig.user !== poolConfig.user
	    || connConfig.database !== poolConfig.database
	    || connConfig.password !== poolConfig.password
	    || connConfig.charsetNumber !== poolConfig.charsetNumber;
	};

	Pool.prototype._purgeConnection = function _purgeConnection(connection, callback) {
	  var cb = callback || function () {};

	  if (connection.state === 'disconnected') {
	    connection.destroy();
	  }

	  this._removeConnection(connection);

	  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {
	    connection._realEnd(cb);
	    return;
	  }

	  process.nextTick(cb);
	};

	Pool.prototype._removeConnection = function(connection) {
	  connection._pool = null;

	  // Remove connection from all connections
	  spliceConnection(this._allConnections, connection);

	  // Remove connection from free connections
	  spliceConnection(this._freeConnections, connection);

	  this.releaseConnection(connection);
	};

	Pool.prototype.escape = function(value) {
	  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);
	};

	Pool.prototype.escapeId = function escapeId(value) {
	  return mysql.escapeId(value, false);
	};

	function spliceConnection(array, connection) {
	  var index;
	  if ((index = array.indexOf(connection)) !== -1) {
	    // Remove connection from all connections
	    array.splice(index, 1);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(124).inherits;
	var Connection = __webpack_require__(375);

	module.exports = PoolConnection;
	inherits(PoolConnection, Connection);

	function PoolConnection(pool, options) {
	  Connection.call(this, options);
	  this._pool  = pool;

	  // When a fatal error occurs the connection's protocol ends, which will cause
	  // the connection to end as well, thus we only need to watch for the end event
	  // and we will be notified of disconnects.
	  this.on('end', this._removeFromPool);
	  this.on('error', function (err) {
	    if (err.fatal) {
	      this._removeFromPool();
	    }
	  });
	}

	PoolConnection.prototype.release = function release() {
	  var pool = this._pool;
	  var connection = this;

	  if (!pool || pool._closed) {
	    return;
	  }

	  return pool.releaseConnection(this);
	};

	// TODO: Remove this when we are removing PoolConnection#end
	PoolConnection.prototype._realEnd = Connection.prototype.end;

	PoolConnection.prototype.end = function () {
	  console.warn( 'Calling conn.end() to release a pooled connection is '
	              + 'deprecated. In next version calling conn.end() will be '
	              + 'restored to default conn.end() behavior. Use '
	              + 'conn.release() instead.'
	              );
	  this.release();
	};

	PoolConnection.prototype.destroy = function () {
	  Connection.prototype.destroy.apply(this, arguments);
	  this._removeFromPool(this);
	};

	PoolConnection.prototype._removeFromPool = function _removeFromPool() {
	  if (!this._pool || this._pool._closed) {
	    return;
	  }

	  var pool = this._pool;
	  this._pool = null;

	  pool._purgeConnection(this);
	};


/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Pool          = __webpack_require__(431);
	var PoolConfig    = __webpack_require__(434);
	var PoolNamespace = __webpack_require__(435);
	var PoolSelector  = __webpack_require__(436);
	var Util          = __webpack_require__(124);
	var EventEmitter  = __webpack_require__(64).EventEmitter;

	module.exports = PoolCluster;

	/**
	 * PoolCluster
	 */
	function PoolCluster(config) {
	  EventEmitter.call(this);

	  config = config || {};
	  this._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;
	  this._defaultSelector = config.defaultSelector || 'RR';
	  this._removeNodeErrorCount = config.removeNodeErrorCount || 5;
	  this._restoreNodeTimeout = config.restoreNodeTimeout || 0;

	  this._closed = false;
	  this._findCaches = Object.create(null);
	  this._lastId = 0;
	  this._namespaces = Object.create(null);
	  this._nodes = Object.create(null);
	}

	Util.inherits(PoolCluster, EventEmitter);

	PoolCluster.prototype.add = function add(id, config) {
	  if (this._closed) {
	    throw new Error('PoolCluster is closed.');
	  }

	  var nodeId = typeof id === 'object'
	    ? 'CLUSTER::' + (++this._lastId)
	    : String(id);

	  if (this._nodes[nodeId] !== undefined) {
	    throw new Error('Node ID "' + nodeId + '" is already defined in PoolCluster.');
	  }

	  var poolConfig = typeof id !== 'object'
	    ? new PoolConfig(config)
	    : new PoolConfig(id);

	  this._nodes[nodeId] = {
	    id            : nodeId,
	    errorCount    : 0,
	    pool          : new Pool({config: poolConfig}),
	    _offlineUntil : 0
	  };

	  this._clearFindCaches();
	};

	PoolCluster.prototype.end = function end(callback) {
	  var cb = callback !== undefined
	    ? callback
	    : _cb;

	  if (typeof cb !== 'function') {
	    throw TypeError('callback argument must be a function');
	  }

	  if (this._closed) {
	    return process.nextTick(cb);
	  }

	  this._closed = true;

	  var calledBack   = false;
	  var nodeIds      = Object.keys(this._nodes);
	  var waitingClose = nodeIds.length;

	  function onEnd(err) {
	    if (calledBack) {
	      return;
	    }

	    if (err || --waitingClose === 0) {
	      calledBack = true;
	      return cb(err);
	    }
	  }

	  if (waitingClose === 0) {
	    return process.nextTick(cb);
	  }

	  for (var i = 0; i < nodeIds.length; i++) {
	    var nodeId = nodeIds[i];
	    var node = this._nodes[nodeId];

	    node.pool.end(onEnd);
	  }
	};

	PoolCluster.prototype.of = function(pattern, selector) {
	  pattern = pattern || '*';

	  selector = selector || this._defaultSelector;
	  selector = selector.toUpperCase();
	  if (typeof PoolSelector[selector] === 'undefined') {
	    selector = this._defaultSelector;
	  }

	  var key = pattern + selector;

	  if (typeof this._namespaces[key] === 'undefined') {
	    this._namespaces[key] = new PoolNamespace(this, pattern, selector);
	  }

	  return this._namespaces[key];
	};

	PoolCluster.prototype.remove = function remove(pattern) {
	  var foundNodeIds = this._findNodeIds(pattern, true);

	  for (var i = 0; i < foundNodeIds.length; i++) {
	    var node = this._getNode(foundNodeIds[i]);

	    if (node) {
	      this._removeNode(node);
	    }
	  }
	};

	PoolCluster.prototype.getConnection = function(pattern, selector, cb) {
	  var namespace;
	  if (typeof pattern === 'function') {
	    cb = pattern;
	    namespace = this.of();
	  } else {
	    if (typeof selector === 'function') {
	      cb = selector;
	      selector = this._defaultSelector;
	    }

	    namespace = this.of(pattern, selector);
	  }

	  namespace.getConnection(cb);
	};

	PoolCluster.prototype._clearFindCaches = function _clearFindCaches() {
	  this._findCaches = Object.create(null);
	};

	PoolCluster.prototype._decreaseErrorCount = function _decreaseErrorCount(node) {
	  var errorCount = node.errorCount;

	  if (errorCount > this._removeNodeErrorCount) {
	    errorCount = this._removeNodeErrorCount;
	  }

	  if (errorCount < 1) {
	    errorCount = 1;
	  }

	  node.errorCount = errorCount - 1;

	  if (node._offlineUntil) {
	    node._offlineUntil = 0;
	    this.emit('online', node.id);
	  }
	};

	PoolCluster.prototype._findNodeIds = function _findNodeIds(pattern, includeOffline) {
	  var currentTime  = 0;
	  var foundNodeIds = this._findCaches[pattern];

	  if (foundNodeIds === undefined) {
	    var nodeIds  = Object.keys(this._nodes);
	    var wildcard = pattern.substr(-1) === '*';
	    var keyword  = wildcard
	      ? pattern.substr(0, pattern.length - 1)
	      : pattern;

	    if (wildcard) {
	      foundNodeIds = keyword.length !== 0
	        ? nodeIds.filter(function (id) { return id.substr(0, keyword.length) === keyword; })
	        : nodeIds;
	    } else {
	      var index = nodeIds.indexOf(keyword);
	      foundNodeIds = nodeIds.slice(index, index + 1);
	    }

	    this._findCaches[pattern] = foundNodeIds;
	  }

	  if (includeOffline) {
	    return foundNodeIds;
	  }

	  return foundNodeIds.filter(function (nodeId) {
	    var node = this._getNode(nodeId);

	    if (!node._offlineUntil) {
	      return true;
	    }

	    if (!currentTime) {
	      currentTime = getMonotonicMilliseconds();
	    }

	    return node._offlineUntil <= currentTime;
	  }, this);
	};

	PoolCluster.prototype._getNode = function _getNode(id) {
	  return this._nodes[id] || null;
	};

	PoolCluster.prototype._increaseErrorCount = function _increaseErrorCount(node) {
	  var errorCount = ++node.errorCount;

	  if (this._removeNodeErrorCount > errorCount) {
	    return;
	  }

	  if (this._restoreNodeTimeout > 0) {
	    node._offlineUntil = getMonotonicMilliseconds() + this._restoreNodeTimeout;
	    this.emit('offline', node.id);
	    return;
	  }

	  this._removeNode(node);
	  this.emit('remove', node.id);
	};

	PoolCluster.prototype._getConnection = function(node, cb) {
	  var self = this;

	  node.pool.getConnection(function (err, connection) {
	    if (err) {
	      self._increaseErrorCount(node);
	      cb(err);
	      return;
	    } else {
	      self._decreaseErrorCount(node);
	    }

	    connection._clusterId = node.id;

	    cb(null, connection);
	  });
	};

	PoolCluster.prototype._removeNode = function _removeNode(node) {
	  delete this._nodes[node.id];

	  this._clearFindCaches();

	  node.pool.end(_noop);
	};

	function getMonotonicMilliseconds() {
	  var ms;

	  if (typeof process.hrtime === 'function') {
	    ms = process.hrtime();
	    ms = ms[0] * 1e3 + ms[1] * 1e-6;
	  } else {
	    ms = process.uptime() * 1000;
	  }

	  return Math.floor(ms);
	}

	function _cb(err) {
	  if (err) {
	    throw err;
	  }
	}

	function _noop() {}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	
	var ConnectionConfig = __webpack_require__(376);

	module.exports = PoolConfig;
	function PoolConfig(options) {
	  if (typeof options === 'string') {
	    options = ConnectionConfig.parseUrl(options);
	  }

	  this.acquireTimeout     = (options.acquireTimeout === undefined)
	    ? 10 * 1000
	    : Number(options.acquireTimeout);
	  this.connectionConfig   = new ConnectionConfig(options);
	  this.waitForConnections = (options.waitForConnections === undefined)
	    ? true
	    : Boolean(options.waitForConnections);
	  this.connectionLimit    = (options.connectionLimit === undefined)
	    ? 10
	    : Number(options.connectionLimit);
	  this.queueLimit         = (options.queueLimit === undefined)
	    ? 0
	    : Number(options.queueLimit);
	}

	PoolConfig.prototype.newConnectionConfig = function newConnectionConfig() {
	  var connectionConfig = new ConnectionConfig(this.connectionConfig);

	  connectionConfig.clientFlags   = this.connectionConfig.clientFlags;
	  connectionConfig.maxPacketSize = this.connectionConfig.maxPacketSize;

	  return connectionConfig;
	};


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var PoolSelector = __webpack_require__(436);

	module.exports = PoolNamespace;

	/**
	 * PoolNamespace
	 */
	function PoolNamespace(cluster, pattern, selector) {
	  this._cluster = cluster;
	  this._pattern = pattern;
	  this._selector = new PoolSelector[selector]();
	}

	PoolNamespace.prototype.getConnection = function(cb) {
	  var clusterNode = this._getClusterNode();
	  var cluster     = this._cluster;
	  var namespace   = this;

	  if (clusterNode === null) {
	    var err = null;

	    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {
	      err = new Error('Pool does not have online node.');
	      err.code = 'POOL_NONEONLINE';
	    } else {
	      err = new Error('Pool does not exist.');
	      err.code = 'POOL_NOEXIST';
	    }

	    return cb(err);
	  }

	  cluster._getConnection(clusterNode, function(err, connection) {
	    var retry = err && cluster._canRetry
	      && cluster._findNodeIds(namespace._pattern).length !== 0;

	    if (retry) {
	      return namespace.getConnection(cb);
	    }

	    if (err) {
	      return cb(err);
	    }

	    cb(null, connection);
	  });
	};

	PoolNamespace.prototype._getClusterNode = function _getClusterNode() {
	  var foundNodeIds = this._cluster._findNodeIds(this._pattern);
	  var nodeId;

	  switch (foundNodeIds.length) {
	    case 0:
	      nodeId = null;
	      break;
	    case 1:
	      nodeId = foundNodeIds[0];
	      break;
	    default:
	      nodeId = this._selector(foundNodeIds);
	      break;
	  }

	  return nodeId !== null
	    ? this._cluster._getNode(nodeId)
	    : null;
	};


/***/ },
/* 436 */
/***/ function(module, exports) {

	
	/**
	 * PoolSelector
	 */
	var PoolSelector = module.exports = {};

	PoolSelector.RR = function PoolSelectorRoundRobin() {
	  var index = 0;

	  return function(clusterIds) {
	    if (index >= clusterIds.length) {
	      index = 0;
	    }

	    var clusterId = clusterIds[index++];

	    return clusterId;
	  };
	};

	PoolSelector.RANDOM = function PoolSelectorRandom() {
	  return function(clusterIds) {
	    return clusterIds[Math.floor(Math.random() * clusterIds.length)];
	  };
	};

	PoolSelector.ORDER = function PoolSelectorOrder() {
	  return function(clusterIds) {
	    return clusterIds[0];
	  };
	};


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127)
	  , Abstract = __webpack_require__(364)
	  , ConnectionManager = __webpack_require__(438)
	  , Query = __webpack_require__(442)
	  , QueryGenerator = __webpack_require__(443)
	  , DataTypes = __webpack_require__(123).mssql;

	var MssqlDialect = function(sequelize) {
	  this.sequelize = sequelize;
	  this.connectionManager = new ConnectionManager(this, sequelize);
	  this.connectionManager.initPools();
	  this.QueryGenerator = _.extend({}, QueryGenerator, {
	    options: sequelize.options,
	    _dialect: this,
	    sequelize: sequelize
	  });
	};

	MssqlDialect.prototype.supports = _.merge(_.cloneDeep(Abstract.prototype.supports), {
	  'DEFAULT': true,
	  'DEFAULT VALUES': true,
	  'LIMIT ON UPDATE': true,
	  'ORDER NULLS': false,
	  lock: false,
	  transactions: false,
	  migrations: false,
	  upserts: true,
	  returnValues: {
	    output: true
	  },
	  schemas: true,
	  autoIncrement: {
	    identityInsert: true,
	    defaultValue: false,
	    update: false
	  },
	  constraints: {
	    restrict: false
	  },
	  index: {
	    collate: false,
	    length: false,
	    parser: false,
	    type: true,
	    using: false,
	  },
	  NUMERIC: true,
	  tmpTableTrigger: true
	});

	MssqlDialect.prototype.defaultVersion = '12.0.2000'; // SQL Server 2014 Express
	MssqlDialect.prototype.Query = Query;
	MssqlDialect.prototype.name = 'mssql';
	MssqlDialect.prototype.TICK_CHAR = '"';
	MssqlDialect.prototype.TICK_CHAR_LEFT = '[';
	MssqlDialect.prototype.TICK_CHAR_RIGHT = ']';
	MssqlDialect.prototype.DataTypes = DataTypes;

	module.exports = MssqlDialect;


/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AbstractConnectionManager = __webpack_require__(366)
	  , ConnectionManager
	  , ResourceLock = __webpack_require__(439)
	  , Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335)
	  , sequelizeErrors = __webpack_require__(130)
	  , parserStore = __webpack_require__(440)('mssql')
	  , _ = __webpack_require__(127);

	ConnectionManager = function(dialect, sequelize) {
	  AbstractConnectionManager.call(this, dialect, sequelize);

	  this.sequelize = sequelize;
	  this.sequelize.config.port = this.sequelize.config.port || 1433;
	  try {
	    this.lib = __webpack_require__(441)(sequelize.config.dialectModulePath || 'tedious');
	  } catch (err) {
	    if (err.code === 'MODULE_NOT_FOUND') {
	      throw new Error('Please install tedious package manually');
	    }
	    throw err;
	  }
	};

	Utils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);


	// Expose this as a method so that the parsing may be updated when the user has added additional, custom types
	ConnectionManager.prototype.$refreshTypeParser = function (dataType) {
	  parserStore.refresh(dataType);
	};

	ConnectionManager.prototype.$clearTypeParser = function () {
	  parserStore.clear();
	};

	ConnectionManager.prototype.connect = function(config) {
	  var self = this;
	  return new Promise(function (resolve, reject) {
	    var connectionConfig = {
	      userName: config.username,
	      password: config.password,
	      server: config.host,
	      options: {
	        port: config.port,
	        database: config.database
	      }
	    };

	    if (config.dialectOptions) {
	      // only set port if no instance name was provided
	      if (config.dialectOptions.instanceName) {
	        delete connectionConfig.options.port;
	      }

	      // The 'tedious' driver needs domain property to be in the main Connection config object
	      if(config.dialectOptions.domain) {
	        connectionConfig.domain = config.dialectOptions.domain;
	      }

	      Object.keys(config.dialectOptions).forEach(function(key) {
	        connectionConfig.options[key] = config.dialectOptions[key];
	      });
	    }

	    var connection = new self.lib.Connection(connectionConfig)
	      , connectionLock = new ResourceLock(connection);
	    connection.lib = self.lib;

	    connection.on('connect', function(err) {
	      if (!err) {
	        resolve(connectionLock);
	        return;
	      }

	      if (!err.code) {
	        reject(new sequelizeErrors.ConnectionError(err));
	        return;
	      }

	      switch (err.code) {
	      case 'ESOCKET':
	        if (_.includes(err.message, 'connect EHOSTUNREACH')) {
	          reject(new sequelizeErrors.HostNotReachableError(err));
	        } else if (_.includes(err.message, 'connect ECONNREFUSED')) {
	          reject(new sequelizeErrors.ConnectionRefusedError(err));
	        } else {
	          reject(new sequelizeErrors.ConnectionError(err));
	        }
	        break;
	      case 'ECONNREFUSED':
	        reject(new sequelizeErrors.ConnectionRefusedError(err));
	        break;
	      case 'ER_ACCESS_DENIED_ERROR':
	        reject(new sequelizeErrors.AccessDeniedError(err));
	        break;
	      case 'ENOTFOUND':
	        reject(new sequelizeErrors.HostNotFoundError(err));
	        break;
	      case 'EHOSTUNREACH':
	        reject(new sequelizeErrors.HostNotReachableError(err));
	        break;
	      case 'EINVAL':
	        reject(new sequelizeErrors.InvalidConnectionError(err));
	        break;
	      default:
	        reject(new sequelizeErrors.ConnectionError(err));
	        break;
	      }
	    });

	    if (config.pool.handleDisconnects) {
	      connection.on('error', function (err) {
	        switch (err.code) {
	        case 'ESOCKET':
	        case 'ECONNRESET':
	          self.pool.destroy(connectionLock);
	        }
	      });
	    }

	  });
	};

	ConnectionManager.prototype.disconnect = function(connectionLock) {
	  var connection = connectionLock.unwrap();

	  // Dont disconnect a connection that is already disconnected
	  if (!!connection.closed) {
	    return Promise.resolve();
	  }

	  return new Promise(function (resolve, reject) {
	    connection.on('end', resolve);
	    connection.close();
	  });
	};

	ConnectionManager.prototype.validate = function(connectionLock) {
	  var connection = connectionLock.unwrap();

	  return connection && connection.loggedIn;
	};

	module.exports = ConnectionManager;


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Promise = __webpack_require__(335);

	function ResourceLock(resource) {
	  this.resource = resource;
	  this.previous = Promise.resolve(resource);
	}

	ResourceLock.prototype.unwrap = function () {
	  return this.resource;
	};

	ResourceLock.prototype.lock = function () {
	  var lock = this.previous;
	  var resolve;

	  this.previous = new Promise(function (r) {
	    resolve = r;
	  });

	  return lock.disposer(resolve);
	};

	module.exports = ResourceLock;


/***/ },
/* 440 */
/***/ function(module, exports) {

	'use strict';

	var stores = {};
	module.exports = function (dialect) {
	  stores[dialect] = stores[dialect] || {};

	  return {
	    clear: function () {
	      stores[dialect] = {};
	    },
	    refresh: function (dataType) {
	      dataType.types[dialect].forEach(function (type) {
	        stores[dialect][type] = dataType.parse;
	      });
	    },
	    get: function (type) {
	      return stores[dialect][type];
	    }
	  };
	};


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./connection-manager": 438,
		"./connection-manager.js": 438,
		"./data-types": 329,
		"./data-types.js": 329,
		"./index": 437,
		"./index.js": 437,
		"./query": 442,
		"./query-generator": 443,
		"./query-generator.js": 443,
		"./query-interface": 359,
		"./query-interface.js": 359,
		"./query.js": 442,
		"./resource-lock": 439,
		"./resource-lock.js": 439
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 441;


/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335)
	  , AbstractQuery = __webpack_require__(371)
	  , sequelizeErrors = __webpack_require__(130)
	  , parserStore = __webpack_require__(440)('mssql'),
	  _ = __webpack_require__(127);

	var Query = function(connection, sequelize, options) {
	  this.connection = connection;
	  this.instance = options.instance;
	  this.model = options.model;
	  this.sequelize = sequelize;
	  this.options = Utils._.extend({
	    logging: console.log,
	    plain: false,
	    raw: false
	  }, options || {});

	  this.checkLoggingOption();
	};

	Utils.inherit(Query, AbstractQuery);

	Query.prototype.getInsertIdField = function() {
	  return 'id';
	};

	Query.formatBindParameters = AbstractQuery.formatBindParameters;
	Query.prototype._run = function(connection, sql, parameters) {
	  var self = this;
	  this.sql = sql;

	  //do we need benchmark for this query execution
	  var benchmark = this.sequelize.options.benchmark || this.options.benchmark;

	  if (benchmark) {
	    var queryBegin = Date.now();
	  } else {
	    this.sequelize.log('Executing (' + (connection.uuid || 'default') + '): ' + this.sql, this.options);
	  }

	  var promise = new Utils.Promise(function(resolve, reject) {
	      // TRANSACTION SUPPORT
	      if (_.includes(self.sql, 'BEGIN TRANSACTION')) {
	        connection.beginTransaction(function(err) {
	          if (!!err) {
	            reject(self.formatError(err));
	          } else {
	            resolve(self.formatResults());
	          }
	        } /* name, isolation_level */);
	      } else if (_.includes(self.sql, 'COMMIT TRANSACTION')) {
	        connection.commitTransaction(function(err) {
	          if (!!err) {
	            reject(self.formatError(err));
	          } else {
	            resolve(self.formatResults());
	          }
	        });
	      } else if (_.includes(self.sql, 'ROLLBACK TRANSACTION')) {
	        connection.rollbackTransaction(function(err) {
	          if (!!err) {
	            reject(self.formatError(err));
	          } else {
	            resolve(self.formatResults());
	          }
	        });
	      } else {
	        // QUERY SUPPORT
	        var results = [];

	        var request = new connection.lib.Request(self.sql, function(err) {

	          if (benchmark) {
	            self.sequelize.log('Executed (' + (connection.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);
	          }

	          if (err) {
	            err.sql = sql;
	            reject(self.formatError(err));
	          } else {
	            resolve(self.formatResults(results));
	          }
	        });

	        request.on('row', function(columns) {
	          var row = {};
	          columns.forEach(function(column) {
	            var typeid = column.metadata.type.id
	              , value = column.value
	              , parse = parserStore.get(typeid);

	            if (value !== null & !!parse) {
	              value = parse(value);
	            }
	            row[column.metadata.colName] = value;
	          });

	          results.push(row);
	        });

	        connection.execSql(request);
	      }
	  });

	  return promise;
	};

	Query.prototype.run = function(sql, parameters) {
	  var self = this;

	  return Promise.using(this.connection.lock(), function (connection) {
	    return self._run(connection, sql, parameters);
	  });
	};

	/**
	 * High level function that handles the results of a query execution.
	 *
	 *
	 * Example:
	 *  query.formatResults([
	 *    {
	 *      id: 1,              // this is from the main table
	 *      attr2: 'snafu',     // this is from the main table
	 *      Tasks.id: 1,        // this is from the associated table
	 *      Tasks.title: 'task' // this is from the associated table
	 *    }
	 *  ])
	 *
	 * @param {Array} data - The result of the query execution.
	 */
	Query.prototype.formatResults = function(data) {
	  var result = this.instance;
	  if (this.isInsertQuery(data)) {
	    this.handleInsertQuery(data);

	    if (!this.instance) {
	      if (this.options.plain) {
	        // NOTE: super contrived. This just passes the newly added query-interface
	        //       test returning only the PK. There isn't a way in MSSQL to identify
	        //       that a given return value is the PK, and we have no schema information
	        //       because there was no calling Model.
	        var record = data[0];
	        result = record[Object.keys(record)[0]];
	      } else {
	        result = data;
	      }
	    }
	  }

	  if (this.isShowTablesQuery()) {
	    result = this.handleShowTablesQuery(data);
	  } else if (this.isDescribeQuery()) {
	    result = {};
	    data.forEach(function(_result) {
	      if (_result.Default) {
	        _result.Default = _result.Default.replace("('",'').replace("')",'').replace(/'/g,''); /* jshint ignore: line */
	      }

	      result[_result.Name] = {
	        type: _result.Type.toUpperCase(),
	        allowNull: (_result.IsNull === 'YES' ? true : false),
	        defaultValue: _result.Default,
	        primaryKey: _result.Constraint === 'PRIMARY KEY'
	      };
	    });
	  } else if (this.isShowIndexesQuery()) {
	    result = this.handleShowIndexesQuery(data);
	  } else if (this.isSelectQuery()) {
	    result = this.handleSelectQuery(data);
	  } else if (this.isUpsertQuery()) {
	    //Use the same return value as that of MySQL & Postgres
	    if (data[0].$action === 'INSERT') {
	      result = 1;
	    } else {
	      result = 2;
	    }
	  } else if (this.isCallQuery()) {
	    result = data[0];
	  } else if (this.isBulkUpdateQuery()) {
	    result = data.length;
	  } else if (this.isBulkDeleteQuery()){
	    result = data[0] && data[0].AFFECTEDROWS;
	  } else if (this.isVersionQuery()) {
	    result = data[0].version;
	  } else if (this.isForeignKeysQuery()) {
	    result = data;
	  } else if (this.isRawQuery()) {
	    // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta
	    result = [data, data];
	   }

	  return result;
	};

	Query.prototype.handleShowTablesQuery = function(results) {
	  return results.map(function(resultSet) {
	    return {
	      tableName: resultSet.TABLE_NAME,
	      schema: resultSet.TABLE_SCHEMA
	    };
	  });
	};

	Query.prototype.formatError = function (err) {
	  var match;
	  match = err.message.match(/Violation of UNIQUE KEY constraint '((.|\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \((.*)\).)?/);
	  match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);
	  if (match && match.length > 1) {
	    var fields = {}
	      , message = 'Validation error'
	      , uniqueKey = this.model && this.model.uniqueKeys[match[1]];

	    if (uniqueKey && !!uniqueKey.msg) {
	      message = uniqueKey.msg;
	    }
	    if (!!match[2]) {
	      var values = match[2].split(',').map(Function.prototype.call, String.prototype.trim);
	      if (!!uniqueKey) {
	        fields = Utils._.zipObject(uniqueKey.fields, values);
	      } else {
	        fields[match[1]] = match[2];
	      }
	    }

	    var errors = [];
	    var self = this;
	    Utils._.forOwn(fields, function(value, field) {
	      errors.push(new sequelizeErrors.ValidationErrorItem(
	        self.getUniqueConstraintErrorMessage(field),
	        'unique violation', field, value));
	    });

	    return new sequelizeErrors.UniqueConstraintError({
	      message: message,
	      errors: errors,
	      parent: err,
	      fields: fields
	    });
	  }

	  match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||
	          err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) ||
	          err.message.match(/The INSERT statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) ||
	          err.message.match(/The UPDATE statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);
	  if (match && match.length > 0) {
	    return new sequelizeErrors.ForeignKeyConstraintError({
	      fields: null,
	      index: match[1],
	      parent: err
	    });
	  }

	  return new sequelizeErrors.DatabaseError(err);
	};

	Query.prototype.isShowOrDescribeQuery = function() {
	  var result = false;

	  result = result || (this.sql.toLowerCase().indexOf("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'") === 0); /* jshint ignore: line */
	  result = result || (this.sql.toLowerCase().indexOf('select tablename = t.name, name = ind.name,') === 0);
	  result = result || (this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0);

	  return result;
	};

	Query.prototype.isShowIndexesQuery = function () {
	  return this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;
	};

	Query.prototype.handleShowIndexesQuery = function (data) {
	  // Group by index name, and collect all fields
	  data = _.reduce(data, function (acc, item) {
	    if (!(item.index_name in acc)) {
	      acc[item.index_name] = item;
	      item.fields = [];
	    }

	    Utils._.forEach(item.index_keys.split(','), function(column) {
	      var columnName = column.trim();
	      if (columnName.indexOf('(-)') !== -1) {
	        columnName = columnName.replace('(-)','');
	      }

	      acc[item.index_name].fields.push({
	        attribute: columnName,
	        length: undefined,
	        order: (column.indexOf('(-)') !== -1 ? 'DESC' : 'ASC'),
	        collate: undefined
	      });
	    });
	    delete item.index_keys;
	    return acc;
	  }, {});

	  return Utils._.map(data, function(item) {
	    return {
	      primary: (item.index_name.toLowerCase().indexOf('pk') === 0),
	      fields: item.fields,
	      name: item.index_name,
	      tableName: undefined,
	      unique: (item.index_description.toLowerCase().indexOf('unique') !== -1),
	      type: undefined,
	    };
	  });
	};

	Query.prototype.handleInsertQuery = function(results, metaData) {
	  if (this.instance) {
	    // add the inserted row id to the instance
	    var autoIncrementField = this.model.autoIncrementField
	      , autoIncrementFieldAlias = null
	      , id = null;

	    if (this.model.rawAttributes.hasOwnProperty(autoIncrementField) &&
	        this.model.rawAttributes[autoIncrementField].field !== undefined)
	      autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field ;

	    id = id || (results && results[0][this.getInsertIdField()]);
	    id = id || (metaData && metaData[this.getInsertIdField()]);
	    id = id || (results && results[0][autoIncrementField]);
	    id = id || (autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias]);

	    this.instance[autoIncrementField] = id;
	  }
	};

	module.exports = Query;


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* jshint -W110 */
	var Utils = __webpack_require__(122)
	  , DataTypes = __webpack_require__(123)
	  , AbstractQueryGenerator = __webpack_require__(373)
	  , semver = __webpack_require__(368);

	/* istanbul ignore next */
	var throwMethodUndefined = function(methodName) {
	  throw new Error('The method "' + methodName + '" is not defined! Please add it to your sql dialect.');
	};

	var QueryGenerator = {
	  options: {},
	  dialect: 'mssql',

	  createSchema: function(schema) {
	    return [
	      'IF NOT EXISTS (SELECT schema_name',
	      'FROM information_schema.schemata',
	      'WHERE schema_name =', wrapSingleQuote(schema), ')',
	      'BEGIN',
	        "EXEC sp_executesql N'CREATE SCHEMA",
	        this.quoteIdentifier(schema),
	        ";'",
	      'END;'
	    ].join(' ');
	  },

	  showSchemasQuery: function() {
	    return [
	      'SELECT "name" as "schema_name" FROM sys.schemas as s',
	      'WHERE "s"."name" NOT IN (',
	        "'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'",
	      ')', 'AND', '"s"."name" NOT LIKE', "'db_%'"
	    ].join(' ');
	  },

	  versionQuery: function() {
	    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch
	    return [
	      'DECLARE @ms_ver NVARCHAR(20);',
	      "SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));",
	      "SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'"
	    ].join(' ');
	  },

	  createTableQuery: function(tableName, attributes, options) {
	    var query = "IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)"
	      , primaryKeys = []
	      , foreignKeys = {}
	      , attrStr = []
	      , self = this;

	    for (var attr in attributes) {
	      if (attributes.hasOwnProperty(attr)) {
	        var dataType = attributes[attr]
	          , match;

	        if (Utils._.includes(dataType, 'PRIMARY KEY')) {
	          primaryKeys.push(attr);

	          if (Utils._.includes(dataType, 'REFERENCES')) {
	             // MSSQL doesn't support inline REFERENCES declarations: move to the end
	            match = dataType.match(/^(.+) (REFERENCES.*)$/);
	            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));
	            foreignKeys[attr] = match[2];
	          } else {
	            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));
	          }
	        } else if (Utils._.includes(dataType, 'REFERENCES')) {
	          // MSSQL doesn't support inline REFERENCES declarations: move to the end
	          match = dataType.match(/^(.+) (REFERENCES.*)$/);
	          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);
	          foreignKeys[attr] = match[2];
	        } else {
	          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);
	        }
	      }
	    }

	    var values = {
	      table: this.quoteTable(tableName),
	      attributes: attrStr.join(', '),
	    }
	    , pkString = primaryKeys.map(function(pk) { return this.quoteIdentifier(pk); }.bind(this)).join(', ');

	    if (!!options.uniqueKeys) {
	      Utils._.each(options.uniqueKeys, function(columns, indexName) {
	        if (!Utils._.isString(indexName)) {
	          indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');
	        }
	        values.attributes += ', CONSTRAINT ' + self.quoteIdentifier(indexName) + ' UNIQUE (' + Utils._.map(columns.fields, self.quoteIdentifier).join(', ') + ')';
	      });
	    }

	    if (pkString.length > 0) {
	      values.attributes += ', PRIMARY KEY (' + pkString + ')';
	    }

	    for (var fkey in foreignKeys) {
	      if (foreignKeys.hasOwnProperty(fkey)) {
	        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];
	      }
	    }

	    return Utils._.template(query)(values).trim() + ';';
	  },

	  describeTableQuery: function(tableName, schema) {
	    var sql = [
	      'SELECT',
	        "c.COLUMN_NAME AS 'Name',",
	        "c.DATA_TYPE AS 'Type',",
	        "c.CHARACTER_MAXIMUM_LENGTH AS 'Length',",
	        "c.IS_NULLABLE as 'IsNull',",
	        "COLUMN_DEFAULT AS 'Default',",
	        "tc.CONSTRAINT_TYPE AS 'Constraint'",
	      'FROM',
	        'INFORMATION_SCHEMA.TABLES t',
	      'INNER JOIN',
	        'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',
	      'LEFT JOIN',
	        'INFORMATION_SCHEMA.KEY_COLUMN_USAGE cu ON t.TABLE_NAME = cu.TABLE_NAME AND cu.COLUMN_NAME = c.COLUMN_NAME AND t.TABLE_SCHEMA = cu.TABLE_SCHEMA',
	      'LEFT JOIN',
	        'INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ON t.TABLE_NAME = tc.TABLE_NAME AND cu.COLUMN_NAME = c.COLUMN_NAME AND tc.CONSTRAINT_TYPE = \'PRIMARY KEY\'',
	      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)
	    ].join(' ');

	    if (schema) {
	      sql += 'AND t.TABLE_SCHEMA =' + wrapSingleQuote(schema);
	    }

	    return sql;
	  },

	  renameTableQuery: function(before, after) {
	    var query = 'EXEC sp_rename <%= before %>, <%= after %>;';
	    return Utils._.template(query)({
	      before: this.quoteTable(before),
	      after: this.quoteTable(after)
	    });
	  },

	  showTablesQuery: function () {
	    return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';
	  },

	  dropTableQuery: function(tableName) {
	    var query = "IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>";
	    var values = {
	      table: this.quoteTable(tableName)
	    };

	    return Utils._.template(query)(values).trim() + ';';
	  },

	  addColumnQuery: function(table, key, dataType) {
	    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery
	    //        but instead we need to pass the key along as the field here
	    dataType.field = key;

	    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
	      , attribute = Utils._.template('<%= key %> <%= definition %>')({
	        key: this.quoteIdentifier(key),
	        definition: this.attributeToSQL(dataType, {
	          context: 'addColumn'
	        })
	      });

	    return Utils._.template(query)({
	      table: this.quoteTable(table),
	      attribute: attribute
	    });
	  },

	  removeColumnQuery: function(tableName, attributeName) {
	    var query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';
	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      attributeName: this.quoteIdentifier(attributeName)
	    });
	  },

	  changeColumnQuery: function(tableName, attributes) {
	    var query = 'ALTER TABLE <%= tableName %> <%= query %>;';
	    var attrString = [], constraintString = [];

	    for (var attributeName in attributes) {
	      var definition = attributes[attributeName];
	      if (definition.match(/REFERENCES/)) {
	        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({
	          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),
	          attrName: this.quoteIdentifier(attributeName),
	          definition: definition.replace(/.+?(?=REFERENCES)/,'')
	        }));
	      } else {
	        attrString.push(Utils._.template('<%= attrName %> <%= definition %>')({
	          attrName: this.quoteIdentifier(attributeName),
	          definition: definition
	        }));
	      }
	    }

	    var finalQuery = '';
	    if (attrString.length) {
	      finalQuery += 'ALTER COLUMN ' + attrString.join(', ');
	      finalQuery += constraintString.length ? ' ' : '';
	    }
	    if (constraintString.length) {
	      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');
	    }

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      query: finalQuery
	    });
	  },

	  renameColumnQuery: function(tableName, attrBefore, attributes) {
	    var query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';"
	      , newName = Object.keys(attributes)[0];

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      before: attrBefore,
	      after: newName
	    });
	  },

	  bulkInsertQuery: function(tableName, attrValueHashes, options, attributes) {
	    options = options || {};
	    attributes = attributes || {};
	    var query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;'
	      , emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES'
	      , tuples = []
	      , allAttributes = []
	      , needIdentityInsertWrapper = false
	      , allQueries = []
	      , outputFragment;

	    if (options.returning) {
	      outputFragment = ' OUTPUT INSERTED.*';
	    }

	    Utils._.forEach(attrValueHashes, function(attrValueHash) {
	      // special case for empty objects with primary keys
	      var fields = Object.keys(attrValueHash);
	      var firstAttr = attributes[fields[0]];
	      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {
	        allQueries.push(emptyQuery);
	        return;
	      }

	      // normal case
	      Utils._.forOwn(attrValueHash, function(value, key) {
	        if (value !== null && attributes[key] && attributes[key].autoIncrement) {
	          needIdentityInsertWrapper = true;
	        }

	        if (allAttributes.indexOf(key) === -1) {
	          if (value === null && attributes[key].autoIncrement)
	            return;

	          allAttributes.push(key);
	        }
	      });
	    });

	    if (allAttributes.length > 0) {
	      Utils._.forEach(attrValueHashes, function(attrValueHash) {
	        tuples.push('(' +
	          allAttributes.map(function(key) {
	            return this.escape(attrValueHash[key]);
	          }.bind(this)).join(',') +
	        ')');
	      }.bind(this));

	      allQueries.push(query);
	    }

	    var replacements = {
	      table: this.quoteTable(tableName),
	      attributes: allAttributes.map(function(attr) {
	                    return this.quoteIdentifier(attr);
	                  }.bind(this)).join(','),
	      tuples: tuples,
	      output: outputFragment
	    };

	    var generatedQuery = Utils._.template(allQueries.join(';'))(replacements);
	    if (needIdentityInsertWrapper) {
	      generatedQuery = [
	        'SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;',
	        generatedQuery,
	        'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;',
	      ].join(' ');
	    }

	    return generatedQuery;
	  },

	  upsertQuery: function(tableName, insertValues, updateValues, where, rawAttributes, options) {
	    var query = 'MERGE INTO <%= tableNameQuoted %> WITH(HOLDLOCK) AS <%= targetTableAlias %> USING (<%= sourceTableQuery %>) AS <%= sourceTableAlias%>(<%=insertKeysQuoted%>) ON <%= joinCondition %>';
	    query += ' WHEN MATCHED THEN UPDATE SET <%= updateSnippet %> WHEN NOT MATCHED THEN INSERT <%= insertSnippet %> OUTPUT $action, INSERTED.*;';

	    var targetTableAlias = this.quoteTable(tableName + '_target')
	      , sourceTableAlias = this.quoteTable(tableName + '_source')
	      , primaryKeysAttrs = []
	      , identityAttrs = []
	      , uniqueAttrs = []
	      , tableNameQuoted = this.quoteTable(tableName)
	      , joinCondition
	      , needIdentityInsertWrapper = false;

	    
	    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed
	    for (var key in rawAttributes) {
	      if (rawAttributes[key].primaryKey) {
	        primaryKeysAttrs.push(rawAttributes[key].field || key);
	      }
	      if (rawAttributes[key].unique) {
	        uniqueAttrs.push(rawAttributes[key].field || key);
	      }
	      if (rawAttributes[key].autoIncrement) {
	        identityAttrs.push(rawAttributes[key].field || key);
	      }
	    }

	    var updateKeys = Object.keys(updateValues)
	      , insertKeys = Object.keys(insertValues);
	    
	    var insertKeysQuoted = Utils._.map(insertKeys, function(key) {
	      return this.quoteIdentifier(key);
	    }.bind(this)).join(', ');

	    var insertValuesEscaped = Utils._.map(insertKeys, function(key) {
	      return this.escape(insertValues[key]);
	    }.bind(this)).join(', ');
	    
	    var sourceTableQuery = 'VALUES(' + insertValuesEscaped + ')'; //Virtual Table

	    //IDENTITY_INSERT Condition
	    identityAttrs.forEach(function(key) {
	      if (updateValues[key] && updateValues[key] !== null) {
	        needIdentityInsertWrapper = true;
	        /*
	         * IDENTITY_INSERT Column Cannot be updated, only inserted
	         * http://stackoverflow.com/a/30176254/2254360
	         */
	      }
	    });

	    //Filter NULL Clauses
	    var clauses = where.$or.filter(function(clause) {
	      var valid = true;
	      /*
	       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row
	       */
	      for (var key in clause) {
	        if (!clause[key]) {
	          valid = false;
	          break;
	        }
	      }
	      return valid;
	    });

	    /*
	     * Generate ON condition using PK(s).
	     * If not, generate using UK(s). Else throw error
	     */
	    var getJoinSnippet = function(array) {
	      return Utils._.map(array, function(key) {
	        key = this.quoteIdentifier(key);
	        return targetTableAlias + '.' + key + ' = ' + sourceTableAlias + '.' + key;
	      }.bind(this));
	    };

	    if (clauses.length === 0) {
	      throw new Error('Primary Key or Unique key should be passed to upsert query');      
	    } else {
	      // Search for primary key attribute in clauses -- Model can have two separate unique keys
	      for (key in clauses) {
	        var keys = Object.keys(clauses[key]);
	        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {
	          joinCondition = getJoinSnippet.bind(this)(primaryKeysAttrs).join(' AND ');
	          break;
	        }
	      }
	      if (!joinCondition) {
	        joinCondition = getJoinSnippet.bind(this)(uniqueAttrs).join(' AND ');
	      }
	    }
	    
	    // Remove the IDENTITY_INSERT Column from update
	    var updateSnippet = updateKeys.filter(function(key) {
	      if (identityAttrs.indexOf(key) === -1) {
	        return true;
	      } else {
	        return false;
	      }
	    });

	    updateSnippet = Utils._.map(updateSnippet, function(key) {
	      var value = this.escape(updateValues[key]);
	      key = this.quoteIdentifier(key);
	      return targetTableAlias + '.' + key + ' = ' + value;
	    }.bind(this)).join(', ');

	    var insertSnippet = '(' + insertKeysQuoted + ') VALUES(' + insertValuesEscaped + ')';
	    
	    var replacements = {
	      tableNameQuoted: tableNameQuoted,
	      targetTableAlias: targetTableAlias,
	      sourceTableQuery: sourceTableQuery,
	      sourceTableAlias: sourceTableAlias,
	      insertKeysQuoted: insertKeysQuoted,
	      joinCondition: joinCondition,
	      updateSnippet: updateSnippet,
	      insertSnippet: insertSnippet
	    };

	    query = Utils._.template(query)(replacements);


	    if (needIdentityInsertWrapper) {
	      query = [
	        'SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;',
	        query,
	        'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;',
	      ].join(' ');
	    }
	    return query;
	  },

	  deleteQuery: function(tableName, where, options) {
	    options = options || {};

	    var table = this.quoteTable(tableName);
	    if (options.truncate === true) {
	      // Truncate does not allow LIMIT and WHERE
	      return 'TRUNCATE TABLE ' + table;
	    }

	    where = this.getWhereConditions(where);
	    var limit = ''
	      , query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' +
	                'SELECT @@ROWCOUNT AS AFFECTEDROWS;';

	    if (Utils._.isUndefined(options.limit)) {
	      options.limit = 1;
	    }

	    if (!!options.limit) {
	      limit = ' TOP(' + this.escape(options.limit) + ')';
	    }

	    var replacements = {
	      limit: limit,
	      table: table,
	      where: where,
	    };

	    if (replacements.where) {
	      replacements.where = ' WHERE ' + replacements.where;
	    }

	    return Utils._.template(query)(replacements);
	  },

	  showIndexesQuery: function(tableName) {
	    var sql = "EXEC sys.sp_helpindex @objname = N'<%= tableName %>';";
	    return Utils._.template(sql)({
	      tableName: this.quoteTable(tableName)
	    });
	  },

	  removeIndexQuery: function(tableName, indexNameOrAttributes) {
	    var sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>'
	      , indexName = indexNameOrAttributes;

	    if (typeof indexName !== 'string') {
	      indexName = Utils.inflection.underscore(tableName + '_' + indexNameOrAttributes.join('_'));
	    }

	    var values = {
	      tableName: this.quoteIdentifiers(tableName),
	      indexName: indexName
	    };

	    return Utils._.template(sql)(values);
	  },

	  attributeToSQL: function(attribute) {
	    if (!Utils._.isPlainObject(attribute)) {
	      attribute = {
	        type: attribute
	      };
	    }

	    // handle self referential constraints
	    if (attribute.references) {
	      attribute = Utils.formatReferences(attribute);

	      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {
	        this.sequelize.log('MSSQL does not support self referencial constraints, '
	          + 'we will remove it but we recommend restructuring your query');
	        attribute.onDelete = '';
	        attribute.onUpdate = '';
	      }
	    }

	    var template;

	    if (attribute.type instanceof DataTypes.ENUM) {
	      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;

	      // enums are a special case
	      template = attribute.type.toSql();
	      template += ' CHECK (' + attribute.field + ' IN(' + Utils._.map(attribute.values, function(value) {
	        return this.escape(value);
	      }.bind(this)).join(', ') + '))';
	      return template;
	    } else {
	      template = attribute.type.toString();
	    }

	    if (attribute.allowNull === false) {
	      template += ' NOT NULL';
	    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {
	      template += ' NULL';
	    }

	    if (attribute.autoIncrement) {
	      template += ' IDENTITY(1,1)';
	    }

	    // Blobs/texts cannot have a defaultValue
	    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&
	        Utils.defaultValueSchemable(attribute.defaultValue)) {
	      template += ' DEFAULT ' + this.escape(attribute.defaultValue);
	    }

	    if (attribute.unique === true) {
	      template += ' UNIQUE';
	    }

	    if (attribute.primaryKey) {
	      template += ' PRIMARY KEY';
	    }

	    if (attribute.references) {
	      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);

	      if (attribute.references.key) {
	        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';
	      } else {
	        template += ' (' + this.quoteIdentifier('id') + ')';
	      }

	      if (attribute.onDelete) {
	        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();
	      }

	      if (attribute.onUpdate) {
	        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();
	      }
	    }

	    return template;
	  },

	  attributesToSQL: function(attributes, options) {
	    var result = {}
	      , key
	      , attribute
	      , existingConstraints = [];

	    for (key in attributes) {
	      attribute = attributes[key];

	      if (attribute.references) {
	        attribute = Utils.formatReferences(attributes[key]);

	        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {
	          // no cascading constraints to a table more than once
	          attribute.onDelete = '';
	          attribute.onUpdate = '';
	        } else {
	          existingConstraints.push(attribute.references.model.toString());

	          // NOTE: this really just disables cascading updates for all
	          //       definitions. Can be made more robust to support the
	          //       few cases where MSSQL actually supports them
	          attribute.onUpdate = '';
	        }

	      }

	      if (key && !attribute.field) attribute.field = key;
	      result[attribute.field || key] = this.attributeToSQL(attribute, options);
	    }

	    return result;
	  },

	  findAutoIncrementField: function(factory) {
	    var fields = [];
	    for (var name in factory.attributes) {
	      if (factory.attributes.hasOwnProperty(name)) {
	        var definition = factory.attributes[name];

	        if (definition && definition.autoIncrement) {
	          fields.push(name);
	        }
	      }
	    }

	    return fields;
	  },

	  createTrigger: function() {
	    throwMethodUndefined('createTrigger');
	  },

	  dropTrigger: function() {
	    throwMethodUndefined('dropTrigger');
	  },

	  renameTrigger: function() {
	    throwMethodUndefined('renameTrigger');
	  },

	  createFunction: function() {
	    throwMethodUndefined('createFunction');
	  },

	  dropFunction: function() {
	    throwMethodUndefined('dropFunction');
	  },

	  renameFunction: function() {
	    throwMethodUndefined('renameFunction');
	  },

	  quoteIdentifier: function(identifier, force) {
	      if (identifier === '*') return identifier;
	      return '[' + identifier.replace(/[\[\]']+/g,'') + ']';
	  },

	  getForeignKeysQuery: function(table) {
	    var tableName = table.tableName || table;
	    var sql = [
	      'SELECT',
	        'constraint_name = C.CONSTRAINT_NAME',
	      'FROM',
	        'INFORMATION_SCHEMA.TABLE_CONSTRAINTS C',
	      "WHERE C.CONSTRAINT_TYPE = 'FOREIGN KEY'",
	      'AND C.TABLE_NAME =', wrapSingleQuote(tableName)
	    ].join(' ');

	    if (table.schema) {
	      sql += ' AND C.TABLE_SCHEMA =' + wrapSingleQuote(table.schema);
	    }

	    return sql;
	  },

	  getForeignKeyQuery: function(table, attributeName) {
	    var tableName = table.tableName || table;
	    var sql = [
	      'SELECT',
	        'constraint_name = TC.CONSTRAINT_NAME',
	      'FROM',
	        'INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC',
	        'JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU',
	          'ON TC.CONSTRAINT_NAME = CCU.CONSTRAINT_NAME',
	      "WHERE TC.CONSTRAINT_TYPE = 'FOREIGN KEY'",
	      'AND TC.TABLE_NAME =', wrapSingleQuote(tableName),
	      'AND CCU.COLUMN_NAME =', wrapSingleQuote(attributeName),
	    ].join(' ');

	    if (table.schema) {
	      sql += ' AND TC.TABLE_SCHEMA =' + wrapSingleQuote(table.schema);
	    }

	    return sql;
	  },

	  dropForeignKeyQuery: function(tableName, foreignKey) {
	    return Utils._.template('ALTER TABLE <%= table %> DROP <%= key %>')({
	      table: this.quoteTable(tableName),
	      key: this.quoteIdentifier(foreignKey)
	    });
	  },

	  getDefaultConstraintQuery: function (tableName, attributeName) {
	    var sql = "SELECT name FROM SYS.DEFAULT_CONSTRAINTS " +
	      "WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') " +
	      "AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') " +
	      "AND object_id = OBJECT_ID('<%= table %>', 'U'));";
	    return Utils._.template(sql)({
	      table: this.quoteTable(tableName),
	      column: attributeName
	    });
	  },

	  dropConstraintQuery: function (tableName, constraintName) {
	    var sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';
	    return Utils._.template(sql)({
	      table: this.quoteTable(tableName),
	      constraint: this.quoteIdentifier(constraintName)
	    });
	  },

	  setAutocommitQuery: function(value) {
	    return '';
	    // return 'SET IMPLICIT_TRANSACTIONS ' + (!!value ? 'OFF' : 'ON') + ';';
	  },

	  setIsolationLevelQuery: function(value, options) {
	    if (options.parent) {
	      return;
	    }

	    return 'SET TRANSACTION ISOLATION LEVEL ' + value + ';';
	  },

	  startTransactionQuery: function(transaction, options) {
	    if (transaction.parent) {
	      return 'SAVE TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';
	    }

	    return 'BEGIN TRANSACTION;';
	  },

	  commitTransactionQuery: function(transaction) {
	    if (transaction.parent) {
	      return;
	    }

	    return 'COMMIT TRANSACTION;';
	  },

	  rollbackTransactionQuery: function(transaction, options) {
	    if (transaction.parent) {
	      return 'ROLLBACK TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';
	    }

	    return 'ROLLBACK TRANSACTION;';
	  },

	  selectFromTableFragment: function(options, model, attributes, tables, mainTableAs, where) {
	    var topFragment = '';
	    var mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;

	    // Handle SQL Server 2008 with TOP instead of LIMIT
	    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {
	      if (options.limit) {
	        topFragment = 'TOP ' + options.limit + ' ';
	      }
	      if (options.offset) {
	        var offset = options.offset || 0
	          , isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation
	          , orders = { mainQueryOrder: [] };
	        if (options.order) {
	          orders = this.getQueryOrders(options, model, isSubQuery);
	        }

	        if(!orders.mainQueryOrder.length) {
	          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));
	        }

	        var tmpTable = (mainTableAs) ? mainTableAs : 'OffsetTable';
	        var whereFragment = (where) ? ' WHERE ' + where : '';

	        /*
	         * For earlier versions of SQL server, we need to nest several queries
	         * in order to emulate the OFFSET behavior.
	         *
	         * 1. The outermost query selects all items from the inner query block.
	         *    This is due to a limitation in SQL server with the use of computed
	         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.
	         * 2. The next query handles the LIMIT and OFFSET behavior by getting
	         *    the TOP N rows of the query where the row number is > OFFSET
	         * 3. The innermost query is the actual set we want information from
	         */
	        var fragment = 'SELECT TOP 100 PERCENT ' + attributes.join(', ') + ' FROM ' +
	                        '(SELECT ' + topFragment + '*' +
	                          ' FROM (SELECT ROW_NUMBER() OVER (ORDER BY ' + orders.mainQueryOrder.join(', ') + ') as row_num, * ' +
	                            ' FROM ' + tables + ' AS ' + tmpTable + whereFragment + ')' +
	                          ' AS ' + tmpTable + ' WHERE row_num > ' + offset + ')' +
	                        ' AS ' + tmpTable;
	        return fragment;
	      } else {
	        mainFragment = 'SELECT ' + topFragment + attributes.join(', ') + ' FROM ' + tables;
	      }
	    }

	    if(mainTableAs) {
	      mainFragment += ' AS ' + mainTableAs;
	    }

	    return mainFragment;
	  },

	  addLimitAndOffset: function(options, model) {
	    // Skip handling of limit and offset as postfixes for older SQL Server versions
	    if(semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {
	      return '';
	    }

	    var fragment = '';
	    var offset = options.offset || 0
	      , isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;

	    var orders = {};
	    if (options.order) {
	      orders = this.getQueryOrders(options, model, isSubQuery);
	    }

	    if (options.limit || options.offset) {
	      if (!options.order || (options.include && !orders.subQueryOrder.length)) {
	        fragment += (options.order && !isSubQuery) ? ', ' : ' ORDER BY ';
	        fragment += this.quoteIdentifier(model.primaryKeyField);
	      }

	      if (options.offset || options.limit) {
	        fragment += ' OFFSET ' + this.escape(offset) + ' ROWS';
	      }

	      if (options.limit) {
	        fragment += ' FETCH NEXT ' + this.escape(options.limit) + ' ROWS ONLY';
	      }
	    }

	    return fragment;
	  },

	  booleanValue: function(value) {
	    return !!value ? 1 : 0;
	  }
	};

	// private methods
	function wrapSingleQuote(identifier){
	  return Utils.addTicks(identifier, "'");
	}

	module.exports = Utils._.extend(Utils._.clone(AbstractQueryGenerator), QueryGenerator);


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127)
	  , Abstract = __webpack_require__(364)
	  , ConnectionManager = __webpack_require__(445)
	  , Query = __webpack_require__(447)
	  , QueryGenerator = __webpack_require__(448)
	  , DataTypes = __webpack_require__(123).postgres;

	var PostgresDialect = function(sequelize) {
	  this.sequelize = sequelize;
	  this.connectionManager = new ConnectionManager(this, sequelize);
	  this.connectionManager.initPools();

	  this.QueryGenerator = _.extend({}, QueryGenerator, {
	    options: sequelize.options,
	    _dialect: this,
	    sequelize: sequelize
	  });
	};

	PostgresDialect.prototype.supports = _.merge(_.cloneDeep(Abstract.prototype.supports), {
	  'DEFAULT VALUES': true,
	  'EXCEPTION': true,
	  'ON DUPLICATE KEY': false,
	  'ORDER NULLS': true,
	  returnValues: {
	    returning: true
	  },
	  bulkDefault: true,
	  schemas: true,
	  lock: true,
	  lockOf: true,
	  lockKey: true,
	  lockOuterJoinFailure: true,
	  forShare: 'FOR SHARE',
	  index: {
	    concurrently: true,
	    using: 2,
	    where: true
	  },
	  NUMERIC: true,
	  ARRAY: true,
	  GEOMETRY: true,
	  GEOGRAPHY: true,
	  JSON: true,
	  JSONB: true,
	  deferrableConstraints: true,
	  searchPath : true
	});

	ConnectionManager.prototype.defaultVersion = '9.4.0';
	PostgresDialect.prototype.Query = Query;
	PostgresDialect.prototype.DataTypes = DataTypes;
	PostgresDialect.prototype.name = 'postgres';
	PostgresDialect.prototype.TICK_CHAR = '"';
	PostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;
	PostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;

	module.exports = PostgresDialect;


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AbstractConnectionManager = __webpack_require__(366)
	  , ConnectionManager
	  , Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335)
	  , sequelizeErrors = __webpack_require__(130)
	  , semver = __webpack_require__(368)
	  , dataTypes = __webpack_require__(123)
	  , moment = __webpack_require__(195);

	ConnectionManager = function(dialect, sequelize) {
	  AbstractConnectionManager.call(this, dialect, sequelize);

	  this.sequelize = sequelize;
	  this.sequelize.config.port = this.sequelize.config.port || 5432;
	  try {
	    var pgLib;
	    if (sequelize.config.dialectModulePath) {
	      pgLib = __webpack_require__(446)(sequelize.config.dialectModulePath);
	    } else {
	      pgLib = __webpack_require__(449);
	    }
	    this.lib = sequelize.config.native ? pgLib.native : pgLib;
	  } catch (err) {
	    if (err.code === 'MODULE_NOT_FOUND') {
	      throw new Error('Please install \'' + (sequelize.config.dialectModulePath || 'pg') + '\' module manually');
	    }
	    throw err;
	  }

	  this.refreshTypeParser(dataTypes.postgres);
	};

	Utils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);

	// Expose this as a method so that the parsing may be updated when the user has added additional, custom types
	ConnectionManager.prototype.$refreshTypeParser = function (dataType) {
	  var self = this;

	  if (dataType.types.postgres.oids) {
	    dataType.types.postgres.oids.forEach(function (oid) {
	      self.lib.types.setTypeParser(oid, function (value) {
	        return dataType.parse(value, oid, self.lib.types.getTypeParser);
	      });
	    });
	  }

	  if (dataType.types.postgres.array_oids) {
	    dataType.types.postgres.array_oids.forEach(function (oid) {
	      self.lib.types.setTypeParser(oid, function (value) {
	        return self.lib.types.arrayParser.create(value, function (value) {
	          return dataType.parse(value, oid, self.lib.types.getTypeParser);
	        }).parse();
	      });
	    });
	  }
	};

	ConnectionManager.prototype.connect = function(config) {
	  var self = this
	    , connectionConfig = {};

	  config.user = config.username;
	  connectionConfig = Utils._.pick(config, [
	    'user', 'password', 'host', 'database', 'port'
	  ]);

	  if (config.dialectOptions) {
	    Utils._.merge(connectionConfig,
	                  Utils._.pick(config.dialectOptions, [
	      // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]
	      'application_name',
	      // choose the SSL mode with the PGSSLMODE environment variable
	      // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]
	      // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]
	      'ssl',
	      // In addition to the values accepted by the corresponding server,
	      // you can use "auto" to determine the right encoding from the
	      // current locale in the client (LC_CTYPE environment variable on Unix systems)
	      'client_encoding',
	      // !! DONT SET THIS TO TRUE !!
	      // (unless you know what you're doing)
	      // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]
	      'binary'
	    ]));
	  }

	  return new Promise(function (resolve, reject) {
	    var connection = new self.lib.Client(connectionConfig)
	      , responded = false;

	    connection.connect(function(err) {
	      if (err) {
	        if (err.code) {
	          switch (err.code) {
	          case 'ECONNREFUSED':
	            reject(new sequelizeErrors.ConnectionRefusedError(err));
	            break;
	          case 'ENOTFOUND':
	            reject(new sequelizeErrors.HostNotFoundError(err));
	            break;
	          case 'EHOSTUNREACH':
	            reject(new sequelizeErrors.HostNotReachableError(err));
	            break;
	          case 'EINVAL':
	            reject(new sequelizeErrors.InvalidConnectionError(err));
	            break;
	          default:
	            reject(new sequelizeErrors.ConnectionError(err));
	            break;
	          }
	        } else {
	          reject(new sequelizeErrors.ConnectionError(err));
	        }
	        return;
	      }
	      responded = true;
	      resolve(connection);
	    });

	    // If we didn't ever hear from the client.connect() callback the connection timeout, node-postgres does not treat this as an error since no active query was ever emitted
	    connection.on('end', function () {
	      if (!responded) {
	        reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));
	      }
	    });

	    // Don't let a Postgres restart (or error) to take down the whole app
	    connection.on('error', function() {
	      connection._invalid = true;
	    });
	  }).tap(function (connection) {
	    // Disable escape characters in strings, see https://github.com/sequelize/sequelize/issues/3545
	    var query = '';

	    if (self.sequelize.options.databaseVersion !== 0 && semver.gte(self.sequelize.options.databaseVersion, '8.2.0')) {
	      query += 'SET standard_conforming_strings=on;';
	    }

	    if (!self.sequelize.config.keepDefaultTimezone) {
	      var isZone = !!moment.tz.zone(self.sequelize.options.timezone);
	      if (isZone) {
	        query += 'SET client_min_messages TO warning; SET TIME ZONE \'' + self.sequelize.options.timezone + '\';';
	      } else {
	        query += 'SET client_min_messages TO warning; SET TIME ZONE INTERVAL \'' + self.sequelize.options.timezone + '\' HOUR TO MINUTE;';
	      }
	    }

	    // oids for hstore and geometry are dynamic - so select them at connection time
	    if (dataTypes.HSTORE.types.postgres.oids.length === 0) {
	      query += 'SELECT typname, oid, typarray FROM pg_type WHERE typtype = \'b\' AND typname IN (\'hstore\', \'geometry\', \'geography\')';
	    }

	    return new Promise(function (resolve, reject) {
	      connection.query(query).on('error', function (err) {
	        reject(err);
	      }).on('row', function (row) {
	        var type;
	        if (row.typname === 'geometry') {
	          type = dataTypes.postgres.GEOMETRY;
	        } else if (row.typname === 'hstore') {
	          type = dataTypes.postgres.HSTORE;
	        } else if (row.typname === 'geography'){
	          type = dataTypes.postgres.GEOGRAPHY;
	        }

	        type.types.postgres.oids.push(row.oid);
	        type.types.postgres.array_oids.push(row.typarray);

	        self.$refreshTypeParser(type);
	      }).on('end', function () {
	        resolve();
	      });
	    });
	  });
	};
	ConnectionManager.prototype.disconnect = function(connection) {
	  return new Promise(function (resolve, reject) {
	    connection.end();
	    resolve();
	  });
	};

	ConnectionManager.prototype.validate = function(connection) {
	  return connection._invalid === undefined;
	};

	module.exports = ConnectionManager;


/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./connection-manager": 445,
		"./connection-manager.js": 445,
		"./data-types": 308,
		"./data-types.js": 308,
		"./hstore": 323,
		"./hstore.js": 323,
		"./index": 444,
		"./index.js": 444,
		"./query": 447,
		"./query-generator": 448,
		"./query-generator.js": 448,
		"./query.js": 447,
		"./range": 326,
		"./range.js": 326
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 446;


/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , AbstractQuery = __webpack_require__(371)
	  , QueryTypes = __webpack_require__(349)
	  , Promise = __webpack_require__(335)
	  , sequelizeErrors = __webpack_require__(130)
	  , _ = __webpack_require__(127);

	var Query = function(client, sequelize, options) {
	  this.client = client;
	  this.sequelize = sequelize;
	  this.instance = options.instance;
	  this.model = options.model;
	  this.options = _.extend({
	    logging: console.log,
	    plain: false,
	    raw: false
	  }, options || {});

	  this.checkLoggingOption();
	};
	Utils.inherit(Query, AbstractQuery);

	/**
	 * rewrite query with parameters
	 */
	Query.formatBindParameters = function(sql, values, dialect) {
	  var bindParam = [];
	  if (Array.isArray(values)) {
	    bindParam = values;
	    sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
	  } else {
	    var i = 0;
	    var seen = {};
	    var replacementFunc = function(match, key, values, timeZone, dialect, options) {
	      if (seen[key] !== undefined) {
	        return seen[key];
	      }
	      if (values[key] !== undefined) {
	        i = i + 1;
	        bindParam.push(values[key]);
	        seen[key] = '$'+i;
	        return '$'+i;
	      }
	      return undefined;
	    };
	    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
	  }
	  return [sql, bindParam];
	};

	Query.prototype.run = function(sql, parameters) {
	  this.sql = sql;

	  if(!Utils._.isEmpty(this.options.searchPath)){
	    this.sql = this.sequelize.queryInterface.QueryGenerator.setSearchPath(this.options.searchPath) + sql;
	  }

	  var self = this
	    , receivedError = false
	    , query = ((parameters && parameters.length) ? this.client.query(this.sql, parameters) : this.client.query(this.sql))
	    , rows = [];

	  //do we need benchmark for this query execution
	  var benchmark = this.sequelize.options.benchmark || this.options.benchmark;

	  if (benchmark) {
	    var queryBegin = Date.now();
	  } else {
	    this.sequelize.log('Executing (' + (this.client.uuid || 'default') + '): ' + this.sql, this.options);
	  }

	  var promise = new Promise(function(resolve, reject) {
	    query.on('row', function(row) {
	      rows.push(row);
	    });

	    query.on('error', function(err) {

	      // set the client so that it will be reaped if the connection resets while executing
	      if(err.code === 'ECONNRESET') {
	        self.client._invalid = true;
	      }

	      receivedError = true;
	      err.sql = sql;
	      reject(self.formatError(err));
	    });

	    query.on('end', function(result) {

	      if (benchmark) {
	        self.sequelize.log('Executed (' + (self.client.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);
	      }

	      if (receivedError) {
	        return;
	      }

	      resolve([rows, sql, result]);
	    });
	  }).spread(function(rows, sql, result) {
	    var results = rows
	      , isTableNameQuery = (sql.indexOf('SELECT table_name FROM information_schema.tables') === 0)
	      , isRelNameQuery = (sql.indexOf('SELECT relname FROM pg_class WHERE oid IN') === 0);

	    if (isRelNameQuery) {
	      return rows.map(function(row) {
	        return {
	          name: row.relname,
	          tableName: row.relname.split('_')[0]
	        };
	      });
	    } else if (isTableNameQuery) {
	      return rows.map(function(row) { return _.values(row); });
	    }

	    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {
	      if (rows[0].sequelize_caught_exception !== null) {
	        var err = self.formatError({
	          code: '23505',
	          detail: rows[0].sequelize_caught_exception
	        });
	        throw err;
	      } else {
	        rows = rows.map(function (row) {
	          delete row.sequelize_caught_exception;
	          return row;
	        });
	      }
	    }

	    if (self.isShowIndexesQuery()) {
	      results.forEach(function (result) {
	        var attributes = /ON .*? (?:USING .*?\s)?\((.*)\)/gi.exec(result.definition)[1].split(',')
	          , field
	          , attribute
	          , columns;

	        // Map column index in table to column name
	        columns = _.zipObject(
	          result.column_indexes,
	          self.sequelize.queryInterface.QueryGenerator.fromArray(result.column_names)
	        );
	        delete result.column_indexes;
	        delete result.column_names;

	        // Indkey is the order of attributes in the index, specified by a string of attribute indexes
	        result.fields = result.indkey.split(' ').map(function (indKey, index) {
	          field = columns[indKey];
	          // for functional indices indKey = 0
	          if(!field) {
	            return null;
	          }
	          attribute = attributes[index];
	          return {
	            attribute: field,
	            collate: attribute.match(/COLLATE "(.*?)"/) ? /COLLATE "(.*?)"/.exec(attribute)[1] : undefined,
	            order: attribute.indexOf('DESC') !== -1 ? 'DESC' : attribute.indexOf('ASC') !== -1 ? 'ASC': undefined,
	            length: undefined
	          };
	        }).filter(function(n){ return n !== null; });
	        delete result.columns;
	      });
	      return results;
	    } else if (self.isForeignKeysQuery()) {
	      result = [];
	      rows.forEach(function(row) {
	        var defParts;
	        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {
	          row.id = row.constraint_name;
	          row.table = defParts[2];
	          row.from = defParts[1];
	          row.to = defParts[3];
	          var i;
	          for (i=5;i<=8;i+=3) {
	            if (/(UPDATE|DELETE)/.test(defParts[i])) {
	              row['on_'+defParts[i].toLowerCase()] = defParts[i+1];
	            }
	          }
	        }
	        result.push(row);
	      });
	      return result;
	    } else if (self.isSelectQuery()) {
	      // Postgres will treat tables as case-insensitive, so fix the case
	      // of the returned values to match attributes
	      if (self.options.raw === false && self.sequelize.options.quoteIdentifiers === false) {
	        var attrsMap = _.reduce(self.model.attributes, function(m, v, k) { m[k.toLowerCase()] = k; return m; }, {});
	        rows.forEach(function(row) {
	          _.keys(row).forEach(function(key) {
	            var targetAttr = attrsMap[key];
	            if (typeof targetAttr === 'string' && targetAttr !== key) {
	              row[targetAttr] = row[key];
	              delete row[key];
	            }
	          });
	        });
	      }

	      return self.handleSelectQuery(rows);
	    } else if (QueryTypes.DESCRIBE === self.options.type) {
	      result = {};

	      rows.forEach(function(_result) {
	        result[_result.Field] = {
	          type: _result.Type.toUpperCase(),
	          allowNull: (_result.Null === 'YES'),
	          defaultValue: _result.Default,
	          special: (!!_result.special ? self.sequelize.queryInterface.QueryGenerator.fromArray(_result.special) : []),
	          primaryKey: _result.Constraint === 'PRIMARY KEY'
	        };

	        if (result[_result.Field].type === 'BOOLEAN') {
	          result[_result.Field].defaultValue = { 'false': false, 'true': true }[result[_result.Field].defaultValue];

	          if (result[_result.Field].defaultValue === undefined) {
	            result[_result.Field].defaultValue = null;
	          }
	        }

	        if (typeof result[_result.Field].defaultValue === 'string') {
	          result[_result.Field].defaultValue = result[_result.Field].defaultValue.replace(/'/g, '');

	          if (result[_result.Field].defaultValue.indexOf('::') > -1) {
	            var split = result[_result.Field].defaultValue.split('::');
	            if (split[1].toLowerCase() !== 'regclass)') {
	              result[_result.Field].defaultValue = split[0];
	            }
	          }
	        }
	      });

	      return result;
	    } else if (self.isVersionQuery()) {
	      return results[0].server_version;
	    } else if (self.isShowOrDescribeQuery()) {
	      return results;
	    } else if (QueryTypes.BULKUPDATE === self.options.type) {
	      if (!self.options.returning) {
	        return parseInt(result.rowCount, 10);
	      }

	      return self.handleSelectQuery(rows);
	    } else if (QueryTypes.BULKDELETE === self.options.type) {
	      return parseInt(result.rowCount, 10);
	    } else if (self.isUpsertQuery()) {
	      return rows[0].sequelize_upsert;
	    } else if (self.isInsertQuery() || self.isUpdateQuery()) {
	      if (self.instance && self.instance.dataValues) {
	        for (var key in rows[0]) {
	          if (rows[0].hasOwnProperty(key)) {
	            var record = rows[0][key];

	            var attr = _.find(self.model.rawAttributes, function (attribute) {
	              return attribute.fieldName === key || attribute.field === key;
	            });

	            self.instance.dataValues[attr && attr.fieldName || key] = record;
	          }
	        }
	      }

	      return self.instance || (rows && ((self.options.plain && rows[0]) || rows)) || undefined;
	    } else if (self.isRawQuery()) {
	      return [rows, result];
	    } else {
	      return results;
	    }
	  });

	  return promise;
	};

	Query.prototype.formatError = function (err) {
	  var match
	    , table
	    , index
	    , fields
	    , errors
	    , message
	    , self = this;

	  var code = err.code || err.sqlState
	    , errMessage = err.message || err.messagePrimary
	    , errDetail = err.detail || err.messageDetail;

	  switch (code) {
	    case '23503':
	      index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);
	      index = index ? index[1] : undefined;
	      table = errMessage.match(/on table \"(.+?)\"/);
	      table = table ? table[1] : undefined;

	      return new sequelizeErrors.ForeignKeyConstraintError({
	        message: errMessage,
	        fields: null,
	        index: index,
	        table: table,
	        parent: err
	      });
	    case '23505':
	      // there are multiple different formats of error messages for this error code
	      // this regex should check at least two
	      if (errDetail && (match = errDetail.replace(/"/g, '').match(/Key \((.*?)\)=\((.*?)\)/))) {
	        fields = _.zipObject(match[1].split(', '), match[2].split(', '));
	        errors = [];
	        message = 'Validation error';

	        _.forOwn(fields, function(value, field) {
	          errors.push(new sequelizeErrors.ValidationErrorItem(
	            self.getUniqueConstraintErrorMessage(field),
	            'unique violation', field, value));
	        });

	        if (this.model && this.model.uniqueKeys) {
	          _.forOwn(this.model.uniqueKeys, function(constraint) {
	            if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {
	              message = constraint.msg;
	              return false;
	            }
	          });
	        }

	        return new sequelizeErrors.UniqueConstraintError({
	          message: message,
	          errors: errors,
	          parent: err,
	          fields: fields
	        });
	      } else {
	        return new sequelizeErrors.UniqueConstraintError({
	          message: errMessage,
	          parent: err
	        });
	      }

	      break;
	    case '23P01':
	      match = errDetail.match(/Key \((.*?)\)=\((.*?)\)/);

	      if (match) {
	        fields = _.zipObject(match[1].split(', '), match[2].split(', '));
	      }
	      message = 'Exclusion constraint error';

	      return new sequelizeErrors.ExclusionConstraintError({
	        message: message,
	        constraint: err.constraint,
	        fields: fields,
	        table: err.table,
	        parent: err
	      });

	    default:
	      return new sequelizeErrors.DatabaseError(err);
	  }
	};

	Query.prototype.isForeignKeysQuery = function() {
	  return /SELECT conname as constraint_name, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);
	};

	Query.prototype.getInsertIdField = function() {
	  return 'id';
	};

	module.exports = Query;


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* jshint -W110 */
	var Utils = __webpack_require__(122)
	  , util = __webpack_require__(124)
	  , DataTypes = __webpack_require__(123)
	  , AbstractQueryGenerator = __webpack_require__(373)
	  , semver = __webpack_require__(368)
	  , _ = __webpack_require__(127);

	var QueryGenerator = {
	  options: {},
	  dialect: 'postgres',

	  setSearchPath: function(searchPath) {
	    var query = 'SET search_path to <%= searchPath%>;';
	    return Utils._.template(query)({searchPath: searchPath});
	  },

	  createSchema: function(schema) {
	    var query = 'CREATE SCHEMA <%= schema%>;';
	    return Utils._.template(query)({schema: schema});
	  },

	  dropSchema: function(schema) {
	    var query = 'DROP SCHEMA IF EXISTS <%= schema%> CASCADE;';
	    return Utils._.template(query)({schema: schema});
	  },

	  showSchemasQuery: function() {
	    return "SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';";
	  },

	  versionQuery: function() {
	    return 'SHOW SERVER_VERSION';
	  },

	  createTableQuery: function(tableName, attributes, options) {
	    var self = this;

	    options = Utils._.extend({
	    }, options || {});

	    var databaseVersion = Utils._.get(self, 'sequelize.options.databaseVersion', 0);
	    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do
	    var query = 'CREATE TABLE ' +
	      ( (databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0')) ? 'IF NOT EXISTS ' : '') +
	      '<%= table %> (<%= attributes%>)<%= comments %>'
	      , comments = ''
	      , attrStr = []
	      , i;

	    if (options.comment && Utils._.isString(options.comment)) {
	      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);
	    }

	    for (var attr in attributes) {
	      if ((i = attributes[attr].indexOf('COMMENT')) !== -1) {
	        // Move comment to a separate query
	        comments += '; ' + attributes[attr].substring(i);
	        attributes[attr] = attributes[attr].substring(0, i);
	      }

	      var dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);
	      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);
	    }

	    var values = {
	      table: this.quoteTable(tableName),
	      attributes: attrStr.join(', '),
	      comments: Utils._.template(comments)({ table: this.quoteTable(tableName)})
	    };

	    if (!!options.uniqueKeys) {
	      Utils._.each(options.uniqueKeys, function(columns) {
	        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index
	          values.attributes += ', UNIQUE (' + columns.fields.map(function(f) { return self.quoteIdentifiers(f); }).join(', ') + ')';
	        }
	      });
	    }

	    var pks = _.reduce(attributes, function (acc, attribute, key) {
	      if (_.includes(attribute, 'PRIMARY KEY')) {
	        acc.push(this.quoteIdentifier(key));
	      }
	      return acc;
	    }.bind(this), []).join(',');

	    if (pks.length > 0) {
	      values.attributes += ', PRIMARY KEY (' + pks + ')';
	    }

	    return Utils._.template(query)(values).trim() + ';';
	  },

	  dropTableQuery: function(tableName, options) {
	    options = options || {};
	    var query = 'DROP TABLE IF EXISTS <%= table %><%= cascade %>;';
	    return Utils._.template(query)({
	      table: this.quoteTable(tableName),
	      cascade: options.cascade ? ' CASCADE' : ''
	    });
	  },

	  showTablesQuery: function() {
	    return "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';";
	  },

	  describeTableQuery: function(tableName, schema) {
	    if (!schema) {
	      schema = 'public';
	    }

	    var query = 'SELECT tc.constraint_type as "Constraint", c.column_name as "Field", c.column_default as "Default", c.is_nullable as "Null", ' +
	      "CASE WHEN c.udt_name = 'hstore' " +
	      'THEN c.udt_name ELSE c.data_type END as "Type", (SELECT array_agg(e.enumlabel) ' +
	      'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special" ' +
	      'FROM information_schema.columns c ' +
	      'LEFT JOIN information_schema.key_column_usage cu ON c.table_name = cu.table_name AND cu.column_name = c.column_name ' +
	      'LEFT JOIN information_schema.table_constraints tc ON c.table_name = tc.table_name AND cu.column_name = c.column_name AND tc.constraint_type = \'PRIMARY KEY\' ' +
	      ' WHERE c.table_name = <%= table %> AND c.table_schema = <%= schema %> ';

	    return Utils._.template(query)({
	      table: this.escape(tableName),
	      schema: this.escape(schema)
	    });
	  },

	  // A recursive parser for nested where conditions
	  parseConditionObject: function(_conditions, path) {
	    var self = this;

	    path = path || [];
	    return Utils._.reduce(_conditions, function (r, v, k) { // result, key, value
	      if (Utils._.isObject(v)) {
	        r = r.concat(self.parseConditionObject(v, path.concat(k))); // Recursively parse objects
	      } else {
	        r.push({ path: path.concat(k), value: v });
	      }
	      return r;
	    }, []);
	  },

	  handleSequelizeMethod: function (smth, tableName, factory, options, prepend) {
	    if (smth instanceof Utils.json) {
	      // Parse nested object
	      if (smth.conditions) {
	        var conditions = _.map(this.parseConditionObject(smth.conditions), function generateSql(condition) {
	          return util.format("%s#>>'{%s}' = '%s'",
	            _.first(condition.path),
	            _.tail(condition.path).join(','),
	            condition.value);
	        });

	        return conditions.join(' and ');
	      } else if (smth.path) {
	        var str;

	        // Allow specifying conditions using the postgres json syntax
	        if (_.some(['->', '->>', '#>'], _.partial(_.includes, smth.path))) {
	          str = smth.path;
	        } else {
	          // Also support json dot notation
	          var path = smth.path.split('.');
	          str = util.format("%s#>>'{%s}'",
	            _.first(path),
	            _.tail(path).join(','));
	        }

	        if (smth.value) {
	          str += util.format(' = %s', this.escape(smth.value));
	        }

	        return str;
	      }
	    } else {
	      return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);
	    }
	  },

	  addColumnQuery: function(table, key, dataType) {
	    var query = 'ALTER TABLE <%= table %> ADD COLUMN <%= attribute %>;'
	      , dbDataType = this.attributeToSQL(dataType, {context: 'addColumn'})
	      , attribute;

	    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {
	      query = this.pgEnum(table, key, dataType) + query;
	    }

	    attribute = Utils._.template('<%= key %> <%= definition %>')({
	      key: this.quoteIdentifier(key),
	      definition: this.dataTypeMapping(table, key, dbDataType)
	    });

	    return Utils._.template(query)({
	      table: this.quoteTable(this.extractTableDetails(table)),
	      attribute: attribute
	    });
	  },

	  removeColumnQuery: function(tableName, attributeName) {
	    var query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';
	    return Utils._.template(query)({
	      tableName: this.quoteTable(this.extractTableDetails(tableName)),
	      attributeName: this.quoteIdentifier(attributeName)
	    });
	  },

	  changeColumnQuery: function(tableName, attributes) {
	    var query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;'
	      , sql = [];

	    for (var attributeName in attributes) {
	      var definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);
	      var attrSql = '';

	      if (definition.indexOf('NOT NULL') > 0) {
	        attrSql += Utils._.template(query)({
	          tableName: this.quoteTable(tableName),
	          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'
	        });

	        definition = definition.replace('NOT NULL', '').trim();
	      } else if (!definition.match(/REFERENCES/)) {
	        attrSql += Utils._.template(query)({
	          tableName: this.quoteTable(tableName),
	          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'
	        });
	      }

	      if (definition.indexOf('DEFAULT') > 0) {
	        attrSql += Utils._.template(query)({
	          tableName: this.quoteTable(tableName),
	          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]
	        });

	        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();
	      } else if (!definition.match(/REFERENCES/)) {
	        attrSql += Utils._.template(query)({
	          tableName: this.quoteTable(tableName),
	          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'
	        });
	      }

	      if (attributes[attributeName].match(/^ENUM\(/)) {
	        query = this.pgEnum(tableName, attributeName, attributes[attributeName]) + query;
	        definition = definition.replace(/^ENUM\(.+\)/, this.quoteIdentifier('enum_' + tableName + '_' + attributeName));
	        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.quoteIdentifier(definition) + ')';
	      }

	      if (definition.match(/UNIQUE;*$/)) {
	        definition = definition.replace(/UNIQUE;*$/, '');

	        attrSql += Utils._.template(query.replace('ALTER COLUMN', ''))({
	          tableName: this.quoteTable(tableName),
	          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'
	        });
	      }

	      if (definition.match(/REFERENCES/)) {
	        definition = definition.replace(/.+?(?=REFERENCES)/,'');
	        attrSql += Utils._.template(query.replace('ALTER COLUMN', ''))({
	          tableName: this.quoteTable(tableName),
	          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition
	        });
	      } else {
	        attrSql += Utils._.template(query)({
	          tableName: this.quoteTable(tableName),
	          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition
	        });
	      }

	      sql.push(attrSql);
	    }

	    return sql.join('');
	  },

	  renameColumnQuery: function(tableName, attrBefore, attributes) {
	    var query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= attributes %>;';
	    var attrString = [];

	    for (var attributeName in attributes) {
	      attrString.push(Utils._.template('<%= before %> TO <%= after %>')({
	        before: this.quoteIdentifier(attrBefore),
	        after: this.quoteIdentifier(attributeName)
	      }));
	    }

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      attributes: attrString.join(', ')
	    });
	  },

	  fn: function(fnName, tableName, body, returns, language) {
	    fnName = fnName || 'testfunc';
	    language = language || 'plpgsql';
	    returns = returns || 'SETOF ' + this.quoteTable(tableName);

	    var query = 'CREATE OR REPLACE FUNCTION pg_temp.<%= fnName %>() RETURNS <%= returns %> AS $func$ BEGIN <%= body %> END; $func$ LANGUAGE <%= language %>; SELECT * FROM pg_temp.<%= fnName %>();';

	    return Utils._.template(query)({
	      fnName: fnName,
	      returns: returns,
	      language: language,
	      body: body
	    });
	  },

	  exceptionFn: function(fnName, tableName, main, then, when, returns, language) {
	    when  = when || 'unique_violation';

	    var body = '<%= main %> EXCEPTION WHEN <%= when %> THEN <%= then %>;';
	    body = Utils._.template(body)({
	      main: main,
	      when: when,
	      then: then
	    });

	    return this.fn(fnName, tableName, body, returns, language);
	  },

	  upsertQuery: function (tableName, insertValues, updateValues, where, rawAttributes, options) {
	    var insert = this.insertQuery(tableName, insertValues, rawAttributes, options);
	    var update = this.updateQuery(tableName, updateValues, where, options, rawAttributes);

	    // The numbers here are selected to match the number of affected rows returned by MySQL
	    return this.exceptionFn(
	      'sequelize_upsert',
	      tableName,
	      insert + ' RETURN 1;',
	      update + '; RETURN 2',
	      'unique_violation',
	      'integer'
	    );
	  },

	  deleteQuery: function(tableName, where, options, model) {
	    var query;

	    options = options || {};

	    tableName = this.quoteTable(tableName);

	    if (options.truncate === true) {
	      query = 'TRUNCATE ' + tableName;

	      if (options.restartIdentity) {
	        query += ' RESTART IDENTITY';
	      }

	      if (options.cascade) {
	        query += ' CASCADE';
	      }

	      return query;
	    }

	    if (Utils._.isUndefined(options.limit)) {
	      options.limit = 1;
	    }

	    var replacements = {
	      table: tableName,
	      where: this.getWhereConditions(where, null, model, options),
	      limit: !!options.limit ? ' LIMIT ' + this.escape(options.limit) : ''
	    };

	    if (options.limit) {
	      if (!model) {
	        throw new Error('Cannot LIMIT delete without a model.');
	      }

	      var pks = _.map(_.values(model.primaryKeys), function (pk) {
	        return this.quoteIdentifier((pk.field));
	      }.bind(this)).join(',');

	      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;
	      replacements.primaryKeysSelection = pks;

	      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';
	    } else {
	      query = 'DELETE FROM <%= table %><%= where %>';
	    }

	    if (replacements.where) {
	      replacements.where = ' WHERE ' + replacements.where;
	    }

	    return Utils._.template(query)(replacements);
	  },

	  showIndexesQuery: function(tableName) {
	    var schemaJoin = '', schemaWhere = '';
	    if (!Utils._.isString(tableName)) {
	      schemaJoin = ', pg_namespace s';
	      schemaWhere = Utils._.template(" AND s.oid = t.relnamespace AND s.nspname = '<%= schemaName %>'")({schemaName: tableName.schema});
	      tableName = tableName.tableName;
	    }

	    // This is ARCANE!
	    var query = 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +
	      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +
	      'AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a<%= schemaJoin%> ' +
	      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +
	      "t.relkind = 'r' and t.relname = '<%= tableName %>'<%= schemaWhere%> " +
	      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';

	    return Utils._.template(query)({tableName: tableName, schemaJoin: schemaJoin, schemaWhere: schemaWhere});
	  },

	  removeIndexQuery: function(tableName, indexNameOrAttributes) {
	    var sql = 'DROP INDEX IF EXISTS <%= indexName %>'
	      , indexName = indexNameOrAttributes;

	    if (typeof indexName !== 'string') {
	      indexName = Utils.inflection.underscore(tableName + '_' + indexNameOrAttributes.join('_'));
	    }

	    return Utils._.template(sql)({
	      tableName: this.quoteIdentifiers(tableName),
	      indexName: this.quoteIdentifiers(indexName)
	    });
	  },

	  addLimitAndOffset: function(options) {
	    var fragment = '';
	    /*jshint eqeqeq:false*/
	    if (options.limit != null) {
	      fragment += ' LIMIT ' + this.escape(options.limit);
	    }
	    if (options.offset != null) {
	      fragment += ' OFFSET ' + this.escape(options.offset);
	    }

	    return fragment;
	  },

	  attributeToSQL: function(attribute) {
	    if (!Utils._.isPlainObject(attribute)) {
	      attribute = {
	        type: attribute
	      };
	    }

	    var template = '<%= type %>'
	      , replacements = {};

	    if (attribute.type instanceof DataTypes.ENUM) {
	      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;

	      if (Array.isArray(attribute.values) && (attribute.values.length > 0)) {
	        replacements.type = 'ENUM(' + Utils._.map(attribute.values, function(value) {
	            return this.escape(value);
	          }.bind(this)).join(', ') + ')';
	      } else {
	        throw new Error("Values for ENUM haven't been defined.");
	      }
	    }

	    if (!replacements.type) {
	      replacements.type = attribute.type;
	    }

	    if (attribute.hasOwnProperty('allowNull') && (!attribute.allowNull)) {
	      template += ' NOT NULL';
	    }

	    if (attribute.autoIncrement) {
	      template += ' SERIAL';
	    }

	    if (Utils.defaultValueSchemable(attribute.defaultValue)) {
	      template += ' DEFAULT <%= defaultValue %>';
	      replacements.defaultValue = this.escape(attribute.defaultValue, attribute);
	    }

	    if (attribute.unique === true) {
	      template += ' UNIQUE';
	    }

	    if (attribute.primaryKey) {
	      template += ' PRIMARY KEY';
	    }

	    if (attribute.references) {
	      attribute = Utils.formatReferences(attribute);
	      template += ' REFERENCES <%= referencesTable %> (<%= referencesKey %>)';
	      replacements.referencesTable = this.quoteTable(attribute.references.model);

	      if (attribute.references.key) {
	        replacements.referencesKey = this.quoteIdentifiers(attribute.references.key);
	      } else {
	        replacements.referencesKey = this.quoteIdentifier('id');
	      }

	      if (attribute.onDelete) {
	        template += ' ON DELETE <%= onDeleteAction %>';
	        replacements.onDeleteAction = attribute.onDelete.toUpperCase();
	      }

	      if (attribute.onUpdate) {
	        template += ' ON UPDATE <%= onUpdateAction %>';
	        replacements.onUpdateAction = attribute.onUpdate.toUpperCase();
	      }

	      if (attribute.references.deferrable) {
	        template += ' <%= deferrable %>';
	        replacements.deferrable = attribute.references.deferrable.toString(this);
	      }
	    }

	    return  Utils._.template(template)(replacements);
	  },

	  deferConstraintsQuery: function (options) {
	    return options.deferrable.toString(this);
	  },

	  setConstraintQuery: function (columns, type) {
	    var columnFragment = 'ALL';

	    if (columns) {
	      columnFragment = columns.map(function (column) {
	        return this.quoteIdentifier(column);
	      }.bind(this)).join(', ');
	    }

	    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;
	  },

	  setDeferredQuery: function (columns) {
	    return this.setConstraintQuery(columns, 'DEFERRED');
	  },

	  setImmediateQuery: function (columns) {
	    return this.setConstraintQuery(columns, 'IMMEDIATE');
	  },

	  attributesToSQL: function(attributes, options) {
	    var result = {}
	      , key
	      , attribute;

	    for (key in attributes) {
	      attribute = attributes[key];
	      result[attribute.field || key] = this.attributeToSQL(attribute, options);
	    }

	    return result;
	  },

	  findAutoIncrementField: function(factory) {
	    var fields = [];

	    for (var name in factory.attributes) {
	      var definition = factory.attributes[name];

	      if (definition && definition.autoIncrement) {
	        fields.push(name);
	      }
	    }

	    return fields;
	  },

	  createTrigger: function(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {
	    var sql = [
	      'CREATE <%= constraintVal %>TRIGGER <%= triggerName %>'
	      , '<%= eventType %> <%= eventSpec %>'
	      , 'ON <%= tableName %>'
	      , '<%= optionsSpec %>'
	      , 'EXECUTE PROCEDURE <%= functionName %>(<%= paramList %>);'
	    ].join('\n\t');

	    return Utils._.template(sql)({
	      constraintVal: this.triggerEventTypeIsConstraint(eventType),
	      triggerName: triggerName,
	      eventType: this.decodeTriggerEventType(eventType),
	      eventSpec: this.expandTriggerEventSpec(fireOnSpec),
	      tableName: tableName,
	      optionsSpec: this.expandOptions(optionsArray),
	      functionName: functionName,
	      paramList: this.expandFunctionParamList(functionParams)
	    });
	  },

	  dropTrigger: function(tableName, triggerName) {
	    var sql = 'DROP TRIGGER <%= triggerName %> ON <%= tableName %> RESTRICT;';
	    return Utils._.template(sql)({
	      triggerName: triggerName,
	      tableName: tableName
	    });
	  },

	  renameTrigger: function(tableName, oldTriggerName, newTriggerName) {
	    var sql = 'ALTER TRIGGER <%= oldTriggerName %> ON <%= tableName %> RENAME TO <%= newTriggerName%>;';
	    return Utils._.template(sql)({
	      tableName: tableName,
	      oldTriggerName: oldTriggerName,
	      newTriggerName: newTriggerName
	    });
	  },

	  createFunction: function(functionName, params, returnType, language, body, options) {
	    var sql = ['CREATE FUNCTION <%= functionName %>(<%= paramList %>)'
	      , 'RETURNS <%= returnType %> AS $func$'
	      , 'BEGIN'
	      , '\t<%= body %>'
	      , 'END;'
	      , "$func$ language '<%= language %>'<%= options %>;"
	    ].join('\n');

	    return Utils._.template(sql)({
	      functionName: functionName,
	      paramList: this.expandFunctionParamList(params),
	      returnType: returnType,
	      body: body.replace('\n', '\n\t'),
	      language: language,
	      options: this.expandOptions(options)
	    });
	  },

	  dropFunction: function(functionName, params) {
	    // RESTRICT is (currently, as of 9.2) default but we'll be explicit
	    var sql = 'DROP FUNCTION <%= functionName %>(<%= paramList %>) RESTRICT;';
	    return Utils._.template(sql)({
	      functionName: functionName,
	      paramList: this.expandFunctionParamList(params)
	    });
	  },

	  renameFunction: function(oldFunctionName, params, newFunctionName) {
	    var sql = 'ALTER FUNCTION <%= oldFunctionName %>(<%= paramList %>) RENAME TO <%= newFunctionName %>;';
	    return Utils._.template(sql)({
	      oldFunctionName: oldFunctionName,
	      paramList: this.expandFunctionParamList(params),
	      newFunctionName: newFunctionName
	    });
	  },

	  databaseConnectionUri: function(config) {
	    var template = '<%= protocol %>://<%= user %>:<%= password %>@<%= host %><% if(port) { %>:<%= port %><% } %>/<%= database %><% if(ssl) { %>?ssl=<%= ssl %><% } %>';

	    return Utils._.template(template)({
	      user: config.username,
	      password: config.password,
	      database: config.database,
	      host: config.host,
	      port: config.port,
	      protocol: config.protocol,
	      ssl: config.ssl
	    });
	  },

	  pgEscapeAndQuote: function(val) {
	    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), "'"));
	  },

	  expandFunctionParamList: function expandFunctionParamList(params) {
	    if (Utils._.isUndefined(params) || !Utils._.isArray(params)) {
	      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');
	    }

	    var paramList = Utils._.each(params, function expandParam(curParam) {
	      var paramDef = [];
	      if (Utils._.has(curParam, 'type')) {
	        if (Utils._.has(curParam, 'direction')) { paramDef.push(curParam.direction); }
	        if (Utils._.has(curParam, 'name')) { paramDef.push(curParam.name); }
	        paramDef.push(curParam.type);
	      } else {
	        throw new Error('createFunction called with a parameter with no type');
	      }
	      return paramDef.join(' ');
	    });
	    return paramList.join(', ');
	  },

	  expandOptions: function expandOptions(options) {
	    return Utils._.isUndefined(options) || Utils._.isEmpty(options) ?
	      '' : '\n\t' + options.join('\n\t');
	  },

	  decodeTriggerEventType: function decodeTriggerEventType(eventSpecifier) {
	    var EVENT_DECODER = {
	      'after': 'AFTER',
	      'before': 'BEFORE',
	      'instead_of': 'INSTEAD OF',
	      'after_constraint': 'AFTER'
	    };

	    if (!Utils._.has(EVENT_DECODER, eventSpecifier)) {
	      throw new Error('Invalid trigger event specified: ' + eventSpecifier);
	    }

	    return EVENT_DECODER[eventSpecifier];
	  },

	  triggerEventTypeIsConstraint: function triggerEventTypeIsConstraint(eventSpecifier) {
	    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';
	  },

	  expandTriggerEventSpec: function expandTriggerEventSpec(fireOnSpec) {
	    if (Utils._.isEmpty(fireOnSpec)) {
	      throw new Error('no table change events specified to trigger on');
	    }

	    return Utils._.map(fireOnSpec, function parseTriggerEventSpec(fireValue, fireKey) {
	      var EVENT_MAP = {
	        'insert': 'INSERT',
	        'update': 'UPDATE',
	        'delete': 'DELETE',
	        'truncate': 'TRUNCATE'
	      };

	      if (!Utils._.has(EVENT_MAP, fireKey)) {
	        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);
	      }

	      var eventSpec = EVENT_MAP[fireKey];
	      if (eventSpec === 'UPDATE') {
	        if (Utils._.isArray(fireValue) && fireValue.length > 0) {
	          eventSpec += ' OF ' + fireValue.join(', ');
	        }
	      }

	      return eventSpec;
	    }).join(' OR ');
	  },

	  pgEnumName: function (tableName, attr, options) {
	    options = options || {};
	    var tableDetails = this.extractTableDetails(tableName, options)
	      , enumName = '"enum_' + tableDetails.tableName + '_' + attr + '"';

	    // pgListEnums requires the enum name only, without the schema
	    if (options.schema !== false && tableDetails.schema) {
	      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;
	    }

	    return enumName;

	  },

	  pgListEnums: function(tableName, attrName, options) {
	    var enumName = ''
	      , tableDetails = this.extractTableDetails(tableName, options);

	    if (tableDetails.tableName && attrName) {
	      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/"/g, "'");
	    }

	    var query = 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +
	      'JOIN pg_enum e ON t.oid = e.enumtypid ' +
	      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +
	      "WHERE n.nspname = '" + tableDetails.schema + "'" + enumName + ' GROUP BY 1';

	    return query;
	  },

	  pgEnum: function(tableName, attr, dataType, options) {
	    var enumName = this.pgEnumName(tableName, attr, options)
	      , values;

	    if (dataType.values) {
	      values = "ENUM('" + dataType.values.join("', '") + "')";
	    } else {
	      values = dataType.toString().match(/^ENUM\(.+\)/)[0];
	    }

	    var sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';
	    if (!!options && options.force === true) {
	      sql = this.pgEnumDrop(tableName, attr) + sql;
	    }
	    return sql;
	  },

	  pgEnumAdd: function(tableName, attr, value, options) {
	    var enumName = this.pgEnumName(tableName, attr)
	      , sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';

	    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {
	      sql += 'IF NOT EXISTS ';
	    }
	    sql += this.escape(value);

	    if (!!options.before) {
	      sql += ' BEFORE ' + this.escape(options.before);
	    } else if (!!options.after) {
	      sql += ' AFTER ' + this.escape(options.after);
	    }

	    return sql;
	  },

	  pgEnumDrop: function(tableName, attr, enumName) {
	    enumName = enumName || this.pgEnumName(tableName, attr);
	    return 'DROP TYPE IF EXISTS ' + enumName + '; ';
	  },

	  fromArray: function(text) {
	    text = text.replace(/^{/, '').replace(/}$/, '');
	    var matches = text.match(/("(?:\\.|[^"\\\\])*"|[^,]*)(?:\s*,\s*|\s*$)/ig);

	    if (matches.length < 1) {
	      return [];
	    }

	    matches = matches.map(function(m) {
	      return m.replace(/",$/, '').replace(/,$/, '').replace(/(^"|"$)/, '');
	    });

	    return matches.slice(0, -1);
	  },

	  padInt: function(i) {
	    return (i < 10) ? '0' + i.toString() : i.toString();
	  },

	  dataTypeMapping: function(tableName, attr, dataType) {
	    if (Utils._.includes(dataType, 'PRIMARY KEY')) {
	      dataType = dataType.replace(/PRIMARY KEY/, '');
	    }

	    if (Utils._.includes(dataType, 'SERIAL')) {
	      if (Utils._.includes(dataType, 'BIGINT')) {
	        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');
	        dataType = dataType.replace(/BIGINT/, '');
	      } else {
	        dataType = dataType.replace(/INTEGER/, '');
	      }
	      dataType = dataType.replace(/NOT NULL/, '');
	    }

	    if (dataType.match(/^ENUM\(/)) {
	      dataType = dataType.replace(/^ENUM\(.+\)/, this.pgEnumName(tableName, attr));
	    }

	    return dataType;
	  },

	  quoteIdentifier: function(identifier, force) {
	    if (identifier === '*') return identifier;
	    if (!force && this.options && this.options.quoteIdentifiers === false) { // default is `true`
	      // In Postgres, if tables or attributes are created double-quoted,
	      // they are also case sensitive. If they contain any uppercase
	      // characters, they must always be double-quoted. This makes it
	      // impossible to write queries in portable SQL if tables are created in
	      // this way. Hence, we strip quotes if we don't want case sensitivity.
	      return Utils.removeTicks(identifier, '"');
	    } else {
	      return Utils.addTicks(identifier, '"');
	    }
	  },

	  /*
	   /**
	   * Generates an SQL query that returns all foreign keys of a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} schemaName The name of the schema.
	   * @return {String}            The generated sql query.
	   */
	  getForeignKeysQuery: function(tableName, schemaName) {
	    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +
	      "WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '" + tableName + "' LIMIT 1) AND r.contype = 'f' ORDER BY 1;";
	  },

	  /**
	   * Generates an SQL query that removes a foreign key from a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} foreignKey The name of the foreign key constraint.
	   * @return {String}            The generated sql query.
	   */
	  dropForeignKeyQuery: function(tableName, foreignKey) {
	    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';
	  },


	  setAutocommitQuery: function(value, options) {
	    if (options.parent) {
	      return;
	    }

	    // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0
	    // Additionally it does not support AUTOCOMMIT at all starting at v9.5
	    // The assumption is that it won't be returning in future versions either
	    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass
	    // the database version as "9.5.0" explicitly through the options param passed when creating the Sequelize instance under the key "databaseVersion"
	    // otherwise Pg version "9.4.0" is assumed by default as per Sequelize 3.14.2.
	    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.
	    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {
	      return;
	    }

	    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);
	  }
	};

	module.exports = Utils._.extend(Utils._.clone(AbstractQueryGenerator), QueryGenerator);


/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);
	var Client = __webpack_require__(450);
	var defaults =  __webpack_require__(468);
	var pool = __webpack_require__(477);
	var Connection = __webpack_require__(473);

	var PG = function(clientConstructor) {
	  EventEmitter.call(this);
	  this.defaults = defaults;
	  this.Client = clientConstructor;
	  this.Query = this.Client.Query;
	  this.pools = pool(clientConstructor);
	  this.Connection = Connection;
	  this.types = __webpack_require__(457);
	};

	util.inherits(PG, EventEmitter);

	PG.prototype.end = function() {
	  var self = this;
	  var keys = Object.keys(self.pools.all);
	  var count = keys.length;
	  if(count === 0) {
	    self.emit('end');
	  } else {
	    keys.forEach(function(key) {
	      var pool = self.pools.all[key];
	      delete self.pools.all[key];
	      pool.drain(function() {
	        pool.destroyAllNow(function() {
	          count--;
	          if(count === 0) {
	            self.emit('end');
	          }
	        });
	      });
	    });
	  }
	};


	PG.prototype.connect = function(config, callback) {
	  if(typeof config == "function") {
	    callback = config;
	    config = null;
	  }
	  var pool = this.pools.getOrCreate(config);
	  pool.connect(callback);
	  if(!pool.listeners('error').length) {
	    //propagate errors up to pg object
	    pool.on('error', this.emit.bind(this, 'error'));
	  }
	};

	// cancel the query runned by the given client
	PG.prototype.cancel = function(config, client, query) {
	  if(client.native) {
	    return client.cancel(query);
	  }
	  var c = config;
	  //allow for no config to be passed
	  if(typeof c === 'function') {
	    c = defaults;
	  }
	  var cancellingClient = new this.Client(c);
	  cancellingClient.cancel(client, query);
	};

	if(typeof process.env.NODE_PG_FORCE_NATIVE != 'undefined') {
	  module.exports = new PG(__webpack_require__(478));
	} else {
	  module.exports = new PG(Client);

	  //lazy require native module...the native module may not have installed
	  module.exports.__defineGetter__("native", function() {
	    delete module.exports.native;
	    module.exports.native = new PG(__webpack_require__(478));
	    return module.exports.native;
	  });
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var crypto = __webpack_require__(37);
	var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);
	var pgPass = __webpack_require__(451);
	var TypeOverrides = __webpack_require__(456);

	var ConnectionParameters = __webpack_require__(467);
	var Query = __webpack_require__(470);
	var defaults = __webpack_require__(468);
	var Connection = __webpack_require__(473);

	var Client = function(config) {
	  EventEmitter.call(this);

	  this.connectionParameters = new ConnectionParameters(config);
	  this.user = this.connectionParameters.user;
	  this.database = this.connectionParameters.database;
	  this.port = this.connectionParameters.port;
	  this.host = this.connectionParameters.host;
	  this.password = this.connectionParameters.password;

	  var c = config || {};

	  this._types = new TypeOverrides(c.types);

	  this.connection = c.connection || new Connection({
	    stream: c.stream,
	    ssl: this.connectionParameters.ssl
	  });
	  this.queryQueue = [];
	  this.binary = c.binary || defaults.binary;
	  this.encoding = 'utf8';
	  this.processID = null;
	  this.secretKey = null;
	  this.ssl = this.connectionParameters.ssl || false;
	};

	util.inherits(Client, EventEmitter);

	Client.prototype.connect = function(callback) {
	  var self = this;
	  var con = this.connection;

	  if(this.host && this.host.indexOf('/') === 0) {
	    con.connect(this.host + '/.s.PGSQL.' + this.port);
	  } else {
	    con.connect(this.port, this.host);
	  }


	  //once connection is established send startup message
	  con.on('connect', function() {
	    if(self.ssl) {
	      con.requestSsl();
	    } else {
	      con.startup(self.getStartupConf());
	    }
	  });

	  con.on('sslconnect', function() {
	    con.startup(self.getStartupConf());
	  });

	  function checkPgPass(cb) {
	    return function(msg) {
	      if (null !== self.password) {
	        cb(msg);
	      } else {
	        pgPass(self.connectionParameters, function(pass){
	          if (undefined !== pass) {
	            self.connectionParameters.password = self.password = pass;
	          }
	          cb(msg);
	        });
	      }
	    };
	  }

	  //password request handling
	  con.on('authenticationCleartextPassword', checkPgPass(function() {
	    con.password(self.password);
	  }));

	  //password request handling
	  con.on('authenticationMD5Password', checkPgPass(function(msg) {
	    var inner = Client.md5(self.password + self.user);
	    var outer = Client.md5(Buffer.concat([new Buffer(inner), msg.salt]));
	    var md5password = "md5" + outer;
	    con.password(md5password);
	  }));

	  con.once('backendKeyData', function(msg) {
	    self.processID = msg.processID;
	    self.secretKey = msg.secretKey;
	  });

	  //hook up query handling events to connection
	  //after the connection initially becomes ready for queries
	  con.once('readyForQuery', function() {

	    //delegate rowDescription to active query
	    con.on('rowDescription', function(msg) {
	      self.activeQuery.handleRowDescription(msg);
	    });

	    //delegate dataRow to active query
	    con.on('dataRow', function(msg) {
	      self.activeQuery.handleDataRow(msg);
	    });

	    //delegate portalSuspended to active query
	    con.on('portalSuspended', function(msg) {
	      self.activeQuery.handlePortalSuspended(con);
	    });

	    //deletagate emptyQuery to active query
	    con.on('emptyQuery', function(msg) {
	      self.activeQuery.handleEmptyQuery(con);
	    });

	    //delegate commandComplete to active query
	    con.on('commandComplete', function(msg) {
	      self.activeQuery.handleCommandComplete(msg, con);
	    });

	    //if a prepared statement has a name and properly parses
	    //we track that its already been executed so we don't parse
	    //it again on the same client
	    con.on('parseComplete', function(msg) {
	      if(self.activeQuery.name) {
	        con.parsedStatements[self.activeQuery.name] = true;
	      }
	    });

	    con.on('copyInResponse', function(msg) {
	      self.activeQuery.handleCopyInResponse(self.connection);
	    });

	    con.on('copyData', function (msg) {
	      self.activeQuery.handleCopyData(msg, self.connection);
	    });

	    con.on('notification', function(msg) {
	      self.emit('notification', msg);
	    });

	    //process possible callback argument to Client#connect
	    if (callback) {
	      callback(null, self);
	      //remove callback for proper error handling
	      //after the connect event
	      callback = null;
	    }
	    self.emit('connect');
	  });

	  con.on('readyForQuery', function() {
	    var activeQuery = self.activeQuery;
	    self.activeQuery = null;
	    self.readyForQuery = true;
	    self._pulseQueryQueue();
	    if(activeQuery) {
	      activeQuery.handleReadyForQuery();
	    }
	  });

	  con.on('error', function(error) {
	    if(self.activeQuery) {
	      var activeQuery = self.activeQuery;
	      self.activeQuery = null;
	      return activeQuery.handleError(error, con);
	    }
	    if(!callback) {
	      return self.emit('error', error);
	    }
	    callback(error);
	    callback = null;
	  });

	  con.once('end', function() {
	    if ( callback ) {
	      // haven't received a connection message yet !
	      var err = new Error('Connection terminated');
	      callback(err);
	      callback = null;
	      return;
	    }
	    if(self.activeQuery) {
	      var disconnectError = new Error('Connection terminated');
	      self.activeQuery.handleError(disconnectError, con);
	      self.activeQuery = null;
	    }
	    self.emit('end');
	  });


	  con.on('notice', function(msg) {
	    self.emit('notice', msg);
	  });

	};

	Client.prototype.getStartupConf = function() {
	  var params = this.connectionParameters;

	  var data = {
	    user: params.user,
	    database: params.database
	  };

	  var appName = params.application_name || params.fallback_application_name;
	  if (appName) {
	    data.application_name = appName;
	  }

	  return data;
	};

	Client.prototype.cancel = function(client, query) {
	  if(client.activeQuery == query) {
	    var con = this.connection;

	    if(this.host && this.host.indexOf('/') === 0) {
	      con.connect(this.host + '/.s.PGSQL.' + this.port);
	    } else {
	      con.connect(this.port, this.host);
	    }

	    //once connection is established send cancel message
	    con.on('connect', function() {
	      con.cancel(client.processID, client.secretKey);
	    });
	  } else if(client.queryQueue.indexOf(query) != -1) {
	    client.queryQueue.splice(client.queryQueue.indexOf(query), 1);
	  }
	};

	Client.prototype.setTypeParser = function(oid, format, parseFn) {
	  return this._types.setTypeParser(oid, format, parseFn);
	};

	Client.prototype.getTypeParser = function(oid, format) {
	  return this._types.getTypeParser(oid, format);
	};

	// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c
	Client.prototype.escapeIdentifier = function(str) {

	  var escaped = '"';

	  for(var i = 0; i < str.length; i++) {
	    var c = str[i];
	    if(c === '"') {
	      escaped += c + c;
	    } else {
	      escaped += c;
	    }
	  }

	  escaped += '"';

	  return escaped;
	};

	// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c
	Client.prototype.escapeLiteral = function(str) {

	  var hasBackslash = false;
	  var escaped = '\'';

	  for(var i = 0; i < str.length; i++) {
	    var c = str[i];
	    if(c === '\'') {
	      escaped += c + c;
	    } else if (c === '\\') {
	      escaped += c + c;
	      hasBackslash = true;
	    } else {
	      escaped += c;
	    }
	  }

	  escaped += '\'';

	  if(hasBackslash === true) {
	    escaped = ' E' + escaped;
	  }

	  return escaped;
	};

	Client.prototype._pulseQueryQueue = function() {
	  if(this.readyForQuery===true) {
	    this.activeQuery = this.queryQueue.shift();
	    if(this.activeQuery) {
	      this.readyForQuery = false;
	      this.hasExecuted = true;
	      this.activeQuery.submit(this.connection);
	    } else if(this.hasExecuted) {
	      this.activeQuery = null;
	      this.emit('drain');
	    }
	  }
	};

	Client.prototype.copyFrom = function (text) {
	  throw new Error("For PostgreSQL COPY TO/COPY FROM support npm install pg-copy-streams");
	};

	Client.prototype.copyTo = function (text) {
	  throw new Error("For PostgreSQL COPY TO/COPY FROM support npm install pg-copy-streams");
	};

	Client.prototype.query = function(config, values, callback) {
	  //can take in strings, config object or query object
	  var query = (typeof config.submit == 'function') ? config :
	     new Query(config, values, callback);
	  if(this.binary && !query.binary) {
	    query.binary = true;
	  }
	  if(query._result) {
	    query._result._getTypeParser = this._types.getTypeParser.bind(this._types);
	  }

	  this.queryQueue.push(query);
	  this._pulseQueryQueue();
	  return query;
	};

	Client.prototype.end = function() {
	  this.connection.end();
	};

	Client.md5 = function(string) {
	  return crypto.createHash('md5').update(string).digest('hex');
	};

	// expose a Query constructor
	Client.Query = Query;

	module.exports = Client;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var path = __webpack_require__(116)
	  , fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , helper = __webpack_require__(452)(path.join(__dirname, 'helper.js'))
	;


	module.exports.warnTo = helper.warnTo;

	module.exports = function(connInfo, cb) {
	    var file = helper.getFileName();
	    
	    fs.stat(file, function(err, stat){
	        if (err || !helper.usePgPass(stat, file)) {
	            return cb(undefined);
	        }

	        var st = fs.createReadStream(file);

	        helper.getPassword(connInfo, st, cb);
	    });
	};

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./helper": 453,
		"./helper.js": 453,
		"./index": 451,
		"./index.js": 451
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 452;


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var path = __webpack_require__(116)
	  , Stream = __webpack_require__(63).Stream
	  , Split = __webpack_require__(454)
	  , util = __webpack_require__(124)
	  , defaultPort = 5432
	  , isWin = (process.platform === 'win32')
	  , warnStream = process.stderr
	;


	var S_IRWXG = 56     //    00070(8)
	  , S_IRWXO = 7      //    00007(8)
	  , S_IFMT  = 61440  // 00170000(8)
	  , S_IFREG = 32768  //  0100000(8)
	;
	function isRegFile(mode) {
	    return ((mode & S_IFMT) == S_IFREG);
	}

	var fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];
	var nrOfFields = fieldNames.length;
	var passKey = fieldNames[ nrOfFields -1 ];


	function warn() {
	    var isWritable = (
	        warnStream instanceof Stream &&
	          true === warnStream.writable
	    );

	    if (isWritable) {
	        var args = Array.prototype.slice.call(arguments).concat("\n");
	        warnStream.write( util.format.apply(util, args) );
	    }
	}


	Object.defineProperty(module.exports, 'isWin', {
	    get : function() {
	        return isWin;
	    } ,
	    set : function(val) {
	        isWin = val;
	    }
	});


	module.exports.warnTo = function(stream) {
	    var old = warnStream;
	    warnStream = stream;
	    return old;
	};

	module.exports.getFileName = function(env){
	    env = env || process.env;
	    var file = env.PGPASSFILE || (
	        isWin ?
	          path.join( env.APPDATA , 'postgresql', 'pgpass.conf' ) :
	          path.join( env.HOME, '.pgpass' )
	    );
	    return file;
	};

	module.exports.usePgPass = function(stats, fname) {
	    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {
	        return false;
	    }

	    if (isWin) {
	        return true;
	    }

	    fname = fname || '<unkn>';

	    if (! isRegFile(stats.mode)) {
	        warn('WARNING: password file "%s" is not a plain file', fname);
	        return false;
	    }

	    if (stats.mode & (S_IRWXG | S_IRWXO)) {
	        /* If password file is insecure, alert the user and ignore it. */
	        warn('WARNING: password file "%s" has group or world access; permissions should be u=rw (0600) or less', fname);
	        return false;
	    }

	    return true;
	};


	var matcher = module.exports.match = function(connInfo, entry) {
	    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){
	        if (idx == 1) {
	            // the port
	            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {
	                return prev && true;
	            }
	        }
	        return prev && (
	            entry[field] === '*' ||
	              entry[field] === connInfo[field]
	        );
	    }, true);
	};


	module.exports.getPassword = function(connInfo, stream, cb) {
	    var pass;
	    var lineStream = stream.pipe(new Split());

	    function onLine(line) {
	        var entry = parseLine(line);
	        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {
	            pass = entry[passKey];
	            lineStream.end(); // -> calls onEnd(), but pass is set now
	        }
	    }

	    var onEnd = function() {
	        cb(pass);
	    };

	    var onErr = function(err) {
	        warn('WARNING: error on reading file: %s', err);
	        cb(undefined);
	    };

	    stream.on('error', onErr);
	    lineStream
	        .on('data', onLine)
	        .on('end', onEnd)
	        .on('error', onErr)
	    ;

	};


	var parseLine = module.exports.parseLine = function(line) {
	    if (line.length < 11 || line.match(/^\s+#/)) {
	        return null;
	    }

	    var curChar = '';
	    var prevChar = '';
	    var fieldIdx = 0;
	    var startIdx = 0;
	    var endIdx = 0;
	    var obj = {};
	    var isLastField = false;
	    var addToObj = function(idx, i0, i1) {
	        var field = line.substring(i0, i1);

	        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {
	            field = field.replace(/\\([:\\])/g, '$1');
	        }

	        obj[ fieldNames[idx] ] = field;
	    };

	    for (var i = 0 ; i < line.length-1 ; i += 1) {
	        curChar = line.charAt(i+1);
	        prevChar = line.charAt(i);

	        isLastField = (fieldIdx == nrOfFields-1);

	        if (isLastField) {
	            addToObj(fieldIdx, startIdx);
	            break;
	        }

	        if (i >= 0 && curChar == ':' && prevChar !== '\\') {
	            addToObj(fieldIdx, startIdx, i+1);

	            startIdx = i+2;
	            fieldIdx += 1;
	        }
	    }

	    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;

	    return obj;
	};


	var isValidEntry = module.exports.isValidEntry = function(entry){
	    var rules = {
	        // host
	        0 : function(x){
	            return x.length > 0;
	        } ,
	        // port
	        1 : function(x){
	            if (x === '*') {
	                return true;
	            }
	            x = Number(x);
	            return (
	                isFinite(x) &&
	                  x > 0 &&
	                  x < 9007199254740992 &&
	                  Math.floor(x) === x
	            );
	        } ,
	        // database
	        2 : function(x){
	            return x.length > 0;
	        } ,
	        // username
	        3 : function(x){
	            return x.length > 0;
	        } ,
	        // password
	        4 : function(x){
	            return x.length > 0;
	        }
	    };

	    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {
	        var rule = rules[idx];
	        var value = entry[ fieldNames[idx] ] || '';

	        var res = rule(value);
	        if (!res) {
	            return false;
	        }
	    }

	    return true;
	};


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	//filter will reemit the data if cb(err,pass) pass is truthy

	// reduce is more tricky
	// maybe we want to group the reductions or emit progress updates occasionally
	// the most basic reduce just emits one 'data' event after it has recieved 'end'


	var through = __webpack_require__(455)
	var Decoder = __webpack_require__(424).StringDecoder

	module.exports = split

	//TODO pass in a function to map across the lines.

	function split (matcher, mapper, options) {
	  var decoder = new Decoder()
	  var soFar = ''
	  var maxLength = options && options.maxLength;
	  if('function' === typeof matcher)
	    mapper = matcher, matcher = null
	  if (!matcher)
	    matcher = /\r?\n/

	  function emit(stream, piece) {
	    if(mapper) {
	      try {
	        piece = mapper(piece)
	      }
	      catch (err) {
	        return stream.emit('error', err)
	      }
	      if('undefined' !== typeof piece)
	        stream.queue(piece)
	    }
	    else
	      stream.queue(piece)
	  }

	  function next (stream, buffer) {
	    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher)
	    soFar = pieces.pop()

	    if (maxLength && soFar.length > maxLength)
	      stream.emit('error', new Error('maximum buffer reached'))

	    for (var i = 0; i < pieces.length; i++) {
	      var piece = pieces[i]
	      emit(stream, piece)
	    }
	  }

	  return through(function (b) {
	    next(this, decoder.write(b))
	  },
	  function () {
	    if(decoder.end)
	      next(this, decoder.end())
	    if(soFar != null)
	      emit(this, soFar)
	    this.queue(null)
	  })
	}



/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__(63)

	// through
	//
	// a stream that does nothing but re-emit the input.
	// useful for aggregating a series of changing but not ending streams into one stream)

	exports = module.exports = through
	through.through = through

	//create a readable writable stream.

	function through (write, end, opts) {
	  write = write || function (data) { this.queue(data) }
	  end = end || function () { this.queue(null) }

	  var ended = false, destroyed = false, buffer = [], _ended = false
	  var stream = new Stream()
	  stream.readable = stream.writable = true
	  stream.paused = false

	//  stream.autoPause   = !(opts && opts.autoPause   === false)
	  stream.autoDestroy = !(opts && opts.autoDestroy === false)

	  stream.write = function (data) {
	    write.call(this, data)
	    return !stream.paused
	  }

	  function drain() {
	    while(buffer.length && !stream.paused) {
	      var data = buffer.shift()
	      if(null === data)
	        return stream.emit('end')
	      else
	        stream.emit('data', data)
	    }
	  }

	  stream.queue = stream.push = function (data) {
	//    console.error(ended)
	    if(_ended) return stream
	    if(data === null) _ended = true
	    buffer.push(data)
	    drain()
	    return stream
	  }

	  //this will be registered as the first 'end' listener
	  //must call destroy next tick, to make sure we're after any
	  //stream piped from here.
	  //this is only a problem if end is not emitted synchronously.
	  //a nicer way to do this is to make sure this is the last listener for 'end'

	  stream.on('end', function () {
	    stream.readable = false
	    if(!stream.writable && stream.autoDestroy)
	      process.nextTick(function () {
	        stream.destroy()
	      })
	  })

	  function _end () {
	    stream.writable = false
	    end.call(stream)
	    if(!stream.readable && stream.autoDestroy)
	      stream.destroy()
	  }

	  stream.end = function (data) {
	    if(ended) return
	    ended = true
	    if(arguments.length) stream.write(data)
	    _end() // will emit or queue
	    return stream
	  }

	  stream.destroy = function () {
	    if(destroyed) return
	    destroyed = true
	    ended = true
	    buffer.length = 0
	    stream.writable = stream.readable = false
	    stream.emit('close')
	    return stream
	  }

	  stream.pause = function () {
	    if(stream.paused) return
	    stream.paused = true
	    return stream
	  }

	  stream.resume = function () {
	    if(stream.paused) {
	      stream.paused = false
	      stream.emit('resume')
	    }
	    drain()
	    //may have become paused again,
	    //as drain emits 'data'.
	    if(!stream.paused)
	      stream.emit('drain')
	    return stream
	  }
	  return stream
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	var types = __webpack_require__(457);

	function TypeOverrides(userTypes) {
	  this._types = userTypes || types;
	  this.text = {};
	  this.binary = {};
	}

	TypeOverrides.prototype.getOverrides = function(format) {
	  switch(format) {
	    case 'text': return this.text;
	    case 'binary': return this.binary;
	    default: return {};
	  }
	};

	TypeOverrides.prototype.setTypeParser = function(oid, format, parseFn) {
	  if(typeof format == 'function') {
	    parseFn = format;
	    format = 'text';
	  }
	  this.getOverrides(format)[oid] = parseFn;
	};

	TypeOverrides.prototype.getTypeParser = function(oid, format) {
	  format = format || 'text';
	  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format);
	};

	module.exports = TypeOverrides;


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var textParsers = __webpack_require__(458);
	var binaryParsers = __webpack_require__(466);
	var arrayParser = __webpack_require__(461);

	exports.getTypeParser = getTypeParser;
	exports.setTypeParser = setTypeParser;
	exports.arrayParser = arrayParser;

	var typeParsers = {
	  text: {},
	  binary: {}
	};

	//the empty parse function
	function noParse (val) {
	  return String(val);
	};

	//returns a function used to convert a specific type (specified by
	//oid) into a result javascript type
	//note: the oid can be obtained via the following sql query:
	//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';
	function getTypeParser (oid, format) {
	  format = format || 'text';
	  if (!typeParsers[format]) {
	    return noParse;
	  }
	  return typeParsers[format][oid] || noParse;
	};

	function setTypeParser (oid, format, parseFn) {
	  if(typeof format == 'function') {
	    parseFn = format;
	    format = 'text';
	  }
	  typeParsers[format][oid] = parseFn;
	};

	textParsers.init(function(oid, converter) {
	  typeParsers.text[oid] = converter;
	});

	binaryParsers.init(function(oid, converter) {
	  typeParsers.binary[oid] = converter;
	});


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	var array = __webpack_require__(459)
	var ap = __webpack_require__(460)
	var arrayParser = __webpack_require__(461);
	var parseDate = __webpack_require__(462);
	var parseInterval = __webpack_require__(463);
	var parseByteA = __webpack_require__(465);

	function allowNull (fn) {
	  return function nullAllowed (value) {
	    if (value === null) return value
	    return fn(value)
	  }
	}

	function parseBool (value) {
	  if (value === null) return value
	  return value === 't';
	}

	function parseBoolArray (value) {
	  if (!value) return null
	  return array.parse(value, parseBool)
	}

	function parseIntegerArray (value) {
	  if (!value) return null
	  return array.parse(value, allowNull(ap.partialRight(parseInt, 10)))
	}

	function parseBigIntegerArray (value) {
	  if (!value) return null
	  return array.parse(value, allowNull(function (entry) {
	    return parseBigInteger(entry).trim()
	  }))
	}

	var parseFloatArray = function(value) {
	  if(!value) { return null; }
	  var p = arrayParser.create(value, function(entry) {
	    if(entry !== null) {
	      entry = parseFloat(entry);
	    }
	    return entry;
	  });

	  return p.parse();
	};

	var parseStringArray = function(value) {
	  if(!value) { return null; }

	  var p = arrayParser.create(value);
	  return p.parse();
	};

	var parseDateArray = function(value) {
	  if (!value) { return null; }

	  var p = arrayParser.create(value, function(entry) {
	    if (entry !== null) {
	      entry = parseDate(entry);
	    }
	    return entry;
	  });

	  return p.parse();
	};

	var parseByteAArray = function(value) {
	  var arr = parseStringArray(value);
	  if (!arr) return arr;

	  return arr.map(function(element) {
	    return parseByteA(element);
	  });
	};

	var parseInteger = function(value) {
	  return parseInt(value, 10);
	};

	var parseBigInteger = function(value) {
	  var valStr = String(value);
	  if (/^\d+$/.test(valStr)) { return valStr; }
	  return value;
	};

	var parseJsonArray = function(value) {
	  var arr = parseStringArray(value);

	  if (!arr) {
	    return arr;
	  }

	  return arr.map(function(el) { return JSON.parse(el); });
	};

	var parsePoint = function(value) {
	  if (value[0] !== '(') { return null; }

	  value = value.substring( 1, value.length - 1 ).split(',');

	  return {
	    x: parseFloat(value[0])
	  , y: parseFloat(value[1])
	  };
	};

	var parseCircle = function(value) {
	  if (value[0] !== '<' && value[1] !== '(') { return null; }

	  var point = '(';
	  var radius = '';
	  var pointParsed = false;
	  for (var i = 2; i < value.length - 1; i++){
	    if (!pointParsed) {
	      point += value[i];
	    }

	    if (value[i] === ')') {
	      pointParsed = true;
	      continue;
	    } else if (!pointParsed) {
	      continue;
	    }

	    if (value[i] === ','){
	      continue;
	    }

	    radius += value[i];
	  }
	  var result = parsePoint(point);
	  result.radius = parseFloat(radius);

	  return result;
	};

	var init = function(register) {
	  register(20, parseBigInteger); // int8
	  register(21, parseInteger); // int2
	  register(23, parseInteger); // int4
	  register(26, parseInteger); // oid
	  register(700, parseFloat); // float4/real
	  register(701, parseFloat); // float8/double
	  register(16, parseBool);
	  register(1082, parseDate); // date
	  register(1114, parseDate); // timestamp without timezone
	  register(1184, parseDate); // timestamp
	  register(600, parsePoint); // point
	  register(718, parseCircle); // circle
	  register(1000, parseBoolArray);
	  register(1001, parseByteAArray);
	  register(1005, parseIntegerArray); // _int2
	  register(1007, parseIntegerArray); // _int4
	  register(1028, parseIntegerArray); // oid[]
	  register(1016, parseBigIntegerArray); // _int8
	  register(1021, parseFloatArray); // _float4
	  register(1022, parseFloatArray); // _float8
	  register(1231, parseFloatArray); // _numeric
	  register(1014, parseStringArray); //char
	  register(1015, parseStringArray); //varchar
	  register(1008, parseStringArray);
	  register(1009, parseStringArray);
	  register(1115, parseDateArray); // timestamp without time zone[]
	  register(1182, parseDateArray); // _date
	  register(1185, parseDateArray); // timestamp with time zone[]
	  register(1186, parseInterval);
	  register(17, parseByteA);
	  register(114, JSON.parse.bind(JSON)); // json
	  register(3802, JSON.parse.bind(JSON)); // jsonb
	  register(199, parseJsonArray); // json[]
	  register(3807, parseJsonArray); // jsonb[]
	  register(2951, parseStringArray); // uuid[]
	  register(791, parseStringArray); // money[]
	  register(1183, parseStringArray); // time[]
	};

	module.exports = {
	  init: init
	};


/***/ },
/* 459 */
/***/ function(module, exports) {

	'use strict'

	exports.parse = function (source, transform) {
	  return new ArrayParser(source, transform).parse()
	}

	function ArrayParser (source, transform) {
	  this.source = source
	  this.transform = transform || identity
	  this.position = 0
	  this.entries = []
	  this.recorded = []
	  this.dimension = 0
	}

	ArrayParser.prototype.isEof = function () {
	  return this.position >= this.source.length
	}

	ArrayParser.prototype.nextCharacter = function () {
	  var character = this.source[this.position++]
	  if (character === '\\') {
	    return {
	      value: this.source[this.position++],
	      escaped: true
	    }
	  }
	  return {
	    value: character,
	    escaped: false
	  }
	}

	ArrayParser.prototype.record = function (character) {
	  this.recorded.push(character)
	}

	ArrayParser.prototype.newEntry = function (includeEmpty) {
	  var entry
	  if (this.recorded.length > 0 || includeEmpty) {
	    entry = this.recorded.join('')
	    if (entry === 'NULL' && !includeEmpty) {
	      entry = null
	    }
	    if (entry !== null) entry = this.transform(entry)
	    this.entries.push(entry)
	    this.recorded = []
	  }
	}

	ArrayParser.prototype.parse = function (nested) {
	  var character, parser, quote
	  while (!this.isEof()) {
	    character = this.nextCharacter()
	    if (character.value === '{' && !quote) {
	      this.dimension++
	      if (this.dimension > 1) {
	        parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)
	        this.entries.push(parser.parse(true))
	        this.position += parser.position - 2
	      }
	    } else if (character.value === '}' && !quote) {
	      this.dimension--
	      if (!this.dimension) {
	        this.newEntry()
	        if (nested) return this.entries
	      }
	    } else if (character.value === '"' && !character.escaped) {
	      if (quote) this.newEntry(true)
	      quote = !quote
	    } else if (character.value === ',' && !quote) {
	      this.newEntry()
	    } else {
	      this.record(character.value)
	    }
	  }
	  if (this.dimension !== 0) {
	    throw new Error('array dimension not balanced')
	  }
	  return this.entries
	}

	function identity (value) {
	  return value
	}


/***/ },
/* 460 */
/***/ function(module, exports) {

	exports = module.exports = ap;
	function ap (args, fn) {
	    return function () {
	        var rest = [].slice.call(arguments)
	            , first = args.slice()
	        first.push.apply(first, rest)
	        return fn.apply(this, first);
	    };
	}

	exports.pa = pa;
	function pa (args, fn) {
	    return function () {
	        var rest = [].slice.call(arguments)
	        rest.push.apply(rest, args)
	        return fn.apply(this, rest);
	    };
	}

	exports.apa = apa;
	function apa (left, right, fn) {
	    return function () {
	        return fn.apply(this,
	            left.concat.apply(left, arguments).concat(right)
	        );
	    };
	}

	exports.partial = partial;
	function partial (fn) {
	    var args = [].slice.call(arguments, 1);
	    return ap(args, fn);
	}

	exports.partialRight = partialRight;
	function partialRight (fn) {
	    var args = [].slice.call(arguments, 1);
	    return pa(args, fn);
	}

	exports.curry = curry;
	function curry (fn) {
	    return partial(partial, fn);
	}

	exports.curryRight = function curryRight (fn) {
	    return partial(partialRight, fn);
	}


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var array = __webpack_require__(459);

	module.exports = {
	  create: function (source, transform) {
	    return {
	      parse: function() {
	        return array.parse(source, transform);
	      }
	    };
	  }
	};


/***/ },
/* 462 */
/***/ function(module, exports) {

	'use strict'

	var DATE_TIME = /(\d{1,})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})(\.\d{1,})?/
	var DATE = /^(\d{1,})-(\d{2})-(\d{2})$/
	var TIME_ZONE = /([Z+-])(\d{2})?:?(\d{2})?:?(\d{2})?/
	var BC = /BC$/
	var INFINITY = /^-?infinity$/

	module.exports = function parseDate (isoDate) {
	  if (INFINITY.test(isoDate)) {
	    // Capitalize to Infinity before passing to Number
	    return Number(isoDate.replace('i', 'I'))
	  }
	  var matches = DATE_TIME.exec(isoDate)

	  if (!matches) {
	    // Force YYYY-MM-DD dates to be parsed as local time
	    return DATE.test(isoDate) ?
	      getDate(isoDate) :
	      null
	  }

	  var isBC = BC.test(isoDate)
	  var year = parseInt(matches[1], 10)
	  var isFirstCentury = year > 0 && year < 100
	  year = (isBC ? '-' : '') + year

	  var month = parseInt(matches[2], 10) - 1
	  var day = matches[3]
	  var hour = parseInt(matches[4], 10)
	  var minute = parseInt(matches[5], 10)
	  var second = parseInt(matches[6], 10)

	  var ms = matches[7]
	  ms = ms ? 1000 * parseFloat(ms) : 0

	  var date
	  var offset = timeZoneOffset(isoDate)
	  if (offset != null) {
	    var utc = Date.UTC(year, month, day, hour, minute, second, ms)
	    date = new Date(utc - offset)
	  } else {
	    date = new Date(year, month, day, hour, minute, second, ms)
	  }

	  if (isFirstCentury) {
	    date.setUTCFullYear(year)
	  }

	  return date
	}

	function getDate (isoDate) {
	  var matches = DATE.exec(isoDate)
	  var year = parseInt(matches[1], 10)
	  var month = parseInt(matches[2], 10) - 1
	  var day = matches[3]
	  // YYYY-MM-DD will be parsed as local time
	  var date = new Date(year, month, day)
	  date.setFullYear(year)
	  return date
	}

	// match timezones:
	// Z (UTC)
	// -05
	// +06:30
	function timeZoneOffset (isoDate) {
	  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])
	  if (!zone) return
	  var type = zone[1]

	  if (type === 'Z') {
	    return 0
	  }
	  var sign = type === '-' ? -1 : 1
	  var offset = parseInt(zone[2], 10) * 3600 +
	    parseInt(zone[3] || 0, 10) * 60 +
	    parseInt(zone[4] || 0, 10)

	  return offset * sign * 1000
	}


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var extend = __webpack_require__(464)

	module.exports = PostgresInterval

	function PostgresInterval (raw) {
	  if (!(this instanceof PostgresInterval)) {
	    return new PostgresInterval(raw)
	  }
	  extend(this, parse(raw))
	}
	var properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']
	PostgresInterval.prototype.toPostgres = function () {
	  var filtered = properties.filter(this.hasOwnProperty, this)
	  if (filtered.length === 0) return '0'
	  return filtered
	    .map(function (property) {
	      return this[property] + ' ' + property
	    }, this)
	    .join(' ')
	}

	var NUMBER = '([+-]?\\d+)'
	var YEAR = NUMBER + '\\s+years?'
	var MONTH = NUMBER + '\\s+mons?'
	var DAY = NUMBER + '\\s+days?'
	var TIME = '([+-])?([\\d]*):(\\d\\d):(\\d\\d):?(\\d\\d\\d)?'
	var INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {
	  return '(' + regexString + ')?'
	})
	.join('\\s*'))

	// Positions of values in regex match
	var positions = {
	  years: 2,
	  months: 4,
	  days: 6,
	  hours: 9,
	  minutes: 10,
	  seconds: 11,
	  milliseconds: 12
	}
	// We can use negative time
	var negatives = ['hours', 'minutes', 'seconds']

	function parse (interval) {
	  if (!interval) return {}
	  var matches = INTERVAL.exec(interval)
	  var isNegative = matches[8] === '-'
	  return Object.keys(positions)
	    .reduce(function (parsed, property) {
	      var position = positions[property]
	      var value = matches[position]
	      // no empty string
	      if (!value) return parsed
	      value = parseInt(value, 10)
	      // no zeros
	      if (!value) return parsed
	      if (isNegative && ~negatives.indexOf(property)) {
	        value *= -1
	      }
	      parsed[property] = value
	      return parsed
	    }, {})
	}


/***/ },
/* 464 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend(target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'

	module.exports = function parseBytea (input) {
	  if (/^\\x/.test(input)) {
	    // new 'hex' style response (pg >9.0)
	    return new Buffer(input.substr(2), 'hex')
	  }
	  var output = ''
	  var i = 0
	  while (i < input.length) {
	    if (input[i] !== '\\') {
	      output += input[i]
	      ++i
	    } else {
	      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {
	        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))
	        i += 4
	      } else {
	        var backslashes = 1
	        while (i + backslashes < input.length && input[i + backslashes] === '\\') {
	          backslashes++
	        }
	        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {
	          output += '\\'
	        }
	        i += Math.floor(backslashes / 2) * 2
	      }
	    }
	  }
	  return new Buffer(output, 'binary')
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 466 */
/***/ function(module, exports) {

	var parseBits = function(data, bits, offset, invert, callback) {
	  offset = offset || 0;
	  invert = invert || false;
	  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };
	  var offsetBytes = offset >> 3;

	  var inv = function(value) {
	    if (invert) {
	      return ~value & 0xff;
	    }

	    return value;
	  };

	  // read first (maybe partial) byte
	  var mask = 0xff;
	  var firstBits = 8 - (offset % 8);
	  if (bits < firstBits) {
	    mask = (0xff << (8 - bits)) & 0xff;
	    firstBits = bits;
	  }

	  if (offset) {
	    mask = mask >> (offset % 8);
	  }

	  var result = 0;
	  if ((offset % 8) + bits >= 8) {
	    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);
	  }

	  // read bytes
	  var bytes = (bits + offset) >> 3;
	  for (var i = offsetBytes + 1; i < bytes; i++) {
	    result = callback(result, inv(data[i]), 8);
	  }

	  // bits to read, that are not a complete byte
	  var lastBits = (bits + offset) % 8;
	  if (lastBits > 0) {
	    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);
	  }

	  return result;
	};

	var parseFloatFromBits = function(data, precisionBits, exponentBits) {
	  var bias = Math.pow(2, exponentBits - 1) - 1;
	  var sign = parseBits(data, 1);
	  var exponent = parseBits(data, exponentBits, 1);

	  if (exponent === 0) {
	    return 0;
	  }

	  // parse mantissa
	  var precisionBitsCounter = 1;
	  var parsePrecisionBits = function(lastValue, newValue, bits) {
	    if (lastValue === 0) {
	      lastValue = 1;
	    }

	    for (var i = 1; i <= bits; i++) {
	      precisionBitsCounter /= 2;
	      if ((newValue & (0x1 << (bits - i))) > 0) {
	        lastValue += precisionBitsCounter;
	      }
	    }

	    return lastValue;
	  };

	  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);

	  // special cases
	  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {
	    if (mantissa === 0) {
	      return (sign === 0) ? Infinity : -Infinity;
	    }

	    return NaN;
	  }

	  // normale number
	  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;
	};

	var parseInt16 = function(value) {
	  if (parseBits(value, 1) == 1) {
	    return -1 * (parseBits(value, 15, 1, true) + 1);
	  }

	  return parseBits(value, 15, 1);
	};

	var parseInt32 = function(value) {
	  if (parseBits(value, 1) == 1) {
	    return -1 * (parseBits(value, 31, 1, true) + 1);
	  }

	  return parseBits(value, 31, 1);
	};

	var parseFloat32 = function(value) {
	  return parseFloatFromBits(value, 23, 8);
	};

	var parseFloat64 = function(value) {
	  return parseFloatFromBits(value, 52, 11);
	};

	var parseNumeric = function(value) {
	  var sign = parseBits(value, 16, 32);
	  if (sign == 0xc000) {
	    return NaN;
	  }

	  var weight = Math.pow(10000, parseBits(value, 16, 16));
	  var result = 0;

	  var digits = [];
	  var ndigits = parseBits(value, 16);
	  for (var i = 0; i < ndigits; i++) {
	    result += parseBits(value, 16, 64 + (16 * i)) * weight;
	    weight /= 10000;
	  }

	  var scale = Math.pow(10, parseBits(value, 16, 48));
	  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;
	};

	var parseDate = function(isUTC, value) {
	  var sign = parseBits(value, 1);
	  var rawValue = parseBits(value, 63, 1);

	  // discard usecs and shift from 2000 to 1970
	  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);

	  if (!isUTC) {
	    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);
	  }

	  // add microseconds to the date
	  result.usec = rawValue % 1000;
	  result.getMicroSeconds = function() {
	    return this.usec;
	  };
	  result.setMicroSeconds = function(value) {
	    this.usec = value;
	  };
	  result.getUTCMicroSeconds = function() {
	    return this.usec;
	  };

	  return result;
	};

	var parseArray = function(value) {
	  var dim = parseBits(value, 32);

	  var flags = parseBits(value, 32, 32);
	  var elementType = parseBits(value, 32, 64);

	  var offset = 96;
	  var dims = [];
	  for (var i = 0; i < dim; i++) {
	    // parse dimension
	    dims[i] = parseBits(value, 32, offset);
	    offset += 32;

	    // ignore lower bounds
	    offset += 32;
	  }

	  var parseElement = function(elementType) {
	    // parse content length
	    var length = parseBits(value, 32, offset);
	    offset += 32;

	    // parse null values
	    if (length == 0xffffffff) {
	      return null;
	    }

	    var result;
	    if ((elementType == 0x17) || (elementType == 0x14)) {
	      // int/bigint
	      result = parseBits(value, length * 8, offset);
	      offset += length * 8;
	      return result;
	    }
	    else if (elementType == 0x19) {
	      // string
	      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);
	      return result;
	    }
	    else {
	      console.log("ERROR: ElementType not implemented: " + elementType);
	    }
	  };

	  var parse = function(dimension, elementType) {
	    var array = [];
	    var i;

	    if (dimension.length > 1) {
	      var count = dimension.shift();
	      for (i = 0; i < count; i++) {
	        array[i] = parse(dimension, elementType);
	      }
	      dimension.unshift(count);
	    }
	    else {
	      for (i = 0; i < dimension[0]; i++) {
	        array[i] = parseElement(elementType);
	      }
	    }

	    return array;
	  };

	  return parse(dims, elementType);
	};

	var parseText = function(value) {
	  return value.toString('utf8');
	};

	var parseBool = function(value) {
	  if(value === null) return null;
	  return (parseBits(value, 8) > 0);
	};

	var init = function(register) {
	  register(21, parseInt16);
	  register(23, parseInt32);
	  register(26, parseInt32);
	  register(1700, parseNumeric);
	  register(700, parseFloat32);
	  register(701, parseFloat64);
	  register(16, parseBool);
	  register(1114, parseDate.bind(null, false));
	  register(1184, parseDate.bind(null, true));
	  register(1000, parseArray);
	  register(1007, parseArray);
	  register(1016, parseArray);
	  register(1008, parseArray);
	  register(1009, parseArray);
	  register(25, parseText);
	};

	module.exports = {
	  init: init
	};


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var url = __webpack_require__(96);
	var dns = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"dns\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var defaults = __webpack_require__(468);

	var val = function(key, config, envVar) {
	  if (envVar === undefined) {
	    envVar = process.env[ 'PG' + key.toUpperCase() ];
	  } else if (envVar === false) {
	    // do nothing ... use false
	  } else {
	    envVar = process.env[ envVar ];
	  }

	  return config[key] ||
	    envVar ||
	    defaults[key];
	};

	//parses a connection string
	var parse = __webpack_require__(469).parse;

	var useSsl = function() {
	  switch(process.env.PGSSLMODE) {
	  case "disable":
	    return false;
	  case "prefer":
	  case "require":
	  case "verify-ca":
	  case "verify-full":
	    return true;
	  }
	  return defaults.ssl;
	};

	var ConnectionParameters = function(config) {
	  config = typeof config == 'string' ? parse(config) : (config || {});
	  this.user = val('user', config);
	  this.database = val('database', config);
	  this.port = parseInt(val('port', config), 10);
	  this.host = val('host', config);
	  this.password = val('password', config);
	  this.binary = val('binary', config);
	  this.ssl = config.ssl || useSsl();
	  this.client_encoding = val("client_encoding", config);
	  //a domain socket begins with '/'
	  this.isDomainSocket = (!(this.host||'').indexOf('/'));

	  this.application_name = val('application_name', config, 'PGAPPNAME');
	  this.fallback_application_name = val('fallback_application_name', config, false);
	};

	var add = function(params, config, paramName) {
	  var value = config[paramName];
	  if(value) {
	    params.push(paramName+"='"+value+"'");
	  }
	};

	ConnectionParameters.prototype.getLibpqConnectionString = function(cb) {
	  var params = [];
	  add(params, this, 'user');
	  add(params, this, 'password');
	  add(params, this, 'port');
	  add(params, this, 'application_name');
	  add(params, this, 'fallback_application_name');

	  if(this.database) {
	    params.push("dbname='" + this.database + "'");
	  }
	  if(this.host) {
	    params.push("host=" + this.host);
	  }
	  if(this.isDomainSocket) {
	    return cb(null, params.join(' '));
	  }
	  if(this.client_encoding) {
	    params.push("client_encoding='" + this.client_encoding + "'");
	  }
	  dns.lookup(this.host, function(err, address) {
	    if(err) return cb(err, null);
	    params.push("hostaddr=" + address);
	    return cb(null, params.join(' '));
	  });
	};

	module.exports = ConnectionParameters;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var defaults = module.exports = {
	  // database host. defaults to localhost
	  host: 'localhost',

	  //database user's name
	  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,

	  //name of database to connect
	  database: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,

	  //database user's password
	  password: null,

	  //database port
	  port: 5432,

	  //number of rows to return at a time from a prepared statement's
	  //portal. 0 will return all rows at once
	  rows: 0,

	  // binary result mode
	  binary: false,

	  //Connection pool options - see https://github.com/coopernurse/node-pool
	  //number of connections to use in connection pool
	  //0 will disable connection pooling
	  poolSize: 10,

	  //max milliseconds a client can go unused before it is removed
	  //from the pool and destroyed
	  poolIdleTimeout: 30000,

	  //frequency to check for idle clients within the client pool
	  reapIntervalMillis: 1000,

	  //pool log function / boolean
	  poolLog: false,

	  client_encoding: "",

	  ssl: false,

	  application_name: undefined,
	  fallback_application_name: undefined,

	  parseInputDatesAsUTC: false
	};

	//parse int8 so you can get your count values as actual numbers
	module.exports.__defineSetter__("parseInt8", function(val) {
	  __webpack_require__(457).setTypeParser(20, 'text', val ? parseInt : function(val) { return val; });
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var url = __webpack_require__(96);

	//Parse method copied from https://github.com/brianc/node-postgres
	//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)
	//MIT License

	//parses a connection string
	function parse(str) {
	  var config;
	  //unix socket
	  if(str.charAt(0) === '/') {
	    config = str.split(' ');
	    return { host: config[0], database: config[1] };
	  }
	  // url parse expects spaces encoded as %20
	  if(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {
	    str = encodeURI(str).replace(/\%25(\d\d)/g, "%$1");
	  }
	  var result = url.parse(str, true);
	  config = {};

	  if (result.query.application_name) {
	    config.application_name = result.query.application_name;
	  }
	  if (result.query.fallback_application_name) {
	    config.fallback_application_name = result.query.fallback_application_name;
	  }

	  config.port = result.port;
	  if(result.protocol == 'socket:') {
	    config.host = decodeURI(result.pathname);
	    config.database = result.query.db;
	    config.client_encoding = result.query.encoding;
	    return config;
	  }
	  config.host = result.hostname;

	  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)
	  // only strip the slash if it is present.
	  var pathname = result.pathname;
	  if (pathname && pathname.charAt(0) === '/') {
	    pathname = result.pathname.slice(1) || null;
	  }
	  config.database = pathname && decodeURI(pathname);

	  var auth = (result.auth || ':').split(':');
	  config.user = auth[0];
	  config.password = auth.splice(1).join(':');

	  var ssl = result.query.ssl;
	  if (ssl === 'true' || ssl === '1') {
	    config.ssl = true;
	  }

	  return config;
	}

	module.exports = {
	  parse: parse
	};


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);

	var Result = __webpack_require__(471);
	var utils = __webpack_require__(472);

	var Query = function(config, values, callback) {
	  // use of "new" optional
	  if(!(this instanceof Query)) { return new Query(config, values, callback); }

	  config = utils.normalizeQueryConfig(config, values, callback);

	  this.text = config.text;
	  this.values = config.values;
	  this.rows = config.rows;
	  this.types = config.types;
	  this.name = config.name;
	  this.binary = config.binary;
	  this.stream = config.stream;
	  //use unique portal name each time
	  this.portal = config.portal || "";
	  this.callback = config.callback;
	  if(process.domain && config.callback) {
	    this.callback = process.domain.bind(config.callback);
	  }
	  this._result = new Result(config.rowMode, config.types);
	  this.isPreparedStatement = false;
	  this._canceledDueToError = false;
	  EventEmitter.call(this);
	};

	util.inherits(Query, EventEmitter);

	Query.prototype.requiresPreparation = function() {
	  //named queries must always be prepared
	  if(this.name) { return true; }
	  //always prepare if there are max number of rows expected per
	  //portal execution
	  if(this.rows) { return true; }
	  //don't prepare empty text queries
	  if(!this.text) { return false; }
	  //binary should be prepared to specify results should be in binary
	  //unless there are no parameters
	  if(this.binary && !this.values) { return false; }
	  //prepare if there are values
	  return (this.values || 0).length > 0;
	};


	//associates row metadata from the supplied
	//message with this query object
	//metadata used when parsing row results
	Query.prototype.handleRowDescription = function(msg) {
	  this._result.addFields(msg.fields);
	};

	Query.prototype.handleDataRow = function(msg) {
	  var row = this._result.parseRow(msg.fields);
	  this.emit('row', row, this._result);

	  //if there is a callback collect rows
	  if(this.callback) {
	    this._result.addRow(row);
	  }
	};

	Query.prototype.handleCommandComplete = function(msg, con) {
	  this._result.addCommandComplete(msg);
	  //need to sync after each command complete of a prepared statement
	  if(this.isPreparedStatement) {
	    con.sync();
	  }
	};

	//if a named prepared statement is created with empty query text
	//the backend will send an emptyQuery message but *not* a command complete message
	//execution on the connection will hang until the backend receives a sync message
	Query.prototype.handleEmptyQuery = function(con) {
	  if (this.isPreparedStatement) {
	    con.sync();
	  }
	};

	Query.prototype.handleReadyForQuery = function() {
	  if(this._canceledDueToError) {
	    return this.handleError(this._canceledDueToError);
	  }
	  if(this.callback) {
	    this.callback(null, this._result);
	  }
	  this.emit('end', this._result);
	};

	Query.prototype.handleError = function(err, connection) {
	  //need to sync after error during a prepared statement
	  if(this.isPreparedStatement) {
	    connection.sync();
	  }
	  if(this._canceledDueToError) {
	    err = this._canceledDueToError;
	    this._canceledDueToError = false;
	  }
	  //if callback supplied do not emit error event as uncaught error
	  //events will bubble up to node process
	  if(this.callback) {
	    return this.callback(err);
	  }
	  this.emit('error', err);
	};

	Query.prototype.submit = function(connection) {
	  if(this.requiresPreparation()) {
	    this.prepare(connection);
	  } else {
	    connection.query(this.text);
	  }
	};

	Query.prototype.hasBeenParsed = function(connection) {
	  return this.name && connection.parsedStatements[this.name];
	};

	Query.prototype.handlePortalSuspended = function(connection) {
	  this._getRows(connection, this.rows);
	};

	Query.prototype._getRows = function(connection, rows) {
	  connection.execute({
	    portal: this.portalName,
	    rows: rows
	  }, true);
	  connection.flush();
	};

	Query.prototype.prepare = function(connection) {
	  var self = this;
	  //prepared statements need sync to be called after each command
	  //complete or when an error is encountered
	  this.isPreparedStatement = true;
	  //TODO refactor this poor encapsulation
	  if(!this.hasBeenParsed(connection)) {
	    connection.parse({
	      text: self.text,
	      name: self.name,
	      types: self.types
	    }, true);
	  }

	  if(self.values) {
	    self.values = self.values.map(utils.prepareValue);
	  }

	  //http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY
	  connection.bind({
	    portal: self.portalName,
	    statement: self.name,
	    values: self.values,
	    binary: self.binary
	  }, true);

	  connection.describe({
	    type: 'P',
	    name: self.portalName || ""
	  }, true);

	  this._getRows(connection, this.rows);
	};

	Query.prototype.handleCopyInResponse = function (connection) {
	  if(this.stream) this.stream.startStreamingToConnection(connection);
	  else connection.sendCopyFail('No source stream defined');
	};

	Query.prototype.handleCopyData = function (msg, connection) {
	  var chunk = msg.chunk;
	  if(this.stream) {
	    this.stream.handleChunk(chunk);
	  }
	  //if there are no stream (for example when copy to query was sent by
	  //query method instead of copyTo) error will be handled
	  //on copyOutResponse event, so silently ignore this error here
	};
	module.exports = Query;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	var types = __webpack_require__(457);

	//result object returned from query
	//in the 'end' event and also
	//passed as second argument to provided callback
	var Result = function(rowMode) {
	  this.command = null;
	  this.rowCount = null;
	  this.oid = null;
	  this.rows = [];
	  this.fields = [];
	  this._parsers = [];
	  this.RowCtor = null;
	  this.rowAsArray = rowMode == "array";
	  if(this.rowAsArray) {
	    this.parseRow = this._parseRowAsArray;
	  }
	};

	var matchRegexp = /([A-Za-z]+) ?(\d+ )?(\d+)?/;

	//adds a command complete message
	Result.prototype.addCommandComplete = function(msg) {
	  var match;
	  if(msg.text) {
	    //pure javascript
	    match = matchRegexp.exec(msg.text);
	  } else {
	    //native bindings
	    match = matchRegexp.exec(msg.command);
	  }
	  if(match) {
	    this.command = match[1];
	    //match 3 will only be existing on insert commands
	    if(match[3]) {
	      //msg.value is from native bindings
	      this.rowCount = parseInt(match[3] || msg.value, 10);
	      this.oid = parseInt(match[2], 10);
	    } else {
	      this.rowCount = parseInt(match[2], 10);
	    }
	  }
	};

	Result.prototype._parseRowAsArray = function(rowData) {
	  var row = [];
	  for(var i = 0, len = rowData.length; i < len; i++) {
	    var rawValue = rowData[i];
	    if(rawValue !== null) {
	      row.push(this._parsers[i](rawValue));
	    } else {
	      row.push(null);
	    }
	  }
	  return row;
	};

	//rowData is an array of text or binary values
	//this turns the row into a JavaScript object
	Result.prototype.parseRow = function(rowData) {
	  return new this.RowCtor(this._parsers, rowData);
	};

	Result.prototype.addRow = function(row) {
	  this.rows.push(row);
	};

	var inlineParser = function(fieldName, i) {
	  return "\nthis['" +
	    //fields containing single quotes will break
	    //the evaluated javascript unless they are escaped
	    //see https://github.com/brianc/node-postgres/issues/507
	    //Addendum: However, we need to make sure to replace all
	    //occurences of apostrophes, not just the first one.
	    //See https://github.com/brianc/node-postgres/issues/934
	    fieldName.replace(/'/g, "\\'") +
	    "'] = " +
	    "rowData[" + i + "] == null ? null : parsers[" + i + "](rowData[" + i + "]);";
	};

	Result.prototype.addFields = function(fieldDescriptions) {
	  //clears field definitions
	  //multiple query statements in 1 action can result in multiple sets
	  //of rowDescriptions...eg: 'select NOW(); select 1::int;'
	  //you need to reset the fields
	  if(this.fields.length) {
	    this.fields = [];
	    this._parsers = [];
	  }
	  var ctorBody = "";
	  for(var i = 0; i < fieldDescriptions.length; i++) {
	    var desc = fieldDescriptions[i];
	    this.fields.push(desc);
	    var parser = this._getTypeParser(desc.dataTypeID, desc.format || 'text');
	    this._parsers.push(parser);
	    //this is some craziness to compile the row result parsing
	    //results in ~60% speedup on large query result sets
	    ctorBody += inlineParser(desc.name, i);
	  }
	  if(!this.rowAsArray) {
	    this.RowCtor = Function("parsers", "rowData", ctorBody);
	  }
	};

	Result.prototype._getTypeParser = types.getTypeParser;

	module.exports = Result;


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var defaults = __webpack_require__(468);

	// convert a JS array to a postgres array literal
	// uses comma separator so won't work for types like box that use
	// a different array separator.
	function arrayString(val) {
	  var result = '{';
	  for (var i = 0 ; i < val.length; i++) {
	    if(i > 0) {
	      result = result + ',';
	    }
	    if(val[i] === null || typeof val[i] === 'undefined') {
	      result = result + 'NULL';
	    }
	    else if(Array.isArray(val[i])) {
	      result = result + arrayString(val[i]);
	    }
	    else
	    {
	      result = result + JSON.stringify(prepareValue(val[i]));
	    }
	  }
	  result = result + '}';
	  return result;
	}

	//converts values from javascript types
	//to their 'raw' counterparts for use as a postgres parameter
	//note: you can override this function to provide your own conversion mechanism
	//for complex types, etc...
	var prepareValue = function(val, seen) {
	  if (val instanceof Buffer) {
	    return val;
	  }
	  if(val instanceof Date) {
	    if(defaults.parseInputDatesAsUTC) {
	      return dateToStringUTC(val);
	    } else {
	      return dateToString(val);
	    }
	  }
	  if(Array.isArray(val)) {
	    return arrayString(val);
	  }
	  if(val === null || typeof val === 'undefined') {
	    return null;
	  }
	  if(typeof val === 'object') {
	    return prepareObject(val, seen);
	  }
	  return val.toString();
	};

	function prepareObject(val, seen) {
	  if(val.toPostgres && typeof val.toPostgres === 'function') {
	    seen = seen || [];
	    if (seen.indexOf(val) !== -1) {
	      throw new Error('circular reference detected while preparing "' + val + '" for query');
	    }
	    seen.push(val);

	    return prepareValue(val.toPostgres(prepareValue), seen);
	  }
	  return JSON.stringify(val);
	}

	function pad(number, digits) {
	  number = ""  +number;
	  while(number.length < digits)
	    number = "0" + number;
	  return number;
	}

	function dateToString(date) {

	  var offset = -date.getTimezoneOffset();
	  var ret = pad(date.getFullYear(), 4) + '-' +
	    pad(date.getMonth() + 1, 2) + '-' +
	    pad(date.getDate(), 2) + 'T' +
	    pad(date.getHours(), 2) + ':' +
	    pad(date.getMinutes(), 2) + ':' +
	    pad(date.getSeconds(), 2) + '.' +
	    pad(date.getMilliseconds(), 3);

	  if(offset < 0) {
	    ret += "-";
	    offset *= -1;
	  }
	  else
	    ret += "+";

	  return ret + pad(Math.floor(offset/60), 2) + ":" + pad(offset%60, 2);
	}

	function dateToStringUTC(date) {
	  
	  var ret = pad(date.getUTCFullYear(), 4) + '-' +
	      pad(date.getUTCMonth() + 1, 2) + '-' +
	      pad(date.getUTCDate(), 2) + 'T' +
	      pad(date.getUTCHours(), 2) + ':' +
	      pad(date.getUTCMinutes(), 2) + ':' +
	      pad(date.getUTCSeconds(), 2) + '.' +
	      pad(date.getUTCMilliseconds(), 3);
	  
	  return ret + "+00:00";
	}

	function normalizeQueryConfig (config, values, callback) {
	  //can take in strings or config objects
	  config = (typeof(config) == 'string') ? { text: config } : config;
	  if(values) {
	    if(typeof values === 'function') {
	      config.callback = values;
	    } else {
	      config.values = values;
	    }
	  }
	  if(callback) {
	    config.callback = callback;
	  }
	  return config;
	}

	module.exports = {
	  prepareValue: function prepareValueWrapper (value) {
	    //this ensures that extra arguments do not get passed into prepareValue
	    //by accident, eg: from calling values.map(utils.prepareValue)
	    return prepareValue(value);
	  },
	  normalizeQueryConfig: normalizeQueryConfig
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);

	var Writer = __webpack_require__(474);
	var Reader = __webpack_require__(475);

	var TEXT_MODE = 0;
	var BINARY_MODE = 1;
	var Connection = function(config) {
	  EventEmitter.call(this);
	  config = config || {};
	  this.stream = config.stream || new net.Stream();
	  this.lastBuffer = false;
	  this.lastOffset = 0;
	  this.buffer = null;
	  this.offset = null;
	  this.encoding = 'utf8';
	  this.parsedStatements = {};
	  this.writer = new Writer();
	  this.ssl = config.ssl || false;
	  this._ending = false;
	  this._mode = TEXT_MODE;
	  this._emitMessage = false;
	  this._reader = new Reader({
	    headerSize: 1,
	    lengthPadding: -4
	  });
	  var self = this;
	  this.on('newListener', function(eventName) {
	    if(eventName == 'message') {
	      self._emitMessage = true;
	    }
	  });
	};

	util.inherits(Connection, EventEmitter);

	Connection.prototype.connect = function(port, host) {

	  if(this.stream.readyState === 'closed') {
	    this.stream.connect(port, host);
	  } else if(this.stream.readyState == 'open') {
	    this.emit('connect');
	  }

	  var self = this;

	  this.stream.on('connect', function() {
	    self.emit('connect');
	  });

	  this.stream.on('error', function(error) {
	    //don't raise ECONNRESET errors - they can & should be ignored
	    //during disconnect
	    if(self._ending && error.code == 'ECONNRESET') {
	      return;
	    }
	    self.emit('error', error);
	  });

	  this.stream.on('close', function() {
	    // NOTE: node-0.10 emits both 'end' and 'close'
	    //       for streams closed by the peer, while
	    //       node-0.8 only emits 'close'
	    self.emit('end');
	  });

	  if(!this.ssl) {
	    return this.attachListeners(this.stream);
	  }

	  this.stream.once('data', function(buffer) {
	    var responseCode = buffer.toString('utf8');
	    if(responseCode != 'S') {
	      return self.emit('error', new Error('The server does not support SSL connections'));
	    }
	    var tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    self.stream = tls.connect({
	      socket: self.stream,
	      servername: host,
	      rejectUnauthorized: self.ssl.rejectUnauthorized,
	      ca: self.ssl.ca,
	      pfx: self.ssl.pfx,
	      key: self.ssl.key,
	      passphrase: self.ssl.passphrase,
	      cert: self.ssl.cert,
	      NPNProtocols: self.ssl.NPNProtocols
	    });
	    self.attachListeners(self.stream);
	    self.emit('sslconnect');

	    self.stream.on('error', function(error){
	      self.emit('error', error);
	    });
	  });
	};

	Connection.prototype.attachListeners = function(stream) {
	  var self = this;
	  stream.on('data', function(buff) {
	    self._reader.addChunk(buff);
	    var packet = self._reader.read();
	    while(packet) {
	      var msg = self.parseMessage(packet);
	      if(self._emitMessage) {
	        self.emit('message', msg);
	      }
	      self.emit(msg.name, msg);
	      packet = self._reader.read();
	    }
	  });
	};

	Connection.prototype.requestSsl = function() {
	  this.checkSslResponse = true;

	  var bodyBuffer = this.writer
	    .addInt16(0x04D2)
	    .addInt16(0x162F).flush();

	  var length = bodyBuffer.length + 4;

	  var buffer = new Writer()
	    .addInt32(length)
	    .add(bodyBuffer)
	    .join();
	  this.stream.write(buffer);
	};

	Connection.prototype.startup = function(config) {
	  var writer = this.writer
	    .addInt16(3)
	    .addInt16(0)
	  ;

	  Object.keys(config).forEach(function(key){
	    var val = config[key];
	    writer.addCString(key).addCString(val);
	  });

	  writer.addCString('client_encoding').addCString("'utf-8'");

	  var bodyBuffer = writer.addCString('').flush();
	  //this message is sent without a code

	  var length = bodyBuffer.length + 4;

	  var buffer = new Writer()
	    .addInt32(length)
	    .add(bodyBuffer)
	    .join();
	  this.stream.write(buffer);
	};

	Connection.prototype.cancel = function(processID, secretKey) {
	  var bodyBuffer = this.writer
	    .addInt16(1234)
	    .addInt16(5678)
	    .addInt32(processID)
	    .addInt32(secretKey)
	    .flush();

	  var length = bodyBuffer.length + 4;

	  var buffer = new Writer()
	    .addInt32(length)
	    .add(bodyBuffer)
	    .join();
	  this.stream.write(buffer);
	};

	Connection.prototype.password = function(password) {
	  //0x70 = 'p'
	  this._send(0x70, this.writer.addCString(password));
	};

	Connection.prototype._send = function(code, more) {
	  if(!this.stream.writable) { return false; }
	  if(more === true) {
	    this.writer.addHeader(code);
	  } else {
	    return this.stream.write(this.writer.flush(code));
	  }
	};

	Connection.prototype.query = function(text) {
	  //0x51 = Q
	  this.stream.write(this.writer.addCString(text).flush(0x51));
	};

	//send parse message
	//"more" === true to buffer the message until flush() is called
	Connection.prototype.parse = function(query, more) {
	  //expect something like this:
	  // { name: 'queryName',
	  //   text: 'select * from blah',
	  //   types: ['int8', 'bool'] }

	  //normalize missing query names to allow for null
	  query.name = query.name || '';
	  if (query.name.length > 63) {
	    console.error('Warning! Postgres only supports 63 characters for query names.');
	    console.error('You supplied', query.name, '(', query.name.length, ')');
	    console.error('This can cause conflicts and silent errors executing queries');
	  }
	  //normalize null type array
	  query.types = query.types || [];
	  var len = query.types.length;
	  var buffer = this.writer
	    .addCString(query.name) //name of query
	    .addCString(query.text) //actual query text
	    .addInt16(len);
	  for(var i = 0; i < len; i++) {
	    buffer.addInt32(query.types[i]);
	  }

	  var code = 0x50;
	  this._send(code, more);
	};

	//send bind message
	//"more" === true to buffer the message until flush() is called
	Connection.prototype.bind = function(config, more) {
	  //normalize config
	  config = config || {};
	  config.portal = config.portal || '';
	  config.statement = config.statement || '';
	  config.binary = config.binary || false;
	  var values = config.values || [];
	  var len = values.length;
	  var useBinary = false;
	  for (var j = 0; j < len; j++)
	    useBinary |= values[j] instanceof Buffer;
	  var buffer = this.writer
	    .addCString(config.portal)
	    .addCString(config.statement);
	  if (!useBinary)
	    buffer.addInt16(0);
	  else {
	    buffer.addInt16(len);
	    for (j = 0; j < len; j++)
	      buffer.addInt16(values[j] instanceof Buffer);
	  }
	  buffer.addInt16(len);
	  for(var i = 0; i < len; i++) {
	    var val = values[i];
	    if(val === null || typeof val === "undefined") {
	      buffer.addInt32(-1);
	    } else if (val instanceof Buffer) {
	      buffer.addInt32(val.length);
	      buffer.add(val);
	    } else {
	      buffer.addInt32(Buffer.byteLength(val));
	      buffer.addString(val);
	    }
	  }

	  if(config.binary) {
	    buffer.addInt16(1); // format codes to use binary
	    buffer.addInt16(1);
	  }
	  else {
	    buffer.addInt16(0); // format codes to use text
	  }
	  //0x42 = 'B'
	  this._send(0x42, more);
	};

	//send execute message
	//"more" === true to buffer the message until flush() is called
	Connection.prototype.execute = function(config, more) {
	  config = config || {};
	  config.portal = config.portal || '';
	  config.rows = config.rows || '';
	  this.writer
	    .addCString(config.portal)
	    .addInt32(config.rows);

	  //0x45 = 'E'
	  this._send(0x45, more);
	};

	var emptyBuffer = Buffer(0);

	Connection.prototype.flush = function() {
	  //0x48 = 'H'
	  this.writer.add(emptyBuffer);
	  this._send(0x48);
	};

	Connection.prototype.sync = function() {
	  //clear out any pending data in the writer
	  this.writer.flush(0);

	  this.writer.add(emptyBuffer);
	  this._ending = true;
	  this._send(0x53);
	};

	Connection.prototype.end = function() {
	  //0x58 = 'X'
	  this.writer.add(emptyBuffer);
	  this._ending = true;
	  this._send(0x58);
	};

	Connection.prototype.close = function(msg, more) {
	  this.writer.addCString(msg.type + (msg.name || ''));
	  this._send(0x43, more);
	};

	Connection.prototype.describe = function(msg, more) {
	  this.writer.addCString(msg.type + (msg.name || ''));
	  this._send(0x44, more);
	};

	Connection.prototype.sendCopyFromChunk = function (chunk) {
	  this.stream.write(this.writer.add(chunk).flush(0x64));
	};

	Connection.prototype.endCopyFrom = function () {
	  this.stream.write(this.writer.add(emptyBuffer).flush(0x63));
	};

	Connection.prototype.sendCopyFail = function (msg) {
	  //this.stream.write(this.writer.add(emptyBuffer).flush(0x66));
	  this.writer.addCString(msg);
	  this._send(0x66);
	};

	var Message = function(name, length) {
	  this.name = name;
	  this.length = length;
	};

	Connection.prototype.parseMessage =  function(buffer) {

	  this.offset = 0;
	  var length = buffer.length + 4;
	  switch(this._reader.header)
	  {

	  case 0x52: //R
	    return this.parseR(buffer, length);

	  case 0x53: //S
	    return this.parseS(buffer, length);

	  case 0x4b: //K
	    return this.parseK(buffer, length);

	  case 0x43: //C
	    return this.parseC(buffer, length);

	  case 0x5a: //Z
	    return this.parseZ(buffer, length);

	  case 0x54: //T
	    return this.parseT(buffer, length);

	  case 0x44: //D
	    return this.parseD(buffer, length);

	  case 0x45: //E
	    return this.parseE(buffer, length);

	  case 0x4e: //N
	    return this.parseN(buffer, length);

	  case 0x31: //1
	    return new Message('parseComplete', length);

	  case 0x32: //2
	    return new Message('bindComplete', length);

	  case 0x33: //3
	    return new Message('closeComplete', length);

	  case 0x41: //A
	    return this.parseA(buffer, length);

	  case 0x6e: //n
	    return new Message('noData', length);

	  case 0x49: //I
	    return new Message('emptyQuery', length);

	  case 0x73: //s
	    return new Message('portalSuspended', length);

	  case 0x47: //G
	    return this.parseG(buffer, length);

	  case 0x48: //H
	    return this.parseH(buffer, length);

	  case 0x63: //c
	    return new Message('copyDone', length);

	  case 0x64: //d
	    return this.parsed(buffer, length);
	  }
	};

	Connection.prototype.parseR = function(buffer, length) {
	  var code = 0;
	  var msg = new Message('authenticationOk', length);
	  if(msg.length === 8) {
	    code = this.parseInt32(buffer);
	    if(code === 3) {
	      msg.name = 'authenticationCleartextPassword';
	    }
	    return msg;
	  }
	  if(msg.length === 12) {
	    code = this.parseInt32(buffer);
	    if(code === 5) { //md5 required
	      msg.name = 'authenticationMD5Password';
	      msg.salt = new Buffer(4);
	      buffer.copy(msg.salt, 0, this.offset, this.offset + 4);
	      this.offset += 4;
	      return msg;
	    }
	  }
	  throw new Error("Unknown authenticationOk message type" + util.inspect(msg));
	};

	Connection.prototype.parseS = function(buffer, length) {
	  var msg = new Message('parameterStatus', length);
	  msg.parameterName = this.parseCString(buffer);
	  msg.parameterValue = this.parseCString(buffer);
	  return msg;
	};

	Connection.prototype.parseK = function(buffer, length) {
	  var msg = new Message('backendKeyData', length);
	  msg.processID = this.parseInt32(buffer);
	  msg.secretKey = this.parseInt32(buffer);
	  return msg;
	};

	Connection.prototype.parseC = function(buffer, length) {
	  var msg = new Message('commandComplete', length);
	  msg.text = this.parseCString(buffer);
	  return msg;
	};

	Connection.prototype.parseZ = function(buffer, length) {
	  var msg = new Message('readyForQuery', length);
	  msg.name = 'readyForQuery';
	  msg.status = this.readString(buffer, 1);
	  return msg;
	};

	var ROW_DESCRIPTION = 'rowDescription';
	Connection.prototype.parseT = function(buffer, length) {
	  var msg = new Message(ROW_DESCRIPTION, length);
	  msg.fieldCount = this.parseInt16(buffer);
	  var fields = [];
	  for(var i = 0; i < msg.fieldCount; i++){
	    fields.push(this.parseField(buffer));
	  }
	  msg.fields = fields;
	  return msg;
	};

	var Field = function() {
	  this.name = null;
	  this.tableID = null;
	  this.columnID = null;
	  this.dataTypeID = null;
	  this.dataTypeSize = null;
	  this.dataTypeModifier = null;
	  this.format = null;
	};

	var FORMAT_TEXT = 'text';
	var FORMAT_BINARY = 'binary';
	Connection.prototype.parseField = function(buffer) {
	  var field = new Field();
	  field.name = this.parseCString(buffer);
	  field.tableID = this.parseInt32(buffer);
	  field.columnID = this.parseInt16(buffer);
	  field.dataTypeID = this.parseInt32(buffer);
	  field.dataTypeSize = this.parseInt16(buffer);
	  field.dataTypeModifier = this.parseInt32(buffer);
	  if(this.parseInt16(buffer) === TEXT_MODE) {
	    this._mode = TEXT_MODE;
	    field.format = FORMAT_TEXT;
	  } else {
	    this._mode = BINARY_MODE;
	    field.format = FORMAT_BINARY;
	  }
	  return field;
	};

	var DATA_ROW = 'dataRow';
	var DataRowMessage = function(length, fieldCount) {
	  this.name = DATA_ROW;
	  this.length = length;
	  this.fieldCount = fieldCount;
	  this.fields = [];
	};


	//extremely hot-path code
	Connection.prototype.parseD = function(buffer, length) {
	  var fieldCount = this.parseInt16(buffer);
	  var msg = new DataRowMessage(length, fieldCount);
	  for(var i = 0; i < fieldCount; i++) {
	    msg.fields.push(this._readValue(buffer));
	  }
	  return msg;
	};

	//extremely hot-path code
	Connection.prototype._readValue = function(buffer) {
	  var length = this.parseInt32(buffer);
	  if(length === -1) return null;
	  if(this._mode === TEXT_MODE) {
	    return this.readString(buffer, length);
	  }
	  return this.readBytes(buffer, length);
	};

	//parses error
	Connection.prototype.parseE = function(buffer, length) {
	  var fields = {};
	  var msg, item;
	  var input = new Message('error', length);
	  var fieldType = this.readString(buffer, 1);
	  while(fieldType != '\0') {
	    fields[fieldType] = this.parseCString(buffer);
	    fieldType = this.readString(buffer, 1);
	  }
	  if(input.name === 'error') {
	    // the msg is an Error instance
	    msg = new Error(fields.M);
	    for (item in input) {
	      // copy input properties to the error
	      if(input.hasOwnProperty(item)) {
	        msg[item] = input[item];
	      }
	    }
	  } else {
	    // the msg is an object literal
	    msg = input;
	    msg.message = fields.M;
	  }
	  msg.severity = fields.S;
	  msg.code = fields.C;
	  msg.detail = fields.D;
	  msg.hint = fields.H;
	  msg.position = fields.P;
	  msg.internalPosition = fields.p;
	  msg.internalQuery = fields.q;
	  msg.where = fields.W;
	  msg.schema = fields.s;
	  msg.table = fields.t;
	  msg.column = fields.c;
	  msg.dataType = fields.d;
	  msg.constraint = fields.n;
	  msg.file = fields.F;
	  msg.line = fields.L;
	  msg.routine = fields.R;
	  return msg;
	};

	//same thing, different name
	Connection.prototype.parseN = function(buffer, length) {
	  var msg = this.parseE(buffer, length);
	  msg.name = 'notice';
	  return msg;
	};

	Connection.prototype.parseA = function(buffer, length) {
	  var msg = new Message('notification', length);
	  msg.processId = this.parseInt32(buffer);
	  msg.channel = this.parseCString(buffer);
	  msg.payload = this.parseCString(buffer);
	  return msg;
	};

	Connection.prototype.parseG = function (buffer, length) {
	  var msg = new Message('copyInResponse', length);
	  return this.parseGH(buffer, msg);
	};

	Connection.prototype.parseH = function(buffer, length) {
	  var msg = new Message('copyOutResponse', length);
	  return this.parseGH(buffer, msg);
	};

	Connection.prototype.parseGH = function (buffer, msg) {
	  var isBinary = buffer[this.offset] !== 0;
	  this.offset++;
	  msg.binary = isBinary;
	  var columnCount = this.parseInt16(buffer);
	  msg.columnTypes = [];
	  for(var i = 0; i<columnCount; i++) {
	    msg.columnTypes.push(this.parseInt16(buffer));
	  }
	  return msg;
	};

	Connection.prototype.parsed = function (buffer, length) {
	  var msg = new Message('copyData', length);
	  msg.chunk = this.readBytes(buffer, msg.length - 4);
	  return msg;
	};

	Connection.prototype.parseInt32 = function(buffer) {
	  var value = buffer.readInt32BE(this.offset, true);
	  this.offset += 4;
	  return value;
	};

	Connection.prototype.parseInt16 = function(buffer) {
	  var value = buffer.readInt16BE(this.offset, true);
	  this.offset += 2;
	  return value;
	};

	Connection.prototype.readString = function(buffer, length) {
	  return buffer.toString(this.encoding, this.offset, (this.offset += length));
	};

	Connection.prototype.readBytes = function(buffer, length) {
	  return buffer.slice(this.offset, this.offset += length);
	};

	Connection.prototype.parseCString = function(buffer) {
	  var start = this.offset;
	  while(buffer[this.offset++] !== 0) { }
	  return buffer.toString(this.encoding, start, this.offset - 1);
	};
	//end parsing methods
	module.exports = Connection;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//binary data writer tuned for creating
	//postgres message packets as effeciently as possible by reusing the
	//same buffer to avoid memcpy and limit memory allocations
	var Writer = module.exports = function(size) {
	  this.size = size || 1024;
	  this.buffer = Buffer(this.size + 5);
	  this.offset = 5;
	  this.headerPosition = 0;
	};

	//resizes internal buffer if not enough size left
	Writer.prototype._ensure = function(size) {
	  var remaining = this.buffer.length - this.offset;
	  if(remaining < size) {
	    var oldBuffer = this.buffer;
	    // exponential growth factor of around ~ 1.5
	    // https://stackoverflow.com/questions/2269063/buffer-growth-strategy
	    var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
	    this.buffer = new Buffer(newSize);
	    oldBuffer.copy(this.buffer);
	  }
	};

	Writer.prototype.addInt32 = function(num) {
	  this._ensure(4);
	  this.buffer[this.offset++] = (num >>> 24 & 0xFF);
	  this.buffer[this.offset++] = (num >>> 16 & 0xFF);
	  this.buffer[this.offset++] = (num >>>  8 & 0xFF);
	  this.buffer[this.offset++] = (num >>>  0 & 0xFF);
	  return this;
	};

	Writer.prototype.addInt16 = function(num) {
	  this._ensure(2);
	  this.buffer[this.offset++] = (num >>>  8 & 0xFF);
	  this.buffer[this.offset++] = (num >>>  0 & 0xFF);
	  return this;
	};

	//for versions of node requiring 'length' as 3rd argument to buffer.write
	var writeString = function(buffer, string, offset, len) {
	  buffer.write(string, offset, len);
	};

	//overwrite function for older versions of node
	if(Buffer.prototype.write.length === 3) {
	  writeString = function(buffer, string, offset, len) {
	    buffer.write(string, offset);
	  };
	}

	Writer.prototype.addCString = function(string) {
	  //just write a 0 for empty or null strings
	  if(!string) {
	    this._ensure(1);
	  } else {
	    var len = Buffer.byteLength(string);
	    this._ensure(len + 1); //+1 for null terminator
	    writeString(this.buffer, string, this.offset, len);
	    this.offset += len;
	  }

	  this.buffer[this.offset++] = 0; // null terminator
	  return this;
	};

	Writer.prototype.addChar = function(c) {
	  this._ensure(1);
	  writeString(this.buffer, c, this.offset, 1);
	  this.offset++;
	  return this;
	};

	Writer.prototype.addString = function(string) {
	  string = string || "";
	  var len = Buffer.byteLength(string);
	  this._ensure(len);
	  this.buffer.write(string, this.offset);
	  this.offset += len;
	  return this;
	};

	Writer.prototype.getByteLength = function() {
	  return this.offset - 5;
	};

	Writer.prototype.add = function(otherBuffer) {
	  this._ensure(otherBuffer.length);
	  otherBuffer.copy(this.buffer, this.offset);
	  this.offset += otherBuffer.length;
	  return this;
	};

	Writer.prototype.clear = function() {
	  this.offset = 5;
	  this.headerPosition = 0;
	  this.lastEnd = 0;
	};

	//appends a header block to all the written data since the last
	//subsequent header or to the beginning if there is only one data block
	Writer.prototype.addHeader = function(code, last) {
	  var origOffset = this.offset;
	  this.offset = this.headerPosition;
	  this.buffer[this.offset++] = code;
	  //length is everything in this packet minus the code
	  this.addInt32(origOffset - (this.headerPosition+1));
	  //set next header position
	  this.headerPosition = origOffset;
	  //make space for next header
	  this.offset = origOffset;
	  if(!last) {
	    this._ensure(5);
	    this.offset += 5;
	  }
	};

	Writer.prototype.join = function(code) {
	  if(code) {
	    this.addHeader(code, true);
	  }
	  return this.buffer.slice(code ? 0 : 5, this.offset);
	};

	Writer.prototype.flush = function(code) {
	  var result = this.join(code);
	  this.clear();
	  return result;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(476)

	var Reader = module.exports = function(options) {
	  //TODO - remove for version 1.0
	  if(typeof options == 'number') {
	    options = { headerSize: options }
	  }
	  options = options || {}
	  this.offset = 0
	  this.lastChunk = false
	  this.chunk = null
	  this.headerSize = options.headerSize || 0
	  this.lengthPadding = options.lengthPadding || 0
	  this.header = null
	  assert(this.headerSize < 2, 'pre-length header of more than 1 byte length not currently supported')
	}

	Reader.prototype.addChunk = function(chunk) {
	  this.offset = 0
	  this.chunk = chunk
	  if(this.lastChunk) {
	    this.chunk = Buffer.concat([this.lastChunk, this.chunk])
	    this.lastChunk = false
	  }
	}

	Reader.prototype._save = function() {
	  //save any unread chunks for next read
	  if(this.offset < this.chunk.length) {
	    this.lastChunk = this.chunk.slice(this.offset)
	  }
	  return false
	}

	Reader.prototype.read = function() {
	  if(this.chunk.length < (this.headerSize + 4 + this.offset)) {
	    return this._save()
	  }

	  if(this.headerSize) {
	    this.header = this.chunk[this.offset]
	  }

	  //read length of next item
	  var length = this.chunk.readUInt32BE(this.offset + this.headerSize) + this.lengthPadding

	  //next item spans more chunks than we have
	  var remaining = this.chunk.length - (this.offset + 4 + this.headerSize)
	  if(length > remaining) {
	    return this._save()
	  }

	  this.offset += (this.headerSize + 4)
	  var result = this.chunk.slice(this.offset, this.offset + length)
	  this.offset += length
	  return result
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38).Buffer))

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(48);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(64).EventEmitter;

	var defaults = __webpack_require__(468);
	var genericPool = __webpack_require__(367);


	module.exports = function(Client) {
	  var pools = {
	    Client: Client,
	    //dictionary of all key:pool pairs
	    all: {},
	    //reference to the client constructor - can override in tests or for require('pg').native
	    getOrCreate: function(clientConfig) {
	      clientConfig = clientConfig || {};
	      var name = JSON.stringify(clientConfig);
	      var pool = pools.all[name];
	      if(pool) {
	        return pool;
	      }
	      pool = genericPool.Pool({
	        name: name,
	        max: clientConfig.poolSize || defaults.poolSize,
	        idleTimeoutMillis: clientConfig.poolIdleTimeout || defaults.poolIdleTimeout,
	        reapIntervalMillis: clientConfig.reapIntervalMillis || defaults.reapIntervalMillis,
	        log: clientConfig.poolLog || defaults.poolLog,
	        create: function(cb) {
	          var client = new pools.Client(clientConfig);
	          // Ignore errors on pooled clients until they are connected.
	          client.on('error', Function.prototype);
	          client.connect(function(err) {
	            if(err) return cb(err, null);

	            // Remove the noop error handler after a connection has been established.
	            client.removeListener('error', Function.prototype);

	            //handle connected client background errors by emitting event
	            //via the pg object and then removing errored client from the pool
	            client.on('error', function(e) {
	              pool.emit('error', e, client);

	              // If the client is already being destroyed, the error
	              // occurred during stream ending. Do not attempt to destroy
	              // the client again.
	              if (!client._destroying) {
	                pool.destroy(client);
	              }
	            });

	            // Remove connection from pool on disconnect
	            client.on('end', function(e) {
	              // Do not enter infinite loop between pool.destroy
	              // and client 'end' event...
	              if ( ! client._destroying ) {
	                pool.destroy(client);
	              }
	            });
	            client.poolCount = 0;
	            return cb(null, client);
	          });
	        },
	        destroy: function(client) {
	          client._destroying = true;
	          client.poolCount = undefined;
	          client.end();
	        }
	      });
	      pools.all[name] = pool;
	      //mixin EventEmitter to pool
	      EventEmitter.call(pool);
	      for(var key in EventEmitter.prototype) {
	        if(EventEmitter.prototype.hasOwnProperty(key)) {
	          pool[key] = EventEmitter.prototype[key];
	        }
	      }
	      //monkey-patch with connect method
	      pool.connect = function(cb) {
	        var domain = process.domain;
	        pool.acquire(function(err, client) {
	          if(domain) {
	            cb = domain.bind(cb);
	          }
	          if(err)  return cb(err, null, function() {/*NOOP*/});
	          client.poolCount++;
	          cb(null, client, function(err) {
	            if(err) {
	              pool.destroy(client);
	            } else {
	              pool.release(client);
	            }
	          });
	        });
	      };
	      return pool;
	    }
	  };

	  return pools;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var Native = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"pg-native\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var TypeOverrides = __webpack_require__(456);
	var semver = __webpack_require__(479);
	var pkg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var assert = __webpack_require__(476);
	var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);
	var ConnectionParameters = __webpack_require__(467);

	var msg = 'Version >= ' + pkg.minNativeVersion + ' of pg-native required.';
	assert(semver.gte(Native.version, pkg.minNativeVersion), msg);

	var NativeQuery = __webpack_require__(481);

	var Client = module.exports = function(config) {
	  EventEmitter.call(this);
	  config = config || {};

	  this._types = new TypeOverrides(config.types);

	  this.native = new Native({
	    types: this._types
	  });

	  this._queryQueue = [];
	  this._connected = false;

	  //keep these on the object for legacy reasons
	  //for the time being. TODO: deprecate all this jazz
	  var cp = this.connectionParameters = new ConnectionParameters(config);
	  this.user = cp.user;
	  this.password = cp.password;
	  this.database = cp.database;
	  this.host = cp.host;
	  this.port = cp.port;

	  //a hash to hold named queries
	  this.namedQueries = {};
	};

	util.inherits(Client, EventEmitter);

	//connect to the backend
	//pass an optional callback to be called once connected
	//or with an error if there was a connection error
	//if no callback is passed and there is a connection error
	//the client will emit an error event.
	Client.prototype.connect = function(cb) {
	  var self = this;

	  var onError = function(err) {
	    if(cb) return cb(err);
	    return self.emit('error', err);
	  };

	  this.connectionParameters.getLibpqConnectionString(function(err, conString) {
	    if(err) return onError(err);
	    self.native.connect(conString, function(err) {
	      if(err) return onError(err);

	      //set internal states to connected
	      self._connected = true;

	      //handle connection errors from the native layer
	      self.native.on('error', function(err) {
	        //error will be handled by active query
	        if(self._activeQuery && self._activeQuery.state != 'end') {
	          return;
	        }
	        self.emit('error', err);
	      });

	      self.native.on('notification', function(msg) {
	        self.emit('notification', {
	          channel: msg.relname,
	          payload: msg.extra
	        });
	      });

	      //signal we are connected now
	      self.emit('connect');
	      self._pulseQueryQueue(true);

	      //possibly call the optional callback
	      if(cb) cb();
	    });
	  });
	};

	//send a query to the server
	//this method is highly overloaded to take
	//1) string query, optional array of parameters, optional function callback
	//2) object query with {
	//    string query
	//    optional array values,
	//    optional function callback instead of as a separate parameter
	//    optional string name to name & cache the query plan
	//    optional string rowMode = 'array' for an array of results
	//  }
	Client.prototype.query = function(config, values, callback) {
	  var query = new NativeQuery(this.native);

	  //support query('text', ...) style calls
	  if(typeof config == 'string') {
	    query.text = config;
	  }

	  //support passing everything in via a config object
	  if(typeof config == 'object') {
	    query.text = config.text;
	    query.values = config.values;
	    query.name = config.name;
	    query.callback = config.callback;
	    query._arrayMode = config.rowMode == 'array';
	  }

	  //support query({...}, function() {}) style calls
	  //& support query(..., ['values'], ...) style calls
	  if(typeof values == 'function') {
	    query.callback = values;
	  }
	  else if(util.isArray(values)) {
	    query.values = values;
	  }
	  if(typeof callback == 'function') {
	    query.callback = callback;
	  }

	  this._queryQueue.push(query);
	  this._pulseQueryQueue();
	  return query;
	};

	//disconnect from the backend server
	Client.prototype.end = function(cb) {
	  var self = this;
	  if(!this._connected) {
	    this.once('connect', this.end.bind(this, cb));
	  }
	  this.native.end(function() {
	    //send an error to the active query
	    if(self._hasActiveQuery()) {
	      var msg = 'Connection terminated';
	      self._queryQueue.length = 0;
	      self._activeQuery.handleError(new Error(msg));
	    }
	    self.emit('end');
	    if(cb) cb();
	  });
	};

	Client.prototype._hasActiveQuery = function() {
	  return this._activeQuery && this._activeQuery.state != 'error' && this._activeQuery.state != 'end';
	};

	Client.prototype._pulseQueryQueue = function(initialConnection) {
	  if(!this._connected) {
	    return;
	  }
	  if(this._hasActiveQuery()) {
	    return;
	  }
	  var query = this._queryQueue.shift();
	  if(!query) {
	    if(!initialConnection) {
	      this.emit('drain');
	    }
	    return;
	  }
	  this._activeQuery = query;
	  query.submit(this);
	  var self = this;
	  query.once('_done', function() {
	    self._pulseQueryQueue();
	  });
	};

	//attempt to cancel an in-progress query
	Client.prototype.cancel = function(query) {
	  if(this._activeQuery == query) {
	    this.native.cancel(function() {});
	  } else if (this._queryQueue.indexOf(query) != -1) {
	    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);
	  }
	};

	Client.prototype.setTypeParser = function(oid, format, parseFn) {
	  return this._types.setTypeParser(oid, format, parseFn);
	};

	Client.prototype.getTypeParser = function(oid, format) {
	  return this._types.getTypeParser(oid, format);
	};


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(exports) {

	// export the class if we are in a Node-like system.
	if (typeof module === 'object' && module.exports === exports)
	  exports = module.exports = SemVer;

	// The debug function is excluded entirely from the minified version.

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';


	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  ;
	  if (!re[i])
	    re[i] = new RegExp(src[i]);
	}

	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer)
	    return version;

	  if (typeof version !== 'string')
	    return null;

	  if (version.length > MAX_LENGTH)
	    return null;

	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version))
	    return null;

	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}

	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}


	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}

	exports.SemVer = SemVer;

	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose)
	      return version;
	    else
	      version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }

	  if (version.length > MAX_LENGTH)
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

	  if (!(this instanceof SemVer))
	    return new SemVer(version, loose);

	  ;
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

	  if (!m)
	    throw new TypeError('Invalid Version: ' + version);

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
	    throw new TypeError('Invalid major version')

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
	    throw new TypeError('Invalid minor version')

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
	    throw new TypeError('Invalid patch version')

	  // numberify any prerelease numeric ids
	  if (!m[4])
	    this.prerelease = [];
	  else
	    this.prerelease = m[4].split('.').map(function(id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id
	        if (num >= 0 && num < MAX_SAFE_INTEGER)
	          return num
	      }
	      return id;
	    });

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function() {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length)
	    this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};

	SemVer.prototype.inspect = function() {
	  return '<SemVer "' + this + '">';
	};

	SemVer.prototype.toString = function() {
	  return this.version;
	};

	SemVer.prototype.compare = function(other) {
	  ;
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return this.compareMain(other) || this.comparePre(other);
	};

	SemVer.prototype.compareMain = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch);
	};

	SemVer.prototype.comparePre = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length)
	    return -1;
	  else if (!this.prerelease.length && other.prerelease.length)
	    return 1;
	  else if (!this.prerelease.length && !other.prerelease.length)
	    return 0;

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    ;
	    if (a === undefined && b === undefined)
	      return 0;
	    else if (b === undefined)
	      return 1;
	    else if (a === undefined)
	      return -1;
	    else if (a === b)
	      continue;
	    else
	      return compareIdentifiers(a, b);
	  } while (++i);
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function(release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0)
	        this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
	        this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0)
	        this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0)
	        this.patch++;
	      this.prerelease = [];
	      break;
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0)
	        this.prerelease = [0];
	      else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) // didn't increment anything
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1]))
	            this.prerelease = [identifier, 0];
	        } else
	          this.prerelease = [identifier, 0];
	      }
	      break;

	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  return this;
	};

	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof(loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}

	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre'+key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return (anum && !bnum) ? -1 :
	         (bnum && !anum) ? 1 :
	         a < b ? -1 :
	         a > b ? 1 :
	         0;
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}

	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}

	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}

	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}

	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(b);
	}

	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}

	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}

	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.compare(a, b, loose);
	  });
	}

	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}

	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}

	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}

	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}

	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}

	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}

	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}

	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '': case '=': case '==': ret = eq(a, b, loose); break;
	    case '!=': ret = neq(a, b, loose); break;
	    case '>': ret = gt(a, b, loose); break;
	    case '>=': ret = gte(a, b, loose); break;
	    case '<': ret = lt(a, b, loose); break;
	    case '<=': ret = lte(a, b, loose); break;
	    default: throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}

	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose)
	      return comp;
	    else
	      comp = comp.value;
	  }

	  if (!(this instanceof Comparator))
	    return new Comparator(comp, loose);

	  ;
	  this.loose = loose;
	  this.parse(comp);

	  if (this.semver === ANY)
	    this.value = '';
	  else
	    this.value = this.operator + this.semver.version;

	  ;
	}

	var ANY = {};
	Comparator.prototype.parse = function(comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m)
	    throw new TypeError('Invalid comparator: ' + comp);

	  this.operator = m[1];
	  if (this.operator === '=')
	    this.operator = '';

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2])
	    this.semver = ANY;
	  else
	    this.semver = new SemVer(m[2], this.loose);
	};

	Comparator.prototype.inspect = function() {
	  return '<SemVer Comparator "' + this + '">';
	};

	Comparator.prototype.toString = function() {
	  return this.value;
	};

	Comparator.prototype.test = function(version) {
	  ;

	  if (this.semver === ANY)
	    return true;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  return cmp(version, this.operator, this.semver, this.loose);
	};


	exports.Range = Range;
	function Range(range, loose) {
	  if ((range instanceof Range) && range.loose === loose)
	    return range;

	  if (!(this instanceof Range))
	    return new Range(range, loose);

	  this.loose = loose;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function(c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length;
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }

	  this.format();
	}

	Range.prototype.inspect = function() {
	  return '<SemVer Range "' + this.range + '">';
	};

	Range.prototype.format = function() {
	  this.range = this.set.map(function(comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};

	Range.prototype.toString = function() {
	  return this.range;
	};

	Range.prototype.parseRange = function(range) {
	  var loose = this.loose;
	  range = range.trim();
	  ;
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  ;
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  ;

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function(comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function(comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function(comp) {
	    return new Comparator(comp, loose);
	  });

	  return set;
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function(comp) {
	    return comp.map(function(c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator(comp, loose) {
	  ;
	  comp = replaceCarets(comp, loose);
	  ;
	  comp = replaceTildes(comp, loose);
	  ;
	  comp = replaceXRanges(comp, loose);
	  ;
	  comp = replaceStars(comp, loose);
	  ;
	  return comp;
	}

	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}

	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    ;
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p))
	      // ~1.2 == >=1.2.0- <1.3.0-
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    else if (pr) {
	      ;
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';

	    ;
	    return ret;
	  });
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}

	function replaceCaret(comp, loose) {
	  ;
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    ;
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p)) {
	      if (M === '0')
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      else
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      ;
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p + pr +
	              ' <' + (+M + 1) + '.0.0';
	    } else {
	      ;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	    }

	    ;
	    return ret;
	  });
	}

	function replaceXRanges(comp, loose) {
	  ;
	  return comp.split(/\s+/).map(function(comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}

	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
	    ;
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX)
	      gtlt = '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // replace X with 0
	      if (xm)
	        m = 0;
	      if (xp)
	        p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<'
	        if (xm)
	          M = +M + 1
	        else
	          m = +m + 1
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    ;

	    return ret;
	  });
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars(comp, loose) {
	  ;
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '');
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace($0,
	                       from, fM, fm, fp, fpr, fb,
	                       to, tM, tm, tp, tpr, tb) {

	  if (isX(fM))
	    from = '';
	  else if (isX(fm))
	    from = '>=' + fM + '.0.0';
	  else if (isX(fp))
	    from = '>=' + fM + '.' + fm + '.0';
	  else
	    from = '>=' + from;

	  if (isX(tM))
	    to = '';
	  else if (isX(tm))
	    to = '<' + (+tM + 1) + '.0.0';
	  else if (isX(tp))
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  else if (tpr)
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  else
	    to = '<=' + to;

	  return (from + ' ' + to).trim();
	}


	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function(version) {
	  if (!version)
	    return false;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version))
	      return true;
	  }
	  return false;
	};

	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version))
	      return false;
	  }

	  if (version.prerelease.length) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (var i = 0; i < set.length; i++) {
	      ;
	      if (set[i].semver === ANY)
	        continue;

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch)
	          return true;
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false;
	  }

	  return true;
	}

	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return rcompare(a, b, loose);
	  })[0] || null;
	}

	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}

	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, loose)) {
	    return false;
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function(comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0')
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}

	// Use the define() function if we're in AMD land
	if (true)
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (exports), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	})(
	   true ? exports :
	  typeof define === 'function' && define.amd ? {} :
	  semver = {}
	);


/***/ },
/* 480 */,
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {var EventEmitter = __webpack_require__(64).EventEmitter;
	var util = __webpack_require__(124);
	var utils = __webpack_require__(472);
	var NativeResult = __webpack_require__(482);

	var NativeQuery = module.exports = function(native) {
	  EventEmitter.call(this);
	  this.native = native;
	  this.text = null;
	  this.values = null;
	  this.name = null;
	  this.callback = null;
	  this.state = 'new';
	  this._arrayMode = false;

	  //if the 'row' event is listened for
	  //then emit them as they come in
	  //without setting singleRowMode to true
	  //this has almost no meaning because libpq
	  //reads all rows into memory befor returning any
	  this._emitRowEvents = false;
	  this.on('newListener', function(event) {
	    if(event === 'row') this._emitRowEvents = true;
	  }.bind(this));
	};

	util.inherits(NativeQuery, EventEmitter);

	NativeQuery.prototype.handleError = function(err) {
	  var self = this;
	  //copy pq error fields into the error object
	  var fields = self.native.pq.resultErrorFields();
	  if(fields) {
	    for(var key in fields) {
	      err[key] = fields[key];
	    }
	  }
	  if(self.callback) {
	    self.callback(err);
	  } else {
	    self.emit('error', err);
	  }
	  self.state = 'error';
	};

	NativeQuery.prototype.submit = function(client) {
	  this.state = 'running';
	  var self = this;
	  client.native.arrayMode = this._arrayMode;

	  var after = function(err, rows) {
	    client.native.arrayMode = false;
	    setImmediate(function() {
	      self.emit('_done');
	    });

	    //handle possible query error
	    if(err) {
	      return self.handleError(err);
	    }

	    var result = new NativeResult();
	    result.addCommandComplete(self.native.pq);
	    result.rows = rows;

	    //emit row events for each row in the result
	    if(self._emitRowEvents) {
	      rows.forEach(function(row) {
	        self.emit('row', row, result);
	      });
	    }


	    //handle successful result
	    self.state = 'end';
	    self.emit('end', result);
	    if(self.callback) {
	      self.callback(null, result);
	    }
	  };

	  if(process.domain) {
	    after = process.domain.bind(after);
	  }

	  //named query
	  if(this.name) {
	    if (this.name.length > 63) {
	      console.error('Warning! Postgres only supports 63 characters for query names.');
	      console.error('You supplied', this.name, '(', this.name.length, ')');
	      console.error('This can cause conflicts and silent errors executing queries');
	    }
	    var values = (this.values||[]).map(utils.prepareValue);

	    //check if the client has already executed this named query
	    //if so...just execute it again - skip the planning phase
	    if(client.namedQueries[this.name]) {
	      return this.native.execute(this.name, values, after);
	    }
	    //plan the named query the first time, then execute it
	    return this.native.prepare(this.name, this.text, values.length, function(err) {
	      if(err) return after(err);
	      client.namedQueries[self.name] = true;
	      return self.native.execute(self.name, values, after);
	    });
	  }
	  else if(this.values) {
	    var vals = this.values.map(utils.prepareValue);
	    this.native.query(this.text, vals, after);
	  } else {
	    this.native.query(this.text, after);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(76).setImmediate, __webpack_require__(28)))

/***/ },
/* 482 */
/***/ function(module, exports) {

	var NativeResult = module.exports = function(pq) {
	  this.command = null;
	  this.rowCount = 0;
	  this.rows = null;
	  this.fields = null;
	};

	NativeResult.prototype.addCommandComplete = function(pq) {
	  this.command = pq.cmdStatus().split(' ')[0];
	  this.rowCount = parseInt(pq.cmdTuples(), 10);
	  var nfields = pq.nfields();
	  if(nfields < 1) return;

	  this.fields = [];
	  for(var i = 0; i < nfields; i++) {
	    this.fields.push({
	      name: pq.fname(i),
	      dataTypeID: pq.ftype(i)
	    });
	  }
	};

	NativeResult.prototype.addRow = function(row) {
	  // This is empty to ensure pg code doesn't break when switching to pg-native
	  // pg-native loads all rows into the final result object by default.
	  // This is because libpg loads all rows into memory before passing the result
	  // to pg-native.
	};


/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(127)
	  , Abstract = __webpack_require__(364)
	  , ConnectionManager = __webpack_require__(484)
	  , Query = __webpack_require__(486)
	  , QueryGenerator = __webpack_require__(487)
	  , DataTypes = __webpack_require__(123).sqlite;

	var SqliteDialect = function(sequelize) {
	  this.sequelize = sequelize;
	  this.connectionManager = new ConnectionManager(this, sequelize);
	  this.QueryGenerator = _.extend({}, QueryGenerator, {
	    options: sequelize.options,
	    _dialect: this,
	    sequelize: sequelize
	  });
	};

	SqliteDialect.prototype.supports = _.merge(_.cloneDeep(Abstract.prototype.supports), {
	  'DEFAULT': false,
	  'DEFAULT VALUES': true,
	  'UNION ALL': false,
	  'IGNORE': ' OR IGNORE',
	  index: {
	    using: false
	  },
	  transactionOptions: {
	    type: true
	  },
	  joinTableDependent: false,
	  groupedLimit: false,
	  ignoreDuplicates: ' OR IGNORE'
	});

	ConnectionManager.prototype.defaultVersion = '3.8.0';
	SqliteDialect.prototype.Query = Query;
	SqliteDialect.prototype.DataTypes = DataTypes;
	SqliteDialect.prototype.name = 'sqlite';
	SqliteDialect.prototype.TICK_CHAR = '`';
	SqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;
	SqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;

	module.exports = SqliteDialect;


/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var AbstractConnectionManager = __webpack_require__(366)
	  , ConnectionManager
	  , Utils = __webpack_require__(122)
	  , Promise = __webpack_require__(335)
	  , dataTypes = __webpack_require__(123).sqlite
	  , sequelizeErrors = __webpack_require__(130)
	  , parserStore = __webpack_require__(440)('sqlite');

	ConnectionManager = function(dialect, sequelize) {
	  this.sequelize = sequelize;
	  this.config = sequelize.config;
	  this.dialect = dialect;
	  this.dialectName = this.sequelize.options.dialect;
	  this.connections = {};

	  // We attempt to parse file location from a connection uri but we shouldn't match sequelize default host.
	  if (this.sequelize.options.host === 'localhost') delete this.sequelize.options.host;

	  try {
	    this.lib = __webpack_require__(485)(sequelize.config.dialectModulePath || 'sqlite3').verbose();
	  } catch (err) {
	    if (err.code === 'MODULE_NOT_FOUND') {
	      throw new Error('Please install sqlite3 package manually');
	    }
	    throw err;
	  }

	  this.refreshTypeParser(dataTypes);
	};

	Utils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);

	// Expose this as a method so that the parsing may be updated when the user has added additional, custom types
	ConnectionManager.prototype.$refreshTypeParser = function (dataType) {
	  parserStore.refresh(dataType);
	};

	ConnectionManager.prototype.$clearTypeParser = function () {
	  parserStore.clear();
	};

	ConnectionManager.prototype.getConnection = function(options) {
	  var self = this;
	  options = options || {};
	  options.uuid = options.uuid || 'default';
	  options.inMemory = ((self.sequelize.options.storage || self.sequelize.options.host || ':memory:') === ':memory:') ? 1 : 0;

	  var dialectOptions = self.sequelize.options.dialectOptions;
	  options.readWriteMode = dialectOptions && dialectOptions.mode;

	  if (self.connections[options.inMemory || options.uuid]) {
	    return Promise.resolve(self.connections[options.inMemory || options.uuid]);
	  }

	  return new Promise(function (resolve, reject) {
	    self.connections[options.inMemory || options.uuid] = new self.lib.Database(
	      self.sequelize.options.storage || self.sequelize.options.host || ':memory:',
	      options.readWriteMode || (self.lib.OPEN_READWRITE | self.lib.OPEN_CREATE), // default mode
	      function(err) {
	        if (err) {
	          if (err.code === 'SQLITE_CANTOPEN') return reject(new sequelizeErrors.ConnectionError(err));
	          return reject(new sequelizeErrors.ConnectionError(err));
	        }
	        resolve(self.connections[options.inMemory || options.uuid]);
	      }
	    );
	  }).tap(function (connection) {
	    if (self.sequelize.options.foreignKeys !== false) {
	      // Make it possible to define and use foreign key constraints unless
	      // explicitly disallowed. It's still opt-in per relation
	      connection.run('PRAGMA FOREIGN_KEYS=ON');
	    }
	  });
	};

	ConnectionManager.prototype.releaseConnection = function(connection, force) {
	  if (connection.filename === ':memory:' && force !== true) return;

	  if (connection.uuid) {
	    connection.close();
	    delete this.connections[connection.uuid];
	  }
	};

	module.exports = ConnectionManager;


/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./connection-manager": 484,
		"./connection-manager.js": 484,
		"./data-types": 328,
		"./data-types.js": 328,
		"./index": 483,
		"./index.js": 483,
		"./query": 486,
		"./query-generator": 487,
		"./query-generator.js": 487,
		"./query-interface": 358,
		"./query-interface.js": 358,
		"./query.js": 486
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 485;


/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Utils = __webpack_require__(122)
	  , _ = __webpack_require__(127)
	  , Promise = __webpack_require__(335)
	  , AbstractQuery = __webpack_require__(371)
	  , QueryTypes = __webpack_require__(349)
	  , sequelizeErrors = __webpack_require__(130)
	  , parserStore = __webpack_require__(440)('sqlite');

	var Query = function(database, sequelize, options) {
	  this.database = database;
	  this.sequelize = sequelize;
	  this.instance = options.instance;
	  this.model = options.model;
	  this.options = _.extend({
	    logging: console.log,
	    plain: false,
	    raw: false
	  }, options || {});

	  this.checkLoggingOption();
	};
	Utils.inherit(Query, AbstractQuery);

	Query.prototype.getInsertIdField = function() {
	  return 'lastID';
	};

	/**
	 * rewrite query with parameters
	 */
	Query.formatBindParameters = function(sql, values, dialect) {
	  var bindParam = [];
	  if (Array.isArray(values)) {
	    bindParam = {};
	    values.forEach(function(v, i) {
	      bindParam['$'+(i+1)] = v;
	    });
	    sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
	  } else {
	    bindParam = {};
	    if (typeof values === 'object') {
	      Object.keys(values).forEach(function(k) {
	        bindParam['$'+k] = values[k];
	      });
	    }
	    sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
	  }
	  return [sql, bindParam];
	};

	Query.prototype.$collectModels = function(include, prefix) {
	  var ret = {};

	  if (include) {
	    include.forEach(function (include) {
	      var key;
	      if (!prefix) {
	        key = include.as;
	      } else {
	        key = prefix + '.' + include.as;
	      }
	      ret[key] = include.model;

	      if (include.include) {
	        _.merge(ret, this.$collectModels(include.include, key));
	      }
	    }, this);
	  }

	  return ret;
	};

	Query.prototype.run = function(sql, parameters) {
	  var self = this
	    , promise;

	  this.sql = sql;
	  var method = self.getDatabaseMethod();
	  if (method === 'exec') {
	    // exec does not support bind parameter
	    sql = AbstractQuery.formatBindParameters(sql, self.options.bind, self.options.dialect, { skipUnescape: true })[0];
	    this.sql = sql;
	  }

	  //do we need benchmark for this query execution
	  var benchmark = this.sequelize.options.benchmark || this.options.benchmark;

	  if (benchmark) {
	    var queryBegin = Date.now();
	  } else {
	    this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);
	  }

	  promise = new Promise(function(resolve) {
	    var columnTypes = {};
	    self.database.serialize(function() {
	      var executeSql = function() {
	        if (self.sql.indexOf('-- ') === 0) {
	          return resolve();
	        } else {
	          resolve(new Promise(function(resolve, reject) {
	            var afterExecute = function(err, results) {

	              if (benchmark) {
	                self.sequelize.log('Executed (' + (self.database.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);
	              }

	              if (err) {
	                err.sql = self.sql;
	                reject(self.formatError(err));
	              } else {
	                var metaData = this
	                  , result = self.instance;

	                // add the inserted row id to the instance
	                if (self.isInsertQuery(results, metaData)) {
	                  self.handleInsertQuery(results, metaData);

	                  if (!self.instance) {
	                    result = metaData[self.getInsertIdField()];
	                  }
	                }

	                if (self.sql.indexOf('sqlite_master') !== -1) {
	                  result = results.map(function(resultSet) { return resultSet.name; });
	                } else if (self.isSelectQuery()) {
	                  if (!self.options.raw) {
	                    // This is a map of prefix strings to models, e.g. user.projects -> Project model
	                    var prefixes = self.$collectModels(self.options.include);

	                    results = results.map(function(result) {
	                      return _.mapValues(result, function (value, name) {
	                        var model;
	                        if (name.indexOf('.') !== -1) {
	                          var lastind = name.lastIndexOf('.');

	                          model = prefixes[name.substr(0, lastind)];

	                          name = name.substr(lastind + 1);
	                        } else {
	                          model = self.options.model;
	                        }

	                        var tableName = model.getTableName().toString().replace(/`/g, '')
	                          , tableTypes = columnTypes[tableName] || {};

	                        if (tableTypes && !(name in tableTypes)) {
	                          // The column is aliased
	                           _.forOwn(model.rawAttributes, function (attribute, key) {
	                            if (name === key && attribute.field) {
	                              name = attribute.field;
	                              return false;
	                            }
	                          });
	                        }

	                        var type = tableTypes[name];
	                        if (type) {
	                          if (type.indexOf('(') !== -1) {
	                            // Remove the lenght part
	                            type = type.substr(0, type.indexOf('('));
	                          }
	                          type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');
	                          type = type.trim().toUpperCase();
	                          var parse = parserStore.get(type);

	                          if (value !== null && parse) {
	                            return parse(value, { timezone: self.sequelize.options.timezone});
	                          }
	                        }
	                        return value;
	                      });
	                    });
	                  }

	                  result = self.handleSelectQuery(results);
	                } else if (self.isShowOrDescribeQuery()) {
	                  result = results;
	                } else if (self.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {
	                  result = self.handleShowIndexesQuery(results);
	                } else if (self.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {
	                  result = results;
	                } else if (self.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {
	                  // this is the sqlite way of getting the metadata of a table
	                  result = {};

	                  var defaultValue;
	                  results.forEach(function(_result) {
	                    if (_result.dflt_value === null) {
	                      // Column schema omits any "DEFAULT ..."
	                      defaultValue = undefined;
	                    } else if (_result.dflt_value === 'NULL') {
	                      // Column schema is a "DEFAULT NULL"
	                      defaultValue = null;
	                    } else {
	                      defaultValue = _result.dflt_value;
	                    }

	                    result[_result.name] = {
	                      type: _result.type,
	                      allowNull: (_result.notnull === 0),
	                      defaultValue: defaultValue,
	                      primaryKey : (_result.pk === 1)
	                    };

	                    if (result[_result.name].type === 'TINYINT(1)') {
	                      result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];
	                    }

	                    if (typeof result[_result.name].defaultValue === 'string') {
	                      result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');
	                    }
	                  });
	                } else if (self.sql.indexOf('PRAGMA foreign_keys;') !== -1) {
	                  result = results[0];
	                } else if (self.sql.indexOf('PRAGMA foreign_keys') !== -1) {
	                  result = results;
	                } else if (self.sql.indexOf('PRAGMA foreign_key_list') !== -1) {
	                  result = results;
	                } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(self.options.type) !== -1) {
	                  result = metaData.changes;
	                } else if (self.options.type === QueryTypes.UPSERT) {
	                  result = undefined;
	                } else if (self.options.type === QueryTypes.VERSION) {
	                  result = results[0].version;
	                } else if (self.options.type === QueryTypes.RAW) {
	                  result = [results, metaData];
	                }

	                resolve(result);
	              }
	            };

	            if (method === 'exec') {
	              // exec does not support bind parameter
	              self.database[method](self.sql, afterExecute);
	            } else {
	              if (!parameters) parameters = [];
	              self.database[method](self.sql, parameters, afterExecute);
	            }
	          }));
	          return null;
	        }
	      };

	      if ((self.getDatabaseMethod() === 'all')) {
	        var tableNames = [];
	        if (self.options && self.options.tableNames) {
	          tableNames = self.options.tableNames;
	        } else if (/FROM `(.*?)`/i.exec(self.sql)) {
	          tableNames.push(/FROM `(.*?)`/i.exec(self.sql)[1]);
	        }

	        // If we already have the metadata for the table, there's no need to ask for it again
	        tableNames = _.filter(tableNames, function (tableName) {
	          return !(tableName in columnTypes) && tableName !== 'sqlite_master';
	        });

	        if (!tableNames.length) {
	          return executeSql();
	        } else {
	          return Promise.map(tableNames, function(tableName) {
	            return new Promise(function(resolve) {
	              tableName = tableName.replace(/`/g, '');
	              columnTypes[tableName] = {};

	              self.database.all('PRAGMA table_info(`' + tableName + '`)', function(err, results) {
	                if (!err) {
	                  results.forEach(function (result) {
	                    columnTypes[tableName][result.name] = result.type;
	                  });
	                }
	                resolve();
	              });
	            });
	          }).then(executeSql);
	        }
	      } else {
	        return executeSql();
	      }
	    });
	  });

	  return promise;
	};

	Query.prototype.formatError = function (err) {
	  var match;

	  switch (err.code) {
	    case 'SQLITE_CONSTRAINT':
	      match = err.message.match(/FOREIGN KEY constraint failed/);
	      if (match !== null) {
	        return new sequelizeErrors.ForeignKeyConstraintError({
	          parent :err
	        });
	      }

	      var fields = [];

	      // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique
	      match = err.message.match(/columns (.*?) are/);
	      if (match !== null && match.length >= 2) {
	        fields = match[1].split(', ');
	      } else {

	        // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y
	        match = err.message.match(/UNIQUE constraint failed: (.*)/);
	        if (match !== null && match.length >= 2) {
	          fields = match[1].split(', ').map(function (columnWithTable) {
	            return columnWithTable.split('.')[1];
	          });
	        }
	      }

	      var errors = []
	        , self = this
	        , message = 'Validation error';

	      fields.forEach(function(field) {
	        errors.push(new sequelizeErrors.ValidationErrorItem(
	          self.getUniqueConstraintErrorMessage(field),
	          'unique violation', field, self.instance && self.instance[field]));
	      });

	      if (this.model) {
	        _.forOwn(this.model.uniqueKeys, function(constraint) {
	          if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {
	            message = constraint.msg;
	            return false;
	          }
	        });
	      }

	      return new sequelizeErrors.UniqueConstraintError({
	        message: message,
	        errors: errors,
	        parent: err,
	        fields: fields
	      });

	    case 'SQLITE_BUSY':
	      return new sequelizeErrors.TimeoutError(err);

	    default:
	      return new sequelizeErrors.DatabaseError(err);
	  }
	};

	Query.prototype.handleShowIndexesQuery = function (data) {
	  var self = this;

	  // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!
	  return this.sequelize.Promise.map(data.reverse(), function (item) {
	    item.fields = [];
	    item.primary = false;
	    item.unique = !!item.unique;

	    return self.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(function (columns) {
	      columns.forEach(function (column) {
	        item.fields[column.seqno] = {
	          attribute: column.name,
	          length: undefined,
	          order: undefined,
	        };
	      });

	      return item;
	    });
	  });
	};

	Query.prototype.getDatabaseMethod = function() {
	  if (this.isUpsertQuery()) {
	    return 'exec'; // Needed to run multiple queries in one
	  } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || (this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1) || this.options.type === QueryTypes.BULKDELETE) {
	    return 'run';
	  } else {
	    return 'all';
	  }
	};

	module.exports = Query;


/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* jshint -W110 */
	var Utils = __webpack_require__(122)
	  , Transaction = __webpack_require__(341)
	  , _ = __webpack_require__(127);

	var MySqlQueryGenerator = Utils._.extend(
	  Utils._.clone(__webpack_require__(373)),
	  Utils._.clone(__webpack_require__(372))
	);

	var QueryGenerator = {
	  options: {},
	  dialect: 'sqlite',

	  createSchema: function() {
	    var query = "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
	    return Utils._.template(query)({});
	  },

	  showSchemasQuery: function() {
	    return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
	  },

	  versionQuery: function() {
	    return 'SELECT sqlite_version() as `version`';
	  },

	  createTableQuery: function(tableName, attributes, options) {
	    options = options || {};

	    var query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>)'
	      , primaryKeys = []
	      , needsMultiplePrimaryKeys = (Utils._.values(attributes).filter(function(definition) {
	          return Utils._.includes(definition, 'PRIMARY KEY');
	        }).length > 1)
	      , attrStr = [];

	    for (var attr in attributes) {
	      if (attributes.hasOwnProperty(attr)) {
	        var dataType = attributes[attr];
	        var containsAutoIncrement = Utils._.includes(dataType, 'AUTOINCREMENT');

	        if (containsAutoIncrement) {
	          dataType = dataType.replace(/BIGINT/, 'INTEGER');
	        }

	        var dataTypeString = dataType;
	        if (Utils._.includes(dataType, 'PRIMARY KEY')) {
	          if (Utils._.includes(dataType, 'INTEGER')) { // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)
	            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';
	          }

	          if (needsMultiplePrimaryKeys) {
	            primaryKeys.push(attr);
	            dataTypeString = dataType.replace(/PRIMARY KEY/, 'NOT NULL');
	          }
	        }
	        attrStr.push(this.quoteIdentifier(attr) + ' ' + dataTypeString);
	      }
	    }

	    var values = {
	      table: this.quoteTable(tableName),
	      attributes: attrStr.join(', '),
	      charset: (options.charset ? 'DEFAULT CHARSET=' + options.charset : '')
	    }
	    , pkString = primaryKeys.map(function(pk) { return this.quoteIdentifier(pk); }.bind(this)).join(', ');

	    if (!!options.uniqueKeys) {
	      Utils._.each(options.uniqueKeys, function(columns) {
	        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index
	          values.attributes += ', UNIQUE (' + columns.fields.join(', ') + ')';
	        }
	      });
	    }

	    if (pkString.length > 0) {
	      values.attributes += ', PRIMARY KEY (' + pkString + ')';
	    }

	    var sql = Utils._.template(query)(values).trim() + ';';
	    return this.replaceBooleanDefaults(sql);
	  },

	  booleanValue: function(value){
	    return !!value ? 1 : 0;
	  },

	  addColumnQuery: function(table, key, dataType) {
	    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
	      , attributes = {};

	    attributes[key] = dataType;
	    var fields = this.attributesToSQL(attributes, {
	      context: 'addColumn'
	    });
	    var attribute = Utils._.template('<%= key %> <%= definition %>')({
	        key: this.quoteIdentifier(key),
	        definition: fields[key]
	      });

	    var sql =  Utils._.template(query)({
	      table: this.quoteTable(table),
	      attribute: attribute
	    });

	    return this.replaceBooleanDefaults(sql);
	  },

	  showTablesQuery: function() {
	    return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
	  },

	  upsertQuery: function (tableName, insertValues, updateValues, where, rawAttributes, options) {
	    options.ignore = true;

	    var sql = this.insertQuery(tableName, insertValues, rawAttributes, options) + ' ' + this.updateQuery(tableName, updateValues, where, options, rawAttributes);

	    return sql;
	  },

	  updateQuery: function(tableName, attrValueHash, where, options, attributes) {
	    options = options || {};
	    _.defaults(options, this.options);

	    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);

	    var query  = 'UPDATE <%= table %> SET <%= values %> <%= where %>'
	      , modelAttributeMap = {}
	      , values = [];

	    if (attributes) {
	      _.each(attributes, function(attribute, key) {
	        modelAttributeMap[key] = attribute;
	        if (attribute.field) {
	          modelAttributeMap[attribute.field] = attribute;
	        }
	      });
	    }

	    for (var key in attrValueHash) {
	      var value = attrValueHash[key];
	      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, (modelAttributeMap && modelAttributeMap[key] || undefined), { context: 'UPDATE' }));
	    }

	    var replacements = {
	      table: this.quoteTable(tableName),
	      values: values.join(','),
	      where: this.whereQuery(where)
	    };

	    return Utils._.template(query)(replacements).trim();
	  },

	  deleteQuery: function(tableName, where, options) {
	    options = options || {};

	    var query = 'DELETE FROM <%= table %><%= where %>';
	    var replacements = {
	      table: this.quoteTable(tableName),
	      where: this.getWhereConditions(where)
	    };

	    if (replacements.where) {
	      replacements.where = ' WHERE ' + replacements.where;
	    }

	    return Utils._.template(query)(replacements);
	  },

	  attributesToSQL: function(attributes) {
	    var result = {};

	    for (var name in attributes) {
	      var dataType = attributes[name];
	      var fieldName = dataType.field || name;

	      if (Utils._.isObject(dataType)) {
	        var template     = '<%= type %>'
	          , replacements = { type: dataType.type.toString() };

	        if (dataType.hasOwnProperty('allowNull') && !dataType.allowNull) {
	          template += ' NOT NULL';
	        }

	        if (Utils.defaultValueSchemable(dataType.defaultValue)) {
	          // TODO thoroughly check that DataTypes.NOW will properly
	          // get populated on all databases as DEFAULT value
	          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP
	          template += ' DEFAULT <%= defaultValue %>';
	          replacements.defaultValue = this.escape(dataType.defaultValue, dataType);
	        }

	        if (dataType.unique === true) {
	          template += ' UNIQUE';
	        }

	        if (dataType.primaryKey) {
	          template += ' PRIMARY KEY';

	          if (dataType.autoIncrement) {
	            template += ' AUTOINCREMENT';
	          }
	        }

	        if(dataType.references) {
	          dataType = Utils.formatReferences(dataType);
	          template += ' REFERENCES <%= referencesTable %> (<%= referencesKey %>)';
	          replacements.referencesTable = this.quoteTable(dataType.references.model);

	          if(dataType.references.key) {
	            replacements.referencesKey = this.quoteIdentifier(dataType.references.key);
	          } else {
	            replacements.referencesKey = this.quoteIdentifier('id');
	          }

	          if(dataType.onDelete) {
	            template += ' ON DELETE <%= onDeleteAction %>';
	            replacements.onDeleteAction = dataType.onDelete.toUpperCase();
	          }

	          if(dataType.onUpdate) {
	            template += ' ON UPDATE <%= onUpdateAction %>';
	            replacements.onUpdateAction = dataType.onUpdate.toUpperCase();
	          }

	        }

	        result[fieldName] = Utils._.template(template)(replacements);
	      } else {
	        result[fieldName] = dataType;
	      }
	    }

	    return result;
	  },

	  findAutoIncrementField: function(factory) {
	    var fields = [];

	    for (var name in factory.attributes) {
	      if (factory.attributes.hasOwnProperty(name)) {
	        var definition = factory.attributes[name];
	        if (definition && definition.autoIncrement) {
	          fields.push(name);
	        }
	      }
	    }

	    return fields;
	  },

	  showIndexesQuery: function(tableName) {
	    var sql = 'PRAGMA INDEX_LIST(<%= tableName %>)';
	    return Utils._.template(sql)({ tableName: this.quoteTable(tableName) });
	  },

	  removeIndexQuery: function(tableName, indexNameOrAttributes) {
	    var sql = 'DROP INDEX IF EXISTS <%= indexName %>'
	      , indexName = indexNameOrAttributes;

	    if (typeof indexName !== 'string') {
	      indexName = Utils.inflection.underscore(tableName + '_' + indexNameOrAttributes.join('_'));
	    }

	    return Utils._.template(sql)( { tableName: this.quoteIdentifiers(tableName), indexName: indexName });
	  },

	  describeTableQuery: function(tableName, schema, schemaDelimiter) {
	    var table = {};
	    table.$schema = schema;
	    table.$schemaDelimiter = schemaDelimiter;
	    table.tableName = tableName;

	    var sql = 'PRAGMA TABLE_INFO(<%= tableName %>);';
	    return Utils._.template(sql)({tableName: this.quoteTable(this.addSchema(table))});
	  },

	  removeColumnQuery: function(tableName, attributes) {
	    var backupTableName
	      , query;

	    attributes = this.attributesToSQL(attributes);

	    if (typeof tableName === 'object') {
	      backupTableName = {
	        tableName: tableName.tableName + '_backup',
	        schema: tableName.schema
	      };
	    } else {
	      backupTableName = tableName + '_backup';
	    }

	    query = [
	      this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE'),
	      'INSERT INTO <%= backupTableName %> SELECT <%= attributeNames %> FROM <%= tableName %>;',
	      'DROP TABLE <%= tableName %>;',
	      this.createTableQuery(tableName, attributes),
	      'INSERT INTO <%= tableName %> SELECT <%= attributeNames %> FROM <%= backupTableName %>;',
	      'DROP TABLE <%= backupTableName %>;'
	    ].join('');

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      backupTableName: this.quoteTable(backupTableName),
	      attributeNames: Utils._.keys(attributes).join(', ')
	    });
	  },

	  renameColumnQuery: function(tableName, attrNameBefore, attrNameAfter, attributes) {
	    var backupTableName
	      , query;

	    attributes = this.attributesToSQL(attributes);

	    if (typeof tableName === 'object') {
	      backupTableName = {
	        tableName: tableName.tableName + '_backup',
	        schema: tableName.schema
	      };
	    } else {
	      backupTableName = tableName + '_backup';
	    }

	    query = [
	      this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE'),
	      'INSERT INTO <%= backupTableName %> SELECT <%= attributeNamesImport %> FROM <%= tableName %>;',
	      'DROP TABLE <%= tableName %>;',
	      this.createTableQuery(tableName, attributes),
	      'INSERT INTO <%= tableName %> SELECT <%= attributeNamesExport %> FROM <%= backupTableName %>;',
	      'DROP TABLE <%= backupTableName %>;'
	    ].join('');

	    return Utils._.template(query)({
	      tableName: this.quoteTable(tableName),
	      backupTableName: this.quoteTable(backupTableName),
	      attributeNamesImport: Utils._.keys(attributes).map(function(attr) {
	        return (attrNameAfter === attr) ? this.quoteIdentifier(attrNameBefore) + ' AS ' + this.quoteIdentifier(attr) : this.quoteIdentifier(attr);
	      }.bind(this)).join(', '),
	      attributeNamesExport: Utils._.keys(attributes).map(function(attr) {
	        return this.quoteIdentifier(attr);
	      }.bind(this)).join(', ')
	    });
	  },

	  startTransactionQuery: function(transaction, options) {
	    if (transaction.parent) {
	      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name) + ';';
	    }

	    return 'BEGIN ' + transaction.options.type  + ' TRANSACTION;';
	  },

	  setAutocommitQuery: function() {
	    return '-- SQLite does not support SET autocommit.';
	  },

	  setIsolationLevelQuery: function(value) {
	    switch (value) {
	      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:
	        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';
	      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:
	        return 'PRAGMA read_uncommitted = ON;';
	      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:
	        return 'PRAGMA read_uncommitted = OFF;';
	      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:
	        return "-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.";
	      default:
	        throw new Error('Unknown isolation level: ' + value);
	    }
	  },

	  replaceBooleanDefaults: function(sql) {
	    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');
	  },

	  quoteIdentifier: function(identifier) {
	    if (identifier === '*') return identifier;
	    return Utils.addTicks(identifier, '`');
	  },

	      /**
	   * Generates an SQL query that returns all foreign keys of a table.
	   *
	   * @param  {String} tableName  The name of the table.
	   * @param  {String} schemaName The name of the schema.
	   * @return {String}            The generated sql query.
	   */
	  getForeignKeysQuery: function(tableName, schemaName) {
	    var sql = 'PRAGMA foreign_key_list(<%= tableName %>)';
	    return Utils._.template(sql)({ tableName: tableName });
	  }
	};

	module.exports = Utils._.extend({}, MySqlQueryGenerator, QueryGenerator);


/***/ },
/* 488 */,
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./associations/base": 342,
		"./associations/base.js": 342,
		"./associations/belongs-to": 339,
		"./associations/belongs-to-many": 343,
		"./associations/belongs-to-many.js": 343,
		"./associations/belongs-to.js": 339,
		"./associations/has-many": 344,
		"./associations/has-many.js": 344,
		"./associations/has-one": 346,
		"./associations/has-one.js": 346,
		"./associations/helpers": 340,
		"./associations/helpers.js": 340,
		"./associations/index": 361,
		"./associations/index.js": 361,
		"./associations/mixin": 352,
		"./associations/mixin.js": 352,
		"./data-types": 123,
		"./data-types.js": 123,
		"./deferrable": 353,
		"./deferrable.js": 353,
		"./dialects/abstract/connection-manager": 366,
		"./dialects/abstract/connection-manager.js": 366,
		"./dialects/abstract/index": 364,
		"./dialects/abstract/index.js": 364,
		"./dialects/abstract/query": 371,
		"./dialects/abstract/query-generator": 373,
		"./dialects/abstract/query-generator.js": 373,
		"./dialects/abstract/query.js": 371,
		"./dialects/mariadb/index": 362,
		"./dialects/mariadb/index.js": 362,
		"./dialects/mssql/connection-manager": 438,
		"./dialects/mssql/connection-manager.js": 438,
		"./dialects/mssql/data-types": 329,
		"./dialects/mssql/data-types.js": 329,
		"./dialects/mssql/index": 437,
		"./dialects/mssql/index.js": 437,
		"./dialects/mssql/query": 442,
		"./dialects/mssql/query-generator": 443,
		"./dialects/mssql/query-generator.js": 443,
		"./dialects/mssql/query-interface": 359,
		"./dialects/mssql/query-interface.js": 359,
		"./dialects/mssql/query.js": 442,
		"./dialects/mssql/resource-lock": 439,
		"./dialects/mssql/resource-lock.js": 439,
		"./dialects/mysql/connection-manager": 365,
		"./dialects/mysql/connection-manager.js": 365,
		"./dialects/mysql/data-types": 327,
		"./dialects/mysql/data-types.js": 327,
		"./dialects/mysql/index": 363,
		"./dialects/mysql/index.js": 363,
		"./dialects/mysql/query": 370,
		"./dialects/mysql/query-generator": 372,
		"./dialects/mysql/query-generator.js": 372,
		"./dialects/mysql/query-interface": 360,
		"./dialects/mysql/query-interface.js": 360,
		"./dialects/mysql/query.js": 370,
		"./dialects/parserStore": 440,
		"./dialects/parserStore.js": 440,
		"./dialects/postgres/connection-manager": 445,
		"./dialects/postgres/connection-manager.js": 445,
		"./dialects/postgres/data-types": 308,
		"./dialects/postgres/data-types.js": 308,
		"./dialects/postgres/hstore": 323,
		"./dialects/postgres/hstore.js": 323,
		"./dialects/postgres/index": 444,
		"./dialects/postgres/index.js": 444,
		"./dialects/postgres/query": 447,
		"./dialects/postgres/query-generator": 448,
		"./dialects/postgres/query-generator.js": 448,
		"./dialects/postgres/query.js": 447,
		"./dialects/postgres/range": 326,
		"./dialects/postgres/range.js": 326,
		"./dialects/sqlite/connection-manager": 484,
		"./dialects/sqlite/connection-manager.js": 484,
		"./dialects/sqlite/data-types": 328,
		"./dialects/sqlite/data-types.js": 328,
		"./dialects/sqlite/index": 483,
		"./dialects/sqlite/index.js": 483,
		"./dialects/sqlite/query": 486,
		"./dialects/sqlite/query-generator": 487,
		"./dialects/sqlite/query-generator.js": 487,
		"./dialects/sqlite/query-interface": 358,
		"./dialects/sqlite/query-interface.js": 358,
		"./dialects/sqlite/query.js": 486,
		"./errors": 130,
		"./errors.js": 130,
		"./hooks": 351,
		"./hooks.js": 351,
		"./instance": 338,
		"./instance-validator": 347,
		"./instance-validator.js": 347,
		"./instance.js": 338,
		"./model": 337,
		"./model-manager": 354,
		"./model-manager.js": 354,
		"./model.js": 337,
		"./model/attribute": 490,
		"./model/attribute.js": 490,
		"./plugins/counter-cache": 345,
		"./plugins/counter-cache.js": 345,
		"./promise": 335,
		"./promise.js": 335,
		"./query-interface": 357,
		"./query-interface.js": 357,
		"./query-types": 349,
		"./query-types.js": 349,
		"./sequelize": 115,
		"./sequelize.js": 115,
		"./sql-string": 330,
		"./sql-string.js": 330,
		"./transaction": 341,
		"./transaction.js": 341,
		"./utils": 122,
		"./utils.js": 122,
		"./utils/parameter-validator": 331,
		"./utils/parameter-validator.js": 331,
		"./utils/validator-extras": 348,
		"./utils/validator-extras.js": 348
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 489;


/***/ },
/* 490 */
/***/ function(module, exports) {

	'use strict';

	var Attribute = function(options) {
	    if (options.type === undefined) options = {type: options};
	    this.type = options.type;
	};

	module.exports = Attribute;


/***/ }
/******/ ]);